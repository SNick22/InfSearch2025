<!DOCTYPE html>
<html lang="ru">

  <head>
    <title>Разработка телеграм-бота на Kotlin + Spring Boot &#x2F; Хабр</title>
<meta property="fb:app_id" content="444736788986613">
<meta property="fb:pages" content="472597926099084">
<meta name="twitter:card" content="summary_large_image">
<meta name="twitter:site" content="@habr_com">
<meta property="og:site_name" content="Хабр">
<link href="https://habr.com/ru/rss/post/588474/?fl=ru" type="application/rss+xml" title rel="alternate" name="rss">
<link href="https://habr.com/ru/articles/588474/" rel="canonical" data-hid="e3fa780">
<link rel="image_src" href="https://habr.com/share/publication/588474/345019bc2f3f78f3704b115f7bc11c3f/" data-hid="2a79c45">
<meta property="og:title" content="Разработка телеграм-бота на Kotlin + Spring Boot">
<meta name="twitter:title" content="Разработка телеграм-бота на Kotlin + Spring Boot">
<meta name="aiturec:title" content="Разработка телеграм-бота на Kotlin + Spring Boot">
<meta name="description" content="Привет, читателям Хабра! В этой статье я расскажу о том, как быстро и легко разработать свой собственный телеграм-бот на языке Kotlin с использованием Spring Boot. Основная задумка заключается в том,...">
<meta itemprop="description" content="Привет, читателям Хабра! В этой статье я расскажу о том, как быстро и легко разработать свой собственный телеграм-бот на языке Kotlin с использованием Spring Boot. Основная задумка заключается в том,...">
<meta property="og:description" content="Привет, читателям Хабра! В этой статье я расскажу о том, как быстро и легко разработать свой собственный телеграм-бот на языке Kotlin с использованием Spring Boot. Основная задумка заключается в том,...">
<meta name="twitter:description" content="Привет, читателям Хабра! В этой статье я расскажу о том, как быстро и легко разработать свой собственный телеграм-бот на языке Kotlin с использованием Spring Boot. Основная задумка заключается в том,...">
<meta property="aiturec:description" content="Привет, читателям Хабра! В этой статье я расскажу о том, как быстро и легко разработать свой собственный телеграм-бот на языке Kotlin с использованием Spring Boot. Основная задумка заключается в том,...">
<meta itemprop="image" content="https://habr.com/share/publication/588474/345019bc2f3f78f3704b115f7bc11c3f/">
<meta property="og:image" content="https://habr.com/share/publication/588474/345019bc2f3f78f3704b115f7bc11c3f/">
<meta property="og:image:width" content="1200">
<meta property="og:image:height" content="630">
<meta property="aiturec:image" content="https://habr.com/share/publication/588474/345019bc2f3f78f3704b115f7bc11c3f/">
<meta name="twitter:image" content="https://habr.com/share/publication/588474/345019bc2f3f78f3704b115f7bc11c3f/">
<meta property="vk:image" content="https://habr.com/share/publication/588474/345019bc2f3f78f3704b115f7bc11c3f/?format=vk">
<meta property="vk:image" content="https://habr.com/share/publication/588474/345019bc2f3f78f3704b115f7bc11c3f/?format=vk?format=vk">
<meta property="aiturec:item_id" content="588474">
<meta property="aiturec:datetime" content="2021-11-11T10:18:22.000Z">
<meta content="https://habr.com/ru/articles/588474/" property="og:url">
<meta property="og:type" content="article">
<meta property="og:locale" content="ru_RU">
<meta property="og:image:width" content="1200">
<meta property="og:image:height" content="630">
<meta name="keywords" content="телеграм-бот, kotlin, spring boot, PostgreSQL">
<script type="application/ld+json" data-hid="1e0f0a2">{"@context":"http:\/\/schema.org","@type":"Article","mainEntityOfPage":{"@type":"WebPage","@id":"https:\/\/habr.com\/ru\/articles\/588474\/"},"headline":"Разработка телеграм-бота на Kotlin + Spring Boot","datePublished":"2021-11-11T13:18:22+03:00","dateModified":"2023-08-10T17:14:12+03:00","author":{"@type":"Person","name":"Даниил"},"publisher":{"@type":"Organization","name":"Habr","logo":{"@type":"ImageObject","url":"https:\/\/habrastorage.org\/webt\/a_\/lk\/9m\/a_lk9mjkccjox-zccjrpfolmkmq.png"}},"description":"Привет, читателям Хабра! В этой статье я расскажу о том, как быстро и легко разработать свой собственный телеграм-бот на языке Kotlin с использованием Spring Boo...","url":"https:\/\/habr.com\/ru\/articles\/588474\/#post-content-body","about":["h_kotlin","h_programming","f_develop"],"image":["https:\/\/habrastorage.org\/webt\/ym\/d5\/fk\/ymd5fky8pgrz7jeleggb4z6gup8.png"]}</script>
    <meta charset="UTF-8">
    <meta name="viewport"
      content="width=device-width,initial-scale=1.0,viewport-fit=cover,maximum-scale=1,user-scalable=0">
    <meta name="referrer" content="unsafe-url">
    <style>
      /* cyrillic-ext */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 400;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9E4kDNxMZdWfMOD5VvmojLazX3dGTP.woff2) format('woff2');
        unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;
      }

      /* cyrillic */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 400;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9E4kDNxMZdWfMOD5Vvk4jLazX3dGTP.woff2) format('woff2');
        unicode-range: U+0301, U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;
      }

      /* latin-ext */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 400;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9E4kDNxMZdWfMOD5VvmYjLazX3dGTP.woff2) format('woff2');
        unicode-range: U+0100-02AF, U+0304, U+0308, U+0329, U+1E00-1E9F, U+1EF2-1EFF, U+2020, U+20A0-20AB, U+20AD-20C0, U+2113, U+2C60-2C7F, U+A720-A7FF;
      }

      /* latin */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 400;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9E4kDNxMZdWfMOD5Vvl4jLazX3dA.woff2) format('woff2');
        unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+0304, U+0308, U+0329, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
      }

      /* cyrillic-ext */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 500;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnZKveSxf6Xl7Gl3LX.woff2) format('woff2');
        unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;
      }

      /* cyrillic */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 500;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnZKveQhf6Xl7Gl3LX.woff2) format('woff2');
        unicode-range: U+0301, U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;
      }

      /* latin-ext */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 500;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnZKveSBf6Xl7Gl3LX.woff2) format('woff2');
        unicode-range: U+0100-02AF, U+0304, U+0308, U+0329, U+1E00-1E9F, U+1EF2-1EFF, U+2020, U+20A0-20AB, U+20AD-20C0, U+2113, U+2C60-2C7F, U+A720-A7FF;
      }

      /* latin */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 500;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnZKveRhf6Xl7Glw.woff2) format('woff2');
        unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+0304, U+0308, U+0329, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
      }

      /* cyrillic-ext */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 700;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnLK3eSxf6Xl7Gl3LX.woff2) format('woff2');
        unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;
      }

      /* cyrillic */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 700;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnLK3eQhf6Xl7Gl3LX.woff2) format('woff2');
        unicode-range: U+0301, U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;
      }

      /* latin-ext */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 700;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnLK3eSBf6Xl7Gl3LX.woff2) format('woff2');
        unicode-range: U+0100-02AF, U+0304, U+0308, U+0329, U+1E00-1E9F, U+1EF2-1EFF, U+2020, U+20A0-20AB, U+20AD-20C0, U+2113, U+2C60-2C7F, U+A720-A7FF;
      }

      /* latin */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 700;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnLK3eRhf6Xl7Glw.woff2) format('woff2');
        unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+0304, U+0308, U+0329, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
      }
    </style>
    <link rel="preload" href="https://assets.habr.com/habr-web/css/theme/light-v1.css" as="style" media="(prefers-color-scheme: light)" /><link rel="preload" href="https://assets.habr.com/habr-web/css/theme/dark-v1.css" as="style" media="(prefers-color-scheme: dark)" /><link id="light-colors" rel="stylesheet" href="https://assets.habr.com/habr-web/css/theme/light-v1.css" media="(prefers-color-scheme: light)" /><link id="dark-colors" rel="stylesheet" href="https://assets.habr.com/habr-web/css/theme/dark-v1.css" media="(prefers-color-scheme: dark)" />
    <script>window.i18nFetch = new Promise((res, rej) => {
          const xhr = new XMLHttpRequest();
          xhr.open('GET', '/js/i18n/ru-compiled.35b2fec11bb79a62419ab67779c2dd82.json');
          xhr.responseType = 'json';
          xhr.onload = function(e) {
            if (this.status === 200) {
              res({ru: xhr.response});
            } else {
              rej(e);
            }
          };
          xhr.send();
        });</script>
    <style>
      .grecaptcha-badge {
        visibility: hidden;
      }
    </style>
    <meta name="habr-version" content="2.233.0">
    
    <meta name="apple-mobile-web-app-status-bar-style" content="#303b44">
    <meta name="msapplication-TileColor" content="#629FBC">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="mobile-web-app-capable" content="yes">
    <link rel="shortcut icon" type="image/png" sizes="16x16" href="https://assets.habr.com/habr-web/img/favicons/favicon-16.png">
    <link rel="shortcut icon" type="image/png" sizes="32x32" href="https://assets.habr.com/habr-web/img/favicons/favicon-32.png">
    <link rel="apple-touch-icon" type="image/png" sizes="76x76" href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-76.png">
    <link rel="apple-touch-icon" type="image/png" sizes="120x120" href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-120.png">
    <link rel="apple-touch-icon" type="image/png" sizes="152x152" href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-152.png">
    <link rel="apple-touch-icon" type="image/png" sizes="180x180" href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-180.png">
    <link rel="apple-touch-icon" type="image/png" sizes="256x256" href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-256.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 320px) and (device-height: 568px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1136x640.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 375px) and (device-height: 812px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2436x1125.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1792x828.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_828x1792.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 375px) and (device-height: 667px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1334x750.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1242x2668.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 414px) and (device-height: 736px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2208x1242.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 375px) and (device-height: 812px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1125x2436.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 414px) and (device-height: 736px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1242x2208.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 1024px) and (device-height: 1366px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2732x2048.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2688x1242.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 834px) and (device-height: 1112px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2224x1668.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 375px) and (device-height: 667px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_750x1334.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 1024px) and (device-height: 1366px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2048x2732.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 834px) and (device-height: 1194px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2388x1668.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 834px) and (device-height: 1112px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1668x2224.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 320px) and (device-height: 568px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_640x1136.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 834px) and (device-height: 1194px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1668x2388.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 768px) and (device-height: 1024px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2048x1536.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 768px) and (device-height: 1024px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1536x2048.png">
    <link rel="mask-icon" color="#77a2b6" href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-120.svg">
    <link crossorigin="use-credentials" href="/manifest.webmanifest" rel="manifest">
    <script async src="https://unpkg.com/pwacompat" crossorigin="anonymous"></script>
    <script>window.yaContextCb = window.yaContextCb || []</script>
    <script src="https://yandex.ru/ads/system/context.js" async></script>
  <link rel="preload" href="https://assets.habr.com/habr-web/css/chunk-vendors.04465f7c.css" as="style"><link rel="preload" href="https://assets.habr.com/habr-web/js/chunk-vendors.3b11d41f.js" as="script"><link rel="preload" href="https://assets.habr.com/habr-web/css/app.20959a76.css" as="style"><link rel="preload" href="https://assets.habr.com/habr-web/js/app.7a97ea6d.js" as="script"><link rel="stylesheet" href="https://assets.habr.com/habr-web/css/chunk-vendors.04465f7c.css"><link rel="stylesheet" href="https://assets.habr.com/habr-web/css/app.20959a76.css"></head>
  <body>
    
    <div id="mount"><div id="app" data-async-called="true"><div class="tm-layout__wrapper"><!--[--><!----><div></div><div class="tm-feature tm-feature"><!----></div><header class="tm-header" data-test-id="header"><div class="tm-page-width"><!--[--><div class="tm-header__container"><div class="tm-header__burger-nav" data-test-id="burger-nav"><button class="tm-header__button tm-header__button_burger" type="button"><svg class="tm-svg-img tm-header__icon tm-header__icon-burger" height="16" width="16"><title>Меню</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#header-burger"></use></svg></button></div><span class="tm-header__logo-wrap"><a class="tm-header__logo tm-header__logo_hl-ru tm-header__logo" href="/ru/"><svg class="tm-svg-img tm-header__icon" height="16" width="16"><title>Хабр</title><use xlink:href="/img/habr-logo-ru.svg#logo"></use></svg></a><span style="display:none;" class="tm-header__beta-sign">β</span></span><!----><div class="tm-header-user-menu tm-header_user-menu"><a href="/ru/search/" class="tm-header-user-menu__item tm-header-user-menu__search" data-test-id="search-button"><svg class="tm-svg-img tm-header-user-menu__icon tm-header-user-menu__icon_search" height="24" width="24"><title>Поиск</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#search"></use></svg></a><!----><!----><div class="tm-header-user-menu__item tm-header-user-menu__write"><div><svg class="tm-svg-img tm-header-user-menu__icon tm-header-user-menu__icon_write" height="24" width="24"><title>Написать публикацию</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#write"></use></svg></div><!----></div><!--[--><div class="tm-header-user-menu__item"><button class="tm-header-user-menu__toggle" data-test-id="user-menu-settings"><svg class="tm-svg-img tm-header-user-menu__icon" height="24" width="24"><title>Настройки</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#page-settings"></use></svg></button></div><a href="https://habr.com/kek/v1/auth/habrahabr/?back=/ru/articles/588474/&amp;hl=ru" rel="nofollow" class="tm-header-user-menu__item"><!--[--><button class="btn btn_solid btn_small tm-header-user-menu__login" type="button"><!--[-->Войти<!--]--></button><!--]--></a><!--]--><!----><!--teleport start--><!--teleport end--><!----></div></div><!--]--></div></header><div class="tm-layout"><div class="tm-page-progress-bar"></div><!----><!----><div class="tm-page-width"><!--[--><!--]--></div><main class="tm-layout__container"><div class="tm-page" hl="ru" data-async-called="true" style="--0c809c5a:16px;--a086013e:100%;--7c457026:0;"><div class="tm-page-width"><!--[--><!----><div class="tm-page__wrapper"><div class="tm-page__main_has-sidebar tm-page__main"><div class="pull-down"><!----><div class="pull-down__header" style="height:0px;"><div class="pull-down__content" style="bottom:10px;"><svg class="tm-svg-img pull-down__icon pull-down__arrow" height="24" width="24"><title>Обновить</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#pull-arrow"></use></svg></div></div><!--[--><!--[--><div class="banner-wrapper narrow" style="--467224fc:100px;--58ff5eba:auto;" data-v-ad758baa><!--[--><div class="placeholder-wrapper placeholder" data-v-ad758baa><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><div class="adfox-banner-placeholder narrow" data-v-12f7bcca><div class="image loads" data-v-12f7bcca></div><div class="lines" data-v-12f7bcca><div class="line loads" data-v-12f7bcca></div><div class="line loads" data-v-12f7bcca></div><div class="line loads" data-v-12f7bcca></div></div></div><!----></div><div id="adfox_169815559787254866" class="tm-adfox-banner" data-v-ad758baa></div><!--]--></div><div class="tm-article-presenter"><!--[--><!--]--><div class="tm-article-presenter__body" data-test-id="article-body"><div class="tm-misprint-area"><div class="tm-misprint-area__wrapper"><!--[--><article class="tm-article-presenter__content tm-article-presenter__content_narrow"><!--[--><div class="tm-article-presenter__header"><!--[--><!--]--><div class="tm-article-snippet tm-article-snippet tm-article-presenter__snippet"><!--[--><!--]--><div class="tm-article-snippet__meta-container"><div class="tm-article-snippet__meta"><span class="tm-user-info tm-article-snippet__author"><a href="/ru/users/minpor/" class="tm-user-info__userpic" data-test-id="user-info-pic" title="minpor"><div class="tm-entity-image"><img alt="" class="tm-entity-image__pic" height="32" src="//habrastorage.org/r/w64/getpro/habr/avatars/9d7/1e4/0ff/9d71e40ff3b6757e17de780717837fd4.jpg" width="32"></div></a><span class="tm-user-info__user tm-user-info__user_appearance-default" data-test-id="user-info-description"><a href="/ru/users/minpor/" class="tm-user-info__username">minpor <!----></a><!--[--><span class="tm-article-datetime-published"><time datetime="2021-11-11T10:18:22.000Z" title="2021-11-11, 13:18">11  ноя  2021 в 13:18</time></span><!--]--></span></span></div><!----></div><h1 class="tm-title tm-title_h1" lang="ru" data-test-id="articleTitle"><span>Разработка телеграм-бота на Kotlin + Spring Boot</span></h1><div class="tm-article-snippet__stats" data-test-id="articleStats"><!----><div class="tm-article-reading-time"><span class="tm-svg-icon__wrapper tm-article-reading-time__icon"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Время на прочтение</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#clock"></use></svg></span><span class="tm-article-reading-time__label">17 мин</span></div><span class="tm-icon-counter tm-data-icons__item"><svg class="tm-svg-img tm-icon-counter__icon" height="24" width="24"><title>Количество просмотров</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-views"></use></svg><span class="tm-icon-counter__value" title="14887">15K</span></span></div><div class="tm-publication-hubs__container" data-test-id="articleHubsList"><div class="tm-publication-hubs"><!--[--><span class="tm-publication-hub__link-container"><a href="/ru/hubs/kotlin/" class="tm-publication-hub__link"><!--[--><span>Kotlin</span><span class="tm-article-snippet__profiled-hub" title="Профильный хаб">*</span><!--]--></a></span><span class="tm-publication-hub__link-container"><a href="/ru/hubs/programming/" class="tm-publication-hub__link"><!--[--><span>Программирование</span><span class="tm-article-snippet__profiled-hub" title="Профильный хаб">*</span><!--]--></a></span><!--]--></div></div><!----><!----><!----></div></div><!--[--><!----><div class="tm-article-body" data-gallery-root lang="ru"><div><!--[--><!--]--></div><div id="post-content-body"><div><div class="article-formatted-body article-formatted-body article-formatted-body_version-1"><div xmlns="http://www.w3.org/1999/xhtml"><p>Привет, читателям Хабра!</p><br/>
<p>В этой статье я расскажу о том, как быстро и легко разработать свой собственный телеграм-бот на языке Kotlin с использованием Spring Boot. </p><br/>
<p>Основная задумка заключается в том, чтобы архитектура Бота была абстрагирована от бизнес процессов. То есть акцент должен быть задействован именно на написании кода, который нужен только реализации будущих бизнес задач.</p><br/>
<h3 id="tehnologii">Технологии</h3><br/>
<p>Мой выбор пал на следующий стек технологий:</p><br/>
<ul>
<li>Kotlin</li>
<li>Spring Boot 2.5+</li>
<li>JOOQ</li>
<li>Freemarker</li>
<li>PostgreSQL</li>
<li>org.telegram.telegrambots</li>
</ul><br/>
<h3>Обоснования выбора технологий</h3><br/>
<p><b>Spring Boot</b> и весь Spring Framework в JVM мире стал неотъемлемой частью создания больших и сложных энтерпрайз систем. Пал выбор именно на него, так как порой хочется сделать не просто бота, а полноценное приложение, которым будет удобно пользоваться и удобно масштабировать.</p><br/>
<p><b>Kotlin</b> считается неким витком развития в мире JVM, он проще JAVA и очень хорошо интегрирован в Spring Framework<br/>
<b>JOOQ</b> — механизм, который помогает на DSL подобном языке формировать sql запросы.<br/>
<b>Freemarker</b> — шаблонизатор, необходим для формирования динамичных текстовок<br/>
<b>PostgreSQL</b> — СУБД. Тут субъективный выбор. Считаю его лучшим из бесплатных инструментов.<br/>
<b>org.telegram.telegrambots</b> — набор библиотек для Telegram Api</p><a name="habracut"></a><br/>
<h3>Источники</h3><br/>
<p>Сам код лежит в <a href="https://github.com/minpor/telegram-bot-kotlin-template" rel="nofollow noopener noreferrer">гитхабе</a>.<br/>
Как создать нового бота и описание api можно найти <a href="https://tlgrm.ru/docs/bots" rel="nofollow noopener noreferrer">тут</a></p><br/>
<h3>Руководство</h3><br/>
<p>Как и в любое приложении в JVM мире, начнем работу с описании зависимостей.</p><br/>
<div class="spoiler" role="button" tabindex="0">
                        <b class="spoiler_title">build.gradle.kts</b>
                        <div class="spoiler_text"><pre><code class="kotlin">import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
import nu.studer.gradle.jooq.JooqEdition
import nu.studer.gradle.jooq.JooqGenerate

val postgresVersion = "42.3.1"
val telegramBotVersion = "5.3.0"

// Список необходимых плагинов
plugins {
    id("nu.studer.jooq") version("6.0.1")
    id("org.flywaydb.flyway") version("7.7.0")
    id("org.springframework.boot") version "2.5.6"
    id("io.spring.dependency-management") version "1.0.11.RELEASE"
    kotlin("jvm") version "1.5.31"
    kotlin("plugin.spring") version "1.5.31"
}

group = "ru.template.telegram.bot.kotlin"
version = "0.0.1-SNAPSHOT"
java.sourceCompatibility = JavaVersion.VERSION_11

repositories {
    mavenCentral()
}

// механизм, который поможет сгенерить метаданные
configurations {
    compileOnly {
        extendsFrom(configurations.annotationProcessor.get())
    }
}

tasks.clean {
    delete("src/main/java")
}

extra["springCloudVersion"] = "2020.0.4"

val flywayMigration = configurations.create("flywayMigration")

// Надстройка для миграции данных в СУБД
flyway {
    validateOnMigrate = false
    configurations = arrayOf("flywayMigration")
    url = "jdbc:postgresql://localhost:5432/kotlin_template"
    user = "postgres"
    password = "postgres"
}

// список зависимстей
dependencies {
    flywayMigration("org.postgresql:postgresql:$postgresVersion")
    jooqGenerator("org.postgresql:postgresql:$postgresVersion")
    runtimeOnly("org.postgresql:postgresql")

   //Классические стартеры spring boot
    implementation("org.springframework.boot:spring-boot-starter")
    implementation("org.springframework.boot:spring-boot-starter-jooq")
    implementation("org.springframework.boot:spring-boot-starter-freemarker")
    implementation("org.springframework.boot:spring-boot-starter-web")

    implementation("org.telegram:telegrambots:$telegramBotVersion")
    implementation("org.telegram:telegrambotsextensions:$telegramBotVersion")
    implementation("org.telegram:telegrambots-spring-boot-starter:$telegramBotVersion")

    // зависимости, которые помогут сгенерить метаданные
    compileOnly("org.springframework.boot:spring-boot-configuration-processor")
    annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")

    implementation("org.jetbrains.kotlin:kotlin-reflect")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    testImplementation("org.springframework.boot:spring-boot-starter-test")
}

dependencyManagement {
    imports {
        mavenBom("org.springframework.cloud:spring-cloud-dependencies:${property("springCloudVersion")}")
    }
}

tasks.withType&lt;KotlinCompile&gt; {
    kotlinOptions {
        freeCompilerArgs = listOf("-Xjsr305=strict")
        jvmTarget = "11"
    }
}

tasks.withType&lt;Test&gt; {
    useJUnitPlatform()
}

// Настройка для JOOQ, в которой описано правило формирования POJO классов для формирования запросов при помощи DSL кода
jooq {
    edition.set(JooqEdition.OSS)

    configurations {
        create("main") {
            jooqConfiguration.apply {
                jdbc.apply {
                    driver = "org.postgresql.Driver"
                    url = flyway.url
                    user = flyway.user
                    password = flyway.password
                }
                generator.apply {
                    name = "org.jooq.codegen.DefaultGenerator"
                    generate.apply {
                        isDeprecated = false
                        isRecords = true
                        isImmutablePojos = false
                        isFluentSetters = false
                        isJavaBeansGettersAndSetters = false
                        isSerializablePojos = true
                        isVarargSetters = false
                        isPojos = true
                        isNonnullAnnotation = true
                        isUdts = false
                        isRoutines = false
                        isIndexes = false
                        isRelations = true
                        isPojosEqualsAndHashCode = true
                    }
                    database.apply {
                        name = "org.jooq.meta.postgres.PostgresDatabase"
                        inputSchema = "public"
                        excludes = "flyway_schema_history"
                    }
                    target.apply {
                        // Пакет куда отрпавляются сгенерированные классы
                        packageName = "ru.template.telegram.bot.kotlin.template.domain"
                        directory = "src/main/java"
                    }
                    strategy.name = "org.jooq.codegen.DefaultGeneratorStrategy"
                }
            }
        }
    }

    // таска для генерации JOOQ классов
    tasks.named&lt;JooqGenerate&gt;("generateJooq").configure {
        inputs.files(fileTree("src/main/resources/db/migration"))
            .withPropertyName("migrations")
            .withPathSensitivity(PathSensitivity.RELATIVE)
        allInputsDeclared.set(true)
        outputs.upToDateWhen { false }
    }
}
</code></pre></div>
                    </div><br/>
<p>Как мы видим из описания кода выше, мы собираем зависимости при помощи Gradle. Не будем подробно останавливаться на теме: как правильно написать gradle-файл. В интернете много примеров. Сейчас нам не так это важно.</p><br/>
<p>Следующим этапом — создание главного класса, который будет запускать нашего бота.</p><br/>
<div class="spoiler" role="button" tabindex="0">
                        <b class="spoiler_title">Application.kt</b>
                        <div class="spoiler_text"><pre><code class="kotlin">package ru.template.telegram.bot.kotlin.template

import org.springframework.boot.autoconfigure.SpringBootApplication
import org.springframework.boot.runApplication

// Все Spring Boot приложения начинаются с аннотации @SpringBootApplication
@SpringBootApplication
class Application

fun main(args: Array&lt;String&gt;) {
    runApplication&lt;Application&gt;(*args)
}</code></pre></div>
                    </div><br/>
<p>Для примера, весь наш код описан в пакете ru.template.telegram.bot.kotlin.template. Там будут лежать и прочие компоненты нашей архитектуры.</p><br/>
<p>Создадим пакеты:</p><br/>
<ul>
<li>api — Классы, которые относятся к непосредственному взаимодействию с Телеграм API (отправка и получение данных)</li>
<li>command — Список команд телеграм бота</li>
<li>component — Прочие бины.</li>
<li>config — Конфигурация приложения</li>
<li>dto — DTO классы</li>
<li>enums — Енумы</li>
<li>event — Список классов для формирования ивентов<a href="https://www.baeldung.com/spring-events" rel="nofollow noopener noreferrer"> Application Publisher</a></li>
<li>listener — Приём событий Application Publisher</li>
<li>properties — Классы настроек приложения. Сами настройки лежат в ресурсах приложения (appication.yml)</li>
<li>repository — Слой взаимодействия с СУБД</li>
<li>service — Сервисы приложения</li>
<li>strategy — Стратегии. Это те компоненты, которые нужно менять, добавлять и удалять по ходу изменения бизнес процессов</li>
</ul><br/>
<h4 id="nachalo-formirovanie-arhitektury-s-nebolshim-primerom">Начало формирование архитектуры с небольшим примером</h4><br/>
<p>Нам необходимо создать такой компонент, который бы принимал наши сообщения от Бота и начинал их обрабатывать.</p><br/>
<p>Создадим файл application.yml</p><br/>
<pre><code class="plaintext"># Настройка для телеграм апи
bot:
  username: kotlin_template_bot
  token: [your bot token here]
# Настройка для СУБД
spring:
  datasource:
    url: jdbc:postgresql://localhost:5432/kotlin_template
    username: postgres
    password: postgres</code></pre><br/>
<p>После чего опишем нашего бота в виде класса</p><br/>
<div class="spoiler" role="button" tabindex="0">
                        <b class="spoiler_title">BotProperty.kt</b>
                        <div class="spoiler_text"><pre><code class="kotlin">package ru.template.telegram.bot.kotlin.template.properties

import org.springframework.boot.context.properties.ConfigurationProperties
import org.springframework.stereotype.Component

@Component
@ConfigurationProperties(prefix = "bot")
// Всё, что есть в application.yml можно описать в виде класса. Делается в первую очередь для удобства
data class BotProperty(
    var username: String = "",
    var token: String = ""
)
</code></pre></div>
                    </div><br/>
<p>В примере представлены несколько команд бота. Они описаны в виде енумов</p><br/>
<div class="spoiler" role="button" tabindex="0">
                        <b class="spoiler_title">CommandCode.kt</b>
                        <div class="spoiler_text"><pre><code class="kotlin">package ru.template.telegram.bot.kotlin.template.enums

// Енум состоит из самой команды, команды бота в телеграме и ее словесное описание
enum class CommandCode(val command: String, val desc: String) {
    START("start", "Start work"),
    USER_INFO("user_info", "user info"),
    BUTTON("button", "button yes no")
}
</code></pre></div>
                    </div><br/>
<p>Для примера реализуем несколько команд: Начало работы (приветствие), информация о пользователе ( на этом этапе просто обновим данные в базе случайным текстом) и сообщение с кнопками (здесь нажмём на кнопку из предложенных)</p><br/>
<p>Для простоты у нас будет 1 таблица <strong>users</strong></p><br/>
<p>Создадим миграцию в resources/db/migration</p><br/>
<div class="spoiler" role="button" tabindex="0">
                        <b class="spoiler_title">V1__init.sql</b>
                        <div class="spoiler_text"><pre><code class="sql">create table users
(
    id        int8 primary key not null,
    step_code varchar(100), -- код этапа
    text      varchar(100), -- произвольный текст
    accept    varchar(3) -- данные из кнопок
);</code></pre></div>
                    </div><br/>
<p>Теперь необходимо подготовить <strong>UsersRepository</strong> в котором будут реализованы все методы, которые понадобятся нам в работе.</p><br/>
<div class="spoiler" role="button" tabindex="0">
                        <b class="spoiler_title">UsersRepository.kt</b>
                        <div class="spoiler_text"><pre><code class="kotlin">package ru.template.telegram.bot.kotlin.template.repository

import org.jooq.DSLContext
import org.springframework.stereotype.Repository
import ru.template.telegram.bot.kotlin.template.domain.Tables
import ru.template.telegram.bot.kotlin.template.domain.tables.pojos.Users
import ru.template.telegram.bot.kotlin.template.enums.StepCode

@Repository
class UsersRepository(private val dslContext: DSLContext) {

    private val users = Tables.USERS

    // Проверка на существование пользователя в базе. Нужно 1 раз для команды /start
    fun isUserExist(chatId: Long): Boolean {
        return dslContext.selectCount().from(users).where(users.ID.eq(chatId)).fetchOneInto(Int::class.java) == 1
    }

   // Созадние пользователя для команды /start
    fun createUser(chatId: Long): Users {
        val record = dslContext.newRecord(users, Users().apply {
            id = chatId
            stepCode = StepCode.START.toString()
        })
        record.store()
        return record.into(Users::class.java)
    }

    // получить информацию о пользователе
    fun getUser(chatId: Long) =
        dslContext.selectFrom(users).where(users.ID.eq(chatId)).fetchOneInto(Users::class.java)

    // Обновление этапа в боте
    fun updateUserStep(chatId: Long, stepCode: StepCode): Users =
        dslContext.update(users)
            .set(users.STEP_CODE, stepCode.toString())
            .where(users.ID.eq(chatId)).returning().fetchOne()!!.into(Users::class.java)

    // Обновление текста. Этот метод срабатывает у команды /user_info
    fun updateText(chatId: Long, text: String) {
        dslContext.update(users)
            .set(users.TEXT, text)
            .where(users.ID.eq(chatId)).execute()
    }

    // Обновление данных пришедшие от кнопок в команде /button
    fun updateAccept(chatId: Long, accept: String) {
        dslContext.update(users)
            .set(users.ACCEPT, accept)
            .where(users.ID.eq(chatId)).execute()
    }
}</code></pre></div>
                    </div><br/>
<p>Здесь уже можно и нужно сформировать POJO объекты при помощи таски gradle <em>flywayMigrate</em> <em>generateJooq</em></p><br/>
<p>Создать новую команду тоже для нас не проблема. В данной статье опишем только одну команду, всё остальное есть в исходниках. Делается по аналогии</p><br/>
<div class="spoiler" role="button" tabindex="0">
                        <b class="spoiler_title">StartCommand.kt</b>
                        <div class="spoiler_text"><pre><code class="kotlin">package ru.template.telegram.bot.kotlin.template.command

import org.springframework.context.ApplicationEventPublisher
import org.springframework.stereotype.Component
import org.telegram.telegrambots.extensions.bots.commandbot.commands.BotCommand
import org.telegram.telegrambots.meta.api.objects.Chat
import org.telegram.telegrambots.meta.api.objects.User
import org.telegram.telegrambots.meta.bots.AbsSender
import ru.template.telegram.bot.kotlin.template.enums.CommandCode
import ru.template.telegram.bot.kotlin.template.enums.StepCode
import ru.template.telegram.bot.kotlin.template.event.TelegramStepMessageEvent
import ru.template.telegram.bot.kotlin.template.repository.UsersRepository

@Component
class StartCommand(
    private val usersRepository: UsersRepository,
    private val applicationEventPublisher: ApplicationEventPublisher // Интерфейс который отправляет событие 
) : BotCommand(CommandCode.START.command, CommandCode.START.desc) {

    companion object {
        private val START_CODE = StepCode.START
    }

    override fun execute(absSender: AbsSender, user: User, chat: Chat, arguments: Array&lt;out String&gt;) {
        val chatId = chat.id // chatId передает телеграм

       // если пользователя в базе не существует, то создаём его, иначе обновляешь этап
        if (usersRepository.isUserExist(chatId)) {
            usersRepository.updateUserStep(chatId, START_CODE)
        } else usersRepository.createUser(chatId)

        applicationEventPublisher.publishEvent(
            TelegramStepMessageEvent(chatId = chatId, stepCode = START_CODE)
        )
    }

}</code></pre></div>
                    </div><br/>
<p>Как мы видим из кода, начинаем формировать событие <em>TelegramStepMessageEvent</em>.<br/>
<strong>BotCommand</strong> — это интерфейс описания команд телеграм АПИ</p><br/>
<p>Класс TelegramStepMessageEvent лежит в пакете event</p><br/>
<div class="spoiler" role="button" tabindex="0">
                        <b class="spoiler_title">TelegramStepMessageEvent.kt</b>
                        <div class="spoiler_text"><pre><code class="kotlin">package ru.template.telegram.bot.kotlin.template.event

import ru.template.telegram.bot.kotlin.template.enums.StepCode

class TelegramStepMessageEvent(
    // chatId из бота
    val chatId: Long,
    // Этап или шаг в боте (стартовый, выбор кнопки, сообщение пришедшее после кнопки и тд и тп). Не путать с командами, так как в команде может быть несколько этапов
    val stepCode: StepCode
)
</code></pre></div>
                    </div><br/>
<p>StepCode — enum, который носит информацию о типе сообщения, о шаге и прочую системную информацию</p><br/>
<div class="spoiler" role="button" tabindex="0">
                        <b class="spoiler_title">StepCode.kt</b>
                        <div class="spoiler_text"><pre><code class="kotlin">package ru.template.telegram.bot.kotlin.template.enums

// Тип (Простой текст или текст с кнопками) и botPause - остановить переход на новый этап для принятия решения пользователем
enum class StepCode(val type: StepType, val botPause: Boolean) {
    START(StepType.SIMPLE_TEXT, false),
    USER_INFO(StepType.SIMPLE_TEXT, true),
    BUTTON_REQUEST(StepType.INLINE_KEYBOARD_MARKUP, true),
    BUTTON_RESPONSE(StepType.SIMPLE_TEXT, true)
}

enum class StepType {
    // Простое сообщение
    SIMPLE_TEXT,
    // Сообщение с кнопкой
    INLINE_KEYBOARD_MARKUP
}</code></pre></div>
                    </div><br/>
<p>Остановимся немного на енуме <strong>StepCode</strong> и <strong>StepType</strong>. Когда мы выбираем ту или иную команду формируется сообщение, которое отправляется пользователю. Иногда нужно отправить несколько сообщений подряд. Например <em>START</em> и затем <em>USER_INFO</em>. botPause нужен в первую очередь, чтобы проинформировать пользователя о необходимости принятия решений. Некоторые сообщения приходят с кнопками. Для этого и нужен енум <strong>StepType</strong></p><br/>
<p>Непосредственная реализация приёма сообщений будет представлена в компоненте <strong>ApplicationListener</strong></p><br/>
<div class="spoiler" role="button" tabindex="0">
                        <b class="spoiler_title">ApplicationListener.kt</b>
                        <div class="spoiler_text"><pre><code class="kotlin">package ru.template.telegram.bot.kotlin.template.listener

import org.springframework.context.annotation.Bean
import org.springframework.context.annotation.Lazy
import org.springframework.context.event.EventListener
import org.springframework.stereotype.Component
import ru.template.telegram.bot.kotlin.template.enums.ExecuteStatus
import ru.template.telegram.bot.kotlin.template.event.TelegramReceivedCallbackEvent
import ru.template.telegram.bot.kotlin.template.event.TelegramReceivedMessageEvent
import ru.template.telegram.bot.kotlin.template.event.TelegramStepMessageEvent
import ru.template.telegram.bot.kotlin.template.repository.UsersRepository
import ru.template.telegram.bot.kotlin.template.service.MessageService
import ru.template.telegram.bot.kotlin.template.strategy.LogicContext
import ru.template.telegram.bot.kotlin.template.strategy.NextStepContext

@Component
class ApplicationListener(
    private val logicContext: LogicContext, // Основная бизнес логика
    private val nextStepContext: NextStepContext, // Выбор следующего этапа
    private val usersRepository: UsersRepository, // Слой СУБД
    private val messageService: MessageService // Сервис, который формирует объект для отрпавки сообщения в бота
) {

    // Слушаем событие TelegramReceivedMessageEvent
    inner class Message {
        @EventListener
        fun onApplicationEvent(event: TelegramReceivedMessageEvent) {
            logicContext.execute(chatId = event.chatId, message = event.message)
            val nextStepCode = nextStepContext.next(event.chatId, event.stepCode)
            if (nextStepCode != null) {
                stepMessageBean().onApplicationEvent(
                    TelegramStepMessageEvent(
                        chatId = event.chatId,
                        stepCode = nextStepCode
                    )
                )
            }
        }
    }

    // Слушаем событие TelegramStepMessageEvent
    inner class StepMessage {
        @EventListener
        fun onApplicationEvent(event: TelegramStepMessageEvent) {
            // Обновляем шаг
            usersRepository.updateUserStep(event.chatId, event.stepCode)
            // Отправляем сообщение в бота (и формируем)
            messageService.sendMessageToBot(event.chatId, event.stepCode)
        }
    }

    // Слшуаем событие TelegramReceivedCallbackEvent
    inner class CallbackMessage {
        @EventListener
        fun onApplicationEvent(event: TelegramReceivedCallbackEvent) {
            val nextStepCode = when (logicContext.execute(event.chatId, event.callback)) {
                ExecuteStatus.FINAL -&gt; { // Если бизнес процесс одобрил переход на новый этап
                    nextStepContext.next(event.chatId, event.stepCode)
                }
                ExecuteStatus.NOTHING -&gt; throw IllegalStateException("Не поддерживается")
            }
            if (nextStepCode != null) {
                // редирект на событие TelegramStepMessageEvent
                stepMessageBean().onApplicationEvent(
                    TelegramStepMessageEvent(
                        chatId = event.chatId,
                        stepCode = nextStepCode
                    )
                )
            }
        }
    }

    @Bean
    @Lazy
    // Бин поступления сообщения от пользователя
    fun messageBean(): Message = Message()

    @Bean
    @Lazy
    // Бин отправки сообщения ботом
    fun stepMessageBean(): StepMessage = StepMessage()

    @Bean
    @Lazy
    // Бин, который срабатывает в момент клика по кнопке
    fun callbackMessageBean(): CallbackMessage = CallbackMessage()

}</code></pre></div>
                    </div><br/>
<p>MessageService — сервис, который формирует объект Телеграм АПИ сообщения и делает запрос на отправку в бота</p><br/>
<div class="spoiler" role="button" tabindex="0">
                        <b class="spoiler_title">MessageService.kt</b>
                        <div class="spoiler_text"><pre><code class="kotlin">package ru.template.telegram.bot.kotlin.template.service

import org.springframework.context.ApplicationEventPublisher
import org.springframework.stereotype.Service
import org.telegram.telegrambots.meta.api.methods.BotApiMethod
import org.telegram.telegrambots.meta.api.methods.ParseMode
import org.telegram.telegrambots.meta.api.methods.send.SendMessage
import org.telegram.telegrambots.meta.api.objects.Message
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardRemove
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton
import ru.template.telegram.bot.kotlin.template.api.TelegramSender
import ru.template.telegram.bot.kotlin.template.dto.MarkupDataDto
import ru.template.telegram.bot.kotlin.template.dto.markup.DataModel
import ru.template.telegram.bot.kotlin.template.enums.StepCode
import ru.template.telegram.bot.kotlin.template.enums.StepType.*
import ru.template.telegram.bot.kotlin.template.event.TelegramStepMessageEvent
import ru.template.telegram.bot.kotlin.template.strategy.MarkupContext
import ru.template.telegram.bot.kotlin.template.strategy.MessageContext
import ru.template.telegram.bot.kotlin.template.strategy.NextStepContext

@Service
class MessageService(
    private val telegramSender: TelegramSender, // отправщик сообщения
    private val messageContext: MessageContext, // Формирование текстовок сообщения
    private val applicationEventPublisher: ApplicationEventPublisher,
    private val markupContext: MarkupContext&lt;DataModel&gt;, // Формирование текстовок с кнопками
    private val nextStepContext: NextStepContext // Выбор следующего этапа
) {

    fun sendMessageToBot(
        chatId: Long,
        stepCode: StepCode
    ) {
        when (stepCode.type) {
            // Простое сообщение
            SIMPLE_TEXT -&gt; telegramSender.execute(simpleTextMessage(chatId))
            // Сообщение с кнопками
            INLINE_KEYBOARD_MARKUP -&gt; telegramSender.sendInlineKeyboardMarkup(chatId)
        }

        if (!stepCode.botPause) { // если нет паузы, то формируем следующее сообщение
            applicationEventPublisher.publishEvent(
                TelegramStepMessageEvent(
                    chatId = chatId,
                    stepCode = nextStepContext.next(chatId, stepCode)!!
                )
            )
        }
    }

    // SendMessage - объект телеграм АПИ для отправки сообщения
    private fun simpleTextMessage(chatId: Long): SendMessage {
        val sendMessage = SendMessage()
        sendMessage.chatId = chatId.toString()
        sendMessage.text = messageContext.getMessage(chatId)
        sendMessage.enableHtml(true)

        return sendMessage
    }

    // Отправляем в бота сообщение с кнопками
    private fun TelegramSender.sendInlineKeyboardMarkup(chatId: Long) {
        val inlineKeyboardMarkup: InlineKeyboardMarkup
        val messageText: String

        val inlineKeyboardMarkupDto = markupContext.getInlineKeyboardMarkupDto(chatId)!!
        messageText = inlineKeyboardMarkupDto.message
        inlineKeyboardMarkup = inlineKeyboardMarkupDto.inlineButtons.getInlineKeyboardMarkup()

        this.execute(sendMessageWithMarkup(chatId, messageText, inlineKeyboardMarkup))
    }

    private fun sendMessageWithMarkup(
        chatId: Long, messageText: String, inlineKeyboardMarkup: InlineKeyboardMarkup
    ): BotApiMethod&lt;Message&gt; {
        val sendMessage = SendMessage()
        sendMessage.chatId = chatId.toString()
        sendMessage.text = messageText

        sendMessage.replyMarkup = inlineKeyboardMarkup
        sendMessage.parseMode = ParseMode.HTML
        return sendMessage
    }

    // Формируем модель кнопок
    private fun List&lt;MarkupDataDto&gt;.getInlineKeyboardMarkup(): InlineKeyboardMarkup {
        val inlineKeyboardMarkup = InlineKeyboardMarkup()
        val inlineKeyboardButtonsInner: MutableList&lt;InlineKeyboardButton&gt; = mutableListOf()
        val inlineKeyboardButtons: MutableList&lt;MutableList&lt;InlineKeyboardButton&gt;&gt; = mutableListOf()
        this.sortedBy { it.rowPos }.forEach { markupDataDto -&gt;
            val button = InlineKeyboardButton()
                .also { it.text = markupDataDto.text }
                .also { it.callbackData = markupDataDto.text }
            inlineKeyboardButtonsInner.add(button)
        }
        inlineKeyboardButtons.add(inlineKeyboardButtonsInner)
        inlineKeyboardMarkup.keyboard = inlineKeyboardButtons
        return inlineKeyboardMarkup
    }
}</code></pre></div>
                    </div><br/>
<p>Сам отправщик сообщений выглядит проще. Все механизмы в библиотеке, но для ее реализации нужно создать класс</p><br/>
<div class="spoiler" role="button" tabindex="0">
                        <b class="spoiler_title">TelegramSender.kt</b>
                        <div class="spoiler_text"><pre><code class="kotlin">package ru.template.telegram.bot.kotlin.template.api

import javax.annotation.PostConstruct
import org.springframework.stereotype.Component
import org.telegram.telegrambots.extensions.bots.commandbot.TelegramLongPollingCommandBot
import org.telegram.telegrambots.extensions.bots.commandbot.commands.IBotCommand
import org.telegram.telegrambots.meta.api.methods.commands.SetMyCommands
import org.telegram.telegrambots.meta.api.methods.send.SendMessage
import org.telegram.telegrambots.meta.api.objects.Update
import org.telegram.telegrambots.meta.api.objects.commands.BotCommand
import org.telegram.telegrambots.meta.api.objects.commands.scope.BotCommandScopeChat
import ru.template.telegram.bot.kotlin.template.properties.BotProperty
import ru.template.telegram.bot.kotlin.template.service.ReceiverService

@Component
class TelegramSender(
    private val botProperty: BotProperty,
    private val botCommands: List&lt;IBotCommand&gt;,
    private val receiverService: ReceiverService
) : TelegramLongPollingCommandBot() {

    @PostConstruct
    // Регистрация команд в системе
    fun initCommands() {
        botCommands.forEach {
            register(it)
        }

        registerDefaultAction { absSender, message -&gt;

            val commandUnknownMessage = SendMessage()
            commandUnknownMessage.chatId = message.chatId.toString()
            commandUnknownMessage.text = "Command '" + message.text.toString() + "' unknown"

            absSender.execute(commandUnknownMessage)
        }
    }

    // токен. Формируем в @BotFather
    override fun getBotToken() = botProperty.token

    // username. Формируем в @BotFather
    override fun getBotUsername() = botProperty.username

    // событие, которое пришли от пользователя (кромер команд)
    override fun processNonCommandUpdate(update: Update) {
        receiverService.execute(update)
    }
}</code></pre></div>
                    </div><br/>
<p><strong>TelegramLongPollingCommandBot</strong> — это базовый класс Телеграм АПИ, который отправляет и принимает сообщения. Хочу отметить, что в примере есть проперти, который нужно задать через <a href="https://habr.com/ru/users/botfather/" class="user_link">BotFather</a> </p><br/>
<p>Осталось дело за малым. Сервис приёма сообщений <strong>ReceiverService</strong> непосредственно принимает текст, введенный пользователем или мета информацию по кнопке.</p><br/>
<div class="spoiler" role="button" tabindex="0">
                        <b class="spoiler_title">ReceiverService.kt</b>
                        <div class="spoiler_text"><pre><code class="kotlin">package ru.template.telegram.bot.kotlin.template.service

import org.springframework.context.ApplicationEventPublisher
import org.springframework.stereotype.Service
import org.telegram.telegrambots.meta.api.objects.CallbackQuery
import org.telegram.telegrambots.meta.api.objects.Message
import org.telegram.telegrambots.meta.api.objects.Update
import ru.template.telegram.bot.kotlin.template.enums.StepCode
import ru.template.telegram.bot.kotlin.template.event.TelegramReceivedCallbackEvent
import ru.template.telegram.bot.kotlin.template.event.TelegramReceivedMessageEvent
import ru.template.telegram.bot.kotlin.template.repository.UsersRepository

@Service
class ReceiverService(
    private val applicationEventPublisher: ApplicationEventPublisher,
    private val usersRepository: UsersRepository
) {

    // выходной метод сервиса
    fun execute(update: Update) {
        if (update.hasCallbackQuery()) { // Выполнить, если это действие по кнопке
            callbackExecute(update.callbackQuery)
        } else if (update.hasMessage()) { // Выполнить, если это сообщение пользователя
            messageExecute(update.message)
        } else {
            throw IllegalStateException("Not yet supported")
        }
    }

    private fun messageExecute(message: Message) {
        val chatId = message.chatId
        val stepCode = usersRepository.getUser(chatId)!!.stepCode // Выбор текущего шага
        applicationEventPublisher.publishEvent( // Формируем событие TelegramReceivedMessageEvent
            TelegramReceivedMessageEvent(
                chatId = chatId,
                stepCode = StepCode.valueOf(stepCode),
                message = message
            )
        )
    }

    private fun callbackExecute(callback: CallbackQuery) {
        val chatId = callback.from.id
        val stepCode = usersRepository.getUser(chatId)!!.stepCode // Выбор текущего шага
        applicationEventPublisher.publishEvent( // Формируем событие TelegramReceivedCallbackEvent
            TelegramReceivedCallbackEvent(chatId = chatId, stepCode = StepCode.valueOf(stepCode), callback = callback)
        )
    }
}</code></pre></div>
                    </div><br/>
<p>Здесь всё просто, если Кнопка, то событие для кнопки, если текст, то событие для обработки текста.</p><br/>
<h4 id="biznes-processy">Бизнес процессы</h4><br/>
<p>Так как эта статья отражает лишь архитектуру бота, то описывать реализацию бизнес процессов нет смысла. Код с примером можно найти в гитхабе по ссылке выше.</p><br/>
<p>Отмечу только тот факт, что для описания самих бизнес процессов необходимо для каждого этапа реализовать имплементацию интерфейсов</p><br/>
<p><img src="https://habrastorage.org/r/w1560/webt/ym/d5/fk/ymd5fky8pgrz7jeleggb4z6gup8.png" data-src="https://habrastorage.org/webt/ym/d5/fk/ymd5fky8pgrz7jeleggb4z6gup8.png"/></p><br/>
<h3 id="zaklyuchenie">Заключение</h3><br/>
<p>Итого, что мы имеем? Описанный код продемонстрировал "поляну" для того, чтобы разработчики накидали классы, в которых будет реализована основная бизнес логика (добавление данных в базу, действие по кнопке). Также можно реализовать бизнес логику на роутинг следующего шага. Конечно, данная статья не поможет реализовать достаточно сложного бота. Однако, поработав с аналитиком и архитектором, можно с лёгкостью реализовать новые слои в пакете <strong>strategy</strong>.</p></div></div></div><!----><!----></div><!----><!----></div><!--]--><!----><div class="tm-article-presenter__meta" data-test-id="article-meta-links"><div class="tm-separated-list tm-article-presenter__meta-list"><span class="tm-separated-list__title">Теги:</span><ul class="tm-separated-list__list"><!--[--><li class="tm-separated-list__item"><!--[--><a href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[%D1%82%D0%B5%D0%BB%D0%B5%D0%B3%D1%80%D0%B0%D0%BC-%D0%B1%D0%BE%D1%82]" class="tm-tags-list__link"><span>телеграм-бот</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[kotlin]" class="tm-tags-list__link"><span>kotlin</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[spring+boot]" class="tm-tags-list__link"><span>spring boot</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[PostgreSQL]" class="tm-tags-list__link"><span>PostgreSQL</span></a><!--]--></li><!--]--><!----></ul></div><div class="tm-separated-list tm-article-presenter__meta-list"><span class="tm-separated-list__title">Хабы:</span><ul class="tm-separated-list__list"><!--[--><li class="tm-separated-list__item"><!--[--><a href="/ru/hubs/kotlin/" class="tm-hubs-list__link"><!--[--><span>Kotlin</span><!--]--></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a href="/ru/hubs/programming/" class="tm-hubs-list__link"><!--[--><span>Программирование</span><!--]--></a><!--]--></li><!--]--><!----></ul></div></div><!----><!--]--></article><!--]--></div><!----></div><div style="" class="tm-article-sticky-panel" data-test-id="article-sticky-panel"><div class="tm-data-icons tm-data-icons tm-data-icons_space-big tm-article-sticky-panel__icons" data-test-id="article-stats-icons"><div class="tm-article-rating tm-data-icons__item"><div class="tm-votes-meter tm-article-rating__votes-switcher"><svg class="tm-svg-img tm-votes-meter__icon tm-votes-meter__icon tm-votes-meter__icon_appearance-article" height="24" width="24"><title>Всего голосов 3: ↑2 и ↓1</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-rating"></use></svg><span class="tm-votes-meter__value tm-votes-meter__value_positive tm-votes-meter__value_appearance-article tm-votes-meter__value_rating tm-votes-meter__value" data-test-id="votes-meter-value" title="Всего голосов 3: ↑2 и ↓1">+3</span></div><!--teleport start--><!--teleport end--><!----></div><!----><!----><button class="bookmarks-button tm-data-icons__item" title="Добавить в закладки" type="button"><span class="tm-svg-icon__wrapper bookmarks-button__icon"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Добавить в закладки</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-favorite"></use></svg></span><span class="bookmarks-button__counter" title="Количество пользователей, добавивших публикацию в закладки">57</span></button><div class="tm-sharing tm-data-icons__item" title="Поделиться"><button class="tm-sharing__button" type="button"><svg viewbox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" class="tm-sharing__icon"><path fill="currentColor" d="M13.8 13.8V18l7.2-6.6L13.8 5v3.9C5 8.9 3 18.6 3 18.6c2.5-4.4 6-4.8 10.8-4.8z"></path></svg></button><!--teleport start--><!--teleport end--></div><div class="tm-article-comments-counter-link tm-data-icons__item" title="Читать комментарии"><a href="/ru/articles/588474/comments/" class="tm-article-comments-counter-link__link" data-test-id="counter-comments"><!--[--><svg class="tm-svg-img tm-article-comments-counter-link__icon" height="24" width="24"><title>Комментарии</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-comments"></use></svg><span class="tm-article-comments-counter-link__value">16</span><!--]--></a><!----></div><!--[--><!--[--><!--[--><!----><!--]--><!--]--><!--]--><!--teleport start--><!--teleport end--><!----></div></div></div><!--[--><!--]--><div class="tm-article-presenter__footer"><!--[--><!--[--><div class="tm-article-blocks"><!----><!--[--><section class="tm-block tm-block tm-block_spacing-bottom"><!----><!--[--><div class="tm-block__body tm-block__body tm-block__body_variant-balanced"><!--[--><div class="tm-article-author" data-test-id="article-author-info" data-async-called="true"><!--[--><!--]--><div class="tm-user-card tm-user-card tm-user-card_variant-article tm-article-author__user-card" data-async-called="true"><div class="tm-user-card__info-container"><div class="tm-user-card__header"><div class="tm-user-card__header-data"><a href="/ru/users/minpor/" class="tm-user-card__userpic tm-user-card__userpic_size-40"><div class="tm-entity-image"><img alt="" class="tm-entity-image__pic" src="//habrastorage.org/getpro/habr/avatars/9d7/1e4/0ff/9d71e40ff3b6757e17de780717837fd4.jpg"></div></a><div class="tm-user-card__meta"><div class="tm-counter-container tm-karma tm-karma" title=" 11 голосов "><div class="tm-counter-container__header"><!--[--><div class="karma-display positive" data-v-7635202e>11</div><!----><!--]--></div><div class="tm-counter-container__footer"><!--[--><div class="tm-karma__text">Карма</div><!--teleport start--><!--teleport end--><!--]--></div></div><div class="tm-counter-container" title="Рейтинг пользователя"><div class="tm-counter-container__header"><!--[--><!--[--><!--]--><div class="tm-votes-lever tm-votes-lever tm-votes-lever_appearance-rating"><!----><div class="tm-votes-lever__score tm-votes-lever__score_appearance-rating tm-votes-lever__score"><!--[--><span><span class="tm-votes-lever__score-counter tm-votes-lever__score-counter_rating tm-votes-lever__score-counter" data-test-id="votes-score-counter">0</span></span><!--]--></div><!----></div><!--]--></div><div class="tm-counter-container__footer"><!--[--><span class="tm-rating__text tm-rating__text">Рейтинг</span><!--]--></div></div></div></div></div><div class="tm-user-card__info tm-user-card__info_variant-article tm-user-card__info"><div class="tm-user-card__title tm-user-card__title_variant-article tm-user-card__title"><span class="tm-user-card__name tm-user-card__name_variant-article tm-user-card__name">Даниил</span><a href="/ru/users/minpor/" class="tm-user-card__nickname tm-user-card__nickname tm-user-card__nickname_variant-article"> @minpor</a><!----></div><p class="tm-user-card__short-info tm-user-card__short-info_variant-article tm-user-card__short-info" data-test-id="user-card-speciality">Разработчик ПО</p></div></div><!----><div class="tm-user-card__buttons tm-user-card__buttons_variant-article tm-user-card__buttons"><!----><div class="tm-user-card__button"><div class="tm-button-follow tm-user-card__button-follow"><!----><button class="tm-button-follow__button tm-button-follow__button_big" data-test-id="follow-button" type="button">Подписаться</button></div></div><!----><div class="tm-user-card__button tm-user-card__button_write" data-test-id="user-card-conversations"><svg class="tm-svg-img tm-user-card__button-icon" height="16" width="16"><title>Отправить сообщение</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#mail"></use></svg></div><!----></div><!----></div><div class="tm-article-author__user-contacts" data-test-id="author-contacts"><!----><!----><!----></div></div><!--]--></div><!--]--><!----></section><!----><!--[--><div class="banner-wrapper leaderboard tm-page-article__banner" style="--467224fc:200px;--58ff5eba:auto;" data-v-ad758baa><!--[--><div class="placeholder-wrapper placeholder" data-v-ad758baa><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><div class="adfox-banner-placeholder leaderboard" data-v-12f7bcca><div class="image loads" data-v-12f7bcca></div><div class="lines" data-v-12f7bcca><div class="line loads" data-v-12f7bcca></div><div class="line loads" data-v-12f7bcca></div><div class="line loads" data-v-12f7bcca></div></div></div><!----></div><div id="adfox_164725660339535756" class="tm-adfox-banner" data-v-ad758baa></div><!--]--></div><!--]--><!--]--><div class="tm-article-blocks__comments"><div id="publication-comments" class="tm-article-page-comments"><div><!--[--><div class="tm-article-comments-counter-link tm-article-comments-counter-button"><a href="/ru/articles/588474/comments/" class="tm-article-comments-counter-link__link tm-article-comments-counter-link__link_button-style" data-test-id="counter-comments"><!--[--><svg class="tm-svg-img tm-article-comments-counter-link__icon tm-article-comments-counter-link__icon_contrasted" height="24" width="24"><title>Комментарии</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-comments"></use></svg><span class="tm-article-comments-counter-link__value tm-article-comments-counter-link__value_contrasted"> Комментарии 16 </span><!--]--></a><!----></div><!--]--></div></div></div><!--[--><!--[--><!--]--><section class="tm-block tm-block tm-block_spacing-bottom"><header class="tm-block__header tm-block__header tm-block__header_variant-borderless"><div class="tm-block__header-container"><h2 class="tm-block__title tm-block__title tm-block__title_variant-large">Публикации</h2><!--[--><!--]--></div><!----></header><!--[--><div class="tm-block__body tm-block__body tm-block__body_variant-condensed-slim"><!--[--><!--[--><div class="tm-tabs tm-tabs"><div class=""><!--[--><span class="tm-tabs__tab-item"><button class="tm-tabs__tab-link tm-tabs__tab-link_active tm-tabs__tab-link_slim tm-tabs__tab-link">Лучшие за сутки</button></span><span class="tm-tabs__tab-item"><button class="tm-tabs__tab-link tm-tabs__tab-link_slim tm-tabs__tab-link">Похожие</button></span><!--]--></div><!----></div><div class="similar-and-daily__tab-view"><div class="daily-articles-list"><ul class="tm-article-card-list"><!--[--><!--]--><div class="tm-bordered-card"><!----><!--[--><!--]--></div></ul><div class="daily-articles-block__button-container"><button class="btn btn_transparent btn_small tm-button tm-button_color-horizon" type="button"><!--[--><!--[-->Показать лучшие за всё время<!--]--><!--]--></button></div></div><!----></div><!--]--><!--]--></div><!--]--><!----></section><!--[--><section class="tm-block tm-block tm-block_spacing-around tm-stories-block" data-navigatable tabindex="0" data-async-called="true"><header class="tm-block__header tm-block__header"><div class="tm-block__header-container"><h2 class="tm-block__title tm-block__title">Истории</h2><!--[--><!--]--></div><!----></header><!--[--><div class="tm-block__body tm-block__body tm-block__body_variant-equal"><!--[--><div class="tm-stories-empty"><!--[--><div class="tm-stories-card-empty"><div class="tm-stories-card-empty__image"></div><div class="tm-stories-card-empty__title"><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div></div></div><div class="tm-stories-card-empty"><div class="tm-stories-card-empty__image"></div><div class="tm-stories-card-empty__title"><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div></div></div><div class="tm-stories-card-empty"><div class="tm-stories-card-empty__image"></div><div class="tm-stories-card-empty__title"><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div></div></div><div class="tm-stories-card-empty"><div class="tm-stories-card-empty__image"></div><div class="tm-stories-card-empty__title"><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div></div></div><div class="tm-stories-card-empty"><div class="tm-stories-card-empty__image"></div><div class="tm-stories-card-empty__title"><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div></div></div><div class="tm-stories-card-empty"><div class="tm-stories-card-empty__image"></div><div class="tm-stories-card-empty__title"><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div></div></div><!--]--></div><!----><!--]--></div><!--]--><!----></section><div><div class="placeholder-wrapper"><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><div class="tm-placeholder-inset tm-placeholder-salary"><div class="tm-placeholder-inset__header"><div class="tm-placeholder__line tm-placeholder__line_inset-header loads"></div></div><div class="tm-placeholder-salary__body"><div class="tm-placeholder-salary__text"><div class="tm-placeholder__line tm-placeholder__line_salary_average"></div><div class="tm-placeholder-salary__description"><div class="tm-placeholder__line loads"></div><div class="tm-placeholder__line loads"></div><div class="tm-placeholder__line loads"></div><div class="tm-placeholder__line loads"></div></div></div><div class="tm-placeholder-salary__image loads"></div></div><div class="tm-placeholder-inset__footer tm-placeholder-inset__footer_salary"><div class="tm-placeholder__line tm-placeholder__line_inset-footer loads"></div></div></div><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----></div></div><!--]--><!----><!--[--><div><div class="placeholder-wrapper"><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><div class="tm-placeholder-promo"><div class="tm-placeholder-promo__header"><div class="tm-placeholder__line tm-placeholder__line_promo-title"></div></div><div class="tm-placeholder-promo__body"><div class="tm-placeholder-promo__posts"><div class="tm-placeholder-promo__post"><div class="tm-placeholder-promo__image"></div><div class="tm-placeholder__line tm-placeholder__line_post-title"></div></div><div class="tm-placeholder-promo__post"><div class="tm-placeholder-promo__image"></div><div class="tm-placeholder__line tm-placeholder__line_post-title"></div></div><div class="tm-placeholder-promo__post"><div class="tm-placeholder-promo__image"></div><div class="tm-placeholder__line tm-placeholder__line_post-title"></div></div></div><div class="tm-placeholder-promo__dots"><div class="tm-placeholder-promo__dot"></div><div class="tm-placeholder-promo__dot"></div><div class="tm-placeholder-promo__dot"></div></div></div></div><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----></div></div><!----><section class="tm-block tm-block tm-block_spacing-around tm-events-block" data-navigatable tabindex="0" data-async-called="true"><header class="tm-block__header tm-block__header tm-block__header_variant-borderless-large"><div class="tm-block__header-container"><h2 class="tm-block__title tm-block__title">Ближайшие события</h2><!--[--><!--]--></div><!----></header><!--[--><div class="tm-block__body tm-block__body tm-block__body_variant-equal"><!--[--><div class="swiper-container tm-events-widget" style="--swiper-space-between:22px;"><div class="swiper-wrapper"><!--[--><!--[--><div class="swiper-slide"><!--[--><section class="tm-block tm-block tm-block_spacing-none" id="588" tabindex="-1"><!----><!--[--><div class="tm-event-card tm-event-card_is-widget tm-event-card_responsive"><a href="/ru/events/588/" class=""><img alt class="tm-event-card__image" data-src="https://habrastorage.org/getpro/habr/upload_files/f79/1fc/79d/f791fc79d0d9fdda84397ed0c0717764.png" loading="lazy" src="https://habrastorage.org/r/w390/getpro/habr/upload_files/f79/1fc/79d/f791fc79d0d9fdda84397ed0c0717764.png" srcset="https://habrastorage.org/r/w390/getpro/habr/upload_files/f79/1fc/79d/f791fc79d0d9fdda84397ed0c0717764.png, https://habrastorage.org/getpro/habr/upload_files/f79/1fc/79d/f791fc79d0d9fdda84397ed0c0717764.png 2x"></a><!----><div class="tm-event-card__info"><div class="tm-event-card__date"><!----><div class="tm-event-card__day"><span>17  февраля   – 24  марта  </span></div></div><a href="/ru/events/588/" class="tm-event-card__title-link"><span>Конкурс «Снежный код» от Хекслета. Три гранта на бесплатное 10-месячное обучение</span></a><div class="tm-event-card__places"><div class="tm-event-card__places-list"><!--[--><span class="tm-event-card__places-item"><span>Онлайн</span><!----></span><!--]--></div></div></div><div class="tm-event-card__footer tm-event-card__footer_widget"><a href="/ru/events/#588" class="tm-event-card__link">Больше событий в календаре</a><div class="tm-event-card__categories"><!--[--><div class="event-category__label event-category__label_type-development"><span>Разработка</span></div><!--]--></div></div></div><!--]--><!----></section><!--]--></div><div class="swiper-slide"><!--[--><section class="tm-block tm-block tm-block_spacing-none" id="596" tabindex="-1"><!----><!--[--><div class="tm-event-card tm-event-card_is-widget tm-event-card_responsive"><a href="/ru/events/596/" class=""><img alt class="tm-event-card__image" data-src="https://habrastorage.org/getpro/habr/upload_files/b14/cd3/772/b14cd3772bc67698c8fbfd846e23824a.png" loading="lazy" src="https://habrastorage.org/r/w390/getpro/habr/upload_files/b14/cd3/772/b14cd3772bc67698c8fbfd846e23824a.png" srcset="https://habrastorage.org/r/w390/getpro/habr/upload_files/b14/cd3/772/b14cd3772bc67698c8fbfd846e23824a.png, https://habrastorage.org/getpro/habr/upload_files/b14/cd3/772/b14cd3772bc67698c8fbfd846e23824a.png 2x"></a><!----><div class="tm-event-card__info"><div class="tm-event-card__date"><!----><div class="tm-event-card__day"><span>20  марта  </span></div></div><a href="/ru/events/596/" class="tm-event-card__title-link"><span>Офлайн-конференция Хабр х K-team: как удерживать таланты в 2025 году</span></a><div class="tm-event-card__places"><div class="tm-event-card__places-list"><!--[--><span class="tm-event-card__places-item"><span>Москва</span><!----></span><!--]--></div></div></div><div class="tm-event-card__footer tm-event-card__footer_widget"><a href="/ru/events/#596" class="tm-event-card__link">Больше событий в календаре</a><div class="tm-event-card__categories"><!--[--><div class="event-category__label event-category__label_type-other"><span>Другое</span></div><!--]--></div></div></div><!--]--><!----></section><!--]--></div><div class="swiper-slide"><!--[--><section class="tm-block tm-block tm-block_spacing-none" id="604" tabindex="-1"><!----><!--[--><div class="tm-event-card tm-event-card_is-widget tm-event-card_responsive"><a href="/ru/events/604/" class=""><img alt class="tm-event-card__image" data-src="https://habrastorage.org/getpro/habr/upload_files/733/9ef/194/7339ef1945f3ee6906daf89db79829d4.png" loading="lazy" src="https://habrastorage.org/r/w390/getpro/habr/upload_files/733/9ef/194/7339ef1945f3ee6906daf89db79829d4.png" srcset="https://habrastorage.org/r/w390/getpro/habr/upload_files/733/9ef/194/7339ef1945f3ee6906daf89db79829d4.png, https://habrastorage.org/getpro/habr/upload_files/733/9ef/194/7339ef1945f3ee6906daf89db79829d4.png 2x"></a><!----><div class="tm-event-card__info"><div class="tm-event-card__date"><!----><div class="tm-event-card__day"><span>20  марта  </span></div></div><a href="/ru/events/604/" class="tm-event-card__title-link"><span>IX HappyWorkForum | Аутентичность и ментальное здоровье персонала</span></a><div class="tm-event-card__places"><div class="tm-event-card__places-list"><!--[--><span class="tm-event-card__places-item"><span>Москва</span><span class="tm-event-card__places-separator"> • </span></span><span class="tm-event-card__places-item"><span>Онлайн</span><!----></span><!--]--></div></div></div><div class="tm-event-card__footer tm-event-card__footer_widget"><a href="/ru/events/#604" class="tm-event-card__link">Больше событий в календаре</a><div class="tm-event-card__categories"><!--[--><div class="event-category__label event-category__label_type-other"><span>Другое</span></div><!--]--></div></div></div><!--]--><!----></section><!--]--></div><div class="swiper-slide"><!--[--><section class="tm-block tm-block tm-block_spacing-none" id="612" tabindex="-1"><!----><!--[--><div class="tm-event-card tm-event-card_is-widget tm-event-card_responsive"><a href="/ru/events/612/" class=""><img alt class="tm-event-card__image" data-src="https://habrastorage.org/getpro/habr/upload_files/38f/10d/f4c/38f10df4c7f9d7c5d4610fe426af0ab4.png" loading="lazy" src="https://habrastorage.org/r/w390/getpro/habr/upload_files/38f/10d/f4c/38f10df4c7f9d7c5d4610fe426af0ab4.png" srcset="https://habrastorage.org/r/w390/getpro/habr/upload_files/38f/10d/f4c/38f10df4c7f9d7c5d4610fe426af0ab4.png, https://habrastorage.org/getpro/habr/upload_files/38f/10d/f4c/38f10df4c7f9d7c5d4610fe426af0ab4.png 2x"></a><!----><div class="tm-event-card__info"><div class="tm-event-card__date"><!----><div class="tm-event-card__day"><span>20  марта  </span></div></div><a href="/ru/events/612/" class="tm-event-card__title-link"><span>Вебинар «Мастерская бюджета: как управлять затратами на облачные ресурсы»</span></a><div class="tm-event-card__places"><div class="tm-event-card__places-list"><!--[--><span class="tm-event-card__places-item"><span>Онлайн</span><!----></span><!--]--></div></div></div><div class="tm-event-card__footer tm-event-card__footer_widget"><a href="/ru/events/#612" class="tm-event-card__link">Больше событий в календаре</a><div class="tm-event-card__categories"><!--[--><div class="event-category__label event-category__label_type-development"><span>Разработка</span></div><div class="event-category__label event-category__label_type-admin"><span>Администрирование</span></div><!--]--></div></div></div><!--]--><!----></section><!--]--></div><div class="swiper-slide"><!--[--><section class="tm-block tm-block tm-block_spacing-none" id="616" tabindex="-1"><!----><!--[--><div class="tm-event-card tm-event-card_is-widget tm-event-card_responsive"><a href="/ru/events/616/" class=""><img alt class="tm-event-card__image" data-src="https://habrastorage.org/getpro/habr/upload_files/523/7fb/13a/5237fb13ad7fb6fb483c49691aaec836.png" loading="lazy" src="https://habrastorage.org/r/w390/getpro/habr/upload_files/523/7fb/13a/5237fb13ad7fb6fb483c49691aaec836.png" srcset="https://habrastorage.org/r/w390/getpro/habr/upload_files/523/7fb/13a/5237fb13ad7fb6fb483c49691aaec836.png, https://habrastorage.org/getpro/habr/upload_files/523/7fb/13a/5237fb13ad7fb6fb483c49691aaec836.png 2x"></a><!----><div class="tm-event-card__info"><div class="tm-event-card__date"><!----><div class="tm-event-card__day"><span>21  марта  </span></div></div><a href="/ru/events/616/" class="tm-event-card__title-link"><span>Бизнес-конференция «Digital Brand Day 2025: Орбита 2025»</span></a><div class="tm-event-card__places"><div class="tm-event-card__places-list"><!--[--><span class="tm-event-card__places-item"><span>Москва</span><!----></span><!--]--></div></div></div><div class="tm-event-card__footer tm-event-card__footer_widget"><a href="/ru/events/#616" class="tm-event-card__link">Больше событий в календаре</a><div class="tm-event-card__categories"><!--[--><div class="event-category__label event-category__label_type-marketing"><span>Маркетинг</span></div><div class="event-category__label event-category__label_type-other"><span>Другое</span></div><!--]--></div></div></div><!--]--><!----></section><!--]--></div><div class="swiper-slide"><!--[--><section class="tm-block tm-block tm-block_spacing-none" id="608" tabindex="-1"><!----><!--[--><div class="tm-event-card tm-event-card_is-widget tm-event-card_responsive"><a href="/ru/events/608/" class=""><img alt class="tm-event-card__image" data-src="https://habrastorage.org/getpro/habr/upload_files/8fd/e04/ddd/8fde04ddd9ba3f6bcd515aa6209f96b7.png" loading="lazy" src="https://habrastorage.org/r/w390/getpro/habr/upload_files/8fd/e04/ddd/8fde04ddd9ba3f6bcd515aa6209f96b7.png" srcset="https://habrastorage.org/r/w390/getpro/habr/upload_files/8fd/e04/ddd/8fde04ddd9ba3f6bcd515aa6209f96b7.png, https://habrastorage.org/getpro/habr/upload_files/8fd/e04/ddd/8fde04ddd9ba3f6bcd515aa6209f96b7.png 2x"></a><!----><div class="tm-event-card__info"><div class="tm-event-card__date"><!----><div class="tm-event-card__day"><span>27  марта  </span></div></div><a href="/ru/events/608/" class="tm-event-card__title-link"><span>Вебинар «Контент-маркетинг здорового человека: как привлечь внимание аудитории»</span></a><div class="tm-event-card__places"><div class="tm-event-card__places-list"><!--[--><span class="tm-event-card__places-item"><span>Онлайн</span><!----></span><!--]--></div></div></div><div class="tm-event-card__footer tm-event-card__footer_widget"><a href="/ru/events/#608" class="tm-event-card__link">Больше событий в календаре</a><div class="tm-event-card__categories"><!--[--><div class="event-category__label event-category__label_type-marketing"><span>Маркетинг</span></div><div class="event-category__label event-category__label_type-other"><span>Другое</span></div><!--]--></div></div></div><!--]--><!----></section><!--]--></div><div class="swiper-slide"><!--[--><section class="tm-block tm-block tm-block_spacing-none" id="606" tabindex="-1"><!----><!--[--><div class="tm-event-card tm-event-card_is-widget tm-event-card_responsive"><a href="/ru/events/606/" class=""><img alt class="tm-event-card__image" data-src="https://habrastorage.org/getpro/habr/upload_files/b99/62a/b24/b9962ab2439c6edc80f96d7f0a847c72.png" loading="lazy" src="https://habrastorage.org/r/w390/getpro/habr/upload_files/b99/62a/b24/b9962ab2439c6edc80f96d7f0a847c72.png" srcset="https://habrastorage.org/r/w390/getpro/habr/upload_files/b99/62a/b24/b9962ab2439c6edc80f96d7f0a847c72.png, https://habrastorage.org/getpro/habr/upload_files/b99/62a/b24/b9962ab2439c6edc80f96d7f0a847c72.png 2x"></a><!----><div class="tm-event-card__info"><div class="tm-event-card__date"><!----><div class="tm-event-card__day"><span>31  марта  </span></div></div><a href="/ru/events/606/" class="tm-event-card__title-link"><span>Серия вебинаров «DevOps Middle: AvitoTech vs ecom.tech»</span></a><div class="tm-event-card__places"><div class="tm-event-card__places-list"><!--[--><span class="tm-event-card__places-item"><span>Онлайн</span><!----></span><!--]--></div></div></div><div class="tm-event-card__footer tm-event-card__footer_widget"><a href="/ru/events/#606" class="tm-event-card__link">Больше событий в календаре</a><div class="tm-event-card__categories"><!--[--><div class="event-category__label event-category__label_type-development"><span>Разработка</span></div><div class="event-category__label event-category__label_type-admin"><span>Администрирование</span></div><!--]--></div></div></div><!--]--><!----></section><!--]--></div><div class="swiper-slide"><!--[--><section class="tm-block tm-block tm-block_spacing-none" id="618" tabindex="-1"><!----><!--[--><div class="tm-event-card tm-event-card_is-widget tm-event-card_responsive"><a href="/ru/events/618/" class=""><img alt class="tm-event-card__image" data-src="https://habrastorage.org/getpro/habr/upload_files/f76/0f9/a82/f760f9a827b851a5eeca4802c643a91d.png" loading="lazy" src="https://habrastorage.org/r/w390/getpro/habr/upload_files/f76/0f9/a82/f760f9a827b851a5eeca4802c643a91d.png" srcset="https://habrastorage.org/r/w390/getpro/habr/upload_files/f76/0f9/a82/f760f9a827b851a5eeca4802c643a91d.png, https://habrastorage.org/getpro/habr/upload_files/f76/0f9/a82/f760f9a827b851a5eeca4802c643a91d.png 2x"></a><!----><div class="tm-event-card__info"><div class="tm-event-card__date"><!----><div class="tm-event-card__day"><span>3  апреля  </span></div></div><a href="/ru/events/618/" class="tm-event-card__title-link"><span>Реалити для разработчиков: узнайте, как строится новое публичное облако MWS</span></a><div class="tm-event-card__places"><div class="tm-event-card__places-list"><!--[--><span class="tm-event-card__places-item"><span>Онлайн</span><!----></span><!--]--></div></div></div><div class="tm-event-card__footer tm-event-card__footer_widget"><a href="/ru/events/#618" class="tm-event-card__link">Больше событий в календаре</a><div class="tm-event-card__categories"><!--[--><div class="event-category__label event-category__label_type-development"><span>Разработка</span></div><!--]--></div></div></div><!--]--><!----></section><!--]--></div><div class="swiper-slide"><!--[--><section class="tm-block tm-block tm-block_spacing-none" id="620" tabindex="-1"><!----><!--[--><div class="tm-event-card tm-event-card_is-widget tm-event-card_responsive"><a href="/ru/events/620/" class=""><img alt class="tm-event-card__image" data-src="https://habrastorage.org/getpro/habr/upload_files/eba/c37/879/ebac378793b959ebce42f41713e7b67f.jpg" loading="lazy" src="https://habrastorage.org/r/w390/getpro/habr/upload_files/eba/c37/879/ebac378793b959ebce42f41713e7b67f.jpg" srcset="https://habrastorage.org/r/w390/getpro/habr/upload_files/eba/c37/879/ebac378793b959ebce42f41713e7b67f.jpg, https://habrastorage.org/getpro/habr/upload_files/eba/c37/879/ebac378793b959ebce42f41713e7b67f.jpg 2x"></a><!----><div class="tm-event-card__info"><div class="tm-event-card__date"><!----><div class="tm-event-card__day"><span>3  апреля  </span></div></div><a href="/ru/events/620/" class="tm-event-card__title-link"><span>Открытая встреча «System Analysis Meetup SberHealth»</span></a><div class="tm-event-card__places"><div class="tm-event-card__places-list"><!--[--><span class="tm-event-card__places-item"><span>Москва</span><span class="tm-event-card__places-separator"> • </span></span><span class="tm-event-card__places-item"><span>Онлайн</span><!----></span><!--]--></div></div></div><div class="tm-event-card__footer tm-event-card__footer_widget"><a href="/ru/events/#620" class="tm-event-card__link">Больше событий в календаре</a><div class="tm-event-card__categories"><!--[--><div class="event-category__label event-category__label_type-analytics"><span>Аналитика</span></div><!--]--></div></div></div><!--]--><!----></section><!--]--></div><div class="swiper-slide"><!--[--><section class="tm-block tm-block tm-block_spacing-none" id="590" tabindex="-1"><!----><!--[--><div class="tm-event-card tm-event-card_is-widget tm-event-card_responsive"><a href="/ru/events/590/" class=""><img alt class="tm-event-card__image" data-src="https://habrastorage.org/getpro/habr/upload_files/31b/e68/295/31be6829578e7934fbc944396eb330b1.png" loading="lazy" src="https://habrastorage.org/r/w390/getpro/habr/upload_files/31b/e68/295/31be6829578e7934fbc944396eb330b1.png" srcset="https://habrastorage.org/r/w390/getpro/habr/upload_files/31b/e68/295/31be6829578e7934fbc944396eb330b1.png, https://habrastorage.org/getpro/habr/upload_files/31b/e68/295/31be6829578e7934fbc944396eb330b1.png 2x"></a><!----><div class="tm-event-card__info"><div class="tm-event-card__date"><!----><div class="tm-event-card__day"><span>10  апреля  </span></div></div><a href="/ru/events/590/" class="tm-event-card__title-link"><span>«GoCloud 2025» — масштабная IT-конференция про облака и AI</span></a><div class="tm-event-card__places"><div class="tm-event-card__places-list"><!--[--><span class="tm-event-card__places-item"><span>Москва</span><span class="tm-event-card__places-separator"> • </span></span><span class="tm-event-card__places-item"><span>Онлайн</span><!----></span><!--]--></div></div></div><div class="tm-event-card__footer tm-event-card__footer_widget"><a href="/ru/events/#590" class="tm-event-card__link">Больше событий в календаре</a><div class="tm-event-card__categories"><!--[--><div class="event-category__label event-category__label_type-development"><span>Разработка</span></div><div class="event-category__label event-category__label_type-admin"><span>Администрирование</span></div><div class="event-category__label event-category__label_type-management"><span>Менеджмент</span></div><!--]--></div></div></div><!--]--><!----></section><!--]--></div><div class="swiper-slide"><!--[--><section class="tm-block tm-block tm-block_spacing-none" id="516" tabindex="-1"><!----><!--[--><div class="tm-event-card tm-event-card_is-widget tm-event-card_responsive"><a href="/ru/events/516/" class=""><img alt class="tm-event-card__image" data-src="https://habrastorage.org/getpro/habr/upload_files/0e9/3a8/3ec/0e93a83ecea09f806d1df907ddb036a4.jpg" loading="lazy" src="https://habrastorage.org/r/w390/getpro/habr/upload_files/0e9/3a8/3ec/0e93a83ecea09f806d1df907ddb036a4.jpg" srcset="https://habrastorage.org/r/w390/getpro/habr/upload_files/0e9/3a8/3ec/0e93a83ecea09f806d1df907ddb036a4.jpg, https://habrastorage.org/getpro/habr/upload_files/0e9/3a8/3ec/0e93a83ecea09f806d1df907ddb036a4.jpg 2x"></a><!----><div class="tm-event-card__info"><div class="tm-event-card__date"><!----><div class="tm-event-card__day"><span>25 – 26  апреля  </span></div></div><a href="/ru/events/516/" class="tm-event-card__title-link"><span>IT-конференция Merge Tatarstan 2025</span></a><div class="tm-event-card__places"><div class="tm-event-card__places-list"><!--[--><span class="tm-event-card__places-item"><span>Казань</span><!----></span><!--]--></div></div></div><div class="tm-event-card__footer tm-event-card__footer_widget"><a href="/ru/events/#516" class="tm-event-card__link">Больше событий в календаре</a><div class="tm-event-card__categories"><!--[--><div class="event-category__label event-category__label_type-development"><span>Разработка</span></div><div class="event-category__label event-category__label_type-marketing"><span>Маркетинг</span></div><div class="event-category__label event-category__label_type-other"><span>Другое</span></div><!--]--></div></div></div><!--]--><!----></section><!--]--></div><div class="swiper-slide"><!--[--><section class="tm-block tm-block tm-block_spacing-none" id="610" tabindex="-1"><!----><!--[--><div class="tm-event-card tm-event-card_is-widget tm-event-card_responsive"><a href="/ru/events/610/" class=""><img alt class="tm-event-card__image" data-src="https://habrastorage.org/getpro/habr/upload_files/652/12d/998/65212d998fb4939d9787bd9c726d2acb.png" loading="lazy" src="https://habrastorage.org/r/w390/getpro/habr/upload_files/652/12d/998/65212d998fb4939d9787bd9c726d2acb.png" srcset="https://habrastorage.org/r/w390/getpro/habr/upload_files/652/12d/998/65212d998fb4939d9787bd9c726d2acb.png, https://habrastorage.org/getpro/habr/upload_files/652/12d/998/65212d998fb4939d9787bd9c726d2acb.png 2x"></a><!----><div class="tm-event-card__info"><div class="tm-event-card__date"><!----><div class="tm-event-card__day"><span>20 – 22  июня  </span></div></div><a href="/ru/events/610/" class="tm-event-card__title-link"><span>Летняя айти-тусовка Summer Merge</span></a><div class="tm-event-card__places"><div class="tm-event-card__places-list"><!--[--><span class="tm-event-card__places-item"><span>Ульяновская область</span><!----></span><!--]--></div></div></div><div class="tm-event-card__footer tm-event-card__footer_widget"><a href="/ru/events/#610" class="tm-event-card__link">Больше событий в календаре</a><div class="tm-event-card__categories"><!--[--><div class="event-category__label event-category__label_type-development"><span>Разработка</span></div><div class="event-category__label event-category__label_type-other"><span>Другое</span></div><!--]--></div></div></div><!--]--><!----></section><!--]--></div><!--]--><!--]--></div><!----><!--[--><button class="swiper-button-prev"><span class="tm-svg-icon__wrapper swiper-button-icon"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Влево</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#arrow-back"></use></svg></span></button><button class="swiper-button-next"><span class="tm-svg-icon__wrapper swiper-button-icon"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Вправо</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#arrow-back"></use></svg></span></button><!--]--></div><!--]--></div><!--]--><!----></section><!--]--><!--]--></div><!--]--><!--]--></div></div><!--]--><!--]--></div></div><div class="tm-page__sidebar"><!--[--><!----><!--]--></div></div><!----><!--]--></div></div></main><!----></div><!----><div class="tm-footer"><div class="tm-page-width"><!--[--><div class="tm-footer__container"><div class="tm-footer__title"><a class="tm-svg-icon__wrapper tm-footer__title-link" href="/ru/"><svg class="tm-svg-img tm-svg-icon" height="16" width="16"><title>Хабр</title><use xlink:href="/img/habr-logo-ru.svg#logo"></use></svg></a></div><div class="tm-footer__social"><!--[--><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://www.facebook.com/habrahabr.ru" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="36" width="36"><title>Facebook</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-facebook"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://twitter.com/habr_com" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="36" width="36"><title>Twitter</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-twitter"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://vk.com/habr" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="36" width="36"><title>VK</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-vk"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://telegram.me/habr_com" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="36" width="36"><title>Telegram</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-telegram"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://www.youtube.com/channel/UCd_sTwKqVrweTt4oAKY5y4w" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="36" width="36"><title>Youtube</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-youtube"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://dzen.ru/habr" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="36" width="36"><title>Яндекс Дзен</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-dzen"></use></svg></a><!--]--></div><!--teleport start--><!--teleport end--><button class="tm-footer__link"><svg class="tm-svg-img tm-footer__icon" height="16" width="16"><title>Язык</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#lang"></use></svg> Настройка языка</button><a href="/ru/feedback/" class="tm-footer__link">Техническая поддержка</a><div class="tm-footer-copyright"><span class="tm-copyright"><span class="tm-copyright__years">© 2006–2025, </span><span class="tm-copyright__name"><a class="tm-copyright__link" href="https://company.habr.com/" rel="noopener" target="_blank">Habr</a></span></span></div></div><!--]--></div></div><!----><!--]--></div><!----></div><script>window.__INITIAL_STATE__={"adblock":{"hasAcceptableAdsFilter":false,"hasAdblock":false},"articlesList":{"articlesList":{"588474":{"id":"588474","timePublished":"2021-11-11T10:18:22+00:00","isCorporative":false,"lang":"ru","titleHtml":"Разработка телеграм-бота на Kotlin + Spring Boot","leadData":{"textHtml":"\u003Cp\u003EПривет, читателям Хабра!\u003C\u002Fp\u003E\u003Cbr\u003E\r\n\u003Cp\u003EВ этой статье я расскажу о том, как быстро и легко разработать свой собственный телеграм-бот на языке Kotlin с использованием Spring Boot. \u003C\u002Fp\u003E\u003Cbr\u003E\r\n\u003Cp\u003EОсновная задумка заключается в том, чтобы архитектура Бота была абстрагирована от бизнес процессов. То есть акцент должен быть задействован именно на написании кода, который нужен только реализации будущих бизнес задач.\u003C\u002Fp\u003E\u003Cbr\u003E\r\n\u003Ch3 id=\"tehnologii\"\u003EТехнологии\u003C\u002Fh3\u003E\u003Cbr\u003E\r\n\u003Cp\u003EМой выбор пал на следующий стек технологий:\u003C\u002Fp\u003E\u003Cbr\u003E\r\n\u003Cul\u003E\r\n\u003Cli\u003EKotlin\u003C\u002Fli\u003E\r\n\u003Cli\u003ESpring Boot 2.5+\u003C\u002Fli\u003E\r\n\u003Cli\u003EJOOQ\u003C\u002Fli\u003E\r\n\u003Cli\u003EFreemarker\u003C\u002Fli\u003E\r\n\u003Cli\u003EPostgreSQL\u003C\u002Fli\u003E\r\n\u003Cli\u003Eorg.telegram.telegrambots\u003C\u002Fli\u003E\r\n\u003C\u002Ful\u003E\u003Cbr\u003E\r\n\u003Ch3\u003EОбоснования выбора технологий\u003C\u002Fh3\u003E\u003Cbr\u003E\r\n\u003Cp\u003E\u003Cb\u003ESpring Boot\u003C\u002Fb\u003E и весь Spring Framework в JVM мире стал неотъемлемой частью создания больших и сложных энтерпрайз систем. Пал выбор именно на него, так как порой хочется сделать не просто бота, а полноценное приложение, которым будет удобно пользоваться и удобно масштабировать.\u003C\u002Fp\u003E\u003Cbr\u003E\r\n\u003Cp\u003E\u003Cb\u003EKotlin\u003C\u002Fb\u003E считается неким витком развития в мире JVM, он проще JAVA и очень хорошо интегрирован в Spring Framework\u003Cbr\u003E\r\n\u003Cb\u003EJOOQ\u003C\u002Fb\u003E — механизм, который помогает на DSL подобном языке формировать sql запросы.\u003Cbr\u003E\r\n\u003Cb\u003EFreemarker\u003C\u002Fb\u003E — шаблонизатор, необходим для формирования динамичных текстовок\u003Cbr\u003E\r\n\u003Cb\u003EPostgreSQL\u003C\u002Fb\u003E — СУБД. Тут субъективный выбор. Считаю его лучшим из бесплатных инструментов.\u003Cbr\u003E\r\n\u003Cb\u003Eorg.telegram.telegrambots\u003C\u002Fb\u003E — набор библиотек для Telegram Api\u003C\u002Fp\u003E","imageUrl":null,"buttonTextHtml":"Читать дальше &rarr;","image":null},"editorVersion":"1.0","postType":"article","postLabels":[],"author":{"id":"691183","alias":"minpor","fullname":"Даниил","avatarUrl":"\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Favatars\u002F9d7\u002F1e4\u002F0ff\u002F9d71e40ff3b6757e17de780717837fd4.jpg","speciality":"Разработчик ПО","scoreStats":{"score":11,"votesCount":11},"rating":0,"relatedData":null,"contacts":[],"authorContacts":[],"paymentDetails":{"paymentYandexMoney":null,"paymentPayPalMe":null,"paymentWebmoney":null},"donationsMethod":null,"isInBlacklist":null,"careerProfile":null},"statistics":{"commentsCount":16,"favoritesCount":57,"readingCount":14887,"score":3,"votesCount":3,"votesCountPlus":2,"votesCountMinus":1},"hubs":[{"id":"19441","alias":"kotlin","type":"collective","title":"Kotlin","titleHtml":"Kotlin","isProfiled":true,"relatedData":null},{"id":"359","alias":"programming","type":"collective","title":"Программирование","titleHtml":"Программирование","isProfiled":true,"relatedData":null}],"flows":[{"id":"1","alias":"develop","title":"Разработка","titleHtml":"Разработка"}],"relatedData":{"vote":null,"unreadCommentsCount":0,"bookmarked":false,"canComment":false,"canEdit":false,"canViewVotes":false,"votePlus":{"canVote":false,"isChargeEnough":false,"isKarmaEnough":false,"isVotingOver":true,"isPublicationLimitEnough":false},"voteMinus":{"canVote":false,"isChargeEnough":false,"isKarmaEnough":false,"isVotingOver":true,"isPublicationLimitEnough":false},"canModerateComments":false,"trackerSubscribed":false,"emailSubscribed":false},"textHtml":"\u003Cdiv xmlns=\"http:\u002F\u002Fwww.w3.org\u002F1999\u002Fxhtml\"\u003E\u003Cp\u003EПривет, читателям Хабра!\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\n\u003Cp\u003EВ этой статье я расскажу о том, как быстро и легко разработать свой собственный телеграм-бот на языке Kotlin с использованием Spring Boot. \u003C\u002Fp\u003E\u003Cbr\u002F\u003E\n\u003Cp\u003EОсновная задумка заключается в том, чтобы архитектура Бота была абстрагирована от бизнес процессов. То есть акцент должен быть задействован именно на написании кода, который нужен только реализации будущих бизнес задач.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\n\u003Ch3 id=\"tehnologii\"\u003EТехнологии\u003C\u002Fh3\u003E\u003Cbr\u002F\u003E\n\u003Cp\u003EМой выбор пал на следующий стек технологий:\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\n\u003Cul\u003E\n\u003Cli\u003EKotlin\u003C\u002Fli\u003E\n\u003Cli\u003ESpring Boot 2.5+\u003C\u002Fli\u003E\n\u003Cli\u003EJOOQ\u003C\u002Fli\u003E\n\u003Cli\u003EFreemarker\u003C\u002Fli\u003E\n\u003Cli\u003EPostgreSQL\u003C\u002Fli\u003E\n\u003Cli\u003Eorg.telegram.telegrambots\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\u003Cbr\u002F\u003E\n\u003Ch3\u003EОбоснования выбора технологий\u003C\u002Fh3\u003E\u003Cbr\u002F\u003E\n\u003Cp\u003E\u003Cb\u003ESpring Boot\u003C\u002Fb\u003E и весь Spring Framework в JVM мире стал неотъемлемой частью создания больших и сложных энтерпрайз систем. Пал выбор именно на него, так как порой хочется сделать не просто бота, а полноценное приложение, которым будет удобно пользоваться и удобно масштабировать.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\n\u003Cp\u003E\u003Cb\u003EKotlin\u003C\u002Fb\u003E считается неким витком развития в мире JVM, он проще JAVA и очень хорошо интегрирован в Spring Framework\u003Cbr\u002F\u003E\n\u003Cb\u003EJOOQ\u003C\u002Fb\u003E — механизм, который помогает на DSL подобном языке формировать sql запросы.\u003Cbr\u002F\u003E\n\u003Cb\u003EFreemarker\u003C\u002Fb\u003E — шаблонизатор, необходим для формирования динамичных текстовок\u003Cbr\u002F\u003E\n\u003Cb\u003EPostgreSQL\u003C\u002Fb\u003E — СУБД. Тут субъективный выбор. Считаю его лучшим из бесплатных инструментов.\u003Cbr\u002F\u003E\n\u003Cb\u003Eorg.telegram.telegrambots\u003C\u002Fb\u003E — набор библиотек для Telegram Api\u003C\u002Fp\u003E\u003Ca name=\"habracut\"\u003E\u003C\u002Fa\u003E\u003Cbr\u002F\u003E\n\u003Ch3\u003EИсточники\u003C\u002Fh3\u003E\u003Cbr\u002F\u003E\n\u003Cp\u003EСам код лежит в \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fminpor\u002Ftelegram-bot-kotlin-template\" rel=\"nofollow noopener noreferrer\"\u003Eгитхабе\u003C\u002Fa\u003E.\u003Cbr\u002F\u003E\nКак создать нового бота и описание api можно найти \u003Ca href=\"https:\u002F\u002Ftlgrm.ru\u002Fdocs\u002Fbots\" rel=\"nofollow noopener noreferrer\"\u003Eтут\u003C\u002Fa\u003E\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\n\u003Ch3\u003EРуководство\u003C\u002Fh3\u003E\u003Cbr\u002F\u003E\n\u003Cp\u003EКак и в любое приложении в JVM мире, начнем работу с описании зависимостей.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\n\u003Cdiv class=\"spoiler\" role=\"button\" tabindex=\"0\"\u003E\n                        \u003Cb class=\"spoiler_title\"\u003Ebuild.gradle.kts\u003C\u002Fb\u003E\n                        \u003Cdiv class=\"spoiler_text\"\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Eimport org.jetbrains.kotlin.gradle.tasks.KotlinCompile\nimport nu.studer.gradle.jooq.JooqEdition\nimport nu.studer.gradle.jooq.JooqGenerate\n\nval postgresVersion = \"42.3.1\"\nval telegramBotVersion = \"5.3.0\"\n\n\u002F\u002F Список необходимых плагинов\nplugins {\n    id(\"nu.studer.jooq\") version(\"6.0.1\")\n    id(\"org.flywaydb.flyway\") version(\"7.7.0\")\n    id(\"org.springframework.boot\") version \"2.5.6\"\n    id(\"io.spring.dependency-management\") version \"1.0.11.RELEASE\"\n    kotlin(\"jvm\") version \"1.5.31\"\n    kotlin(\"plugin.spring\") version \"1.5.31\"\n}\n\ngroup = \"ru.template.telegram.bot.kotlin\"\nversion = \"0.0.1-SNAPSHOT\"\njava.sourceCompatibility = JavaVersion.VERSION_11\n\nrepositories {\n    mavenCentral()\n}\n\n\u002F\u002F механизм, который поможет сгенерить метаданные\nconfigurations {\n    compileOnly {\n        extendsFrom(configurations.annotationProcessor.get())\n    }\n}\n\ntasks.clean {\n    delete(\"src\u002Fmain\u002Fjava\")\n}\n\nextra[\"springCloudVersion\"] = \"2020.0.4\"\n\nval flywayMigration = configurations.create(\"flywayMigration\")\n\n\u002F\u002F Надстройка для миграции данных в СУБД\nflyway {\n    validateOnMigrate = false\n    configurations = arrayOf(\"flywayMigration\")\n    url = \"jdbc:postgresql:\u002F\u002Flocalhost:5432\u002Fkotlin_template\"\n    user = \"postgres\"\n    password = \"postgres\"\n}\n\n\u002F\u002F список зависимстей\ndependencies {\n    flywayMigration(\"org.postgresql:postgresql:$postgresVersion\")\n    jooqGenerator(\"org.postgresql:postgresql:$postgresVersion\")\n    runtimeOnly(\"org.postgresql:postgresql\")\n\n   \u002F\u002FКлассические стартеры spring boot\n    implementation(\"org.springframework.boot:spring-boot-starter\")\n    implementation(\"org.springframework.boot:spring-boot-starter-jooq\")\n    implementation(\"org.springframework.boot:spring-boot-starter-freemarker\")\n    implementation(\"org.springframework.boot:spring-boot-starter-web\")\n\n    implementation(\"org.telegram:telegrambots:$telegramBotVersion\")\n    implementation(\"org.telegram:telegrambotsextensions:$telegramBotVersion\")\n    implementation(\"org.telegram:telegrambots-spring-boot-starter:$telegramBotVersion\")\n\n    \u002F\u002F зависимости, которые помогут сгенерить метаданные\n    compileOnly(\"org.springframework.boot:spring-boot-configuration-processor\")\n    annotationProcessor(\"org.springframework.boot:spring-boot-configuration-processor\")\n\n    implementation(\"org.jetbrains.kotlin:kotlin-reflect\")\n    implementation(\"org.jetbrains.kotlin:kotlin-stdlib-jdk8\")\n    testImplementation(\"org.springframework.boot:spring-boot-starter-test\")\n}\n\ndependencyManagement {\n    imports {\n        mavenBom(\"org.springframework.cloud:spring-cloud-dependencies:${property(\"springCloudVersion\")}\")\n    }\n}\n\ntasks.withType&lt;KotlinCompile&gt; {\n    kotlinOptions {\n        freeCompilerArgs = listOf(\"-Xjsr305=strict\")\n        jvmTarget = \"11\"\n    }\n}\n\ntasks.withType&lt;Test&gt; {\n    useJUnitPlatform()\n}\n\n\u002F\u002F Настройка для JOOQ, в которой описано правило формирования POJO классов для формирования запросов при помощи DSL кода\njooq {\n    edition.set(JooqEdition.OSS)\n\n    configurations {\n        create(\"main\") {\n            jooqConfiguration.apply {\n                jdbc.apply {\n                    driver = \"org.postgresql.Driver\"\n                    url = flyway.url\n                    user = flyway.user\n                    password = flyway.password\n                }\n                generator.apply {\n                    name = \"org.jooq.codegen.DefaultGenerator\"\n                    generate.apply {\n                        isDeprecated = false\n                        isRecords = true\n                        isImmutablePojos = false\n                        isFluentSetters = false\n                        isJavaBeansGettersAndSetters = false\n                        isSerializablePojos = true\n                        isVarargSetters = false\n                        isPojos = true\n                        isNonnullAnnotation = true\n                        isUdts = false\n                        isRoutines = false\n                        isIndexes = false\n                        isRelations = true\n                        isPojosEqualsAndHashCode = true\n                    }\n                    database.apply {\n                        name = \"org.jooq.meta.postgres.PostgresDatabase\"\n                        inputSchema = \"public\"\n                        excludes = \"flyway_schema_history\"\n                    }\n                    target.apply {\n                        \u002F\u002F Пакет куда отрпавляются сгенерированные классы\n                        packageName = \"ru.template.telegram.bot.kotlin.template.domain\"\n                        directory = \"src\u002Fmain\u002Fjava\"\n                    }\n                    strategy.name = \"org.jooq.codegen.DefaultGeneratorStrategy\"\n                }\n            }\n        }\n    }\n\n    \u002F\u002F таска для генерации JOOQ классов\n    tasks.named&lt;JooqGenerate&gt;(\"generateJooq\").configure {\n        inputs.files(fileTree(\"src\u002Fmain\u002Fresources\u002Fdb\u002Fmigration\"))\n            .withPropertyName(\"migrations\")\n            .withPathSensitivity(PathSensitivity.RELATIVE)\n        allInputsDeclared.set(true)\n        outputs.upToDateWhen { false }\n    }\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003C\u002Fdiv\u003E\n                    \u003C\u002Fdiv\u003E\u003Cbr\u002F\u003E\n\u003Cp\u003EКак мы видим из описания кода выше, мы собираем зависимости при помощи Gradle. Не будем подробно останавливаться на теме: как правильно написать gradle-файл. В интернете много примеров. Сейчас нам не так это важно.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\n\u003Cp\u003EСледующим этапом — создание главного класса, который будет запускать нашего бота.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\n\u003Cdiv class=\"spoiler\" role=\"button\" tabindex=\"0\"\u003E\n                        \u003Cb class=\"spoiler_title\"\u003EApplication.kt\u003C\u002Fb\u003E\n                        \u003Cdiv class=\"spoiler_text\"\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Epackage ru.template.telegram.bot.kotlin.template\n\nimport org.springframework.boot.autoconfigure.SpringBootApplication\nimport org.springframework.boot.runApplication\n\n\u002F\u002F Все Spring Boot приложения начинаются с аннотации @SpringBootApplication\n@SpringBootApplication\nclass Application\n\nfun main(args: Array&lt;String&gt;) {\n    runApplication&lt;Application&gt;(*args)\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003C\u002Fdiv\u003E\n                    \u003C\u002Fdiv\u003E\u003Cbr\u002F\u003E\n\u003Cp\u003EДля примера, весь наш код описан в пакете ru.template.telegram.bot.kotlin.template. Там будут лежать и прочие компоненты нашей архитектуры.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\n\u003Cp\u003EСоздадим пакеты:\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\n\u003Cul\u003E\n\u003Cli\u003Eapi — Классы, которые относятся к непосредственному взаимодействию с Телеграм API (отправка и получение данных)\u003C\u002Fli\u003E\n\u003Cli\u003Ecommand — Список команд телеграм бота\u003C\u002Fli\u003E\n\u003Cli\u003Ecomponent — Прочие бины.\u003C\u002Fli\u003E\n\u003Cli\u003Econfig — Конфигурация приложения\u003C\u002Fli\u003E\n\u003Cli\u003Edto — DTO классы\u003C\u002Fli\u003E\n\u003Cli\u003Eenums — Енумы\u003C\u002Fli\u003E\n\u003Cli\u003Eevent — Список классов для формирования ивентов\u003Ca href=\"https:\u002F\u002Fwww.baeldung.com\u002Fspring-events\" rel=\"nofollow noopener noreferrer\"\u003E Application Publisher\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003Elistener — Приём событий Application Publisher\u003C\u002Fli\u003E\n\u003Cli\u003Eproperties — Классы настроек приложения. Сами настройки лежат в ресурсах приложения (appication.yml)\u003C\u002Fli\u003E\n\u003Cli\u003Erepository — Слой взаимодействия с СУБД\u003C\u002Fli\u003E\n\u003Cli\u003Eservice — Сервисы приложения\u003C\u002Fli\u003E\n\u003Cli\u003Estrategy — Стратегии. Это те компоненты, которые нужно менять, добавлять и удалять по ходу изменения бизнес процессов\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\u003Cbr\u002F\u003E\n\u003Ch4 id=\"nachalo-formirovanie-arhitektury-s-nebolshim-primerom\"\u003EНачало формирование архитектуры с небольшим примером\u003C\u002Fh4\u003E\u003Cbr\u002F\u003E\n\u003Cp\u003EНам необходимо создать такой компонент, который бы принимал наши сообщения от Бота и начинал их обрабатывать.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\n\u003Cp\u003EСоздадим файл application.yml\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode class=\"plaintext\"\u003E# Настройка для телеграм апи\nbot:\n  username: kotlin_template_bot\n  token: [your bot token here]\n# Настройка для СУБД\nspring:\n  datasource:\n    url: jdbc:postgresql:\u002F\u002Flocalhost:5432\u002Fkotlin_template\n    username: postgres\n    password: postgres\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\n\u003Cp\u003EПосле чего опишем нашего бота в виде класса\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\n\u003Cdiv class=\"spoiler\" role=\"button\" tabindex=\"0\"\u003E\n                        \u003Cb class=\"spoiler_title\"\u003EBotProperty.kt\u003C\u002Fb\u003E\n                        \u003Cdiv class=\"spoiler_text\"\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Epackage ru.template.telegram.bot.kotlin.template.properties\n\nimport org.springframework.boot.context.properties.ConfigurationProperties\nimport org.springframework.stereotype.Component\n\n@Component\n@ConfigurationProperties(prefix = \"bot\")\n\u002F\u002F Всё, что есть в application.yml можно описать в виде класса. Делается в первую очередь для удобства\ndata class BotProperty(\n    var username: String = \"\",\n    var token: String = \"\"\n)\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003C\u002Fdiv\u003E\n                    \u003C\u002Fdiv\u003E\u003Cbr\u002F\u003E\n\u003Cp\u003EВ примере представлены несколько команд бота. Они описаны в виде енумов\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\n\u003Cdiv class=\"spoiler\" role=\"button\" tabindex=\"0\"\u003E\n                        \u003Cb class=\"spoiler_title\"\u003ECommandCode.kt\u003C\u002Fb\u003E\n                        \u003Cdiv class=\"spoiler_text\"\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Epackage ru.template.telegram.bot.kotlin.template.enums\n\n\u002F\u002F Енум состоит из самой команды, команды бота в телеграме и ее словесное описание\nenum class CommandCode(val command: String, val desc: String) {\n    START(\"start\", \"Start work\"),\n    USER_INFO(\"user_info\", \"user info\"),\n    BUTTON(\"button\", \"button yes no\")\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003C\u002Fdiv\u003E\n                    \u003C\u002Fdiv\u003E\u003Cbr\u002F\u003E\n\u003Cp\u003EДля примера реализуем несколько команд: Начало работы (приветствие), информация о пользователе ( на этом этапе просто обновим данные в базе случайным текстом) и сообщение с кнопками (здесь нажмём на кнопку из предложенных)\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\n\u003Cp\u003EДля простоты у нас будет 1 таблица \u003Cstrong\u003Eusers\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\n\u003Cp\u003EСоздадим миграцию в resources\u002Fdb\u002Fmigration\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\n\u003Cdiv class=\"spoiler\" role=\"button\" tabindex=\"0\"\u003E\n                        \u003Cb class=\"spoiler_title\"\u003EV1__init.sql\u003C\u002Fb\u003E\n                        \u003Cdiv class=\"spoiler_text\"\u003E\u003Cpre\u003E\u003Ccode class=\"sql\"\u003Ecreate table users\n(\n    id        int8 primary key not null,\n    step_code varchar(100), -- код этапа\n    text      varchar(100), -- произвольный текст\n    accept    varchar(3) -- данные из кнопок\n);\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003C\u002Fdiv\u003E\n                    \u003C\u002Fdiv\u003E\u003Cbr\u002F\u003E\n\u003Cp\u003EТеперь необходимо подготовить \u003Cstrong\u003EUsersRepository\u003C\u002Fstrong\u003E в котором будут реализованы все методы, которые понадобятся нам в работе.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\n\u003Cdiv class=\"spoiler\" role=\"button\" tabindex=\"0\"\u003E\n                        \u003Cb class=\"spoiler_title\"\u003EUsersRepository.kt\u003C\u002Fb\u003E\n                        \u003Cdiv class=\"spoiler_text\"\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Epackage ru.template.telegram.bot.kotlin.template.repository\n\nimport org.jooq.DSLContext\nimport org.springframework.stereotype.Repository\nimport ru.template.telegram.bot.kotlin.template.domain.Tables\nimport ru.template.telegram.bot.kotlin.template.domain.tables.pojos.Users\nimport ru.template.telegram.bot.kotlin.template.enums.StepCode\n\n@Repository\nclass UsersRepository(private val dslContext: DSLContext) {\n\n    private val users = Tables.USERS\n\n    \u002F\u002F Проверка на существование пользователя в базе. Нужно 1 раз для команды \u002Fstart\n    fun isUserExist(chatId: Long): Boolean {\n        return dslContext.selectCount().from(users).where(users.ID.eq(chatId)).fetchOneInto(Int::class.java) == 1\n    }\n\n   \u002F\u002F Созадние пользователя для команды \u002Fstart\n    fun createUser(chatId: Long): Users {\n        val record = dslContext.newRecord(users, Users().apply {\n            id = chatId\n            stepCode = StepCode.START.toString()\n        })\n        record.store()\n        return record.into(Users::class.java)\n    }\n\n    \u002F\u002F получить информацию о пользователе\n    fun getUser(chatId: Long) =\n        dslContext.selectFrom(users).where(users.ID.eq(chatId)).fetchOneInto(Users::class.java)\n\n    \u002F\u002F Обновление этапа в боте\n    fun updateUserStep(chatId: Long, stepCode: StepCode): Users =\n        dslContext.update(users)\n            .set(users.STEP_CODE, stepCode.toString())\n            .where(users.ID.eq(chatId)).returning().fetchOne()!!.into(Users::class.java)\n\n    \u002F\u002F Обновление текста. Этот метод срабатывает у команды \u002Fuser_info\n    fun updateText(chatId: Long, text: String) {\n        dslContext.update(users)\n            .set(users.TEXT, text)\n            .where(users.ID.eq(chatId)).execute()\n    }\n\n    \u002F\u002F Обновление данных пришедшие от кнопок в команде \u002Fbutton\n    fun updateAccept(chatId: Long, accept: String) {\n        dslContext.update(users)\n            .set(users.ACCEPT, accept)\n            .where(users.ID.eq(chatId)).execute()\n    }\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003C\u002Fdiv\u003E\n                    \u003C\u002Fdiv\u003E\u003Cbr\u002F\u003E\n\u003Cp\u003EЗдесь уже можно и нужно сформировать POJO объекты при помощи таски gradle \u003Cem\u003EflywayMigrate\u003C\u002Fem\u003E \u003Cem\u003EgenerateJooq\u003C\u002Fem\u003E\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\n\u003Cp\u003EСоздать новую команду тоже для нас не проблема. В данной статье опишем только одну команду, всё остальное есть в исходниках. Делается по аналогии\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\n\u003Cdiv class=\"spoiler\" role=\"button\" tabindex=\"0\"\u003E\n                        \u003Cb class=\"spoiler_title\"\u003EStartCommand.kt\u003C\u002Fb\u003E\n                        \u003Cdiv class=\"spoiler_text\"\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Epackage ru.template.telegram.bot.kotlin.template.command\n\nimport org.springframework.context.ApplicationEventPublisher\nimport org.springframework.stereotype.Component\nimport org.telegram.telegrambots.extensions.bots.commandbot.commands.BotCommand\nimport org.telegram.telegrambots.meta.api.objects.Chat\nimport org.telegram.telegrambots.meta.api.objects.User\nimport org.telegram.telegrambots.meta.bots.AbsSender\nimport ru.template.telegram.bot.kotlin.template.enums.CommandCode\nimport ru.template.telegram.bot.kotlin.template.enums.StepCode\nimport ru.template.telegram.bot.kotlin.template.event.TelegramStepMessageEvent\nimport ru.template.telegram.bot.kotlin.template.repository.UsersRepository\n\n@Component\nclass StartCommand(\n    private val usersRepository: UsersRepository,\n    private val applicationEventPublisher: ApplicationEventPublisher \u002F\u002F Интерфейс который отправляет событие \n) : BotCommand(CommandCode.START.command, CommandCode.START.desc) {\n\n    companion object {\n        private val START_CODE = StepCode.START\n    }\n\n    override fun execute(absSender: AbsSender, user: User, chat: Chat, arguments: Array&lt;out String&gt;) {\n        val chatId = chat.id \u002F\u002F chatId передает телеграм\n\n       \u002F\u002F если пользователя в базе не существует, то создаём его, иначе обновляешь этап\n        if (usersRepository.isUserExist(chatId)) {\n            usersRepository.updateUserStep(chatId, START_CODE)\n        } else usersRepository.createUser(chatId)\n\n        applicationEventPublisher.publishEvent(\n            TelegramStepMessageEvent(chatId = chatId, stepCode = START_CODE)\n        )\n    }\n\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003C\u002Fdiv\u003E\n                    \u003C\u002Fdiv\u003E\u003Cbr\u002F\u003E\n\u003Cp\u003EКак мы видим из кода, начинаем формировать событие \u003Cem\u003ETelegramStepMessageEvent\u003C\u002Fem\u003E.\u003Cbr\u002F\u003E\n\u003Cstrong\u003EBotCommand\u003C\u002Fstrong\u003E — это интерфейс описания команд телеграм АПИ\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\n\u003Cp\u003EКласс TelegramStepMessageEvent лежит в пакете event\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\n\u003Cdiv class=\"spoiler\" role=\"button\" tabindex=\"0\"\u003E\n                        \u003Cb class=\"spoiler_title\"\u003ETelegramStepMessageEvent.kt\u003C\u002Fb\u003E\n                        \u003Cdiv class=\"spoiler_text\"\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Epackage ru.template.telegram.bot.kotlin.template.event\n\nimport ru.template.telegram.bot.kotlin.template.enums.StepCode\n\nclass TelegramStepMessageEvent(\n    \u002F\u002F chatId из бота\n    val chatId: Long,\n    \u002F\u002F Этап или шаг в боте (стартовый, выбор кнопки, сообщение пришедшее после кнопки и тд и тп). Не путать с командами, так как в команде может быть несколько этапов\n    val stepCode: StepCode\n)\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003C\u002Fdiv\u003E\n                    \u003C\u002Fdiv\u003E\u003Cbr\u002F\u003E\n\u003Cp\u003EStepCode — enum, который носит информацию о типе сообщения, о шаге и прочую системную информацию\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\n\u003Cdiv class=\"spoiler\" role=\"button\" tabindex=\"0\"\u003E\n                        \u003Cb class=\"spoiler_title\"\u003EStepCode.kt\u003C\u002Fb\u003E\n                        \u003Cdiv class=\"spoiler_text\"\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Epackage ru.template.telegram.bot.kotlin.template.enums\n\n\u002F\u002F Тип (Простой текст или текст с кнопками) и botPause - остановить переход на новый этап для принятия решения пользователем\nenum class StepCode(val type: StepType, val botPause: Boolean) {\n    START(StepType.SIMPLE_TEXT, false),\n    USER_INFO(StepType.SIMPLE_TEXT, true),\n    BUTTON_REQUEST(StepType.INLINE_KEYBOARD_MARKUP, true),\n    BUTTON_RESPONSE(StepType.SIMPLE_TEXT, true)\n}\n\nenum class StepType {\n    \u002F\u002F Простое сообщение\n    SIMPLE_TEXT,\n    \u002F\u002F Сообщение с кнопкой\n    INLINE_KEYBOARD_MARKUP\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003C\u002Fdiv\u003E\n                    \u003C\u002Fdiv\u003E\u003Cbr\u002F\u003E\n\u003Cp\u003EОстановимся немного на енуме \u003Cstrong\u003EStepCode\u003C\u002Fstrong\u003E и \u003Cstrong\u003EStepType\u003C\u002Fstrong\u003E. Когда мы выбираем ту или иную команду формируется сообщение, которое отправляется пользователю. Иногда нужно отправить несколько сообщений подряд. Например \u003Cem\u003ESTART\u003C\u002Fem\u003E и затем \u003Cem\u003EUSER_INFO\u003C\u002Fem\u003E. botPause нужен в первую очередь, чтобы проинформировать пользователя о необходимости принятия решений. Некоторые сообщения приходят с кнопками. Для этого и нужен енум \u003Cstrong\u003EStepType\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\n\u003Cp\u003EНепосредственная реализация приёма сообщений будет представлена в компоненте \u003Cstrong\u003EApplicationListener\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\n\u003Cdiv class=\"spoiler\" role=\"button\" tabindex=\"0\"\u003E\n                        \u003Cb class=\"spoiler_title\"\u003EApplicationListener.kt\u003C\u002Fb\u003E\n                        \u003Cdiv class=\"spoiler_text\"\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Epackage ru.template.telegram.bot.kotlin.template.listener\n\nimport org.springframework.context.annotation.Bean\nimport org.springframework.context.annotation.Lazy\nimport org.springframework.context.event.EventListener\nimport org.springframework.stereotype.Component\nimport ru.template.telegram.bot.kotlin.template.enums.ExecuteStatus\nimport ru.template.telegram.bot.kotlin.template.event.TelegramReceivedCallbackEvent\nimport ru.template.telegram.bot.kotlin.template.event.TelegramReceivedMessageEvent\nimport ru.template.telegram.bot.kotlin.template.event.TelegramStepMessageEvent\nimport ru.template.telegram.bot.kotlin.template.repository.UsersRepository\nimport ru.template.telegram.bot.kotlin.template.service.MessageService\nimport ru.template.telegram.bot.kotlin.template.strategy.LogicContext\nimport ru.template.telegram.bot.kotlin.template.strategy.NextStepContext\n\n@Component\nclass ApplicationListener(\n    private val logicContext: LogicContext, \u002F\u002F Основная бизнес логика\n    private val nextStepContext: NextStepContext, \u002F\u002F Выбор следующего этапа\n    private val usersRepository: UsersRepository, \u002F\u002F Слой СУБД\n    private val messageService: MessageService \u002F\u002F Сервис, который формирует объект для отрпавки сообщения в бота\n) {\n\n    \u002F\u002F Слушаем событие TelegramReceivedMessageEvent\n    inner class Message {\n        @EventListener\n        fun onApplicationEvent(event: TelegramReceivedMessageEvent) {\n            logicContext.execute(chatId = event.chatId, message = event.message)\n            val nextStepCode = nextStepContext.next(event.chatId, event.stepCode)\n            if (nextStepCode != null) {\n                stepMessageBean().onApplicationEvent(\n                    TelegramStepMessageEvent(\n                        chatId = event.chatId,\n                        stepCode = nextStepCode\n                    )\n                )\n            }\n        }\n    }\n\n    \u002F\u002F Слушаем событие TelegramStepMessageEvent\n    inner class StepMessage {\n        @EventListener\n        fun onApplicationEvent(event: TelegramStepMessageEvent) {\n            \u002F\u002F Обновляем шаг\n            usersRepository.updateUserStep(event.chatId, event.stepCode)\n            \u002F\u002F Отправляем сообщение в бота (и формируем)\n            messageService.sendMessageToBot(event.chatId, event.stepCode)\n        }\n    }\n\n    \u002F\u002F Слшуаем событие TelegramReceivedCallbackEvent\n    inner class CallbackMessage {\n        @EventListener\n        fun onApplicationEvent(event: TelegramReceivedCallbackEvent) {\n            val nextStepCode = when (logicContext.execute(event.chatId, event.callback)) {\n                ExecuteStatus.FINAL -&gt; { \u002F\u002F Если бизнес процесс одобрил переход на новый этап\n                    nextStepContext.next(event.chatId, event.stepCode)\n                }\n                ExecuteStatus.NOTHING -&gt; throw IllegalStateException(\"Не поддерживается\")\n            }\n            if (nextStepCode != null) {\n                \u002F\u002F редирект на событие TelegramStepMessageEvent\n                stepMessageBean().onApplicationEvent(\n                    TelegramStepMessageEvent(\n                        chatId = event.chatId,\n                        stepCode = nextStepCode\n                    )\n                )\n            }\n        }\n    }\n\n    @Bean\n    @Lazy\n    \u002F\u002F Бин поступления сообщения от пользователя\n    fun messageBean(): Message = Message()\n\n    @Bean\n    @Lazy\n    \u002F\u002F Бин отправки сообщения ботом\n    fun stepMessageBean(): StepMessage = StepMessage()\n\n    @Bean\n    @Lazy\n    \u002F\u002F Бин, который срабатывает в момент клика по кнопке\n    fun callbackMessageBean(): CallbackMessage = CallbackMessage()\n\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003C\u002Fdiv\u003E\n                    \u003C\u002Fdiv\u003E\u003Cbr\u002F\u003E\n\u003Cp\u003EMessageService — сервис, который формирует объект Телеграм АПИ сообщения и делает запрос на отправку в бота\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\n\u003Cdiv class=\"spoiler\" role=\"button\" tabindex=\"0\"\u003E\n                        \u003Cb class=\"spoiler_title\"\u003EMessageService.kt\u003C\u002Fb\u003E\n                        \u003Cdiv class=\"spoiler_text\"\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Epackage ru.template.telegram.bot.kotlin.template.service\n\nimport org.springframework.context.ApplicationEventPublisher\nimport org.springframework.stereotype.Service\nimport org.telegram.telegrambots.meta.api.methods.BotApiMethod\nimport org.telegram.telegrambots.meta.api.methods.ParseMode\nimport org.telegram.telegrambots.meta.api.methods.send.SendMessage\nimport org.telegram.telegrambots.meta.api.objects.Message\nimport org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup\nimport org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardRemove\nimport org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton\nimport ru.template.telegram.bot.kotlin.template.api.TelegramSender\nimport ru.template.telegram.bot.kotlin.template.dto.MarkupDataDto\nimport ru.template.telegram.bot.kotlin.template.dto.markup.DataModel\nimport ru.template.telegram.bot.kotlin.template.enums.StepCode\nimport ru.template.telegram.bot.kotlin.template.enums.StepType.*\nimport ru.template.telegram.bot.kotlin.template.event.TelegramStepMessageEvent\nimport ru.template.telegram.bot.kotlin.template.strategy.MarkupContext\nimport ru.template.telegram.bot.kotlin.template.strategy.MessageContext\nimport ru.template.telegram.bot.kotlin.template.strategy.NextStepContext\n\n@Service\nclass MessageService(\n    private val telegramSender: TelegramSender, \u002F\u002F отправщик сообщения\n    private val messageContext: MessageContext, \u002F\u002F Формирование текстовок сообщения\n    private val applicationEventPublisher: ApplicationEventPublisher,\n    private val markupContext: MarkupContext&lt;DataModel&gt;, \u002F\u002F Формирование текстовок с кнопками\n    private val nextStepContext: NextStepContext \u002F\u002F Выбор следующего этапа\n) {\n\n    fun sendMessageToBot(\n        chatId: Long,\n        stepCode: StepCode\n    ) {\n        when (stepCode.type) {\n            \u002F\u002F Простое сообщение\n            SIMPLE_TEXT -&gt; telegramSender.execute(simpleTextMessage(chatId))\n            \u002F\u002F Сообщение с кнопками\n            INLINE_KEYBOARD_MARKUP -&gt; telegramSender.sendInlineKeyboardMarkup(chatId)\n        }\n\n        if (!stepCode.botPause) { \u002F\u002F если нет паузы, то формируем следующее сообщение\n            applicationEventPublisher.publishEvent(\n                TelegramStepMessageEvent(\n                    chatId = chatId,\n                    stepCode = nextStepContext.next(chatId, stepCode)!!\n                )\n            )\n        }\n    }\n\n    \u002F\u002F SendMessage - объект телеграм АПИ для отправки сообщения\n    private fun simpleTextMessage(chatId: Long): SendMessage {\n        val sendMessage = SendMessage()\n        sendMessage.chatId = chatId.toString()\n        sendMessage.text = messageContext.getMessage(chatId)\n        sendMessage.enableHtml(true)\n\n        return sendMessage\n    }\n\n    \u002F\u002F Отправляем в бота сообщение с кнопками\n    private fun TelegramSender.sendInlineKeyboardMarkup(chatId: Long) {\n        val inlineKeyboardMarkup: InlineKeyboardMarkup\n        val messageText: String\n\n        val inlineKeyboardMarkupDto = markupContext.getInlineKeyboardMarkupDto(chatId)!!\n        messageText = inlineKeyboardMarkupDto.message\n        inlineKeyboardMarkup = inlineKeyboardMarkupDto.inlineButtons.getInlineKeyboardMarkup()\n\n        this.execute(sendMessageWithMarkup(chatId, messageText, inlineKeyboardMarkup))\n    }\n\n    private fun sendMessageWithMarkup(\n        chatId: Long, messageText: String, inlineKeyboardMarkup: InlineKeyboardMarkup\n    ): BotApiMethod&lt;Message&gt; {\n        val sendMessage = SendMessage()\n        sendMessage.chatId = chatId.toString()\n        sendMessage.text = messageText\n\n        sendMessage.replyMarkup = inlineKeyboardMarkup\n        sendMessage.parseMode = ParseMode.HTML\n        return sendMessage\n    }\n\n    \u002F\u002F Формируем модель кнопок\n    private fun List&lt;MarkupDataDto&gt;.getInlineKeyboardMarkup(): InlineKeyboardMarkup {\n        val inlineKeyboardMarkup = InlineKeyboardMarkup()\n        val inlineKeyboardButtonsInner: MutableList&lt;InlineKeyboardButton&gt; = mutableListOf()\n        val inlineKeyboardButtons: MutableList&lt;MutableList&lt;InlineKeyboardButton&gt;&gt; = mutableListOf()\n        this.sortedBy { it.rowPos }.forEach { markupDataDto -&gt;\n            val button = InlineKeyboardButton()\n                .also { it.text = markupDataDto.text }\n                .also { it.callbackData = markupDataDto.text }\n            inlineKeyboardButtonsInner.add(button)\n        }\n        inlineKeyboardButtons.add(inlineKeyboardButtonsInner)\n        inlineKeyboardMarkup.keyboard = inlineKeyboardButtons\n        return inlineKeyboardMarkup\n    }\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003C\u002Fdiv\u003E\n                    \u003C\u002Fdiv\u003E\u003Cbr\u002F\u003E\n\u003Cp\u003EСам отправщик сообщений выглядит проще. Все механизмы в библиотеке, но для ее реализации нужно создать класс\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\n\u003Cdiv class=\"spoiler\" role=\"button\" tabindex=\"0\"\u003E\n                        \u003Cb class=\"spoiler_title\"\u003ETelegramSender.kt\u003C\u002Fb\u003E\n                        \u003Cdiv class=\"spoiler_text\"\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Epackage ru.template.telegram.bot.kotlin.template.api\n\nimport javax.annotation.PostConstruct\nimport org.springframework.stereotype.Component\nimport org.telegram.telegrambots.extensions.bots.commandbot.TelegramLongPollingCommandBot\nimport org.telegram.telegrambots.extensions.bots.commandbot.commands.IBotCommand\nimport org.telegram.telegrambots.meta.api.methods.commands.SetMyCommands\nimport org.telegram.telegrambots.meta.api.methods.send.SendMessage\nimport org.telegram.telegrambots.meta.api.objects.Update\nimport org.telegram.telegrambots.meta.api.objects.commands.BotCommand\nimport org.telegram.telegrambots.meta.api.objects.commands.scope.BotCommandScopeChat\nimport ru.template.telegram.bot.kotlin.template.properties.BotProperty\nimport ru.template.telegram.bot.kotlin.template.service.ReceiverService\n\n@Component\nclass TelegramSender(\n    private val botProperty: BotProperty,\n    private val botCommands: List&lt;IBotCommand&gt;,\n    private val receiverService: ReceiverService\n) : TelegramLongPollingCommandBot() {\n\n    @PostConstruct\n    \u002F\u002F Регистрация команд в системе\n    fun initCommands() {\n        botCommands.forEach {\n            register(it)\n        }\n\n        registerDefaultAction { absSender, message -&gt;\n\n            val commandUnknownMessage = SendMessage()\n            commandUnknownMessage.chatId = message.chatId.toString()\n            commandUnknownMessage.text = \"Command '\" + message.text.toString() + \"' unknown\"\n\n            absSender.execute(commandUnknownMessage)\n        }\n    }\n\n    \u002F\u002F токен. Формируем в @BotFather\n    override fun getBotToken() = botProperty.token\n\n    \u002F\u002F username. Формируем в @BotFather\n    override fun getBotUsername() = botProperty.username\n\n    \u002F\u002F событие, которое пришли от пользователя (кромер команд)\n    override fun processNonCommandUpdate(update: Update) {\n        receiverService.execute(update)\n    }\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003C\u002Fdiv\u003E\n                    \u003C\u002Fdiv\u003E\u003Cbr\u002F\u003E\n\u003Cp\u003E\u003Cstrong\u003ETelegramLongPollingCommandBot\u003C\u002Fstrong\u003E — это базовый класс Телеграм АПИ, который отправляет и принимает сообщения. Хочу отметить, что в примере есть проперти, который нужно задать через \u003Ca href=\"https:\u002F\u002Fhabr.com\u002Fru\u002Fusers\u002Fbotfather\u002F\" class=\"user_link\"\u003EBotFather\u003C\u002Fa\u003E \u003C\u002Fp\u003E\u003Cbr\u002F\u003E\n\u003Cp\u003EОсталось дело за малым. Сервис приёма сообщений \u003Cstrong\u003EReceiverService\u003C\u002Fstrong\u003E непосредственно принимает текст, введенный пользователем или мета информацию по кнопке.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\n\u003Cdiv class=\"spoiler\" role=\"button\" tabindex=\"0\"\u003E\n                        \u003Cb class=\"spoiler_title\"\u003EReceiverService.kt\u003C\u002Fb\u003E\n                        \u003Cdiv class=\"spoiler_text\"\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Epackage ru.template.telegram.bot.kotlin.template.service\n\nimport org.springframework.context.ApplicationEventPublisher\nimport org.springframework.stereotype.Service\nimport org.telegram.telegrambots.meta.api.objects.CallbackQuery\nimport org.telegram.telegrambots.meta.api.objects.Message\nimport org.telegram.telegrambots.meta.api.objects.Update\nimport ru.template.telegram.bot.kotlin.template.enums.StepCode\nimport ru.template.telegram.bot.kotlin.template.event.TelegramReceivedCallbackEvent\nimport ru.template.telegram.bot.kotlin.template.event.TelegramReceivedMessageEvent\nimport ru.template.telegram.bot.kotlin.template.repository.UsersRepository\n\n@Service\nclass ReceiverService(\n    private val applicationEventPublisher: ApplicationEventPublisher,\n    private val usersRepository: UsersRepository\n) {\n\n    \u002F\u002F выходной метод сервиса\n    fun execute(update: Update) {\n        if (update.hasCallbackQuery()) { \u002F\u002F Выполнить, если это действие по кнопке\n            callbackExecute(update.callbackQuery)\n        } else if (update.hasMessage()) { \u002F\u002F Выполнить, если это сообщение пользователя\n            messageExecute(update.message)\n        } else {\n            throw IllegalStateException(\"Not yet supported\")\n        }\n    }\n\n    private fun messageExecute(message: Message) {\n        val chatId = message.chatId\n        val stepCode = usersRepository.getUser(chatId)!!.stepCode \u002F\u002F Выбор текущего шага\n        applicationEventPublisher.publishEvent( \u002F\u002F Формируем событие TelegramReceivedMessageEvent\n            TelegramReceivedMessageEvent(\n                chatId = chatId,\n                stepCode = StepCode.valueOf(stepCode),\n                message = message\n            )\n        )\n    }\n\n    private fun callbackExecute(callback: CallbackQuery) {\n        val chatId = callback.from.id\n        val stepCode = usersRepository.getUser(chatId)!!.stepCode \u002F\u002F Выбор текущего шага\n        applicationEventPublisher.publishEvent( \u002F\u002F Формируем событие TelegramReceivedCallbackEvent\n            TelegramReceivedCallbackEvent(chatId = chatId, stepCode = StepCode.valueOf(stepCode), callback = callback)\n        )\n    }\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003C\u002Fdiv\u003E\n                    \u003C\u002Fdiv\u003E\u003Cbr\u002F\u003E\n\u003Cp\u003EЗдесь всё просто, если Кнопка, то событие для кнопки, если текст, то событие для обработки текста.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\n\u003Ch4 id=\"biznes-processy\"\u003EБизнес процессы\u003C\u002Fh4\u003E\u003Cbr\u002F\u003E\n\u003Cp\u003EТак как эта статья отражает лишь архитектуру бота, то описывать реализацию бизнес процессов нет смысла. Код с примером можно найти в гитхабе по ссылке выше.\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\n\u003Cp\u003EОтмечу только тот факт, что для описания самих бизнес процессов необходимо для каждого этапа реализовать имплементацию интерфейсов\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw1560\u002Fwebt\u002Fym\u002Fd5\u002Ffk\u002Fymd5fky8pgrz7jeleggb4z6gup8.png\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fwebt\u002Fym\u002Fd5\u002Ffk\u002Fymd5fky8pgrz7jeleggb4z6gup8.png\"\u002F\u003E\u003C\u002Fp\u003E\u003Cbr\u002F\u003E\n\u003Ch3 id=\"zaklyuchenie\"\u003EЗаключение\u003C\u002Fh3\u003E\u003Cbr\u002F\u003E\n\u003Cp\u003EИтого, что мы имеем? Описанный код продемонстрировал \"поляну\" для того, чтобы разработчики накидали классы, в которых будет реализована основная бизнес логика (добавление данных в базу, действие по кнопке). Также можно реализовать бизнес логику на роутинг следующего шага. Конечно, данная статья не поможет реализовать достаточно сложного бота. Однако, поработав с аналитиком и архитектором, можно с лёгкостью реализовать новые слои в пакете \u003Cstrong\u003Estrategy\u003C\u002Fstrong\u003E.\u003C\u002Fp\u003E\u003C\u002Fdiv\u003E","tags":[{"titleHtml":"телеграм-бот"},{"titleHtml":"kotlin"},{"titleHtml":"spring boot"},{"titleHtml":"PostgreSQL"}],"metadata":{"stylesUrls":[],"scriptUrls":[],"shareImageUrl":"https:\u002F\u002Fhabr.com\u002Fshare\u002Fpublication\u002F588474\u002F345019bc2f3f78f3704b115f7bc11c3f\u002F","shareImageWidth":1200,"shareImageHeight":630,"vkShareImageUrl":"https:\u002F\u002Fhabr.com\u002Fshare\u002Fpublication\u002F588474\u002F345019bc2f3f78f3704b115f7bc11c3f\u002F?format=vk","schemaJsonLd":"{\"@context\":\"http:\\\u002F\\\u002Fschema.org\",\"@type\":\"Article\",\"mainEntityOfPage\":{\"@type\":\"WebPage\",\"@id\":\"https:\\\u002F\\\u002Fhabr.com\\\u002Fru\\\u002Farticles\\\u002F588474\\\u002F\"},\"headline\":\"Разработка телеграм-бота на Kotlin + Spring Boot\",\"datePublished\":\"2021-11-11T13:18:22+03:00\",\"dateModified\":\"2023-08-10T17:14:12+03:00\",\"author\":{\"@type\":\"Person\",\"name\":\"Даниил\"},\"publisher\":{\"@type\":\"Organization\",\"name\":\"Habr\",\"logo\":{\"@type\":\"ImageObject\",\"url\":\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fwebt\\\u002Fa_\\\u002Flk\\\u002F9m\\\u002Fa_lk9mjkccjox-zccjrpfolmkmq.png\"}},\"description\":\"Привет, читателям Хабра! В этой статье я расскажу о том, как быстро и легко разработать свой собственный телеграм-бот на языке Kotlin с использованием Spring Boo...\",\"url\":\"https:\\\u002F\\\u002Fhabr.com\\\u002Fru\\\u002Farticles\\\u002F588474\\\u002F#post-content-body\",\"about\":[\"h_kotlin\",\"h_programming\",\"f_develop\"],\"image\":[\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fwebt\\\u002Fym\\\u002Fd5\\\u002Ffk\\\u002Fymd5fky8pgrz7jeleggb4z6gup8.png\"]}","metaDescription":"Привет, читателям Хабра! В этой статье я расскажу о том, как быстро и легко разработать свой собственный телеграм-бот на языке Kotlin с использованием Spring Boot. Основная задумка заключается в том,...","mainImageUrl":null,"amp":false,"customTrackerLinks":[]},"polls":[],"commentsEnabled":{"status":true,"reason":null},"rulesRemindEnabled":false,"votesEnabled":true,"status":"published","plannedPublishTime":null,"checked":null,"hasPinnedComments":false,"format":null,"banner":null,"multiwidget":null,"multiwidgetUuid":null,"readingTime":17,"complexity":null,"isEditorial":false}},"articlesIds":{},"isLoading":false,"pagesCount":{},"route":{},"reasonsList":null,"postReasonsList":null,"view":"list","lastVisitedRoute":{},"ssrCommentsArticleIds":[""],"viewedPosts":[],"myFeedFilter":{"complexity":"all","score":"all","types":["articles","posts","news"]},"myFeedIsApplyFilters":false,"myFeedIsForce":false,"karma":{"userReasonsList":null}},"authorContribution":{"authors":{}},"betaTest":{"currentAnnouncement":null,"announcements":{},"announcementCards":null,"announcementComments":{},"announcementCommentThreads":{},"announcementCommentingStatuses":{},"archivedList":[]},"authorStatistics":{"articleRefs":{},"articleIds":{},"pagesCount":{},"route":{},"viewsCount":[],"maxStatsCount":{}},"career":{"seoLandings":[],"hubs":"kotlin,programming"},"comments":{"articleComments":{},"articlePinnedComments":{},"searchCommentsResults":null,"pagesCount":null,"commentAccess":{},"scrollParents":{},"pageArticleComments":{"lastViewedComment":0,"postId":null,"lastCommentTimestamp":"","moderated":[],"moderatedIds":[],"commentRoute":"","idempotenceKey":""}},"companies":{"companyRefs":{},"companyIds":{},"companyTopIds":{},"pagesCount":{},"companyProfiles":{},"companiesCategories":[],"companiesCategoriesTotalCount":0,"companiesWidgets":{},"companiesWorkers":{},"companiesFans":{},"multiwidgets":{},"route":{},"isLoading":false,"companyWorkersLoading":false,"companyFansLoading":false,"multiwidgetLoading":false,"vacancies":{},"companiesGalleries":{},"companiesBanners":{},"companiesLandingVacancies":{},"companiesTechnologies":{},"workplaceInfo":null},"companyAdmin":{"companyInfo":null,"companyInfoLoading":false,"faqArticles":null,"brandingPreviewImageUrl":null,"jivoStatus":0,"adminNotifications":null,"availableInvitesCount":{}},"companyAdd":{"currentStep":"","stepsData":{},"uncompletedSteps":[],"isStepLoading":true,"isStepCommitting":false,"isInitialized":false,"agreementContent":""},"companiesContribution":{"hubs":{},"flows":{},"companyRefs":{}},"companyHubsContribution":{"contributionRefs":{"hubRefs":{},"hubIds":{}}},"conversation":{"messages":[],"respondent":null,"isLoadMore":false},"conversations":{"conversations":[],"pagesCount":0},"docs":{"menu":{},"articles":{},"mainMenu":[],"loading":{"main":false,"dropdown":false,"article":false}},"feature":{"isProbablyVisible":true},"fixedBanner":{"isArticleStickyPanelVisible":false,"isArticleStickyPanelAtTheBottom":false,"isFixedBannerVisible":false,"isStickyPanelIconsHidden":false},"flows":{"flows":[{"id":"1","alias":"develop","title":"Разработка","titleHtml":"Разработка","route":{"name":"FLOW_PAGE","params":{"flowName":"develop"}}},{"id":"6","alias":"admin","title":"Администрирование","titleHtml":"Администрирование","route":{"name":"FLOW_PAGE","params":{"flowName":"admin"}}},{"id":"2","alias":"design","title":"Дизайн","titleHtml":"Дизайн","route":{"name":"FLOW_PAGE","params":{"flowName":"design"}}},{"id":"3","alias":"management","title":"Менеджмент","titleHtml":"Менеджмент","route":{"name":"FLOW_PAGE","params":{"flowName":"management"}}},{"id":"4","alias":"marketing","title":"Маркетинг","titleHtml":"Маркетинг","route":{"name":"FLOW_PAGE","params":{"flowName":"marketing"}}},{"id":"7","alias":"popsci","title":"Научпоп","titleHtml":"Научпоп","route":{"name":"FLOW_PAGE","params":{"flowName":"popsci"}}}],"updates":{}},"global":{"isPwa":false,"device":"mobile","isHabrCom":true,"requestId":"be6e6056180b76576daf98a285ac79c8"},"hubs":{"hubRefs":{},"hubIds":{},"pagesCount":{},"isLoading":false,"route":{}},"hubsBlock":{"hubRefs":{},"hubIds":{}},"i18n":{"fl":"ru","hl":"ru"},"info":{"welcomePage":{},"isLoading":true},"location":{"urlStruct":{"protocol":null,"slashes":null,"auth":null,"host":null,"port":null,"hostname":null,"hash":null,"query":{},"pathname":"\u002Fru\u002Farticles\u002F588474\u002F","path":"\u002Fru\u002Farticles\u002F588474\u002F","href":"\u002Fru\u002Farticles\u002F588474\u002F"}},"me":{"user":null,"uuid":null,"ppgDemanded":false,"karmaResetInfo":{"canReincarnate":null,"wasReincarnated":null,"currentScore":null},"notes":null,"userUpdates":{"feeds":{"newPostsCount":null,"newThreadsCount":null,"newNewsCount":null,"newCount":null},"conversationUnreadCount":0}},"mostReadingList":{"mostReadingListIds":[],"mostReadingListRefs":null,"promoPost":null},"onboarding":{"currentStep":null,"stepsData":{},"stepsErrors":{},"completedSteps":[],"isStepCommitting":false,"isCommitDisabled":true},"ppa":{"articles":{},"card":null,"transactions":null,"totalTransactions":null,"isAccessible":null},"projectsBlocks":{"activeBlocks":{"salary":"project-block-article"}},"promoData":{"isLoading":false,"hasLoaded":false,"featurer":null,"megaposts":null,"promoLinks":null,"promoPosts":null,"sticker":null},"publicationStatistics":{"statsInfo":{},"statsFunnels":{},"statsGraph":{},"defaultSuggest":{},"suggest":{},"timeTracker":{},"isTrackingActivity":false,"isUserActive":true,"otherPublicationStats":{}},"pullRefresh":{"shouldRefresh":false},"sandbox":{"articleIds":[],"articleRefs":{},"pagesCount":null,"route":{},"lastVisitedRoute":{},"isLoading":false},"search":{"searchQueryError":null},"settingsOther":{"inputs":{"uiLang":{"errors":[],"ref":null,"value":""},"articlesLangEnglish":{"errors":[],"ref":null,"value":false},"articlesLangRussian":{"errors":[],"ref":null,"value":false},"agreement":{"errors":[],"ref":null,"value":false},"email":{"errors":[],"ref":null,"value":true},"digest":{"errors":[],"ref":null,"value":true}}},"similarList":{"similarListIds":[],"similarListRefs":null},"ssr":{"error":null,"isDataLoaded":true,"isDataLoading":false,"isHydrationFailed":false,"isServer":false},"stories":{"stories":[{"id":"story-998","author":{"logo":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F91a\u002F166\u002F49f\u002F91a16649f9ef89302a5a56cfa22a451d.png","title":"Яндекс Практикум","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up"},"title":"Как расти на работе?","lang":"ru","startTime":"2025-03-18T18:45:00+03:00","finishTime":"2025-03-31T19:00:00+03:00","slides":[{"id":"story-998_1","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fbf4\u002F911\u002F7e6\u002Fbf49117e637ff2099b3944f8803cd7a3.png","button":null},{"id":"story-998_2","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F3e3\u002Fc84\u002Fe83\u002F3e3c84e8330ea1ddf72e9d310457ed2f.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_3","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F84b\u002F533\u002F3c3\u002F84b5333c3e77e8dac62a8b50d042acb9.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_4","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F257\u002Feb0\u002F2be\u002F257eb02bea1777e13f3e647cae6e06cd.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_5","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F858\u002F086\u002F0ed\u002F8580860ed3497c043c04f9a42054d74f.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_6","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fcdf\u002F32f\u002F387\u002Fcdf32f38777f046c063b5182f4125e14.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_7","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fd48\u002Ff2d\u002F0e2\u002Fd48f2d0e2ecd7d746d738191bb913d8f.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_8","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fb38\u002Ffd7\u002Fee0\u002Fb38fd7ee04848bf3b058be7403438bd1.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_9","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F79e\u002Feaa\u002F9d8\u002F79eeaa9d8af5a288ad42bd9d63b5793a.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_10","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fcdc\u002F17e\u002F385\u002Fcdc17e38582dc67838b9abfb200d982e.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}}]},{"id":"story-996","author":{"logo":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fe63\u002F36d\u002Fa24\u002Fe6336da24460ab6b9fbc347d03eb263a.png","title":"Хабр","link":null},"title":"Здоровье айтишника","lang":"ru","startTime":"2025-03-17T10:22:00+03:00","finishTime":"2025-04-13T10:22:00+03:00","slides":[{"id":"story-996_1","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fb7c\u002F6de\u002F8ea\u002Fb7c6de8ea6789dbc30f071716172b6dd.jpg","button":null},{"id":"story-996_2","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F2e7\u002F88a\u002F0fe\u002F2e788a0fe61729ca8b23eb59069c844f.jpg","button":{"title":"Личный опыт","link":"https:\u002F\u002Fu.habr.com\u002Fzd-1","colorType":"light"}},{"id":"story-996_3","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fb93\u002F6f4\u002F256\u002Fb936f425653b84fa60ab00d09f78c543.jpg","button":{"title":"Как это было","link":"https:\u002F\u002Fu.habr.com\u002Fzd-2","colorType":"light"}},{"id":"story-996_4","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fc10\u002Fd14\u002Ff5a\u002Fc10d14f5a4859fe10baecbcc2bcb8828.jpg","button":{"title":"Шея в фокусе","link":"https:\u002F\u002Fu.habr.com\u002Fzd-3","colorType":"dark"}},{"id":"story-996_5","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F535\u002Fe1b\u002F77a\u002F535e1b77a9eb896262ad73321f2ad99f.jpg","button":{"title":"Фотоинструкция","link":"https:\u002F\u002Fu.habr.com\u002Fzd-4","colorType":"light"}},{"id":"story-996_6","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F569\u002Fc39\u002F49f\u002F569c3949f5b330ea85d4a1864f481c3d.jpg","button":{"title":"Сидите (не)правильно","link":"https:\u002F\u002Fu.habr.com\u002Fzd-5","colorType":"dark"}},{"id":"story-996_7","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F1f2\u002F1de\u002Fdbf\u002F1f21dedbf2902bc4061a75b839b63595.jpg","button":{"title":"Журнал изменений","link":"https:\u002F\u002Fu.habr.com\u002Fzd-6","colorType":"dark"}},{"id":"story-996_8","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F95a\u002F164\u002F21b\u002F95a16421badc3a9f1135309ab0c42c41.jpg","button":{"title":"Альтернатива","link":"https:\u002F\u002Fu.habr.com\u002Fzd-7","colorType":"light"}},{"id":"story-996_9","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F624\u002F027\u002F54d\u002F62402754d311798af44bcfe7f9abfedc.jpg","button":{"title":"Хроника поисков","link":"https:\u002F\u002Fu.habr.com\u002Fzd-8","colorType":"dark"}}]},{"id":"story-992","author":{"logo":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F3fe\u002F2fc\u002Fb05\u002F3fe2fcb05df852d7e1e00d44e54e39ae.png","title":"Сезоны Хабра","link":"https:\u002F\u002Fu.habr.com\u002Ffnstories"},"title":"Угадайте будущее в новом сезоне","lang":"ru","startTime":"2025-03-12T19:15:00+03:00","finishTime":"2025-03-31T23:56:00+03:00","slides":[{"id":"story-992_1","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fc56\u002Faf5\u002Fc43\u002Fc56af5c4377f7f7b94f7b6ad20fc92c3.png","button":{"title":"А что за сезон?","link":"https:\u002F\u002Fu.habr.com\u002Ffnstories","colorType":"light"}},{"id":"story-992_2","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F8fa\u002Fde7\u002F65d\u002F8fade765d99207f31c597283ae6ce912.png","button":{"title":"Какие темы нужны","link":"https:\u002F\u002Fu.habr.com\u002Ffnstories","colorType":"dark"}},{"id":"story-992_3","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F23e\u002F7b9\u002Fb24\u002F23e7b9b24cb056d1a42e8d31ccea16ce.png","button":{"title":"Сезон будущего ИИ","link":"https:\u002F\u002Fu.habr.com\u002Ffnstories","colorType":"dark"}},{"id":"story-992_4","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F27b\u002Fbfc\u002Fa18\u002F27bbfca18e656ee0122b5cb8eb2cb502.png","button":{"title":"Все правила сезона","link":"https:\u002F\u002Fu.habr.com\u002Ffnstories","colorType":"dark"}},{"id":"story-992_5","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F1e0\u002F6c6\u002Ff33\u002F1e06c6f33e703bbd2b2ae3baee3376fd.png","button":{"title":"Как участвовать","link":"https:\u002F\u002Fu.habr.com\u002Ffnstories","colorType":"dark"}}]},{"id":"story-990","author":{"logo":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F282\u002Fe80\u002Fbf1\u002F282e80bf1b73484126ed53c6f3e42692.png","title":"Aeza","link":"https:\u002F\u002Fu.habr.com\u002FI72qi"},"title":"С праздником весны!","lang":"ru","startTime":"2025-03-09T10:15:00+03:00","finishTime":"2025-03-30T23:59:00+03:00","slides":[{"id":"story-990_1","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F064\u002F9dd\u002Ff59\u002F0649ddf5949cae6c9342fb62034a36ac.png","button":null},{"id":"story-990_2","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F05f\u002F96b\u002F25e\u002F05f96b25e910c32256ee0b1916f21380.png","button":{"title":"Семейная история","link":"https:\u002F\u002Fu.habr.com\u002Fey2bY","colorType":"light"}},{"id":"story-990_3","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fcd1\u002Ff5d\u002F921\u002Fcd1f5d921bb9489ac11727272660bdb6.png","button":{"title":"Движущиеся картинки","link":"https:\u002F\u002Fu.habr.com\u002FWLKXU","colorType":"light"}},{"id":"story-990_4","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fb55\u002Fd45\u002Fec5\u002Fb55d45ec50e53275c60d16ea886a0672.png","button":{"title":"Личный опыт","link":"https:\u002F\u002Fu.habr.com\u002FSxrki","colorType":"light"}},{"id":"story-990_5","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Ffa7\u002F1ce\u002Ffca\u002Ffa71cefca5ed0a3fe8b50bd703b3605f.png","button":{"title":"Алгоритм","link":"https:\u002F\u002Fu.habr.com\u002Ftbz2p","colorType":"light"}},{"id":"story-990_6","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F435\u002F89d\u002Ff90\u002F43589df9018846cc6a8eed986226b252.png","button":{"title":"Выбрать сценарий","link":"https:\u002F\u002Fu.habr.com\u002F0RCPk","colorType":"light"}},{"id":"story-990_7","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F514\u002F5f8\u002F619\u002F5145f86194ad48dad48a846b42af0f93.png","button":{"title":"Jiraзамещение","link":"https:\u002F\u002Fu.habr.com\u002FEwhYq","colorType":"light"}},{"id":"story-990_8","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F439\u002Fa83\u002Fae7\u002F439a83ae78f7ef711e3b9bbed1ec26c5.png","button":{"title":"8 вещей","link":"https:\u002F\u002Fu.habr.com\u002FVTv2r","colorType":"light"}},{"id":"story-990_9","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F02d\u002F783\u002F2f7\u002F02d7832f7b1c95d88bff9f34209e204a.png","button":{"title":"Интерфейсы","link":"https:\u002F\u002Fu.habr.com\u002FUFOMZ","colorType":"light"}},{"id":"story-990_10","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F0cb\u002Ff7f\u002F0d9\u002F0cbf7f0d905d486ce4ff82bc939b21d5.png","button":{"title":"Стикеры ваши","link":"https:\u002F\u002Fu.habr.com\u002FoA1K7","colorType":"light"}}]},{"id":"story-984","author":{"logo":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F648\u002F61b\u002F9ae\u002F64861b9aecb7c474cd94063f98045541.png","title":"Хабр","link":null},"title":"Всегда котов!","lang":"ru","startTime":"2025-03-01T00:01:09+03:00","finishTime":"2025-03-23T16:21:00+03:00","slides":[{"id":"story-984_1","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fc06\u002Fc21\u002F93f\u002Fc06c2193ff34362ac2af782cf2571f55.png","button":null},{"id":"story-984_2","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fb68\u002F15f\u002F763\u002Fb6815f7630b9c015b1e67efb5bdf12d4.jpg","button":{"title":"Сделать purrrr","link":"https:\u002F\u002Fu.habr.com\u002Fj4DN1","colorType":"light"}},{"id":"story-984_3","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F550\u002F76e\u002Fd7a\u002F55076ed7a0954e243f944fc2f330623a.png","button":{"title":"Тыгыдык","link":"https:\u002F\u002Fu.habr.com\u002Fya360_kotov","colorType":"dark"}},{"id":"story-984_4","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F2fb\u002F23b\u002F06c\u002F2fb23b06cf294c2050104b2aef589788.jpg","button":{"title":"Исследование","link":"https:\u002F\u002Fu.habr.com\u002FbO3r0","colorType":"light"}},{"id":"story-984_5","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Ff50\u002F50f\u002F0ae\u002Ff5050f0aeea1335c4f0544c1863f8342.jpg","button":{"title":"Детали проекта","link":"https:\u002F\u002Fu.habr.com\u002FQJmhe","colorType":"light"}},{"id":"story-984_6","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F825\u002F3dd\u002F5f5\u002F8253dd5f5c19dd061578f1d09310a45f.jpg","button":{"title":"Эксперименты","link":"https:\u002F\u002Fu.habr.com\u002FVaOdo","colorType":"light"}},{"id":"story-984_7","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F3fb\u002Fc92\u002F0f9\u002F3fbc920f9ea81eca2c1c027ff77fc659.jpg","button":{"title":"Это не мем","link":"https:\u002F\u002Fu.habr.com\u002F0Wb3p","colorType":"light"}},{"id":"story-984_8","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F2b4\u002F794\u002Fc33\u002F2b4794c33844e60aad9468018fd132cd.jpg","button":{"title":"В засаде","link":"https:\u002F\u002Fu.habr.com\u002FnasCD","colorType":"dark"}}]}]},"technotext":{"years":[],"technotextDocForNominees":null,"technotextDocForWinners":null,"technotextInfo":{},"technotextInfoLoading":false,"technotextWinners":{},"technotextWinnersLoading":false},"userHubsContribution":{"contributionRefs":{"hubRefs":{},"hubIds":{}}},"userInvites":{"availableInvites":0,"usedInvitesIds":[],"usedInvitesRefs":{},"usedInvitesPagesCount":0,"unusedInvitesIds":[],"unusedInvitesRefs":{},"unusedInvitesPagesCount":0},"userVotes":{"karmaVotesList":[],"karmaVotesPagesCount":null,"karmaVotesListLoading":false,"commentsVotesList":[],"commentsVotesPagesCount":null,"commentsVotesListLoading":false,"postsVotesList":[],"postsVotesPagesCount":null,"postsVotesListLoading":false,"userVotesList":[],"userVotesPagesCount":null,"userVotesListLoading":false},"users":{"authorRefs":{},"authorIds":{},"pagesCount":{},"authorProfiles":{"minpor":{"alias":"minpor","badgets":[{"title":"Захабренный","description":"Пользователь с кармой \u003E0","url":null,"isRemovable":false}],"aboutHtml":"","contacts":[],"invitedBy":{"issuerLogin":"vsile","timeCreated":"2021-11-10T06:53:38+00:00"},"careerProfile":null,"companies":{"pagesCount":1,"companyIds":[],"companyRefs":{}}}},"userHubs":{},"userInvitations":{},"authorFollowers":{},"authorFollowed":{},"userSpecialization":{},"karmaStats":[],"statistics":null,"isLoading":false,"authorFollowersLoading":false,"authorFollowedLoading":false,"userHubsLoading":false,"userInvitationsLoading":false,"route":{}},"viewport":{"prevScrollY":{},"scrollY":0,"width":0},"tracker":{"notificationsLoading":false,"notificationsList":[],"notificationsPageCount":0,"pendingMarkNotificationsRead":[],"publicationsLoading":true,"publicationsList":[],"publicationsPageCount":0,"pendingDeletePublications":false,"pendingMarkPublicationsRead":false},"events":{"eventRefs":{},"eventIds":[],"pagesCount":0,"categories":[],"cities":[],"actualEvents":[{"id":"588","titleHtml":"Конкурс «Снежный код» от Хекслета. Три гранта на бесплатное 10-месячное обучение","descriptionHtml":"\u003Cp\u003EУчаствуйте в конкурсе грантов от онлайн-школы программирования Хекслет. Три победителя пройдут 10-месячное обучение с наставником, освоив один из востребованных стеков: Java, Python, JavaScript, PHP или Node.js.\u003C\u002Fp\u003E\u003Cp\u003EЭто шанс без вложений освоить новый стек, систематизировать знания, восполнить пробелы и повысить свою ценность на рынке. Технологии развиваются быстро — обновляйте навыки, чтобы не отставать.\u003C\u002Fp\u003E\u003Cp\u003EПомимо грантов, можно выиграть доступ ко всем курсам Хекслета, полезные подписки, сертификаты и подарки от Хабра и партнеров.\u003C\u002Fp\u003E\u003Cp\u003EВ прошлом году три победителя успешно завершили программу и уже работают в IT.  Инвестируйте время в свое развитие — участвуйте! \u003C\u002Fp\u003E","imageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Ff79\u002F1fc\u002F79d\u002Ff791fc79d0d9fdda84397ed0c0717764.png","eventUrl":"https:\u002F\u002Fspecial.hexlet.io\u002Fgrant?utm_source=partners&utm_medium=referral&utm_campaign=grant&utm_content=link&utm_term=placement_habr","startDay":"2025-02-17","finishDay":"2025-03-24","isOnline":true,"geo":[],"isArchive":false,"categories":[{"id":"2","titleHtml":"Разработка"}],"tags":["гранты","конкурс","Хекслет","Java","Python","JavaScript","PHP","Node.js"],"metadata":null},{"id":"596","titleHtml":"Офлайн-конференция Хабр х K-team: как удерживать таланты в 2025 году","descriptionHtml":"\u003Cp\u003EМы — Хабр и K-Team — провели масштабное исследование, чтобы разобраться, что на самом деле мотивирует сотрудников оставаться в компании и быть лояльными\u003C\u002Fp\u003E\u003Cp\u003EВместе прошли по тернистому пути к лояльности, опросив&nbsp;3 000+ сотрудников, HR и руководителей из разных отраслей:&nbsp;от ретейла и логистики до IT и промышленности. Мы заботливо собрали самые разные мнения, чтобы понять, что по-настоящему важно для людей, которые остаются в компании надолго и любят свою работу. \u003C\u002Fp\u003E\u003Cp\u003EНаша цель проста — помочь бизнесу не сливать бюджет на бесполезные инициативы, а сотрудникам — получать то, что им действительно нужно. \u003C\u002Fp\u003E\u003Cp\u003EПриглашаем вас на офлайн-презентацию в Москве в марте. Обсудим результаты исследования, ключевые выводы и разберем, как строить эффективные Retention-стратегии в 2025 году.\u003C\u002Fp\u003E\u003Cp\u003EКоличество мест ограничено, заявки проходят модерацию. Если ваша заявка будет одобрена, вы получите письмо с подтверждением и адресом встречи.\u003C\u002Fp\u003E\u003Cp\u003EЕсли прийти не получится — после ивента отправим результаты исследования всем, кто зарегистрируется на лендинге.\u003C\u002Fp\u003E\u003Cp\u003EМентальное здоровье сотрудников — важная часть корпоративной культуры. В «Ясно для бизнеса» изучают, как забота о команде влияет на вовлечённость и эффективность. Они подготовили гайд о работе с молодыми специалистами, а для теста сервиса есть промокод CORP-HABRTLNT-DISC20 на скидку 20% для первых сессий: https:\u002F\u002Fu.habr.com\u002FPQP4b\u003C\u002Fp\u003E\u003Cp\u003E\u003C\u002Fp\u003E","imageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fb14\u002Fcd3\u002F772\u002Fb14cd3772bc67698c8fbfd846e23824a.png","eventUrl":"https:\u002F\u002Fevent.k-team.ru\u002Fexpectations_vs_reality?utm_source=habr","startDay":"2025-03-20","startTime":"10:00","finishDay":"2025-03-20","finishTime":"17:00","isOnline":false,"geo":["Москва"],"isArchive":false,"categories":[{"id":"16","titleHtml":"Другое"}],"tags":["HR","HRD","Удержание сотрудников"],"metadata":null},{"id":"604","titleHtml":"IX HappyWorkForum | Аутентичность и ментальное здоровье персонала","descriptionHtml":"\u003Cp\u003EБолее 250 HRD, первые лица компаний и владельцы крупного бизнеса обсудят лучшие практики благополучия и управление командой.\u003C\u002Fp\u003E\u003Cp\u003EПочему ментальное здоровье становится KPI бизнеса?\u003C\u002Fp\u003E\u003Cp\u003EГде граница ответственности за выгорание и стресс сотрудников?\u003C\u002Fp\u003E\u003Cp\u003EКак стать работодателем №1?\u003C\u002Fp\u003E\u003Cp\u003EКак управлять уставшими командами?\u003C\u002Fp\u003E\u003Cp\u003EКак справляться с выгоранием руководителей?\u003C\u002Fp\u003E\u003Cp\u003EЧем замотивировать сотрудников, когда деньги уже не работают?&nbsp;&nbsp;\u003C\u002Fp\u003E\u003Cp\u003EКак решать ценностные конфликты?\u003C\u002Fp\u003E\u003Cp\u003EУспешные корпоративные программы: что реально работает?&nbsp;&nbsp;\u003C\u002Fp\u003E\u003Cp\u003EВ программе презентация отчёта по развитию лидерства, батлы, практические кейсы и нетворкинг.\u003C\u002Fp\u003E\u003Cp\u003EСреди спикеров, представители компаний: Т-банк, Сравни.ру, Ростелеком, ТД Ренна, Спортмастер, ТрансТелеком, Оптиком, Норникель, Азбука вкуса, ЕВМ и другие.\u003C\u002Fp\u003E\u003Cp\u003EУчастие для HRD, руководителей и владельцев бизнеса без оплаты. Действует строгая модерация.\u003C\u002Fp\u003E\u003Cp\u003E\u003C\u002Fp\u003E","imageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F733\u002F9ef\u002F194\u002F7339ef1945f3ee6906daf89db79829d4.png","eventUrl":"https:\u002F\u002Fhappyforum.ru\u002F?utm_source=habr&utm_medium=email&utm_campaign=hwf","startDay":"2025-03-20","startTime":"10:00","finishDay":"2025-03-20","finishTime":"18:00","isOnline":true,"geo":["Москва"],"isArchive":false,"categories":[{"id":"16","titleHtml":"Другое"}],"tags":["HRD","HR"],"metadata":null},{"id":"612","titleHtml":"Вебинар «Мастерская бюджета: как управлять затратами на облачные ресурсы»","descriptionHtml":"\u003Cp\u003EРасскажем, как сэкономить на использовании облачных сервисов через возможности личного кабинета, сервисы с free tier и акции. Покажем, как оптимизировать потребление ресурсов и настроить лимиты бюджетов.\u003C\u002Fp\u003E\u003Cp\u003EПрограмма вебинара:\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003EАнализ текущей утилизации ресурсов: поиск ресурсов с низкой утилизацией и анализ возможной оптимизации.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EКалькулятор затрат: демо-настройки параметров для точных прогнозов расходов.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EАнализ детализированных данных: подходы к аналитике, включая метаданные.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EОптимизация потребления: использование зарезервированных инстансов и спотовых экземпляров.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EАнализ бесплатного потребления: как использовать free tier для сокращения затрат.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EНастройка лимитов бюджетов: автоматизация и уведомления для контроля расходов.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EИспользование Public API: тегирование ресурсов для лучшей аналитики затрат.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003EВебинар будет интересен менеджерам облачных ресурсов и IT-департаментов, DevOps-инженерам и сотрудникам, в чью зону ответственности входит контроль над облачными расходами.\u003C\u002Fp\u003E","imageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F38f\u002F10d\u002Ff4c\u002F38f10df4c7f9d7c5d4610fe426af0ab4.png","eventUrl":"https:\u002F\u002Fu.habr.com\u002Fcldr_cloudeventwebinar","startDay":"2025-03-20","startTime":"11:00","finishDay":"2025-03-20","isOnline":true,"geo":[],"isArchive":false,"categories":[{"id":"2","titleHtml":"Разработка"},{"id":"4","titleHtml":"Администрирование"}],"tags":["вебинар cloudru","вебинар для айтишников","вебинар про облака"],"metadata":null},{"id":"616","titleHtml":"Бизнес-конференция «Digital Brand Day 2025: Орбита 2025»","descriptionHtml":"\u003Cp\u003E21 марта конференция «Digital Brand Day 2025: Орбита 2025» в восьмой раз соберёт ведущих экспертов цифрового маркетинга и рекламы для обсуждения главных трендов digital-рынка и новых инструментов, которые определят стратегию брендов.\u003C\u002Fp\u003E\u003Cp\u003EВ основе темы Digital Brand Day 2025 лежит фундаментальный вопрос философии: что первично — материя или сознание? А что же первично в цифровой среде — технологии или идеи? Конференция станет эпицентром открытий, где мы вместе проложим путь сквозь бескрайние просторы рекламного космоса и наметим вектор развития цифрового маркетинга.\u003C\u002Fp\u003E\u003Cp\u003EГостей «Digital Brand Day: Орбита 2025» ждёт не только насыщенная программа, но и возможность завести полезные знакомства, увидеть, каким будет диджитал завтра.\u003C\u002Fp\u003E","imageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F523\u002F7fb\u002F13a\u002F5237fb13ad7fb6fb483c49691aaec836.png","eventUrl":"https:\u002F\u002Fu.habr.com\u002Fcldr_digitalbrandday","startDay":"2025-03-21","startTime":"10:00","isOnline":false,"geo":["Москва"],"isArchive":false,"categories":[{"id":"10","titleHtml":"Маркетинг"},{"id":"16","titleHtml":"Другое"}],"tags":["digital brand day","бизнес-конференция digital brand day","цифровой маркетинг","digital-рынок"],"metadata":null},{"id":"608","titleHtml":"Вебинар «Контент-маркетинг здорового человека: как привлечь внимание аудитории»","descriptionHtml":"\u003Cp\u003E27 марта в 16:00 МСК вместе с агентством Loft PR Studio проведем открытый вебинар о том, как писать про здоровье на Хабре. \u003C\u002Fp\u003E\u003Cp\u003EНа вебинаре разберем, что помогает удерживать внимание и превращает контент в работающий инструмент. Поделимся опытом брендов, которые ведут блоги и регулярно публикуют статьи.\u003C\u002Fp\u003E\u003Cp\u003EБудет интересно тем, кто продвигает товары и услуги для здоровья на аудиторию B2C и B2B. \u003C\u002Fp\u003E\u003Cp\u003E🔗 Участие бесплатное, но нужна предварительная регистрация.\u003C\u002Fp\u003E","imageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F8fd\u002Fe04\u002Fddd\u002F8fde04ddd9ba3f6bcd515aa6209f96b7.png","eventUrl":"https:\u002F\u002Fhabr.timepad.ru\u002Fevent\u002F3266126\u002F?utm_refcode=b5d44b4f1d5f2c06b5696586408b58e610baafd8","startDay":"2025-03-27","startTime":"16:00","finishDay":"2025-03-27","finishTime":"18:00","isOnline":true,"geo":[],"isArchive":false,"categories":[{"id":"10","titleHtml":"Маркетинг"},{"id":"16","titleHtml":"Другое"}],"tags":["Вебинар","Контент","Хабр"],"metadata":null},{"id":"606","titleHtml":"Серия вебинаров «DevOps Middle: AvitoTech vs ecom.tech»","descriptionHtml":"\u003Cp\u003EУчебный центр Слёрм запустил серию бесплатных вебинаров «Честные вакансии: DevOps Middle».\u003C\u002Fp\u003E\u003Cp\u003EДва раза в неделю Вячеслав Федосеев, TeamLead DevOps в «Честном знаке» и автор телеграм-канала «DevOps Bootcamp с Федосеевым» встречается в прямом эфире с экспертами из бигтеха, чтобы обсудить:\u003C\u002Fp\u003E\u003Col\u003E\u003Cli\u003E\u003Cp\u003EКакие задачи должен решать DevOps middle.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EКакими основными и дополнительными инструментами и подходами должен владеть DevOps middle.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EСтоп-факторы на собеседовании.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EКак выглядит рабочий день DevOps middle.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EКакие софт-скилы действительно важны.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Fol\u003E\u003Cp\u003E31 марта состоится встреча с экспертами AvitoTech, 2 апреля — с ecom.tech. Кому подходите вы, а кто — вам? Разберёмся вместе на вебинарах.\u003C\u002Fp\u003E\u003Cp\u003EПодробности — в telegram-боте.\u003C\u002Fp\u003E\u003Cp\u003E\u003C\u002Fp\u003E","imageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fb99\u002F62a\u002Fb24\u002Fb9962ab2439c6edc80f96d7f0a847c72.png","eventUrl":"https:\u002F\u002Fu.habr.com\u002Fcldr_slermdevops","startDay":"2025-03-31","startTime":"17:00","isOnline":true,"geo":[],"isArchive":false,"categories":[{"id":"2","titleHtml":"Разработка"},{"id":"4","titleHtml":"Администрирование"}],"tags":["Вебинар Слерм","Вебинар Devops","Честные вакансии","Слерм","Честные вакансии Devops Middle"],"metadata":null},{"id":"618","titleHtml":"Реалити для разработчиков: узнайте, как строится новое публичное облако MWS","descriptionHtml":"\u003Cp\u003EBuilding the Cloud — это реалити-проект для разработчиков о новом облаке МТС Web Services. Каждый эпизод посвящён отдельному building-блоку новой облачной платформы.\u003C\u002Fp\u003E\u003Cp\u003EВ прямом эфире:\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003EПоказываем архитектуру сервисов облака ещё до релиза.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EДелимся опытом на реальных кейсах из разработки.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EОтвечаем на вопросы в прямом эфире.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003EВ новом выпуске проекта расскажем, как строим underlay-сеть нового облака.\u003C\u002Fp\u003E\u003Cp\u003EВы узнаете:\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003EКак мы поменяли подход к построению underlay-сети в новом облаке MWS.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EКакую архитектуру строим и как реализовали изоляцию management и data plane.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EКак обеспечиваем отказоустойчивость и производительность на уровне физической инфраструктуры.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003EНовый выпуск Building the Cloud будет интересен сетевым инженерам, backend-разработчикам, DevOps- и SRE-инженерам, а также всем, кто интересуется сетевыми или облачными технологиями.\u003C\u002Fp\u003E\u003Cp\u003EРегистрируйтесь по ссылке, подключайтесь к прямому эфиру и задавайте вопросы в чате.\u003C\u002Fp\u003E\u003Cp\u003EЗа самый интересный вопрос подарим фирменный мерч MWS.\u003C\u002Fp\u003E\u003Cp\u003EДо встречи в эфире.\u003C\u002Fp\u003E","imageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Ff76\u002F0f9\u002Fa82\u002Ff760f9a827b851a5eeca4802c643a91d.png","eventUrl":"https:\u002F\u002Fu.habr.com\u002Fcldr_buildingthecloud4","startDay":"2025-04-03","startTime":"11:00","isOnline":true,"geo":[],"isArchive":false,"categories":[{"id":"2","titleHtml":"Разработка"}],"tags":["реалити-проект для разработчиков","Реалити для разработчиков","облако","облако MWS"],"metadata":null},{"id":"620","titleHtml":"Открытая встреча «System Analysis Meetup SberHealth»","descriptionHtml":"\u003Cp\u003EВ программе:\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003EГоргоц Мария, старший системный аналитик, расскажет про описание требований для мобильных приложений.&nbsp;\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EНижник Станислав, ведущий системный аналитик, расскажет про книжный клуб системных аналитиков: «Как мы создали сообщество для обмена знаниями».\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EВ качестве приглашённого спикера Севостьянова Анастасия, ведущий системный аналитик в Альфа-Банке, расскажет про мидл слой без хаоса: «Как сделать документацию понятной и живой».&nbsp;\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003EПосле сессии с докладами проведём профессиональную игру для офлайн-участников «Искусство защиты абсурда».&nbsp;\u003C\u002Fp\u003E\u003Cp\u003EВедущая митапа Пашкова Ольга, руководитель направления методологии и системного анализа в СберЗдоровье.\u003C\u002Fp\u003E","imageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Feba\u002Fc37\u002F879\u002Febac378793b959ebce42f41713e7b67f.jpg","eventUrl":"https:\u002F\u002Fu.habr.com\u002Fcldr_sbermeetup","startDay":"2025-04-03","startTime":"17:00","finishDay":"2025-04-03","finishTime":"23:00","isOnline":true,"geo":["Москва"],"isArchive":false,"categories":[{"id":"12","titleHtml":"Аналитика"}],"tags":["Семинар аналитика","сбер митап","системная аналитика митап","системная аналитика"],"metadata":null},{"id":"590","titleHtml":"«GoCloud 2025» — масштабная IT-конференция про облака и AI","descriptionHtml":"\u003Cp\u003EПоговорим про глобальные тренды в AI, расскажем про широкий набор сценариев работы в облаке, поделимся последними релизами и нашими планами, чтобы показать, какой простор открывают облачные и AI-технологии для бизнеса и разработчиков.\u003C\u002Fp\u003E\u003Cp\u003EЧто ждёт участников в этом году:\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003EТри трека: инфраструктура и инструменты, AI и R&amp;D и сценарии работы в облаке.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003E30+ спикеров из Cloud.ru и ведущих российских компаний.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003ELive-демонстрации облачных платформ и нетворкинг с экспертами.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EНе только доклады: интерактивные зоны, afterparty с музыкальной программой и кастомный мерч.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003EКому будет полезно: техническим лидерам, IT-директорам, бизнес-руководителям, разработчикам, DevOps-инженерам, архитекторам, дата-инженерам, AI\u002FML-инженерам, дата-сайентистам, SRE-инженерам, системным администраторам, специалистам по информационной безопасности.\u003C\u002Fp\u003E\u003Cp\u003EАдрес: Москва, Цифровое деловое пространство (ЦДП), ул. Покровка, 47.\u003C\u002Fp\u003E\u003Cp\u003E\u003C\u002Fp\u003E","imageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F31b\u002Fe68\u002F295\u002F31be6829578e7934fbc944396eb330b1.png","eventUrl":"https:\u002F\u002Fu.habr.com\u002Fcldr_gocloud","startDay":"2025-04-10","startTime":"10:00","finishDay":"2025-04-10","finishTime":"20:00","isOnline":true,"geo":["Москва"],"isArchive":false,"categories":[{"id":"2","titleHtml":"Разработка"},{"id":"4","titleHtml":"Администрирование"},{"id":"8","titleHtml":"Менеджмент"}],"tags":["конференция Cloud.ru","AI","ИИ","айти конференция","облачные хранилища"],"metadata":null},{"id":"516","titleHtml":"IT-конференция Merge Tatarstan 2025","descriptionHtml":"\u003Cp\u003EКрупнейшая региональная IT-конференция России собирает профессионалов со всей страны для нетворкинга, обмена опытом и поиска новых деловых контактов.\u003C\u002Fp\u003E\u003Cp\u003EMerge Tatarstan — это 7 тематических конференций на одной площадке, 2000 участников, более 170 спикеров-практиков, мастер-классы, воркшопы и BoF-сессии.\u003C\u002Fp\u003E\u003Cp\u003EК участию в конференции приглашаются разработчики, QA, тимлиды, Project\u002FProduct-менеджеры, маркетологи, аналитики, UI\u002FUX-дизайнеры, PR-специалисты, HR-менеджеры, владельцы бизнеса и начинающие специалисты.\u003C\u002Fp\u003E\u003Cp\u003E\u003C\u002Fp\u003E","imageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F0e9\u002F3a8\u002F3ec\u002F0e93a83ecea09f806d1df907ddb036a4.jpg","eventUrl":"https:\u002F\u002Fu.habr.com\u002Fcldr_tatarstan","startDay":"2025-04-25","startTime":"09:00","finishDay":"2025-04-26","finishTime":"19:30","isOnline":false,"geo":["Казань"],"isArchive":false,"categories":[{"id":"2","titleHtml":"Разработка"},{"id":"10","titleHtml":"Маркетинг"},{"id":"16","titleHtml":"Другое"}],"tags":["Разработка","IT","PR","UI\u002FUX","бизнес","маркетинг","аналитика"],"metadata":null},{"id":"610","titleHtml":"Летняя айти-тусовка Summer Merge","descriptionHtml":"\u003Cp\u003EЛетняя айти-тусовка возвращается.\u003C\u002Fp\u003E\u003Cp\u003EВырваться из рутины и сменить обстановку на несколько дней можно вместе с Summer Merge.&nbsp;\u003C\u002Fp\u003E\u003Cp\u003EСосновый лес, чистый воздух, живое общение с экспертами IT, спортивные состязания, мастер-классы, квесты, встречи с друзьями, новые знакомства, afterparty — забудьте про суету города и окунитесь в приятную атмосферу digital detox. В эти летние IT-выходные мы обещаем атмосферу ярких приключений.&nbsp;\u003C\u002Fp\u003E\u003Cp\u003EЖдём вас 20—22 июня в экопарке «Русский берег» на Summer Merge.\u003C\u002Fp\u003E","imageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F652\u002F12d\u002F998\u002F65212d998fb4939d9787bd9c726d2acb.png","eventUrl":"https:\u002F\u002Fu.habr.com\u002Fcldr_summermerge","startDay":"2025-06-20","finishDay":"2025-06-22","isOnline":false,"geo":["Ульяновская область"],"isArchive":false,"categories":[{"id":"2","titleHtml":"Разработка"},{"id":"16","titleHtml":"Другое"}],"tags":["летняя айти-тусовка","айти-кэмп","летний выезд для айтишников","Summer Merge"],"metadata":null}],"currentEvent":null,"eventsFilter":{"city":"all","timeStarted":null,"timeEnded":null}},"wysiwyg":{"WYSIWYGRulesRefs":null}};(function(){var s;(s=document.currentScript||document.scripts[document.scripts.length-1]).parentNode.removeChild(s);}());</script><script src="https://assets.habr.com/habr-web/js/chunk-vendors.3b11d41f.js" defer></script><script src="https://assets.habr.com/habr-web/js/app.7a97ea6d.js" defer></script></div>
    <div id="overlays"><!----><!--teleport anchor--><!----><!--teleport anchor--><!----><!--teleport anchor--><!----><!--teleport anchor--><!----><!--teleport anchor--><!----><!--teleport anchor--></div>
    
    
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-S28W1WC23F"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());
    </script>
  
  <script type="text/javascript" >
    (function(m,e,t,r,i,k,a){m[i]=m[i]||function(){(m[i].a=m[i].a||[]).push(arguments)};
    m[i].l=1*new Date();k=e.createElement(t),a=e.getElementsByTagName(t)[0],k.async=1,k.src=r,a.parentNode.insertBefore(k,a)})
    (window, document, "script", "https://mc.yandex.ru/metrika/tag.js", "ym");

  </script>
    <script type="text/javascript">
      window.addEventListener('load', function () {
        setTimeout(() => {
          const img = new Image();
          img.src = 'https://vk.com/rtrg?p=VK-RTRG-421343-57vKE';
        }, 0);
      });
    </script>
  
    </body>

    </html>
