<!DOCTYPE html>
<html lang="ru">

  <head>
    <title>Веб-приложение на Kotlin + Spring Boot + Vue.js &#x2F; Хабр</title>
<meta property="fb:app_id" content="444736788986613">
<meta property="fb:pages" content="472597926099084">
<meta name="twitter:card" content="summary_large_image">
<meta name="twitter:site" content="@habr_com">
<meta property="og:site_name" content="Хабр">
<link href="https://habr.com/ru/rss/post/467161/?fl=ru" type="application/rss+xml" title rel="alternate" name="rss">
<link href="https://habr.com/ru/articles/467161/" rel="canonical" data-hid="e3fa780">
<link rel="image_src" href="https://habr.com/share/publication/467161/a279aa7d55f3b1fadd8d565604c68581/" data-hid="2a79c45">
<meta property="og:title" content="Веб-приложение на Kotlin + Spring Boot + Vue.js">
<meta name="twitter:title" content="Веб-приложение на Kotlin + Spring Boot + Vue.js">
<meta name="aiturec:title" content="Веб-приложение на Kotlin + Spring Boot + Vue.js">
<meta name="description" content="Добрый день, дорогие обитатели Хабра! Не так давно мне представилась возможность реализовать небольшой проект без особых требований по технической части. То есть, я был волен выбирать стек технологий...">
<meta itemprop="description" content="Добрый день, дорогие обитатели Хабра! Не так давно мне представилась возможность реализовать небольшой проект без особых требований по технической части. То есть, я был волен выбирать стек технологий...">
<meta property="og:description" content="Добрый день, дорогие обитатели Хабра! Не так давно мне представилась возможность реализовать небольшой проект без особых требований по технической части. То есть, я был волен выбирать стек технологий...">
<meta name="twitter:description" content="Добрый день, дорогие обитатели Хабра! Не так давно мне представилась возможность реализовать небольшой проект без особых требований по технической части. То есть, я был волен выбирать стек технологий...">
<meta property="aiturec:description" content="Добрый день, дорогие обитатели Хабра! Не так давно мне представилась возможность реализовать небольшой проект без особых требований по технической части. То есть, я был волен выбирать стек технологий...">
<meta itemprop="image" content="https://habr.com/share/publication/467161/a279aa7d55f3b1fadd8d565604c68581/">
<meta property="og:image" content="https://habr.com/share/publication/467161/a279aa7d55f3b1fadd8d565604c68581/">
<meta property="og:image:width" content="1200">
<meta property="og:image:height" content="630">
<meta property="aiturec:image" content="https://habr.com/share/publication/467161/a279aa7d55f3b1fadd8d565604c68581/">
<meta name="twitter:image" content="https://habr.com/share/publication/467161/a279aa7d55f3b1fadd8d565604c68581/">
<meta property="vk:image" content="https://habr.com/share/publication/467161/a279aa7d55f3b1fadd8d565604c68581/?format=vk">
<meta property="vk:image" content="https://habr.com/share/publication/467161/a279aa7d55f3b1fadd8d565604c68581/?format=vk?format=vk">
<meta property="aiturec:item_id" content="467161">
<meta property="aiturec:datetime" content="2019-09-12T12:20:11.000Z">
<meta content="https://habr.com/ru/articles/467161/" property="og:url">
<meta property="og:type" content="article">
<meta property="og:locale" content="ru_RU">
<meta property="og:image:width" content="1200">
<meta property="og:image:height" content="630">
<meta name="keywords" content="kotlin, spring, spring framework, spring boot, vue, vue.js, vuejs, fullstack, fullstack development">
<script type="application/ld+json" data-hid="1e0f0a2">{"@context":"http:\/\/schema.org","@type":"Article","mainEntityOfPage":{"@type":"WebPage","@id":"https:\/\/habr.com\/ru\/articles\/467161\/"},"headline":"Веб-приложение на Kotlin + Spring Boot + Vue.js","datePublished":"2019-09-12T15:20:11+03:00","dateModified":"2020-07-02T22:51:31+03:00","author":{"@type":"Person","name":"Вадим"},"publisher":{"@type":"Organization","name":"Habr","logo":{"@type":"ImageObject","url":"https:\/\/habrastorage.org\/webt\/a_\/lk\/9m\/a_lk9mjkccjox-zccjrpfolmkmq.png"}},"description":"Добрый день, дорогие обитатели Хабра!  Не так давно мне представилась возможность реализовать небольшой проект без особых требований по технической части. То ест...","url":"https:\/\/habr.com\/ru\/articles\/467161\/#post-content-body","about":["h_kotlin","h_vuejs","f_develop"],"image":["https:\/\/habrastorage.org\/webt\/rm\/vy\/ox\/rmvyoxpbqjjaajjcfbvdpe5ams0.png","https:\/\/habrastorage.org\/webt\/uj\/ro\/2m\/ujro2mhzhzdj77-krllhk2vthwg.png","https:\/\/habrastorage.org\/webt\/hb\/7p\/2p\/hb7p2pksym25ceozocomrxo0-fu.png","https:\/\/habrastorage.org\/webt\/vj\/n1\/sx\/vjn1sxqgh21twatqxdnwdsax-da.png","https:\/\/habrastorage.org\/webt\/ty\/xq\/rd\/tyxqrdt_bdanmy9ughcq050i5q8.png","https:\/\/habrastorage.org\/webt\/7-\/hl\/tu\/7-hltu0rtm5vigbfhq3hmhin0ri.png","https:\/\/habrastorage.org\/webt\/se\/hr\/lu\/sehrlu8m5npgbdf1dtotvukfk-g.png"]}</script>
    <meta charset="UTF-8">
    <meta name="viewport"
      content="width=device-width,initial-scale=1.0,viewport-fit=cover,maximum-scale=1,user-scalable=0">
    <meta name="referrer" content="unsafe-url">
    <style>
      /* cyrillic-ext */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 400;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9E4kDNxMZdWfMOD5VvmojLazX3dGTP.woff2) format('woff2');
        unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;
      }

      /* cyrillic */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 400;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9E4kDNxMZdWfMOD5Vvk4jLazX3dGTP.woff2) format('woff2');
        unicode-range: U+0301, U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;
      }

      /* latin-ext */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 400;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9E4kDNxMZdWfMOD5VvmYjLazX3dGTP.woff2) format('woff2');
        unicode-range: U+0100-02AF, U+0304, U+0308, U+0329, U+1E00-1E9F, U+1EF2-1EFF, U+2020, U+20A0-20AB, U+20AD-20C0, U+2113, U+2C60-2C7F, U+A720-A7FF;
      }

      /* latin */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 400;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9E4kDNxMZdWfMOD5Vvl4jLazX3dA.woff2) format('woff2');
        unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+0304, U+0308, U+0329, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
      }

      /* cyrillic-ext */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 500;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnZKveSxf6Xl7Gl3LX.woff2) format('woff2');
        unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;
      }

      /* cyrillic */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 500;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnZKveQhf6Xl7Gl3LX.woff2) format('woff2');
        unicode-range: U+0301, U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;
      }

      /* latin-ext */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 500;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnZKveSBf6Xl7Gl3LX.woff2) format('woff2');
        unicode-range: U+0100-02AF, U+0304, U+0308, U+0329, U+1E00-1E9F, U+1EF2-1EFF, U+2020, U+20A0-20AB, U+20AD-20C0, U+2113, U+2C60-2C7F, U+A720-A7FF;
      }

      /* latin */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 500;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnZKveRhf6Xl7Glw.woff2) format('woff2');
        unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+0304, U+0308, U+0329, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
      }

      /* cyrillic-ext */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 700;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnLK3eSxf6Xl7Gl3LX.woff2) format('woff2');
        unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;
      }

      /* cyrillic */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 700;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnLK3eQhf6Xl7Gl3LX.woff2) format('woff2');
        unicode-range: U+0301, U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;
      }

      /* latin-ext */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 700;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnLK3eSBf6Xl7Gl3LX.woff2) format('woff2');
        unicode-range: U+0100-02AF, U+0304, U+0308, U+0329, U+1E00-1E9F, U+1EF2-1EFF, U+2020, U+20A0-20AB, U+20AD-20C0, U+2113, U+2C60-2C7F, U+A720-A7FF;
      }

      /* latin */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 700;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnLK3eRhf6Xl7Glw.woff2) format('woff2');
        unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+0304, U+0308, U+0329, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
      }
    </style>
    <link rel="preload" href="https://assets.habr.com/habr-web/css/theme/light-v1.css" as="style" media="(prefers-color-scheme: light)" /><link rel="preload" href="https://assets.habr.com/habr-web/css/theme/dark-v1.css" as="style" media="(prefers-color-scheme: dark)" /><link id="light-colors" rel="stylesheet" href="https://assets.habr.com/habr-web/css/theme/light-v1.css" media="(prefers-color-scheme: light)" /><link id="dark-colors" rel="stylesheet" href="https://assets.habr.com/habr-web/css/theme/dark-v1.css" media="(prefers-color-scheme: dark)" />
    <script>window.i18nFetch = new Promise((res, rej) => {
          const xhr = new XMLHttpRequest();
          xhr.open('GET', '/js/i18n/ru-compiled.35b2fec11bb79a62419ab67779c2dd82.json');
          xhr.responseType = 'json';
          xhr.onload = function(e) {
            if (this.status === 200) {
              res({ru: xhr.response});
            } else {
              rej(e);
            }
          };
          xhr.send();
        });</script>
    <style>
      .grecaptcha-badge {
        visibility: hidden;
      }
    </style>
    <meta name="habr-version" content="2.233.0">
    
    <meta name="apple-mobile-web-app-status-bar-style" content="#303b44">
    <meta name="msapplication-TileColor" content="#629FBC">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="mobile-web-app-capable" content="yes">
    <link rel="shortcut icon" type="image/png" sizes="16x16" href="https://assets.habr.com/habr-web/img/favicons/favicon-16.png">
    <link rel="shortcut icon" type="image/png" sizes="32x32" href="https://assets.habr.com/habr-web/img/favicons/favicon-32.png">
    <link rel="apple-touch-icon" type="image/png" sizes="76x76" href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-76.png">
    <link rel="apple-touch-icon" type="image/png" sizes="120x120" href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-120.png">
    <link rel="apple-touch-icon" type="image/png" sizes="152x152" href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-152.png">
    <link rel="apple-touch-icon" type="image/png" sizes="180x180" href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-180.png">
    <link rel="apple-touch-icon" type="image/png" sizes="256x256" href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-256.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 320px) and (device-height: 568px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1136x640.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 375px) and (device-height: 812px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2436x1125.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1792x828.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_828x1792.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 375px) and (device-height: 667px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1334x750.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1242x2668.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 414px) and (device-height: 736px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2208x1242.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 375px) and (device-height: 812px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1125x2436.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 414px) and (device-height: 736px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1242x2208.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 1024px) and (device-height: 1366px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2732x2048.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2688x1242.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 834px) and (device-height: 1112px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2224x1668.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 375px) and (device-height: 667px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_750x1334.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 1024px) and (device-height: 1366px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2048x2732.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 834px) and (device-height: 1194px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2388x1668.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 834px) and (device-height: 1112px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1668x2224.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 320px) and (device-height: 568px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_640x1136.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 834px) and (device-height: 1194px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1668x2388.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 768px) and (device-height: 1024px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2048x1536.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 768px) and (device-height: 1024px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1536x2048.png">
    <link rel="mask-icon" color="#77a2b6" href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-120.svg">
    <link crossorigin="use-credentials" href="/manifest.webmanifest" rel="manifest">
    <script async src="https://unpkg.com/pwacompat" crossorigin="anonymous"></script>
    <script>window.yaContextCb = window.yaContextCb || []</script>
    <script src="https://yandex.ru/ads/system/context.js" async></script>
  <link rel="preload" href="https://assets.habr.com/habr-web/css/chunk-vendors.04465f7c.css" as="style"><link rel="preload" href="https://assets.habr.com/habr-web/js/chunk-vendors.3b11d41f.js" as="script"><link rel="preload" href="https://assets.habr.com/habr-web/css/app.20959a76.css" as="style"><link rel="preload" href="https://assets.habr.com/habr-web/js/app.7a97ea6d.js" as="script"><link rel="stylesheet" href="https://assets.habr.com/habr-web/css/chunk-vendors.04465f7c.css"><link rel="stylesheet" href="https://assets.habr.com/habr-web/css/app.20959a76.css"></head>
  <body>
    
    <div id="mount"><div id="app" data-async-called="true"><div class="tm-layout__wrapper"><!--[--><!----><div></div><div class="tm-feature tm-feature"><!----></div><header class="tm-header" data-test-id="header"><div class="tm-page-width"><!--[--><div class="tm-header__container"><div class="tm-header__burger-nav" data-test-id="burger-nav"><button class="tm-header__button tm-header__button_burger" type="button"><svg class="tm-svg-img tm-header__icon tm-header__icon-burger" height="16" width="16"><title>Меню</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#header-burger"></use></svg></button></div><span class="tm-header__logo-wrap"><a class="tm-header__logo tm-header__logo_hl-ru tm-header__logo" href="/ru/"><svg class="tm-svg-img tm-header__icon" height="16" width="16"><title>Хабр</title><use xlink:href="/img/habr-logo-ru.svg#logo"></use></svg></a><span style="display:none;" class="tm-header__beta-sign">β</span></span><!----><div class="tm-header-user-menu tm-header_user-menu"><a href="/ru/search/" class="tm-header-user-menu__item tm-header-user-menu__search" data-test-id="search-button"><svg class="tm-svg-img tm-header-user-menu__icon tm-header-user-menu__icon_search" height="24" width="24"><title>Поиск</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#search"></use></svg></a><!----><!----><div class="tm-header-user-menu__item tm-header-user-menu__write"><div><svg class="tm-svg-img tm-header-user-menu__icon tm-header-user-menu__icon_write" height="24" width="24"><title>Написать публикацию</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#write"></use></svg></div><!----></div><!--[--><div class="tm-header-user-menu__item"><button class="tm-header-user-menu__toggle" data-test-id="user-menu-settings"><svg class="tm-svg-img tm-header-user-menu__icon" height="24" width="24"><title>Настройки</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#page-settings"></use></svg></button></div><a href="https://habr.com/kek/v1/auth/habrahabr/?back=/ru/articles/467161/&amp;hl=ru" rel="nofollow" class="tm-header-user-menu__item"><!--[--><button class="btn btn_solid btn_small tm-header-user-menu__login" type="button"><!--[-->Войти<!--]--></button><!--]--></a><!--]--><!----><!--teleport start--><!--teleport end--><!----></div></div><!--]--></div></header><div class="tm-layout"><div class="tm-page-progress-bar"></div><!----><!----><div class="tm-page-width"><!--[--><!--]--></div><main class="tm-layout__container"><div class="tm-page" hl="ru" data-async-called="true" style="--0c809c5a:16px;--a086013e:100%;--7c457026:0;"><div class="tm-page-width"><!--[--><!----><div class="tm-page__wrapper"><div class="tm-page__main_has-sidebar tm-page__main"><div class="pull-down"><!----><div class="pull-down__header" style="height:0px;"><div class="pull-down__content" style="bottom:10px;"><svg class="tm-svg-img pull-down__icon pull-down__arrow" height="24" width="24"><title>Обновить</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#pull-arrow"></use></svg></div></div><!--[--><!--[--><div class="banner-wrapper narrow" style="--467224fc:100px;--58ff5eba:auto;" data-v-ad758baa><!--[--><div class="placeholder-wrapper placeholder" data-v-ad758baa><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><div class="adfox-banner-placeholder narrow" data-v-12f7bcca><div class="image loads" data-v-12f7bcca></div><div class="lines" data-v-12f7bcca><div class="line loads" data-v-12f7bcca></div><div class="line loads" data-v-12f7bcca></div><div class="line loads" data-v-12f7bcca></div></div></div><!----></div><div id="adfox_169815559787254866" class="tm-adfox-banner" data-v-ad758baa></div><!--]--></div><div class="tm-article-presenter"><!--[--><!--]--><div class="tm-article-presenter__body" data-test-id="article-body"><div class="tm-misprint-area"><div class="tm-misprint-area__wrapper"><!--[--><article class="tm-article-presenter__content tm-article-presenter__content_narrow"><!--[--><div class="tm-article-presenter__header"><!--[--><!--]--><div class="tm-article-snippet tm-article-snippet tm-article-presenter__snippet"><!--[--><!--]--><div class="tm-article-snippet__meta-container"><div class="tm-article-snippet__meta"><span class="tm-user-info tm-article-snippet__author"><a href="/ru/users/drleprechaun/" class="tm-user-info__userpic" data-test-id="user-info-pic" title="drleprechaun"><div class="tm-entity-image"><img alt="" class="tm-entity-image__pic" height="32" src="//habrastorage.org/r/w64/getpro/habr/avatars/483/5b8/db5/4835b8db5f4ab9c0abb8011a75bce3bf.jpg" width="32"></div></a><span class="tm-user-info__user tm-user-info__user_appearance-default" data-test-id="user-info-description"><a href="/ru/users/drleprechaun/" class="tm-user-info__username">drleprechaun <!----></a><!--[--><span class="tm-article-datetime-published"><time datetime="2019-09-12T12:20:11.000Z" title="2019-09-12, 15:20">12  сен  2019 в 15:20</time></span><!--]--></span></span></div><!----></div><h1 class="tm-title tm-title_h1" lang="ru" data-test-id="articleTitle"><span>Веб-приложение на Kotlin + Spring Boot + Vue.js</span></h1><div class="tm-article-snippet__stats" data-test-id="articleStats"><!----><div class="tm-article-reading-time"><span class="tm-svg-icon__wrapper tm-article-reading-time__icon"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Время на прочтение</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#clock"></use></svg></span><span class="tm-article-reading-time__label">40 мин</span></div><span class="tm-icon-counter tm-data-icons__item"><svg class="tm-svg-img tm-icon-counter__icon" height="24" width="24"><title>Количество просмотров</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-views"></use></svg><span class="tm-icon-counter__value" title="48071">48K</span></span></div><div class="tm-publication-hubs__container" data-test-id="articleHubsList"><div class="tm-publication-hubs"><!--[--><span class="tm-publication-hub__link-container"><a href="/ru/hubs/kotlin/" class="tm-publication-hub__link"><!--[--><span>Kotlin</span><span class="tm-article-snippet__profiled-hub" title="Профильный хаб">*</span><!--]--></a></span><span class="tm-publication-hub__link-container"><a href="/ru/hubs/vuejs/" class="tm-publication-hub__link"><!--[--><span>VueJS</span><span class="tm-article-snippet__profiled-hub" title="Профильный хаб">*</span><!--]--></a></span><!--]--></div></div><div class="tm-article-labels" data-test-id="articleLabels"><div class="tm-article-labels__container"><div class="tm-publication-label tm-publication-label_variant-tutorial"><span>Туториал</span></div><!--[--><div class="tm-publication-label tm-publication-label_variant-sandbox"><a href="/ru/sandbox/" class="">Из песочницы</a></div><!--]--></div></div><!----><!----></div></div><!--[--><!----><div class="tm-article-body" data-gallery-root lang="ru"><div><!--[--><!--]--></div><div id="post-content-body"><div><div class="article-formatted-body article-formatted-body article-formatted-body_version-1"><div xmlns="http://www.w3.org/1999/xhtml">Добрый день, дорогие обитатели Хабра!<br/>
<br/>
Не так давно мне представилась возможность реализовать небольшой проект без особых требований по технической части. То есть, я был волен выбирать стек технологий на своё усмотрение. Потому не преминул возможностью как следует «пощупать» <s>модные, молодёжные</s> многообещающие, но малознакомые мне на практике <b>Kotlin</b> и <b>Vue.js</b>, добавив туда уже знакомый <b>Spring Boot</b> и примерив всё это на незамысловатое веб-приложение. <br/>
<a name="habracut"></a><br/>
Приступив, я опрометчиво полагал, что в Интернете найдётся множество статей и руководств на эту тему. Материалов действительно достаточно, и все они хороши, но только до первого REST-контроллера. Затем начинаются трудности противоречия. А ведь даже в простом приложении хотелось бы иметь более сложную логику, чем отрисовка на странице текста, возвращаемого сервером.<br/>
<br/>
Кое-как разобравшись, я решил написать собственное руководство, которое, надеюсь, будет кому-нибудь полезно.<br/>
<br/>
<h3>О чём и для кого статья </h3><br/>
Данный материал — руководство для «быстрого старта» разработки веб-приложения с бэкендом на <b>Kotlin</b> + <b>Spring Boot</b> и фронтендом на <b>Vue.js</b>. Сразу скажу, что я не «топлю» за них и не говорю о каких-то однозначных преимуществах данного стека. Цель данной статьи — поделиться опытом.<br/>
<br/>
Материал рассчитан на разработчиков, имеющих опыт работы с Java, Spring Framework/Spring Boot, React/Angular или хотя бы чистым JavaScript. Подойдёт и тем, у кого нет такого опыта — например, начинающим программистам, но, боюсь, тогда придётся разбираться в некоторых деталях самостоятельно. Вообще, некоторые моменты этого руководства стоит рассмотреть подробнее, но, думаю, лучше сделать это в рамках других публикаций, чтобы сильно не отклоняться от темы и не делать статью громоздкой. <br/>
<br/>
Быть может, кому это поможет сформировать представление о бэкенд-разработке на Kotlin без необходимости самому погружаться в данную тематику, а кому-то — сократить время работы, взяв за основу уже готовый скелет приложения.<br/>
<br/>
Несмотря на описание конкретных практических шагов, в целом, на мой взгляд, статья имеет экспериментально-обзорный характер. Сейчас такой подход, да и сама постановка вопроса видится, скорее, как хипстерская затея — собрать как можно больше модных слов в одном месте. Но в будущем, возможно, и займёт свою нишу в энтерпрайзной разработке. Быть может, среди нас есть начинающие (и продолжающие) программисты, которым предстоит жить и работать во времена, когда Kotlin и Vue.js будут так же популярны и востребованы, как сейчас Java и React. Ведь Kotlin и Vue.js действительно подают большие надежды.<br/>
<br/>
За то время, пока я писал это руководство, в сети уже стали появляться похожие публикации, как, например, <a href="https://auth0.com/blog/vuejs-spring-boot-kotlin-and-graphql-building-modern-apps-part-1/" rel="nofollow">эта</a>. Повторюсь, материалов, где разбирается порядок действий до первого REST-контроллера достаточно, но интересно было бы увидеть более сложную логику — например, реализацию аутентификации с разделением по ролям, что является довольно необходимым функционалом. Именно этим я дополнил своё собственное руководство. <br/>
<br/>
<h3>Содержание</h3><br/>
<ul>
<li><a href="#Reference">Краткая справка</a></li>
<li><a href="#Instruments">Инструменты разработки</a></li>
<li><a href="#Initialization">Инициализация проекта</a></li>
<li><a href="#RESTAPI">REST API</a></li>
<li><a href="#DB">Подключение к базе данных</a></li>
<li><a href="#Authentication">Аутентификация</a></li>
<li><a href="#WaysToImprove">Пути улучшения</a></li>
<li><a href="#Links">Полезные ссылки</a></li>
</ul><br/>
<a name="Reference"></a><br/>
<h2>Краткая справка</h2><br/>
<a href="https://ru.wikipedia.org/wiki/Kotlin" rel="nofollow"><b>Kotlin</b></a> — язык программирования, работающий поверх <b>JVM</b> и разрабатываемый международной компанией <b>JetBrains</b>.<br/>
<a href="https://ru.wikipedia.org/wiki/Vue.js" rel="nofollow"><b>Vue.js </b></a> — <b>JavaScript</b> -фреймворк для разработки одностраничных приложений в реактивном стиле.<br/>
<br/>
<a name="Instruments"></a><br/>
<h2>Инструменты разработки</h2> <br/>
В качестве среды разработки я бы рекомендовал использовать <b>IntelliJ IDEA</b> — среду разработки от <b>JetBrains</b>, получившую широкую популярность в Java-сообществе, поскольку она имеет удобные инструменты и фичи для работы с Kotlin вплоть для преобразования Java-кода в код на Kotlin. Однако, не стоит рассчитывать, что таким образом можно мигрировать целый проект, и всё вдруг заработает само собой.<br/>
<br/>
Счастливые обладатели <b>IntelliJ IDEA Ultimate Edition</b> могут для удобства работы с Vue.js установить соответствующий <a href="https://plugins.jetbrains.com/plugin/9442-vue-js" rel="nofollow">плагин</a>. Если же вы ищете компромисс между <s>халявой</s> ценой и удобством, то очень рекомендую использовать <b>Microsoft Visual Code</b> с плагином <a href="https://marketplace.visualstudio.com/items?itemName=octref.vetur" rel="nofollow">Vetur</a>.<br/>
<br/>
Полагаю, для многих это очевидно, но на всякий случай напомню, что для работы c Vue.js требуется менеджер пакетов <a href="https://www.npmjs.com" rel="nofollow">npm</a>. Инструкцию по установке Vue.js можно найти на сайте <a href="https://cli.vuejs.org/guide/installation.html" rel="nofollow">Vue CLI</a>.<br/>
<br/>
В качестве сборщика проектов на Java в данном руководстве используется <a href="https://maven.apache.org" rel="nofollow">Maven</a>, в качестве сервера баз данных — <a href="https://www.postgresql.org" rel="nofollow">PostgreSQL</a>.<br/>
<br/>
<a name="Initialization"></a><br/>
<h2>Инициализация проекта</h2><br/>
Создадим директорию проекта, назвав, например <i>kotlin-spring-vue</i>. Нашем проекте будут два модуля — <b>backend</b> и <b>frontend</b>. Сначала будет собираться фронтенд. Затем, при сборке бэкенд будет копировать себе index.html, favicon.ico и все статические файлы (*.js, *.css, изображения и т.д.). <br/>
<br/>
Таким образом, в корневом каталоге у нас будут находится две подпапки — <i>/backend</i> и <i>/frontend</i>. Однако, не стоит торопиться создавать их вручную.<br/>
<br/>
Инициализировать модуль бэкенда можно несколькими путями:<br/>
<br/>
<ul>
<li>вручную (путь самурая)</li>
<li>сгенерирован проект Spring Boot приложения средствами <b>Spring Tool Suite</b> или <b>IntelliJ IDEA Ultimate Edition</b></li>
<li>С помощью <a href="https://start.spring.io" rel="nofollow"><b>Spring Initializr</b></a>, указав нужные настройки — это, пожалуй, самый распространенный способ</li>
</ul><br/>
В нашем случае первичная конфигурация такова:<br/>
<br/>
<div class="spoiler" role="button" tabindex="0">
                        <b class="spoiler_title">Конфигуарция модуля бэкенда</b>
                        <div class="spoiler_text"><ul>
<li>Project: Maven Project</li>
<li>Language: Kotlin</li>
<li>Spring Boot: 2.1.6</li>
<li>Project Metadata: Java 8, JAR packaging</li>
<li>Dependencies: Spring Web Starter, Spring Boot Actuator, Spring Boot DevTools</li>
</ul><br/>
<img src="https://habrastorage.org/r/w1560/webt/rm/vy/ox/rmvyoxpbqjjaajjcfbvdpe5ams0.png" data-src="https://habrastorage.org/webt/rm/vy/ox/rmvyoxpbqjjaajjcfbvdpe5ams0.png"/><br/>
</div>
                    </div><br/>
<i>pom.xml</i> должен выглядеть следующим образом:<br/>
<br/>
<div class="spoiler" role="button" tabindex="0">
                        <b class="spoiler_title">pom.xml - backend</b>
                        <div class="spoiler_text"><pre><code class="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
	&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
	
	&lt;parent&gt;
		&lt;groupId&gt;com.kotlin-spring-vue&lt;/groupId&gt;
		&lt;artifactId&gt;demo&lt;/artifactId&gt;
		&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;
	&lt;/parent&gt;
	
	&lt;groupId&gt;com.kotlin-spring-vue&lt;/groupId&gt;
	&lt;artifactId&gt;backend&lt;/artifactId&gt;
	&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;
	&lt;name&gt;backend&lt;/name&gt;
	&lt;description&gt;Backend module for Kotlin + Spring Boot + Vue.js&lt;/description&gt;

	&lt;properties&gt;
		&lt;java.version&gt;1.8&lt;/java.version&gt;
		&lt;kotlin.version&gt;1.2.71&lt;/kotlin.version&gt;
		&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;
		&lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;
		&lt;rest-assured.version&gt;3.3.0&lt;/rest-assured.version&gt;
	&lt;/properties&gt;

	&lt;dependencies&gt;
		&lt;dependency&gt;
			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
			&lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;
		&lt;/dependency&gt;
		&lt;dependency&gt;
			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
			&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
		&lt;/dependency&gt;
		&lt;dependency&gt;
			&lt;groupId&gt;com.fasterxml.jackson.module&lt;/groupId&gt;
			&lt;artifactId&gt;jackson-module-kotlin&lt;/artifactId&gt;
		&lt;/dependency&gt;
		&lt;dependency&gt;
			&lt;groupId&gt;org.jetbrains.kotlin&lt;/groupId&gt;
			&lt;artifactId&gt;kotlin-reflect&lt;/artifactId&gt;
		&lt;/dependency&gt;
		&lt;dependency&gt;
			&lt;groupId&gt;org.jetbrains.kotlin&lt;/groupId&gt;
			&lt;artifactId&gt;kotlin-stdlib-jdk8&lt;/artifactId&gt;
		&lt;/dependency&gt;

		&lt;dependency&gt;
			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
			&lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;
			&lt;scope&gt;runtime&lt;/scope&gt;
			&lt;optional&gt;true&lt;/optional&gt;
		&lt;/dependency&gt;
		&lt;dependency&gt;
			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
			&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;
			&lt;scope&gt;test&lt;/scope&gt;
		&lt;/dependency&gt;
	&lt;/dependencies&gt;

	&lt;build&gt;
		&lt;sourceDirectory&gt;${project.basedir}/src/main/kotlin&lt;/sourceDirectory&gt;
		&lt;testSourceDirectory&gt;${project.basedir}/src/test/kotlin&lt;/testSourceDirectory&gt;
		&lt;plugins&gt;
			&lt;plugin&gt;
				&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
				&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;
				&lt;configuration&gt;
					&lt;mainClass&gt;com.kotlinspringvue.backend.BackendApplicationKt&lt;/mainClass&gt;
				&lt;/configuration&gt;
			&lt;/plugin&gt;
			&lt;plugin&gt;
				&lt;groupId&gt;org.jetbrains.kotlin&lt;/groupId&gt;
				&lt;artifactId&gt;kotlin-maven-plugin&lt;/artifactId&gt;
				&lt;configuration&gt;
					&lt;args&gt;
						&lt;arg&gt;-Xjsr305=strict&lt;/arg&gt;
					&lt;/args&gt;
					&lt;compilerPlugins&gt;
						&lt;plugin&gt;spring&lt;/plugin&gt;
					&lt;/compilerPlugins&gt;
				&lt;/configuration&gt;
				&lt;dependencies&gt;
					&lt;dependency&gt;
						&lt;groupId&gt;org.jetbrains.kotlin&lt;/groupId&gt;
						&lt;artifactId&gt;kotlin-maven-allopen&lt;/artifactId&gt;
						&lt;version&gt;${kotlin.version}&lt;/version&gt;
					&lt;/dependency&gt;
				&lt;/dependencies&gt;
			&lt;/plugin&gt;
			&lt;plugin&gt;
				&lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt;
				&lt;executions&gt;
					&lt;execution&gt;
						&lt;id&gt;copy Vue.js frontend content&lt;/id&gt;
						&lt;phase&gt;generate-resources&lt;/phase&gt;
						&lt;goals&gt;
							&lt;goal&gt;copy-resources&lt;/goal&gt;
						&lt;/goals&gt;
						&lt;configuration&gt;
							&lt;outputDirectory&gt;src/main/resources/public&lt;/outputDirectory&gt;
							&lt;overwrite&gt;true&lt;/overwrite&gt;
							&lt;resources&gt;
								&lt;resource&gt;
									&lt;directory&gt;${project.parent.basedir}/frontend/target/dist&lt;/directory&gt;
									&lt;includes&gt;
										&lt;include&gt;static/&lt;/include&gt;
										&lt;include&gt;index.html&lt;/include&gt;
										&lt;include&gt;favicon.ico&lt;/include&gt;
									&lt;/includes&gt;
								&lt;/resource&gt;
							&lt;/resources&gt;
						&lt;/configuration&gt;
					&lt;/execution&gt;
				&lt;/executions&gt;
			&lt;/plugin&gt;
		&lt;/plugins&gt;
	&lt;/build&gt;
&lt;/project&gt;
</code></pre><br/>
Обращаю внимание:<br/>
<br/>
<ul>
<li>Название главного класса заканчивается на <i>Kt</i></li>
<li>Выполняется копирование ресурсов из <i>корневая_папка_проекта/frontend/target/dist</i> в <i>src/main/resources/public</i></li>
<li>Родительский проект (parent) в лице <i>spring-boot-starter-parent</i> пренесён на уровень главного <i>pom.xml</i></li>
</ul><br/>
</div>
                    </div><br/>
Чтобы инициализировать модуль фронтенда, переходим в корневую директорию проекта и выполняем команду:<br/>
<br/>
<pre><code class="plaintext">$ vue create frontend</code></pre><br/>
Далее можно выбрать все настройки по умолчанию — в нашем случае этого будет достаточно.<br/>
<br/>
По умолчанию модуль будет собираться в подпапку <i>/dist</i>, однако нам нужно видеть собранные файлы в папке /target. Для этого создадим файл <i>vue.config.js</i> прямо в <i>/frontend</i> со следующими настройками:<br/>
<br/>
<pre><code class="javascript">module.exports = { 
     outputDir: 'target/dist',
     assetsDir: 'static'
}
</code></pre><br/>
Поместим в модуль <i>frontend</i> файл <i>pom.xml</i> такого вида:<br/>
<br/>
<div class="spoiler" role="button" tabindex="0">
                        <b class="spoiler_title">pom.xml - frontend</b>
                        <div class="spoiler_text"><pre><code class="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
  &lt;artifactId&gt;frontend&lt;/artifactId&gt;

  &lt;parent&gt;
     &lt;groupId&gt;com.kotlin-spring-vue&lt;/groupId&gt;
     &lt;artifactId&gt;demo&lt;/artifactId&gt;
     &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;
  &lt;/parent&gt;

  &lt;properties&gt;
     &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;
     &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;
     &lt;java.version&gt;1.8&lt;/java.version&gt;
      &lt;frontend-maven-plugin.version&gt;1.6&lt;/frontend-maven-plugin.version&gt;
  &lt;/properties&gt;

  &lt;build&gt;
     &lt;plugins&gt;
        &lt;plugin&gt;
           &lt;groupId&gt;com.github.eirslett&lt;/groupId&gt;
           &lt;artifactId&gt;frontend-maven-plugin&lt;/artifactId&gt;
           &lt;version&gt;${frontend-maven-plugin.version}&lt;/version&gt;
           &lt;executions&gt;
              &lt;!-- Install our node and npm version to run npm/node scripts--&gt;
              &lt;execution&gt;
                 &lt;id&gt;install node and npm&lt;/id&gt;
                 &lt;goals&gt;
                    &lt;goal&gt;install-node-and-npm&lt;/goal&gt;
                 &lt;/goals&gt;
                 &lt;configuration&gt;
                    &lt;nodeVersion&gt;v11.8.0&lt;/nodeVersion&gt;
                 &lt;/configuration&gt;
              &lt;/execution&gt;
              &lt;!-- Install all project dependencies --&gt;
              &lt;execution&gt;
                 &lt;id&gt;npm install&lt;/id&gt;
                 &lt;goals&gt;
                    &lt;goal&gt;npm&lt;/goal&gt;
                 &lt;/goals&gt;
                 &lt;!-- optional: default phase is "generate-resources" --&gt;
                 &lt;phase&gt;generate-resources&lt;/phase&gt;
                 &lt;!-- Optional configuration which provides for running any npm command --&gt;
                 &lt;configuration&gt;
                    &lt;arguments&gt;install&lt;/arguments&gt;
                 &lt;/configuration&gt;
              &lt;/execution&gt;
              &lt;!-- Build and minify static files --&gt;
              &lt;execution&gt;
                 &lt;id&gt;npm run build&lt;/id&gt;
                 &lt;goals&gt;
                    &lt;goal&gt;npm&lt;/goal&gt;
                 &lt;/goals&gt;
                 &lt;configuration&gt;
                    &lt;arguments&gt;run build&lt;/arguments&gt;
                    &lt;/configuration&gt;
              &lt;/execution&gt;
           &lt;/executions&gt;
        &lt;/plugin&gt;
     &lt;/plugins&gt;
  &lt;/build&gt;
&lt;/project&gt;
</code></pre><br/>
</div>
                    </div><br/>
И, наконец, поместим <i>pom.xml</i> в корневую директорию проекта:<br/>
<div class="spoiler" role="button" tabindex="0">
                        <b class="spoiler_title">pom.xml</b>
                        <div class="spoiler_text"><pre><code class="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;groupId&gt;com.kotlin-spring-vue&lt;/groupId&gt;
    &lt;artifactId&gt;demo&lt;/artifactId&gt;
    &lt;packaging&gt;pom&lt;/packaging&gt;
    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;

    &lt;name&gt;kotlin-spring-vue&lt;/name&gt;
    &lt;description&gt;Kotlin + Spring Boot + Vue.js&lt;/description&gt;

    &lt;modules&gt;
        &lt;module&gt;frontend&lt;/module&gt;
        &lt;module&gt;backend&lt;/module&gt;
    &lt;/modules&gt;

    &lt;parent&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;
        &lt;version&gt;2.1.3.RELEASE&lt;/version&gt;
        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;
    &lt;/parent&gt;

    &lt;properties&gt;
        &lt;main.basedir&gt;${project.basedir}&lt;/main.basedir&gt;
    &lt;/properties&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.jacoco&lt;/groupId&gt;
                &lt;artifactId&gt;jacoco-maven-plugin&lt;/artifactId&gt;
                &lt;executions&gt;
                    &lt;!-- Prepares the property pointing to the JaCoCo
                    runtime agent which is passed as VM argument when Maven the Surefire plugin
                    is executed. --&gt;
                    &lt;execution&gt;
                        &lt;id&gt;pre-unit-test&lt;/id&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;prepare-agent&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                    &lt;!-- Ensures that the code coverage report for
                    unit tests is created after unit tests have been run. --&gt;
                    &lt;execution&gt;
                        &lt;id&gt;post-unit-test&lt;/id&gt;
                        &lt;phase&gt;test&lt;/phase&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;report&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.eluder.coveralls&lt;/groupId&gt;
                &lt;artifactId&gt;coveralls-maven-plugin&lt;/artifactId&gt;
            &lt;/plugin&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.jetbrains.kotlin&lt;/groupId&gt;
                &lt;artifactId&gt;kotlin-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;${kotlin.version}&lt;/version&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;compile&lt;/id&gt;
                        &lt;phase&gt;compile&lt;/phase&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;compile&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                    &lt;execution&gt;
                        &lt;id&gt;test-compile&lt;/id&gt;
                        &lt;phase&gt;test-compile&lt;/phase&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;test-compile&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
                &lt;configuration&gt;
                    &lt;jvmTarget&gt;1.8&lt;/jvmTarget&gt;
                &lt;/configuration&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
&lt;/project&gt;
</code></pre><br/>
где мы видим два наших модуля — <i>frontend</i> и <i>backend</i>, а также parent — <i>spring-boot-starter-parent</i>.<br/>
</div>
                    </div><br/>
<b>Важно:</b> модули должны собираться именно в таком порядке — сначала фронтенд, потом бэкенд.<br/>
<br/>
Теперь мы можем выполнить сборку проекта:<br/>
<br/>
<pre><code class="plaintext">$ mvn install</code></pre><br/>
И, если всё собралось, запустить приложение:<br/>
<br/>
<pre><code class="plaintext">$ mvn --projects backend spring-boot:run</code></pre><br/>
По адресу <a href="http://localhost:8080/" rel="nofollow">http://localhost:8080/</a> будет доступна страничка Vue.js по умолчанию:<br/>
<br/>
<img src="https://habrastorage.org/r/w1560/webt/uj/ro/2m/ujro2mhzhzdj77-krllhk2vthwg.png" data-src="https://habrastorage.org/webt/uj/ro/2m/ujro2mhzhzdj77-krllhk2vthwg.png"/><br/>
<br/>
<a name="RESTAPI"></a><br/>
<h2>REST API</h2><br/>
Теперь давайте создадим какой-нибудь простенький REST-сервис. Например, «Hello, [имя_пользователя]!» (по умолчанию — World), который считает, сколько раз мы его дёрнули.<br/>
Для этого нам понадобится структура данных состоящая из числа и строки — класс, единственным назначением которого является хранение данных. Для этого в Kotlin существуют <a href="https://kotlinlang.ru/docs/reference/data-classes.html" rel="nofollow">классы данных</a>. И наш класс будет выглядеть так:<br/>
<br/>
<pre><code class="kotlin">data class Greeting(val id: Long, val content: String)</code></pre><br/>
Всё. Теперь можем написать непосредственно сервис.<br/>
<br/>
<b>Примечание: </b>для удобства будет вынесить все сервисы в отдельный маршрут <i>/api</i> с помощью аннотации <i>@RequestMapping</i> перед объявлением класса:<br/>
<br/>
<pre><code class="kotlin">
import org.springframework.web.bind.annotation.*
import com.kotlinspringvue.backend.model.Greeting
import java.util.concurrent.atomic.AtomicLong

@RestController
@RequestMapping("/api")
class BackendController() {

     val counter = AtomicLong()

     @GetMapping("/greeting")
     fun greeting(@RequestParam(value = "name", defaultValue = "World") name: String) =
     Greeting(counter.incrementAndGet(), "Hello, $name")

}
</code></pre><br/>
Теперь перезапустим приложение и посмотрим результат <a href="http://localhost:8080/api/greeting?name=Vadim" rel="nofollow">http://localhost:8080/api/greeting?name=Vadim</a>:<br/>
<br/>
<pre><code class="plaintext">{"id":1,"content":"Hello, Vadim"}</code></pre><br/>
Обновим страничку и убедимся, что счётчик работает:<br/>
<br/>
<pre><code class="plaintext">{"id":2,"content":"Hello, Vadim"}</code></pre><br/>
Теперь поработаем над фронтендом, чтобы красиво отрисовывать результат на странице.<br/>
Установим <i>vue-router</i> для того, чтобы реализовать навигацию по «страницам» (по факту — по маршрутам и компонентам, поскольку страница у нас всего одна) в нашем приложении:<br/>
<br/>
<pre><code class="plaintext">$ npm install --save vue-router </code></pre><br/>
Добавим <i>router.js</i> в <i>/src</i> — этот компонент будет отвечать за маршрутизацию:<br/>
<br/>
<div class="spoiler" role="button" tabindex="0">
                        <b class="spoiler_title">router.js</b>
                        <div class="spoiler_text"><pre><code class="javascript">import Vue from 'vue'
import Router from 'vue-router'
import HelloWorld from '@/components/HelloWorld'
import Greeting from '@/components/Greeting'

Vue.use(Router)

export default new Router({
   mode: 'history',
   routes: [
     {
       path: '/',
       name: 'Greeting',
       component: Greeting
     },
     {
       path: '/hello-world',
       name: 'HelloWorld',
       component: HelloWorld
     }
   ]
})
</code></pre><br/>
</div>
                    </div><br/>
<b>Примечание:</b> по корневому маршруту ("/") нам будет доступен компонент Greeting.vue, который мы напишем чуть позже.<br/>
<br/>
Сейчас же заимпортируем наш роутер. Для этого внесём изменения в <div class="spoiler" role="button" tabindex="0">
                        <b class="spoiler_title">main.js</b>
                        <div class="spoiler_text"><pre><code class="javascript">import Vue from 'vue'
import App from './App.vue'
import router from './router'

Vue.config.productionTip = false

new Vue({ 
     router,
     render: h =&gt; h(App),
}).$mount('#app') 
</code></pre><br/>
</div>
                    </div><br/>
Затем <div class="spoiler" role="button" tabindex="0">
                        <b class="spoiler_title">App.vue</b>
                        <div class="spoiler_text"><pre><code class="xml">&lt;template&gt;
     &lt;div id="app"&gt;
           &lt;router-view&gt;&lt;/router-view&gt;
     &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
export default {
     name: 'app'
}
&lt;/script&gt;

&lt;style&gt;
&lt;/style&gt;
</code></pre><br/>
</div>
                    </div><br/>
Для выполнения запросов к серверу воспользуемся HTTP-клиентом AXIOS:<br/>
<br/>
<pre><code class="plaintext">$ npm install --save axios</code></pre><br/>
Для того, чтобы не писать каждый раз одни и те же настройки (например, маршрут запросов — "/api") в каждом компоненте, я рекомендую вынести их в отельный компонент <i>http-common.js</i>:<br/>
<br/>
<pre><code class="javascript">import axios from 'axios'

export const AXIOS = axios.create({ 
     baseURL: `/api` 
})
</code></pre> <br/>
<b>Примечание:</b> чтобы избежать предупреждений при в выводе в консоль (<i>console.log()</i>), я рекомендую прописать эту строку в <i>package.json</i>:<br/>
<br/>
<pre><code class="javascript">"rules": { 
     "no-console": "off"
}
</code></pre><br/>
Теперь, наконец, создадим компонент (в <i>/src/components</i>)<br/>
<br/>
<div class="spoiler" role="button" tabindex="0">
                        <b class="spoiler_title">Greeting.vue</b>
                        <div class="spoiler_text"><pre><code class="xml">import {AXIOS} from './http-common'

&lt;template&gt;
   &lt;div id="greeting"&gt;
       &lt;h3&gt;Greeting component&lt;/h3&gt;
       &lt;p&gt;Counter: {{ counter }}&lt;/p&gt;
       &lt;p&gt;Username: {{ username }}&lt;/p&gt;
   &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
export default {
   name: 'Greeting',
   data() {
       return {
           counter: 0,
           username: ''
       }
   },
   methods: {
       loadGreeting() {
           AXIOS.get('/greeting', { params: { name: 'Vadim' } })
           .then(response =&gt; {
               this.$data.counter = response.data.id;
               this.$data.username = response.data.content;
           })
           .catch(error =&gt; {
               console.log('ERROR: ' + error.response.data);
           })
       }
   },
   mounted() {
       this.loadGreeting();
   }
}
&lt;/script&gt;
</code></pre><br/>
</div>
                    </div><br/>
<b>Примечание:</b><br/>
<br/>
<ul>
<li>Параметры запросы захардкожены для того, чтобы просто посмотреть, как работает метод</li>
<li>Функция загрузки и отрисовки данных (<code>loadGreeting()</code>) вызывается сразу после загрузки страницы (<i>mounted()</i>)</li>
<li>мы импортировали AXIOS уже с нашими кастомными настройками из <i>http-common</i></li>
</ul><br/>
<img src="https://habrastorage.org/r/w1560/webt/hb/7p/2p/hb7p2pksym25ceozocomrxo0-fu.png" data-src="https://habrastorage.org/webt/hb/7p/2p/hb7p2pksym25ceozocomrxo0-fu.png"/><br/>
<a name="DB"></a><br/>
<h2>Подключение к базе данных</h2><br/>
Теперь давайте рассмотрим процесс взаимодействия с базой данных на примере <b>PostgreSQL</b> и <b>Spring Data</b>.<br/>
<br/>
Для начала создадим тестовую табличку:<br/>
<br/>
<pre><code class="sql">CREATE TABLE public."person"
     (
          id serial NOT NULL,
          name character varying,
          PRIMARY KEY (id)
     ); 
</code></pre><br/>
и наполним её данными:<br/>
<br/>
<pre><code class="sql">INSERT INTO person (name) VALUES ('John'), ('Griselda'), ('Bobby');</code></pre><br/>
<div class="spoiler" role="button" tabindex="0">
                        <b class="spoiler_title">Дополним pom.xml модуля бэкенда:</b>
                        <div class="spoiler_text"><pre><code class="xml">&lt;properties&gt;
...
&lt;postgresql.version&gt;42.2.5&lt;/postgresql.version&gt;
...
&lt;/properties&gt;
...
&lt;dependency&gt;
     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
     &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
     &lt;groupId&gt;org.postgresql&lt;/groupId&gt;
     &lt;artifactId&gt;postgresql&lt;/artifactId&gt;
     &lt;version&gt;${postgresql.version}&lt;/version&gt;
&lt;/dependency&gt;
...
&lt;plugin&gt;
&lt;groupId&gt;org.jetbrains.kotlin&lt;/groupId&gt;
&lt;artifactId&gt;kotlin-maven-plugin&lt;/artifactId&gt;
&lt;configuration&gt;
     &lt;args&gt;
          &lt;arg&gt;-Xjsr305=strict&lt;/arg&gt;
     &lt;/args&gt;
     &lt;compilerPlugins&gt;
          &lt;plugin&gt;spring&lt;/plugin&gt;
          &lt;plugin&gt;jpa&lt;/plugin&gt;
     &lt;/compilerPlugins&gt;
&lt;/configuration&gt; 
...
&lt;dependency&gt;
     &lt;groupId&gt;org.jetbrains.kotlin&lt;/groupId&gt;
     &lt;artifactId&gt;kotlin-maven-noarg&lt;/artifactId&gt;
     &lt;version&gt;${kotlin.version}&lt;/version&gt;
&lt;/dependency&gt; 
</code></pre><br/>
</div>
                    </div><br/>
Теперь дополним файл <i>application.properties</i> модуля бэкенда настройками подключения к БД:<br/>
<br/>
<pre><code class="plaintext">spring.datasource.url=${SPRING_DATASOURCE_URL}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD}

spring.jpa.generate-ddl=true
spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults = false
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQL9Dialect
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
</code></pre><br/>
<b>Примечание:</b> в таком виде первые три параметра ссылаются на переменные среды. Я настоятельно рекомендую передавать конфиденциальные параметры через переменные среды или параметры запуска. Но, если вы точно уверены, что они не попадут в руки коварных злоумышленников, то можете задать их явно. <br/>
<br/>
Создадим сущность (entity-класс) для объектно-реляционного отображения:<br/>
<br/>
<div class="spoiler" role="button" tabindex="0">
                        <b class="spoiler_title">Person.kt</b>
                        <div class="spoiler_text"><pre><code class="kotlin">
import javax.persistence.Column
import javax.persistence.Entity
import javax.persistence.GeneratedValue
import javax.persistence.GenerationType
import javax.persistence.Id
import javax.persistence.Table

@Entity
@Table (name="person")
data class Person(

       @Id
       @GeneratedValue(strategy = GenerationType.AUTO)
       val id: Long,

       @Column(nullable = false)
       val name: String
)
</code></pre><br/>
</div>
                    </div><br/>
<br/>
И CRUD-репозиторий для работы с нашей таблицей:<br/>
<br/>
<div class="spoiler" role="button" tabindex="0">
                        <b class="spoiler_title">Repository.kt</b>
                        <div class="spoiler_text"><pre><code class="kotlin">
import com.kotlinspringvue.backend.jpa.Person
import org.springframework.stereotype.Repository
import org.springframework.data.repository.CrudRepository
import org.springframework.data.jpa.repository.JpaRepository
import org.springframework.data.repository.query.Param

@Repository
interface PersonRepository: CrudRepository&lt;Person, Long&gt; {}
</code></pre><br/>
<b>Примечание:</b> Мы будем пользоваться методом <code>findAll()</code>, который нет необходимости переопределять, поэтому оставим тело пустым.<br/>
</div>
                    </div><br/>
И, наконец, обновим наш контроллер, чтобы увидеть работу с базой данных в действии:<br/>
<br/>
<div class="spoiler" role="button" tabindex="0">
                        <b class="spoiler_title">BackendController.kt</b>
                        <div class="spoiler_text"><pre><code class="kotlin">
import com.kotlinspringvue.backend.repository.PersonRepository
import org.springframework.beans.factory.annotation.Autowired

… 

@Autowired
lateinit var personRepository: PersonRepository

… 

@GetMapping("/persons")
fun getPersons() = personRepository.findAll() 
</code></pre><br/>
</div>
                    </div><br/>
Запустим приложение, перейдём по ссылке <a href="https://localhost:8080/api/persons" rel="nofollow">https://localhost:8080/api/persons</a>, чтобы убедиться, что всё работает:<br/>
<br/>
<pre><code class="plaintext">[{"id":1,"name":"John"},{"id":2,"name":"Griselda"},{"id":3,"name":"Bobby"}]</code></pre><br/>
<a name="Authentication"></a><br/>
<h2>Аутентификация</h2><br/>
Теперь мы можем перейти к аутентификации — также одной из базовых функций приложений, где предусмотрено разграничение доступа к данным.<br/>
<br/>
Рассмотрим реализацию собственного сервера авторизации с использованием <a href="https://ru.wikipedia.org/wiki/JSON_Web_Token" rel="nofollow">JWT</a> (JSON Web Token).<br/>
<br/>
<b>Почему не Basic Authentication?</b><br/>
<br/>
<ul>
<li>На мой взгляд, Basic Authentication не отвечает современному вызову угроз даже в относительно безопасной среде использования.</li>
<li>На эту тему можно найти гораздо больше материалов.</li>
</ul><br/>
<b>Почему не OAuth из <s>коробки</s> Spring Security OAuth?</b><br/>
<ul>
<li>Потому что по OAuth больше материалов.</li>
<li>Такой подход может диктоваться внешними обстоятельствами: требованиями заказчика, прихотью архитектора и т.д.</li>
<li>Если Вы начинающий разработчик, то в стратегической перспективе будет полезно поковыряться с функционалом безопасности более детально.</li>
</ul><br/>
<h3>Бэкенд</h3><br/>
Пусть в нашем приложении помимо гостей будет две группы пользователей — рядовые пользователи и администраторы. Создадим три таблицы: <i>users</i> — для хранения данных пользователей, <i>roles</i> — для хранения информации о ролях и <i>users_roles</i> — для связывания первых двух таблиц.<br/>
<br/>
<div class="spoiler" role="button" tabindex="0">
                        <b class="spoiler_title">Создадим таблицы, добавим ограничения и заполним таблицу roles</b>
                        <div class="spoiler_text"><pre><code class="sql">CREATE TABLE public.users
(
     id serial NOT NULL,
     username character varying,
     first_name character varying,
     last_name character varying,
     email character varying,
     password character varying,
     enabled boolean,
     PRIMARY KEY (id)
);

CREATE TABLE public.roles
(
     id serial NOT NULL,
     name character varying,
     PRIMARY KEY (id)
); 

CREATE TABLE public.users_roles
(
     id serial NOT NULL,
     user_id integer,
     role_id integer,
     PRIMARY KEY (id)
);

ALTER TABLE public.users_roles
     ADD CONSTRAINT users_roles_users_fk FOREIGN KEY (user_id)
     REFERENCES public.users (id) MATCH SIMPLE
     ON UPDATE CASCADE
     ON DELETE CASCADE;

ALTER TABLE public.users_roles
     ADD CONSTRAINT users_roles_roles_fk FOREIGN KEY (role_id)
     REFERENCES public.roles (id) MATCH SIMPLE
     ON UPDATE CASCADE
     ON DELETE CASCADE;

INSERT INTO roles (name) VALUES ('ROLE_USER'), ('ROLE_ADMIN');
</code></pre><br/>
</div>
                    </div><br/>
 Создадим Entity-классы:<br/>
<div class="spoiler" role="button" tabindex="0">
                        <b class="spoiler_title">User.kt</b>
                        <div class="spoiler_text"><pre><code class="kotlin">
import javax.persistence.*

@Entity
@Table(name = "users")
data class User (

       @Id
       @GeneratedValue(strategy = GenerationType.AUTO)
       val id: Long? = 0,

       @Column(name="username")
       var username: String?=null,

       @Column(name="first_name")
       var firstName: String?=null,

       @Column(name="last_name")
       var lastName: String?=null,

       @Column(name="email")
       var email: String?=null,

       @Column(name="password")
       var password: String?=null,

       @Column(name="enabled")
       var enabled: Boolean = false,

       @ManyToMany(fetch = FetchType.EAGER)
       @JoinTable(
               name = "users_roles",
               joinColumns = [JoinColumn(name = "user_id", referencedColumnName = "id")],
               inverseJoinColumns = [JoinColumn(name = "role_id", referencedColumnName = "id")]
       )
       var roles: Collection&lt;Role&gt;? = null
)
</code></pre><br/>
<b>Примечание:</b> таблицы <i>users</i> и <i>roles</i> находятся в отношении «многие-ко-многим» — у одного пользователя может быть несколько ролей (например, рядовой пользователь и администратор), и одной ролью могут быть наделены несколько пользователей. <br/>
<br/>
<b>Информация к размышлению:</b> Существует подход, когда пользователей наделяют отдельными полномочиями (authorities), в то время как роль подразумевает группы полномочий. Подробнее о разнице между ролями и полномочиями можно прочитать здесь: <a href="https://www.baeldung.com/spring-security-granted-authority-vs-role" rel="nofollow">Granted Authority Versus Role in Spring Security</a>.<br/>
</div>
                    </div><br/>
<div class="spoiler" role="button" tabindex="0">
                        <b class="spoiler_title">Role.kt</b>
                        <div class="spoiler_text"><pre><code class="kotlin">
import javax.persistence.*

@Entity
@Table(name = "roles")
data class Role (

       @Id
       @GeneratedValue(strategy = GenerationType.AUTO)
       val id: Long,

       @Column(name="name")
       val name: String

)
</code></pre><br/>
</div>
                    </div><br/>
Создадим репозитории для работы с таблицами:<br/>
<br/>
<div class="spoiler" role="button" tabindex="0">
                        <b class="spoiler_title">UsersRepository.kt</b>
                        <div class="spoiler_text"><pre><code class="kotlin">
import java.util.Optional
import com.kotlinspringvue.backend.jpa.User
import org.springframework.data.repository.CrudRepository
import org.springframework.data.repository.query.Param
import org.springframework.data.jpa.repository.JpaRepository
import javax.transaction.Transactional

interface UserRepository: JpaRepository&lt;User, Long&gt; {

   fun existsByUsername(@Param("username") username: String): Boolean

   fun findByUsername(@Param("username") username: String): Optional&lt;User&gt;

   fun findByEmail(@Param("email") email: String): Optional&lt;User&gt;

   @Transactional
   fun deleteByUsername(@Param("username") username: String)

}
</code></pre><br/>
</div>
                    </div><br/>
<div class="spoiler" role="button" tabindex="0">
                        <b class="spoiler_title">RolesRepository.kt</b>
                        <div class="spoiler_text"><pre><code class="kotlin">
import com.kotlinspringvue.backend.jpa.Role
import org.springframework.data.repository.CrudRepository
import org.springframework.data.repository.query.Param
import org.springframework.data.jpa.repository.JpaRepository

interface RoleRepository : JpaRepository&lt;Role, Long&gt; {

   fun findByName(@Param("name") name: String): Role
}
</code></pre><br/>
</div>
                    </div><br/>
Добавим новые зависимости в<br/>
<div class="spoiler" role="button" tabindex="0">
                        <b class="spoiler_title">pom.xml модуля бэкенда</b>
                        <div class="spoiler_text"><pre><code class="xml">&lt;dependency&gt;
     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
     &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
     &lt;groupId&gt;com.fasterxml.jackson.module&lt;/groupId&gt;
     &lt;artifactId&gt;jackson-module-kotlin&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
     &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;
     &lt;artifactId&gt;jjwt&lt;/artifactId&gt;
     &lt;version&gt;0.9.0&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
     &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;
     &lt;artifactId&gt;jjwt-api&lt;/artifactId&gt;
     &lt;version&gt;0.10.6&lt;/version&gt;
&lt;/dependency&gt;
</code></pre><br/>
</div>
                    </div><br/>
И добавим новые параметры для работы с токенами в <i>application.properties</i>:<br/>
<pre><code class="plaintext">assm.app.jwtSecret=jwtAssmSecretKey
assm.app.jwtExpiration=86400
</code></pre><br/>
Теперь создадим классы для хранения данных, приходящих с форм авторизации и регистрации:<br/>
<br/>
<div class="spoiler" role="button" tabindex="0">
                        <b class="spoiler_title">LoginUser.kt</b>
                        <div class="spoiler_text"><pre><code class="kotlin">
class LoginUser : Serializable {

   @JsonProperty("username")
   var username: String? = null

   @JsonProperty("password")
   var password: String? = null

   constructor() {}

   constructor(username: String, password: String) {
       this.username = username
       this.password = password
   }

   companion object {
       private const val serialVersionUID = -1764970284520387975L
   }
}
</code></pre><br/>
</div>
                    </div><br/>
<div class="spoiler" role="button" tabindex="0">
                        <b class="spoiler_title">NewUser.kt</b>
                        <div class="spoiler_text"><pre><code class="kotlin">
import com.fasterxml.jackson.annotation.JsonProperty
import java.io.Serializable

class NewUser : Serializable {

   @JsonProperty("username")
   var username: String? = null

   @JsonProperty("firstName")
   var firstName: String? = null

   @JsonProperty("lastName")
   var lastName: String? = null

   @JsonProperty("email")
   var email: String? = null

   @JsonProperty("password")
   var password: String? = null

   constructor() {}

   constructor(username: String, firstName: String, lastName: String, email: String, password: String, recaptchaToken: String) {
       this.username = username
       this.firstName = firstName
       this.lastName = lastName
       this.email = email
       this.password = password
   }

   companion object {
       private const val serialVersionUID = -1764970284520387975L
   }
}
</code></pre><br/>
</div>
                    </div><br/>
Сделаем специальные классы для ответов сервера — возвращающий токен аутентификации и универсальный (строка):<br/>
<br/>
<div class="spoiler" role="button" tabindex="0">
                        <b class="spoiler_title">JwtResponse.kt</b>
                        <div class="spoiler_text"><pre><code class="kotlin">
import org.springframework.security.core.GrantedAuthority

class JwtResponse(var accessToken: String?, var username: String?, val authorities:
     Collection&lt;GrantedAuthority&gt;) {
     var type = "Bearer"
}
</code></pre><br/>
</div>
                    </div><br/>
<div class="spoiler" role="button" tabindex="0">
                        <b class="spoiler_title">ResponseMessage.kt</b>
                        <div class="spoiler_text"><pre><code class="kotlin">
class ResponseMessage(var message: String?)
</code></pre><br/>
</div>
                    </div><br/>
Также нам понадобится исключение «User Already Exists»<br/>
<div class="spoiler" role="button" tabindex="0">
                        <b class="spoiler_title">UserAlreadyExistException.kt</b>
                        <div class="spoiler_text"><pre><code class="kotlin">
class UserAlreadyExistException : RuntimeException {

     constructor() : super() {}

     constructor(message: String, cause: Throwable) : super(message, cause) {}

     constructor(message: String) : super(message) {}

     constructor(cause: Throwable) : super(cause) {}

     companion object {

          private val serialVersionUID = 5861310537366287163L

     }
} 
</code></pre><br/>
</div>
                    </div><br/>
Для определения ролей пользователей нам необходим дополнительный сервис, реализующий интерфейс <i>UserDetailsService</i>:<br/>
<br/>
<div class="spoiler" role="button" tabindex="0">
                        <b class="spoiler_title">UserDetailsServiceImpl.kt</b>
                        <div class="spoiler_text"><pre><code class="kotlin"> 
import com.kotlinspringvue.backend.repository.UserRepository

import org.springframework.beans.factory.annotation.Autowired
import org.springframework.security.core.userdetails.UserDetails
import org.springframework.security.core.userdetails.UserDetailsService
import org.springframework.security.core.userdetails.UsernameNotFoundException
import org.springframework.stereotype.Service
import org.springframework.security.core.GrantedAuthority
import org.springframework.security.core.authority.SimpleGrantedAuthority
import java.util.stream.Collectors

@Service
class UserDetailsServiceImpl: UserDetailsService {

   @Autowired
   lateinit var userRepository: UserRepository

   @Throws(UsernameNotFoundException::class)
   override fun loadUserByUsername(username: String): UserDetails {
       val user = userRepository.findByUsername(username).get()
               ?: throw UsernameNotFoundException("User '$username' not found")

       val authorities: List&lt;GrantedAuthority&gt; = user.roles!!.stream().map({ role -&gt; SimpleGrantedAuthority(role.name)}).collect(Collectors.toList&lt;GrantedAuthority&gt;())

       return org.springframework.security.core.userdetails.User
               .withUsername(username)
               .password(user.password)
               .authorities(authorities)
               .accountExpired(false)
               .accountLocked(false)
               .credentialsExpired(false)
               .disabled(false)
               .build()
   }
}
</code></pre><br/>
</div>
                    </div><br/>
Для работы с JWT нам потребуются три класса:<br/>
<b>JwtAuthEntryPoint</b> — для обработки ошибок авторизации и дальнейшего использования в настройках веб-безопасности:<br/>
<br/>
<div class="spoiler" role="button" tabindex="0">
                        <b class="spoiler_title">JwtAuthEntryPoint.kt</b>
                        <div class="spoiler_text"><pre><code class="kotlin">
import javax.servlet.ServletException
import javax.servlet.http.HttpServletRequest
import javax.servlet.http.HttpServletResponse

import org.slf4j.Logger
import org.slf4j.LoggerFactory
import org.springframework.security.core.AuthenticationException
import org.springframework.security.web.AuthenticationEntryPoint
import org.springframework.stereotype.Component

@Component
class JwtAuthEntryPoint : AuthenticationEntryPoint {

   @Throws(IOException::class, ServletException::class)
   override fun commence(request: HttpServletRequest,
                         response: HttpServletResponse,
                         e: AuthenticationException) {

       logger.error("Unauthorized error. Message - {}", e!!.message)
       response.sendError(HttpServletResponse.SC_UNAUTHORIZED, "Invalid credentials")
   }

   companion object {
       private val logger = LoggerFactory.getLogger(JwtAuthEntryPoint::class.java)
   }
}
</code></pre><br/>
</div>
                    </div><br/>
<b>JwtProvider</b> — чтобы генерировать и валидировать токены, а также определять пользователя по его токену:<br/>
<br/>
<div class="spoiler" role="button" tabindex="0">
                        <b class="spoiler_title">JwtProvider.kt</b>
                        <div class="spoiler_text"><pre><code class="kotlin">
import io.jsonwebtoken.*
import org.springframework.beans.factory.annotation.Autowired
import org.slf4j.Logger
import org.slf4j.LoggerFactory
import org.springframework.beans.factory.annotation.Value
import org.springframework.security.core.Authentication
import org.springframework.stereotype.Component
import org.springframework.security.core.GrantedAuthority
import org.springframework.security.core.authority.SimpleGrantedAuthority
import com.kotlinspringvue.backend.repository.UserRepository
import java.util.Date


@Component
public class JwtProvider {

   private val logger: Logger = LoggerFactory.getLogger(JwtProvider::class.java)

   @Autowired
   lateinit var userRepository: UserRepository

   @Value("\${assm.app.jwtSecret}")
   lateinit var jwtSecret: String

   @Value("\${assm.app.jwtExpiration}")
   var jwtExpiration:Int?=0

   fun generateJwtToken(username: String): String {
       return Jwts.builder()
               .setSubject(username)
               .setIssuedAt(Date())
               .setExpiration(Date((Date()).getTime() + jwtExpiration!! * 1000))
               .signWith(SignatureAlgorithm.HS512, jwtSecret)
               .compact()
   }

   fun validateJwtToken(authToken: String): Boolean {
       try {
           Jwts.parser().setSigningKey(jwtSecret).parseClaimsJws(authToken)
           return true
       } catch (e: SignatureException) {
           logger.error("Invalid JWT signature -&gt; Message: {} ", e)
       } catch (e: MalformedJwtException) {
           logger.error("Invalid JWT token -&gt; Message: {}", e)
       } catch (e: ExpiredJwtException) {
           logger.error("Expired JWT token -&gt; Message: {}", e)
       } catch (e: UnsupportedJwtException) {
           logger.error("Unsupported JWT token -&gt; Message: {}", e)
       } catch (e: IllegalArgumentException) {
           logger.error("JWT claims string is empty -&gt; Message: {}", e)
       }

       return false
   }

   fun getUserNameFromJwtToken(token: String): String {
       return Jwts.parser()
               .setSigningKey(jwtSecret)
               .parseClaimsJws(token)
               .getBody().getSubject()
   }
}
</code></pre><br/>
</div>
                    </div><br/>
<b>JwtAuthTokenFilter</b> — чтобы аутентифицировать пользователей и фильтровать запросы:<br/>
<br/>
<div class="spoiler" role="button" tabindex="0">
                        <b class="spoiler_title">JwtAuthTokenFilter.kt</b>
                        <div class="spoiler_text"><pre><code class="kotlin">
import java.io.IOException

import javax.servlet.FilterChain
import javax.servlet.ServletException
import javax.servlet.http.HttpServletRequest
import javax.servlet.http.HttpServletResponse

import org.slf4j.LoggerFactory
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken
import org.springframework.security.core.context.SecurityContextHolder
import org.springframework.security.core.userdetails.UserDetails
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource
import org.springframework.web.filter.OncePerRequestFilter

import com.kotlinspringvue.backend.service.UserDetailsServiceImpl

class JwtAuthTokenFilter : OncePerRequestFilter() {

   @Autowired
   private val tokenProvider: JwtProvider? = null

   @Autowired
   private val userDetailsService: UserDetailsServiceImpl? = null

   @Throws(ServletException::class, IOException::class)
   override fun doFilterInternal(request: HttpServletRequest, response: HttpServletResponse, filterChain: FilterChain) {
       try {

           val jwt = getJwt(request)
           if (jwt != null &amp;&amp; tokenProvider!!.validateJwtToken(jwt)) {
               val username = tokenProvider.getUserNameFromJwtToken(jwt)

               val userDetails = userDetailsService!!.loadUserByUsername(username)
               val authentication = UsernamePasswordAuthenticationToken(
                       userDetails, null, userDetails.getAuthorities())
               authentication.setDetails(WebAuthenticationDetailsSource().buildDetails(request))

               SecurityContextHolder.getContext().setAuthentication(authentication)
           }
       } catch (e: Exception) {
           logger.error("Can NOT set user authentication -&gt; Message: {}", e)
       }

       filterChain.doFilter(request, response)
   }

   private fun getJwt(request: HttpServletRequest): String? {
       val authHeader = request.getHeader("Authorization")

       return if (authHeader != null &amp;&amp; authHeader.startsWith("Bearer ")) {
           authHeader.replace("Bearer ", "")
       } else null
   }

   companion object {
       private val logger = LoggerFactory.getLogger(JwtAuthTokenFilter::class.java)
   }
}
</code></pre><br/>
</div>
                    </div><br/>
Теперь мы можем сконфигурировать бин, ответственный за веб-безопасность:<br/>
<br/>
<div class="spoiler" role="button" tabindex="0">
                        <b class="spoiler_title">WebSecurityConfig.kt</b>
                        <div class="spoiler_text"><pre><code class="kotlin">
import org.springframework.context.annotation.Bean
import org.springframework.context.annotation.Configuration
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter
import org.springframework.security.config.http.SessionCreationPolicy
import org.springframework.security.authentication.AuthenticationManager
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity
import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity
import org.springframework.security.config.annotation.web.builders.HttpSecurity
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder

import com.kotlinspringvue.backend.jwt.JwtAuthEntryPoint
import com.kotlinspringvue.backend.jwt.JwtAuthTokenFilter
import com.kotlinspringvue.backend.service.UserDetailsServiceImpl


@Configuration
@EnableWebSecurity
@EnableGlobalMethodSecurity(prePostEnabled = true)
class WebSecurityConfig : WebSecurityConfigurerAdapter() {

   @Autowired
   internal var userDetailsService: UserDetailsServiceImpl? = null

   @Autowired
   private val unauthorizedHandler: JwtAuthEntryPoint? = null

   @Bean
   fun bCryptPasswordEncoder(): BCryptPasswordEncoder {
       return BCryptPasswordEncoder()
   }

   @Bean
   fun authenticationJwtTokenFilter(): JwtAuthTokenFilter {
       return JwtAuthTokenFilter()
   }

   @Throws(Exception::class)
   override fun configure(authenticationManagerBuilder: AuthenticationManagerBuilder) {
       authenticationManagerBuilder
               .userDetailsService(userDetailsService)
               .passwordEncoder(bCryptPasswordEncoder())
   }

   @Bean
   @Throws(Exception::class)
   override fun authenticationManagerBean(): AuthenticationManager {
       return super.authenticationManagerBean()
   }

   @Throws(Exception::class)
   override protected fun configure(http: HttpSecurity) {
       http.csrf().disable().authorizeRequests()
               .antMatchers("/**").permitAll()
               .anyRequest().authenticated()
               .and()
               .exceptionHandling().authenticationEntryPoint(unauthorizedHandler).and()
               .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)

       http.addFilterBefore(authenticationJwtTokenFilter(), UsernamePasswordAuthenticationFilter::class.java)
   }
}
</code></pre><br/>
</div>
                    </div><br/>
Создадим контроллер для регистрации и авторизации:<br/>
<br/>
<div class="spoiler" role="button" tabindex="0">
                        <b class="spoiler_title">AuthController.kt</b>
                        <div class="spoiler_text"><pre><code class="kotlin">
import javax.validation.Valid
import java.util.*
import java.util.stream.Collectors

import org.springframework.security.core.Authentication
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.http.HttpStatus
import org.springframework.http.ResponseEntity
import org.springframework.security.authentication.AuthenticationManager
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken
import org.springframework.security.core.context.SecurityContextHolder
import org.springframework.security.core.userdetails.UserDetails
import org.springframework.security.crypto.password.PasswordEncoder
import org.springframework.security.access.prepost.PreAuthorize
import org.springframework.security.core.GrantedAuthority
import org.springframework.security.core.authority.SimpleGrantedAuthority
import org.springframework.web.bind.annotation.CrossOrigin
import org.springframework.web.bind.annotation.PostMapping
import org.springframework.web.bind.annotation.RequestBody
import org.springframework.web.bind.annotation.RequestMapping
import org.springframework.web.bind.annotation.RestController

import com.kotlinspringvue.backend.model.LoginUser
import com.kotlinspringvue.backend.model.NewUser
import com.kotlinspringvue.backend.web.response.JwtResponse
import com.kotlinspringvue.backend.web.response.ResponseMessage
import com.kotlinspringvue.backend.jpa.User
import com.kotlinspringvue.backend.repository.UserRepository
import com.kotlinspringvue.backend.repository.RoleRepository
import com.kotlinspringvue.backend.jwt.JwtProvider

@CrossOrigin(origins = ["*"], maxAge = 3600)
@RestController
@RequestMapping("/api/auth")
class AuthController() {

   @Autowired
   lateinit var authenticationManager: AuthenticationManager

   @Autowired
   lateinit var userRepository: UserRepository

   @Autowired
   lateinit var roleRepository: RoleRepository

   @Autowired
   lateinit var encoder: PasswordEncoder

   @Autowired
   lateinit var jwtProvider: JwtProvider


   @PostMapping("/signin")
   fun authenticateUser(@Valid @RequestBody loginRequest: LoginUser): ResponseEntity&lt;*&gt; {

       val userCandidate: Optional &lt;User&gt; = userRepository.findByUsername(loginRequest.username!!)

       if (userCandidate.isPresent) {
           val user: User = userCandidate.get()
           val authentication = authenticationManager.authenticate(
                   UsernamePasswordAuthenticationToken(loginRequest.username, loginRequest.password))
           SecurityContextHolder.getContext().setAuthentication(authentication)
           val jwt: String = jwtProvider.generateJwtToken(user.username!!)
           val authorities: List&lt;GrantedAuthority&gt; = user.roles!!.stream().map({ role -&gt; SimpleGrantedAuthority(role.name)}).collect(Collectors.toList&lt;GrantedAuthority&gt;())
           return ResponseEntity.ok(JwtResponse(jwt, user.username, authorities))
       } else {
           return ResponseEntity(ResponseMessage("User not found!"),
                   HttpStatus.BAD_REQUEST)
       }
   }

   @PostMapping("/signup")
   fun registerUser(@Valid @RequestBody newUser: NewUser): ResponseEntity&lt;*&gt; {

       val userCandidate: Optional &lt;User&gt; = userRepository.findByUsername(newUser.username!!)

       if (!userCandidate.isPresent) {
           if (usernameExists(newUser.username!!)) {
               return ResponseEntity(ResponseMessage("Username is already taken!"),
                       HttpStatus.BAD_REQUEST)
           } else if (emailExists(newUser.email!!)) {
               return ResponseEntity(ResponseMessage("Email is already in use!"),
                       HttpStatus.BAD_REQUEST)
           }

           // Creating user's account
           val user = User(
                   0,
                   newUser.username!!,
                   newUser.firstName!!,
                   newUser.lastName!!,
                   newUser.email!!,
                   encoder.encode(newUser.password),
                   true
           )
           user!!.roles = Arrays.asList(roleRepository.findByName("ROLE_USER"))

           userRepository.save(user)

           return ResponseEntity(ResponseMessage("User registered successfully!"), HttpStatus.OK)
       } else {
           return ResponseEntity(ResponseMessage("User already exists!"),
                   HttpStatus.BAD_REQUEST)
       }
   }

   private fun emailExists(email: String): Boolean {
       return userRepository.findByUsername(email).isPresent
   }

   private fun usernameExists(username: String): Boolean {
       return userRepository.findByUsername(username).isPresent
   }

}
</code></pre><br/>
Мы реализовали два метода:<br/>
<br/>
<ul>
<li><b>signin</b> — проверяет, существует ли пользователь и, если да, то возвращает сгенерированный токен, имя пользователя и его роли (вернее, <i>authorities</i> — полномочия)</li>
<li>signup — проверяет, существует ли пользователь и, если нет, создаёт новую запись в таблице <i>users</i> с внешней ссылкой на роль <i>ROLE_USER</i></li>
</ul><br/>
</div>
                    </div><br/>
И, наконец, дополним <i>BackendController</i> двумя методами: один будет возвращать данные, доступные только администратору (пользователь с полномочиями ROLE_USER и ROLE_ADMIN) и рядовому пользователю (ROLE_USER).<br/>
<br/>
<div class="spoiler" role="button" tabindex="0">
                        <b class="spoiler_title">BackendController.kt</b>
                        <div class="spoiler_text"><pre><code class="kotlin">
import org.springframework.security.access.prepost.PreAuthorize
import org.springframework.security.core.Authentication
import com.kotlinspringvue.backend.repository.UserRepository
import com.kotlinspringvue.backend.jpa.User

… 

@Autowired
lateinit var userRepository: UserRepository

… 

@GetMapping("/usercontent")
@PreAuthorize("hasRole('USER') or hasRole('ADMIN')")
@ResponseBody
     fun getUserContent(authentication: Authentication): String {
     val user: User = userRepository.findByUsername(authentication.name).get()
     return "Hello " + user.firstName + " " + user.lastName + "!"
}


@GetMapping("/admincontent")
@PreAuthorize("hasRole('ADMIN')")
@ResponseBody
     fun getAdminContent(): String {
     return "Admin's content"
}
</code></pre><br/>
</div>
                    </div><br/>
<h3>Фронтенд</h3><br/>
Создадим несколько новых компонентов:<br/>
<br/>
<ul>
<li>Home</li>
<li>SignIn</li>
<li>SignUp</li>
<li>AdminPage</li>
<li>UserPage</li>
</ul><br/>
С шаблонным содержимым (для <s>удобного копипаста</s> начала):<br/>
<br/>
<div class="spoiler" role="button" tabindex="0">
                        <b class="spoiler_title">Шаблон компонента</b>
                        <div class="spoiler_text"><pre><code class="xml">&lt;template&gt;
     &lt;div&gt;
     &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
&lt;/script&gt;

&lt;style&gt;
&lt;/style&gt;
</code></pre><br/>
</div>
                    </div><br/>
Добавим <i>id=«название_компонента»</i> в каждый <i>div</i> внутри <i>template</i> и <i>export default {name: ‘[component_name]’}</i> в <i>script</i>.<br/>
<br/>
Теперь добавим новые маршруты:<br/>
<br/>
<div class="spoiler" role="button" tabindex="0">
                        <b class="spoiler_title">router.js</b>
                        <div class="spoiler_text"><pre><code class="javascript">import Vue from 'vue'
import Router from 'vue-router'
import Home from '@/components/Home'
import SignIn from '@/components/SignIn'
import SignUp from '@/components/SignUp'
import AdminPage from '@/components/AdminPage'
import UserPage from '@/components/UserPage'

Vue.use(Router)

export default new Router({
   mode: 'history',
   routes: [
     {
       path: '/',
       name: 'Home',
       component: Home
     },
     {
       path: '/home',
       name: 'Home',
       component: Home
     },
     {
       path: '/login',
       name: 'SignIn',
       component: SignIn
     },
     {
       path: '/register',
       name: 'SignUp',
       component: SignUp
     },
     {
       path: '/user',
       name: 'UserPage',
       component: UserPage
     },
     {
       path: '/admin',
       name: 'AdminPage',
       component: AdminPage
     }
   ]
})
</code></pre><br/>
</div>
                    </div><br/>
Для хранения токенов и использования их при запросах к серверу воспользуемся <a href="https://vuex.vuejs.org" rel="nofollow">Vuex</a>. <b>Vuex</b> — это паттерн управления состоянием + библиотека Vue.js. Он служит централизованным хранилищем данных для всех компонентов приложения с правилами, гарантирующими, что состояние может быть изменено только предсказуемым образом.<br/>
<br/>
<pre><code class="plaintext">$ npm install --save vuex</code></pre><br/>
Добавим <i>store</i> в виде отдельного файла в <i>src/store</i>:<br/>
<br/>
<div class="spoiler" role="button" tabindex="0">
                        <b class="spoiler_title">index.js</b>
                        <div class="spoiler_text"><pre><code class="javascript">import Vue from 'vue';
import Vuex from 'vuex';

Vue.use(Vuex);

const state = {
 token: localStorage.getItem('user-token') || '',
 role: localStorage.getItem('user-role') || '',
 username: localStorage.getItem('user-name') || '',
 authorities: localStorage.getItem('authorities') || '',
};

const getters = {
 isAuthenticated: state =&gt; {
   if (state.token != null &amp;&amp; state.token != '') {
     return true;
   } else {
     return false;
   }
 },
 isAdmin: state =&gt; {
   if (state.role === 'admin') {
     return true;
   } else {
     return false;
   }
 },
 getUsername: state =&gt; {
   return state.username;
 },
 getAuthorities: state =&gt; {
   return state.authorities;
 },
 getToken: state =&gt; {
   return state.token;
 }
};

const mutations = {
 auth_login: (state, user) =&gt; {
   localStorage.setItem('user-token', user.token);
   localStorage.setItem('user-name', user.name);
   localStorage.setItem('user-authorities', user.roles);
   state.token = user.token;
   state.username = user.username;
   state.authorities = user.roles;
   var isUser = false;
   var isAdmin = false;
   for (var i = 0; i &lt; user.roles.length; i++) {
     if (user.roles[i].authority === 'ROLE_USER') {
       isUser = true;
     } else if (user.roles[i].authority === 'ROLE_ADMIN') {
       isAdmin = true;
     }
   }
   if (isUser) {
     localStorage.setItem('user-role', 'user');
     state.role = 'user';
   }
   if (isAdmin) {
     localStorage.setItem('user-role', 'admin');
     state.role = 'admin';
   }
 },
 auth_logout: () =&gt; {
   state.token = '';
   state.role = '';
   state.username = '';
   state.authorities = [];
   localStorage.removeItem('user-token');
   localStorage.removeItem('user-role');
   localStorage.removeItem('user-name');
   localStorage.removeItem('user-authorities');
 }
};

const actions = {
 login: (context, user) =&gt; {
   context.commit('auth_login', user)
 },
 logout: (context) =&gt; {
   context.commit('auth_logout');
 }
};

export const store = new Vuex.Store({
 state,
 getters,
 mutations,
 actions
});
</code></pre><br/>
Посмотрим, что у нас тут есть:<br/>
<br/>
<ul>
<li><b>store</b> — собственно, данные для передачи между компонентами — имя пользователя, токен, полномочия и роль (в данном контексте роль — обещающая сущность для полномочий (authorities): посколько полномочия простого пользователя — это подмножество полномочий администратора, то мы можем просто сказать, что пользователь с полномочиями <i>admin</i> и <i>user</i> — администратор</li>
<li><b>getters</b> — функции для определения особых аспектов состояния</li>
<li><b>mutations</b> — функции для изменения состояния</li>
<li><b>actions</b> — функции для фиксации мутаций, они могут содержать асинхронные операции</li>
</ul><br/>
<b>Важно:</b> использование мутаций (mutations) — это единственный правильный способ изменения состояния.<br/>
</div>
                    </div><br/>
Внесём соответствующие изменения в<br/>
<br/>
<div class="spoiler" role="button" tabindex="0">
                        <b class="spoiler_title">main.js</b>
                        <div class="spoiler_text"><pre><code class="javascript">import { store } from './store';

...

new Vue({
     router,
     store,
     render: h =&gt; h(App)
}).$mount('#app')
</code></pre><br/>
</div>
                    </div><br/>
Для того, чтобы интерфейс сразу выглядел красиво и опрятно даже в экспериментальном приложении я использую . Но это, как говорится, дело вкуса, и на базовую функциональность не влияет:<br/>
<br/>
<pre><code class="plaintext">$ npm install --save bootstrap bootstrap-vue</code></pre><br/>
<div class="spoiler" role="button" tabindex="0">
                        <b class="spoiler_title">Bootstrap в main.js</b>
                        <div class="spoiler_text"><pre><code class="javascript">import BootstrapVue from 'bootstrap-vue'
import 'bootstrap/dist/css/bootstrap.css'
import 'bootstrap-vue/dist/bootstrap-vue.css'

… 

Vue.use(BootstrapVue) 
</code></pre><br/>
</div>
                    </div><br/>
Теперь поработаем над компонентом App:<br/>
<br/>
<ul>
<li>Добавим возможность «разлогинивания» для всех авторизованных пользователей</li>
<li>Добавим автоматическую переадресацию на домашнюю страницу после выхода (logout)</li>
<li>Будем показывать кнопки меню навигации «User» и «Logout» для всех авторизованных пользователей и «Login» — для неавторизованных</li>
<li>Будем показывать кнопку «Admin» меню навигации только авторизованным администраторам</li>
</ul><br/>
Для этого:<br/>
<br/>
<div class="spoiler" role="button" tabindex="0">
                        <b class="spoiler_title">добавим метод logout()</b>
                        <div class="spoiler_text"><pre><code class="javascript">methods: {
     logout() {
          this.$store.dispatch('logout');
          this.$router.push('/')
     }
}
</code></pre><br/>
</div>
                    </div><br/>
<div class="spoiler" role="button" tabindex="0">
                        <b class="spoiler_title">и отредактируем шаблон (template)</b>
                        <div class="spoiler_text"><pre><code class="xml">&lt;template&gt;
     &lt;div id="app"&gt;
          &lt;b-navbar style="width: 100%" type="dark" variant="dark"&gt;
               &lt;b-navbar-brand id="nav-brand" href="#"&gt;Kotlin+Spring+Vue&lt;/b-navbar-brand&gt;
               &lt;router-link to="/"&gt;&lt;img height="30px" src="./assets/img/kotlin-logo.png" alt="Kotlin+Spring+Vue"/&gt;&lt;/router-link&gt;
               &lt;router-link to="/"&gt;&lt;img height="30px" src="./assets/img/spring-boot-logo.png" alt="Kotlin+Spring+Vue"/&gt;&lt;/router-link&gt;
               &lt;router-link to="/"&gt;&lt;img height="30px" src="./assets/img/vuejs-logo.png" alt="Kotlin+Spring+Vue"/&gt;&lt;/router-link&gt;
               &lt;router-link to="/user" class="nav-link text-light" v-if="this.$store.getters.isAuthenticated"&gt;User&lt;/router-link&gt;
               &lt;router-link to="/admin" class="nav-link text-light" v-if="this.$store.getters.isAuthenticated &amp;&amp; this.$store.getters.isAdmin"&gt;Admin&lt;/router-link&gt;
               &lt;router-link to="/register" class="nav-link text-light" v-if="!this.$store.getters.isAuthenticated"&gt;Register&lt;/router-link&gt;
               &lt;router-link to="/login" class="nav-link text-light" v-if="!this.$store.getters.isAuthenticated"&gt;Login&lt;/router-link&gt;
               &lt;a href="#" class="nav-link text-light" v-if="this.$store.getters.isAuthenticated" v-on:click="logout"&gt;Logout &lt;/a&gt;
          &lt;/b-navbar&gt;
          &lt;router-view&gt;&lt;/router-view&gt;
     &lt;/div&gt;
&lt;/template&gt; 
</code></pre><br/>
<b>Примечание:</b> <br/>
<br/>
<ul>
<li>Через store мы получаем информацию о полномочиях пользователя и о том, авторизован ли он. В зависимости от этого принимаем решение, какие кнопки показывать, а какие скрывать («v-if»)</li>
<li>В панель навигации я добавил логотипы Kotlin, Spring Boot и Vue.js, лежащие в <i>/assets/img/</i>. Их можно либо убрать совсем, либо взять из репозитория моего приложения (ссылка есть в конце статьи)</li>
</ul><br/>
</div>
                    </div><br/>
Обновим компоненты:<br/>
<br/>
<div class="spoiler" role="button" tabindex="0">
                        <b class="spoiler_title">Home.vue</b>
                        <div class="spoiler_text"><pre><code class="xml">&lt;template&gt;
   &lt;div div="home"&gt;
       &lt;b-jumbotron&gt;
       &lt;template slot="header"&gt;Kotlin + Spring Boot + Vue.js&lt;/template&gt;

       &lt;template slot="lead"&gt;
         This is the demo web-application written in Kotlin using Spring Boot and Vue.js for frontend
       &lt;/template&gt;

       &lt;hr class="my-4" /&gt;

       &lt;p v-if="!this.$store.getters.isAuthenticated"&gt;
         Login and start
       &lt;/p&gt;

       &lt;router-link to="/login" v-if="!this.$store.getters.isAuthenticated"&gt;
           &lt;b-button variant="primary"&gt;Login&lt;/b-button&gt;
       &lt;/router-link&gt;

     &lt;/b-jumbotron&gt;
   &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
&lt;/script&gt;

&lt;style&gt;
&lt;/style&gt;
</code></pre><br/>
</div>
                    </div><br/>
<div class="spoiler" role="button" tabindex="0">
                        <b class="spoiler_title">SignIn.vue</b>
                        <div class="spoiler_text"><pre><code class="xml">&lt;template&gt;
   &lt;div div="signin"&gt;
       &lt;div class="login-form"&gt;
           &lt;b-card
             title="Login"
             tag="article"
             style="max-width: 20rem;"
             class="mb-2"
           &gt;
           &lt;div&gt;
               &lt;b-alert
                     :show="dismissCountDown"
                     dismissible
                     variant="danger"
                     @dismissed="dismissCountDown=0"
                     @dismiss-count-down="countDownChanged"
                   &gt; {{ alertMessage }}
                   &lt;/b-alert&gt;
           &lt;/div&gt;
             &lt;div&gt;
                &lt;b-form-input type="text" placeholder="Username" v-model="username" /&gt;
                &lt;div class="mt-2"&gt;&lt;/div&gt;

                &lt;b-form-input type="password" placeholder="Password" v-model="password" /&gt;
                &lt;div class="mt-2"&gt;&lt;/div&gt;
             &lt;/div&gt;

             &lt;b-button v-on:click="login" variant="primary"&gt;Login&lt;/b-button&gt;

             &lt;hr class="my-4" /&gt;

             &lt;b-button variant="link"&gt;Forget password?&lt;/b-button&gt;
           &lt;/b-card&gt;
         &lt;/div&gt;
   &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
import {AXIOS} from './http-common'
export default {
   name: 'SignIn',
   data() {
         return {
         username: '',
         password: '',
         dismissSecs: 5,
         dismissCountDown: 0,
         alertMessage: 'Request error',
     }
   },
   methods: {
     login() {
       AXIOS.post(`/auth/signin`, {'username': this.$data.username, 'password': this.$data.password})
         .then(response =&gt; {
           this.$store.dispatch('login', {'token': response.data.accessToken, 'roles': response.data.authorities, 'username': response.data.username});
           this.$router.push('/home')
         }, error =&gt; {
           this.$data.alertMessage = (error.response.data.message.length &lt; 150) ? error.response.data.message : 'Request error. Please, report this error website owners';
           console.log(error)
         })
         .catch(e =&gt; {
           console.log(e);
           this.showAlert();
         })
     },
     countDownChanged(dismissCountDown) {
         this.dismissCountDown = dismissCountDown
     },
     showAlert() {
         this.dismissCountDown = this.dismissSecs
     },
   }
 }
&lt;/script&gt;

&lt;style&gt;
.login-form {
   margin-left: 38%;
   margin-top: 50px;
}
&lt;/style&gt;
</code></pre><br/>
Что тут происходит:<br/>
<br/>
<ul>
<li>Запрос авторизации отправляется на сервер с помощью POST-запроса</li>
<li>От сервера мы получаем токен и сохраняем его в storage</li>
<li>Показываем «красивое» сообщение от Bootstrap об ошибке в случае ошибки</li>
<li>Если авторизация проходит успешно, переадресовываем пользователя на <i>/home</i></li>
</ul><br/>
</div>
                    </div><br/>
<div class="spoiler" role="button" tabindex="0">
                        <b class="spoiler_title">SignUp.vue</b>
                        <div class="spoiler_text"><pre><code class="xml">&lt;template&gt;
   &lt;div div="signup"&gt;
       &lt;div class="login-form"&gt;
       &lt;b-card
             title="Register"
             tag="article"
             style="max-width: 20rem;"
             class="mb-2"
           &gt;
           &lt;div&gt;
               &lt;b-alert
                     :show="dismissCountDown"
                     dismissible
                     variant="danger"
                     @dismissed="dismissCountDown=0"
                     @dismiss-count-down="countDownChanged"
                   &gt; {{ alertMessage }}
                   &lt;/b-alert&gt;
           &lt;/div&gt;
           &lt;div&gt;
             &lt;b-alert variant="success" :show="successfullyRegistered"&gt;
               You have been successfully registered! Now you can login with your credentials
               &lt;hr /&gt;
               &lt;router-link to="/login"&gt;
                    &lt;b-button variant="primary"&gt;Login&lt;/b-button&gt;
               &lt;/router-link&gt;
             &lt;/b-alert&gt;
           &lt;/div&gt;
             &lt;div&gt;
                &lt;b-form-input type="text" placeholder="Username" v-model="username" /&gt;
                &lt;div class="mt-2"&gt;&lt;/div&gt;

                &lt;b-form-input type="text" placeholder="First Name" v-model="firstname" /&gt;
                &lt;div class="mt-2"&gt;&lt;/div&gt;

                &lt;b-form-input type="text" placeholder="Last name" v-model="lastname" /&gt;
                &lt;div class="mt-2"&gt;&lt;/div&gt;

                &lt;b-form-input type="text" placeholder="Email" v-model="email" /&gt;
                &lt;div class="mt-2"&gt;&lt;/div&gt;

                &lt;b-form-input type="password" placeholder="Password" v-model="password" /&gt;
                &lt;div class="mt-2"&gt;&lt;/div&gt;

               &lt;b-form-input type="password" placeholder="Confirm Password" v-model="confirmpassword" /&gt;
                &lt;div class="mt-2"&gt;&lt;/div&gt;
             &lt;/div&gt;

             &lt;b-button v-on:click="register" variant="primary"&gt;Register&lt;/b-button&gt;

           &lt;/b-card&gt;
       &lt;/div&gt;
   &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
import {AXIOS} from './http-common'
export default {
   name: 'SignUp',
   data () {
       return {
           username: '',
           firstname: '',
           lastname: '',
           email: '',
           password: '',
           confirmpassword: '',
           dismissSecs: 5,
           dismissCountDown: 0,
           alertMessage: '',
           successfullyRegistered: false
       }
   },
   methods: {
       register: function () {
           if (this.$data.username === '' || this.$data.username == null) {
               this.$data.alertMessage = 'Please, fill "Username" field';
               this.showAlert();
           } else if (this.$data.firstname === '' || this.$data.firstname == null) {
               this.$data.alertMessage = 'Please, fill "First name" field';
               this.showAlert();
           } else if (this.$data.lastname === '' || this.$data.lastname == null) {
               this.$data.alertMessage = 'Please, fill "Last name" field';
               this.showAlert();
           } else if (this.$data.email === '' || this.$data.email == null) {
               this.$data.alertMessage = 'Please, fill "Email" field';
               this.showAlert();
           } else if (!this.$data.email.includes('@')) {
               this.$data.alertMessage = 'Email is incorrect';
               this.showAlert();
           } else if (this.$data.password === '' || this.$data.password == null) {
               this.$data.alertMessage = 'Please, fill "Password" field';
               this.showAlert();
           } else if (this.$data.confirmpassword === '' || this.$data.confirmpassword == null) {
               this.$data.alertMessage = 'Please, confirm password';
               this.showAlert();
           } else if (this.$data.confirmpassword !== this.$data.password) {
               this.$data.alertMessage = 'Passwords are not match';
               this.showAlert();
           } else {
               var newUser = {
                   'username': this.$data.username,
                   'firstName': this.$data.firstname,
                   'lastName': this.$data.lastname,
                   'email': this.$data.email,
                   'password': this.$data.password
               };
               AXIOS.post('/auth/signup', newUser)
               .then(response =&gt; {
                   console.log(response);
                   this.successAlert();
               }, error =&gt; {
                   this.$data.alertMessage = (error.response.data.message.length &lt; 150) ? error.response.data.message : 'Request error. Please, report this error website owners'
                   this.showAlert();
               })
                .catch(error =&gt; {
                   console.log(error);
                   this.$data.alertMessage = 'Request error. Please, report this error website owners';
                   this.showAlert();
                });
           }
       },
       countDownChanged(dismissCountDown) {
           this.dismissCountDown = dismissCountDown
       },
       showAlert() {
           this.dismissCountDown = this.dismissSecs
       },
       successAlert() {
           this.username = '';
           this.firstname = '';
           this.lastname = '';
           this.email = '';
           this.password = '';
           this.confirmpassword = '';
           this.successfullyRegistered = true;
       }
   }
}
&lt;/script&gt;

&lt;style&gt;
.login-form {
   margin-left: 38%;
   margin-top: 50px;
}
&lt;/style&gt;
</code></pre><br/>
Что тут происходит:<br/>
<br/>
<ul>
<li>Данные с формы регистрации передаются на сервер с помощью POST-запроса</li>
<li>Показывается сообщение об ошибке от Bootstrap в случае ошибки </li>
<li>Если регистрация прошла успешно, выводим Bootstrap-овское сообщение с предложением авторизоваться</li>
<li>Перед отправкой запроса происходит валидация полей</li>
</ul><br/>
</div>
                    </div><br/>
<div class="spoiler" role="button" tabindex="0">
                        <b class="spoiler_title">UserPage.vue</b>
                        <div class="spoiler_text"><pre><code class="xml">&lt;template&gt;
   &lt;div div="userpage"&gt;
       &lt;h2&gt;{{ pageContent }}&lt;/h2&gt;
   &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
import {AXIOS} from './http-common'
export default {
   name: 'UserPage',
   data() {
       return {
           pageContent: ''
       }
   },
   methods: {
       loadUserContent() {
           const header = {'Authorization': 'Bearer ' + this.$store.getters.getToken};
           AXIOS.get('/usercontent', { headers: header })
           .then(response =&gt; {
               this.$data.pageContent = response.data;
           })
           .catch(error =&gt; {
               console.log('ERROR: ' + error.response.data);
           })
       }
   },
   mounted() {
       this.loadUserContent();
   }
}
&lt;/script&gt;

&lt;style&gt;
&lt;/style&gt;
</code></pre><br/>
Что тут происходит:<br/>
<ul>
<li>Загрузка данных с сервера происходит сразу после загрузки страницы</li>
<li>Вместе с запросом мы передаём токен, хранящийся в storage</li>
<li>Полученные данные мы отрисовываем на странице</li>
</ul><br/>
</div>
                    </div><br/>
<div class="spoiler" role="button" tabindex="0">
                        <b class="spoiler_title">Admin.vue</b>
                        <div class="spoiler_text"><pre><code class="xml">&lt;template&gt;
   &lt;div div="adminpage"&gt;
       &lt;h2&gt;{{ pageContent }}&lt;/h2&gt;
   &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
import {AXIOS} from './http-common'
export default {
   name: 'AdminPage',
   data() {
       return {
           pageContent: ''
       }
   },
   methods: {
       loadUserContent() {
           const header = {'Authorization': 'Bearer ' + this.$store.getters.getToken};
           AXIOS.get('/admincontent', { headers: header })
           .then(response =&gt; {
               this.$data.pageContent = response.data;
           })
           .catch(error =&gt; {
               console.log('ERROR: ' + error.response.data);
           })
       }
   },
   mounted() {
       this.loadUserContent();
   }
}
&lt;/script&gt;

&lt;style&gt;
&lt;/style&gt;
</code></pre><br/>
Здесь происходит всё то же самое, что и в <i>UserPage</i>.<br/>
</div>
                    </div><br/>
<h3>Запуск приложения</h3><br/>
Зарегистрируем нашего первого администратора:<br/>
<br/>
<img src="https://habrastorage.org/r/w1560/webt/vj/n1/sx/vjn1sxqgh21twatqxdnwdsax-da.png" data-src="https://habrastorage.org/webt/vj/n1/sx/vjn1sxqgh21twatqxdnwdsax-da.png"/><br/>
<br/>
<img src="https://habrastorage.org/r/w1560/webt/ty/xq/rd/tyxqrdt_bdanmy9ughcq050i5q8.png" data-src="https://habrastorage.org/webt/ty/xq/rd/tyxqrdt_bdanmy9ughcq050i5q8.png"/><br/>
<br/>
<b>Важно:</b> по умолчанию все новые пользователи — обычные. Дадим первому администратору его полномочия:<br/>
<br/>
<pre><code class="sql">INSERT INTO users_roles (user_id, role_id) VALUES (1, 2);
</code></pre><br/>
Затем:<br/>
<br/>
<ol>
<li>Зайдём под учётной записью администратора</li>
<li>Проверим страницу User: <br/>
<br/>
<img src="https://habrastorage.org/r/w1560/webt/7-/hl/tu/7-hltu0rtm5vigbfhq3hmhin0ri.png" data-src="https://habrastorage.org/webt/7-/hl/tu/7-hltu0rtm5vigbfhq3hmhin0ri.png"/></li>
<li>Проверим страницу Admin: <br/>
<br/>
<img src="https://habrastorage.org/r/w1560/webt/se/hr/lu/sehrlu8m5npgbdf1dtotvukfk-g.png" data-src="https://habrastorage.org/webt/se/hr/lu/sehrlu8m5npgbdf1dtotvukfk-g.png"/></li>
<li>Выйдем из администраторской учётной записи</li>
<li>Зарегистрируем аккаунт обычного пользователя</li>
<li>Проверим доступность страницы User</li>
<li>Попробуем получить администраторские данные, используя REST API: <a href="http://localhost:8080/api/admincontent" rel="nofollow">http://localhost:8080/api/admincontent</a></li>
</ol><br/>
<pre><code class="plaintext">ERROR 77100 --- [nio-8080-exec-2] c.k.backend.jwt.JwtAuthEntryPoint : Unauthorized error. Message - Full authentication is required to access this resource
</code></pre><br/>
<a name="WaysToImprove"></a><br/>
<h2>Пути улучшения</h2><br/>
Вообще говоря, их в любом деле всегда очень много. Перечислю самые очевидные:<br/>
<br/>
<ul>
<li>Использовать для сборки Gradle (если считать это улучшением)</li>
<li>Сразу покрывать код модульными тестами (это уже, без сомнения, хорошая практика)</li>
<li>С самого начала выстраивать CI/CD Pipeline: размещать код в репозитории, контейнизировать приложение, автоматизировать сборку и деплой</li>
<li>Добавить PUT и DELETE запросы (например, обновление данных пользователей и удаление учётных записей)</li>
<li>Реализовать активацию/деактивацию учетных записей</li>
<li>Не использовать local storage для хранения токена — это не безопасно</li>
<li>Использовать OAuth</li>
<li>Верифицировать адреса электронной почты при регистрации нового пользователя</li>
<li>Использовать защиту от спама, например, reCAPTCHA</li>
</ul><br/>
<a name="Links"></a><br/>
<h2>Полезные ссылки</h2><br/>
<ul>
<li><a href="https://vaadimblog.blogspot.com/p/kotlin-spring-boot-vuejs.html" rel="nofollow">То же самое руководство</a>, написанное мной же, только более подробное, где также рассматривается разворачивание приложения в Heroku, reCAPTCHA и работа с почтой. На английском языке, зато с картинками</li>
<li><a href="https://github.com/DrLeprechaun/kotlin-spring-vue" rel="nofollow">GitHub репозиторий</a></li>
<li><a href="https://kotlin-spring-vue-demo.herokuapp.com" rel="nofollow">Готовое приложение</a></li>
<li><a href="https://github.com/jonashackt/spring-boot-vuejs" rel="nofollow">Отдельное спасибо</a> — этот материал вдохновил меня на написание данной статьи</li>
<li><a href="https://auth0.com/blog/vuejs-spring-boot-kotlin-and-graphql-building-modern-apps-part-1/" rel="nofollow">Vue.js, Spring Boot, Kotlin, and GraphQL: Building Modern Apps</a></li>
<li><a href="https://www.baeldung.com" rel="nofollow">Baeldung — Java, Spring and Web Development tutorials</a></li>
<li><a href="https://www.baeldung.com/spring-boot-vue-js" rel="nofollow">Vue.js Frontend with a Spring Boot Backend</a></li>
<li><a href="https://kotlinlang.org/docs/tutorials/spring-boot-restful.html" rel="nofollow">Creating a RESTful Web Service with Spring Boot (Kotlin)</a></li>
<li><a href="https://kotlinlang.org/docs/reference/data-classes.html" rel="nofollow">Data Classes (Kotlin)</a></li>
<li><a href="https://www.baeldung.com/kotlin-data-classes" rel="nofollow">Data Classes in Kotlin</a></li>
<li><a href="https://logrocket.com/blog/jwt-authentication-best-practices/" rel="nofollow">JWT authentication: When and how to use it</a></li>
<li><a href="https://vuex.vuejs.org" rel="nofollow">What is Vuex?</a></li>
<li><a href="https://itnext.io/managing-state-in-vue-js-with-vuex-f036fd71f432" rel="nofollow">Managing state in Vue.js with Vuex</a></li>
</ul><br/>
<br/>
Дополнение к этому материалу <a href="https://habr.com/ru/post/482222/">здесь</a></div></div></div><!----><!----></div><!----><!----></div><!--]--><!----><div class="tm-article-presenter__meta" data-test-id="article-meta-links"><div class="tm-separated-list tm-article-presenter__meta-list"><span class="tm-separated-list__title">Теги:</span><ul class="tm-separated-list__list"><!--[--><li class="tm-separated-list__item"><!--[--><a href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[kotlin]" class="tm-tags-list__link"><span>kotlin</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[spring]" class="tm-tags-list__link"><span>spring</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[spring+framework]" class="tm-tags-list__link"><span>spring framework</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[spring+boot]" class="tm-tags-list__link"><span>spring boot</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[vue]" class="tm-tags-list__link"><span>vue</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[vue.js]" class="tm-tags-list__link"><span>vue.js</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[vuejs]" class="tm-tags-list__link"><span>vuejs</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[fullstack]" class="tm-tags-list__link"><span>fullstack</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[fullstack+development]" class="tm-tags-list__link"><span>fullstack development</span></a><!--]--></li><!--]--><!----></ul></div><div class="tm-separated-list tm-article-presenter__meta-list"><span class="tm-separated-list__title">Хабы:</span><ul class="tm-separated-list__list"><!--[--><li class="tm-separated-list__item"><!--[--><a href="/ru/hubs/kotlin/" class="tm-hubs-list__link"><!--[--><span>Kotlin</span><!--]--></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a href="/ru/hubs/vuejs/" class="tm-hubs-list__link"><!--[--><span>VueJS</span><!--]--></a><!--]--></li><!--]--><!----></ul></div></div><!----><!--]--></article><!--]--></div><!----></div><div style="" class="tm-article-sticky-panel" data-test-id="article-sticky-panel"><div class="tm-data-icons tm-data-icons tm-data-icons_space-big tm-article-sticky-panel__icons" data-test-id="article-stats-icons"><div class="tm-article-rating tm-data-icons__item"><div class="tm-votes-meter tm-article-rating__votes-switcher"><svg class="tm-svg-img tm-votes-meter__icon tm-votes-meter__icon tm-votes-meter__icon_appearance-article" height="24" width="24"><title>Всего голосов 19: ↑18 и ↓1</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-rating"></use></svg><span class="tm-votes-meter__value tm-votes-meter__value_positive tm-votes-meter__value_appearance-article tm-votes-meter__value_rating tm-votes-meter__value" data-test-id="votes-meter-value" title="Всего голосов 19: ↑18 и ↓1">+17</span></div><!--teleport start--><!--teleport end--><!----></div><!----><!----><button class="bookmarks-button tm-data-icons__item" title="Добавить в закладки" type="button"><span class="tm-svg-icon__wrapper bookmarks-button__icon"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Добавить в закладки</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-favorite"></use></svg></span><span class="bookmarks-button__counter" title="Количество пользователей, добавивших публикацию в закладки">206</span></button><div class="tm-sharing tm-data-icons__item" title="Поделиться"><button class="tm-sharing__button" type="button"><svg viewbox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" class="tm-sharing__icon"><path fill="currentColor" d="M13.8 13.8V18l7.2-6.6L13.8 5v3.9C5 8.9 3 18.6 3 18.6c2.5-4.4 6-4.8 10.8-4.8z"></path></svg></button><!--teleport start--><!--teleport end--></div><div class="tm-article-comments-counter-link tm-data-icons__item" title="Читать комментарии"><a href="/ru/articles/467161/comments/" class="tm-article-comments-counter-link__link" data-test-id="counter-comments"><!--[--><svg class="tm-svg-img tm-article-comments-counter-link__icon" height="24" width="24"><title>Комментарии</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-comments"></use></svg><span class="tm-article-comments-counter-link__value">21</span><!--]--></a><!----></div><!--[--><!--[--><!--[--><!----><!--]--><!--]--><!--]--><!--teleport start--><!--teleport end--><!----></div></div></div><!--[--><!--]--><div class="tm-article-presenter__footer"><!--[--><!--[--><div class="tm-article-blocks"><!----><!--[--><section class="tm-block tm-block tm-block_spacing-bottom"><!----><!--[--><div class="tm-block__body tm-block__body tm-block__body_variant-balanced"><!--[--><div class="tm-article-author" data-test-id="article-author-info" data-async-called="true"><!--[--><!--]--><div class="tm-user-card tm-user-card tm-user-card_variant-article tm-article-author__user-card" data-async-called="true"><div class="tm-user-card__info-container"><div class="tm-user-card__header"><div class="tm-user-card__header-data"><a href="/ru/users/drleprechaun/" class="tm-user-card__userpic tm-user-card__userpic_size-40"><div class="tm-entity-image"><img alt="" class="tm-entity-image__pic" src="//habrastorage.org/getpro/habr/avatars/483/5b8/db5/4835b8db5f4ab9c0abb8011a75bce3bf.jpg"></div></a><div class="tm-user-card__meta"><div class="tm-counter-container tm-karma tm-karma" title=" 10 голосов "><div class="tm-counter-container__header"><!--[--><div class="karma-display positive" data-v-7635202e>8</div><!----><!--]--></div><div class="tm-counter-container__footer"><!--[--><div class="tm-karma__text">Карма</div><!--teleport start--><!--teleport end--><!--]--></div></div><div class="tm-counter-container" title="Рейтинг пользователя"><div class="tm-counter-container__header"><!--[--><!--[--><!--]--><div class="tm-votes-lever tm-votes-lever tm-votes-lever_appearance-rating"><!----><div class="tm-votes-lever__score tm-votes-lever__score_appearance-rating tm-votes-lever__score"><!--[--><span><span class="tm-votes-lever__score-counter tm-votes-lever__score-counter_rating tm-votes-lever__score-counter" data-test-id="votes-score-counter">0</span></span><!--]--></div><!----></div><!--]--></div><div class="tm-counter-container__footer"><!--[--><span class="tm-rating__text tm-rating__text">Рейтинг</span><!--]--></div></div></div></div></div><div class="tm-user-card__info tm-user-card__info_variant-article tm-user-card__info"><div class="tm-user-card__title tm-user-card__title_variant-article tm-user-card__title"><span class="tm-user-card__name tm-user-card__name_variant-article tm-user-card__name">Вадим</span><a href="/ru/users/drleprechaun/" class="tm-user-card__nickname tm-user-card__nickname tm-user-card__nickname_variant-article"> @drleprechaun</a><!----></div><p class="tm-user-card__short-info tm-user-card__short-info_variant-article tm-user-card__short-info" data-test-id="user-card-speciality">Пользователь</p></div></div><!----><div class="tm-user-card__buttons tm-user-card__buttons_variant-article tm-user-card__buttons"><!----><div class="tm-user-card__button"><div class="tm-button-follow tm-user-card__button-follow"><!----><button class="tm-button-follow__button tm-button-follow__button_big" data-test-id="follow-button" type="button">Подписаться</button></div></div><!----><div class="tm-user-card__button tm-user-card__button_write" data-test-id="user-card-conversations"><svg class="tm-svg-img tm-user-card__button-icon" height="16" width="16"><title>Отправить сообщение</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#mail"></use></svg></div><!----></div><!----></div><div class="tm-article-author__user-contacts" data-test-id="author-contacts"><!----><!----><!----></div></div><!--]--></div><!--]--><!----></section><!----><!--[--><div class="banner-wrapper leaderboard tm-page-article__banner" style="--467224fc:200px;--58ff5eba:auto;" data-v-ad758baa><!--[--><div class="placeholder-wrapper placeholder" data-v-ad758baa><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><div class="adfox-banner-placeholder leaderboard" data-v-12f7bcca><div class="image loads" data-v-12f7bcca></div><div class="lines" data-v-12f7bcca><div class="line loads" data-v-12f7bcca></div><div class="line loads" data-v-12f7bcca></div><div class="line loads" data-v-12f7bcca></div></div></div><!----></div><div id="adfox_164725660339535756" class="tm-adfox-banner" data-v-ad758baa></div><!--]--></div><!--]--><!--]--><div class="tm-article-blocks__comments"><div id="publication-comments" class="tm-article-page-comments"><div><!--[--><div class="tm-article-comments-counter-link tm-article-comments-counter-button"><a href="/ru/articles/467161/comments/" class="tm-article-comments-counter-link__link tm-article-comments-counter-link__link_button-style" data-test-id="counter-comments"><!--[--><svg class="tm-svg-img tm-article-comments-counter-link__icon tm-article-comments-counter-link__icon_contrasted" height="24" width="24"><title>Комментарии</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-comments"></use></svg><span class="tm-article-comments-counter-link__value tm-article-comments-counter-link__value_contrasted"> Комментарии 21 </span><!--]--></a><!----></div><!--]--></div></div></div><!--[--><!--[--><!--]--><section class="tm-block tm-block tm-block_spacing-bottom"><header class="tm-block__header tm-block__header tm-block__header_variant-borderless"><div class="tm-block__header-container"><h2 class="tm-block__title tm-block__title tm-block__title_variant-large">Публикации</h2><!--[--><!--]--></div><!----></header><!--[--><div class="tm-block__body tm-block__body tm-block__body_variant-condensed-slim"><!--[--><!--[--><div class="tm-tabs tm-tabs"><div class=""><!--[--><span class="tm-tabs__tab-item"><button class="tm-tabs__tab-link tm-tabs__tab-link_active tm-tabs__tab-link_slim tm-tabs__tab-link">Лучшие за сутки</button></span><span class="tm-tabs__tab-item"><button class="tm-tabs__tab-link tm-tabs__tab-link_slim tm-tabs__tab-link">Похожие</button></span><!--]--></div><!----></div><div class="similar-and-daily__tab-view"><div class="daily-articles-list"><ul class="tm-article-card-list"><!--[--><!--]--><div class="tm-bordered-card"><!----><!--[--><!--]--></div></ul><div class="daily-articles-block__button-container"><button class="btn btn_transparent btn_small tm-button tm-button_color-horizon" type="button"><!--[--><!--[-->Показать лучшие за всё время<!--]--><!--]--></button></div></div><!----></div><!--]--><!--]--></div><!--]--><!----></section><!--[--><section class="tm-block tm-block tm-block_spacing-around tm-stories-block" data-navigatable tabindex="0" data-async-called="true"><header class="tm-block__header tm-block__header"><div class="tm-block__header-container"><h2 class="tm-block__title tm-block__title">Истории</h2><!--[--><!--]--></div><!----></header><!--[--><div class="tm-block__body tm-block__body tm-block__body_variant-equal"><!--[--><div class="tm-stories-empty"><!--[--><div class="tm-stories-card-empty"><div class="tm-stories-card-empty__image"></div><div class="tm-stories-card-empty__title"><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div></div></div><div class="tm-stories-card-empty"><div class="tm-stories-card-empty__image"></div><div class="tm-stories-card-empty__title"><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div></div></div><div class="tm-stories-card-empty"><div class="tm-stories-card-empty__image"></div><div class="tm-stories-card-empty__title"><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div></div></div><div class="tm-stories-card-empty"><div class="tm-stories-card-empty__image"></div><div class="tm-stories-card-empty__title"><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div></div></div><div class="tm-stories-card-empty"><div class="tm-stories-card-empty__image"></div><div class="tm-stories-card-empty__title"><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div></div></div><div class="tm-stories-card-empty"><div class="tm-stories-card-empty__image"></div><div class="tm-stories-card-empty__title"><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div></div></div><!--]--></div><!----><!--]--></div><!--]--><!----></section><div class="placeholder-wrapper"><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><div class="tm-placeholder-inset tm-placeholder-vacancies"><div class="tm-placeholder-inset__header"><div class="tm-placeholder__line tm-placeholder__line_inset-header loads"></div></div><div class="tm-placeholder-inset__body"><ul class="tm-placeholder-list"><!--[--><li class="tm-placeholder-list__item tm-placeholder-list__item_inset"><div class="tm-placeholder-list__title-container"><div class="tm-placeholder__line tm-placeholder__line_item-title loads"></div></div><div class="tm-project-block-items__properties"><!--[--><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><!--]--></div></li><li class="tm-placeholder-list__item tm-placeholder-list__item_inset"><div class="tm-placeholder-list__title-container"><div class="tm-placeholder__line tm-placeholder__line_item-title loads"></div></div><div class="tm-project-block-items__properties"><!--[--><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><!--]--></div></li><li class="tm-placeholder-list__item tm-placeholder-list__item_inset"><div class="tm-placeholder-list__title-container"><div class="tm-placeholder__line tm-placeholder__line_item-title loads"></div></div><div class="tm-project-block-items__properties"><!--[--><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><!--]--></div></li><li class="tm-placeholder-list__item tm-placeholder-list__item_inset"><div class="tm-placeholder-list__title-container"><div class="tm-placeholder__line tm-placeholder__line_item-title loads"></div></div><div class="tm-project-block-items__properties"><!--[--><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><!--]--></div></li><li class="tm-placeholder-list__item tm-placeholder-list__item_inset"><div class="tm-placeholder-list__title-container"><div class="tm-placeholder__line tm-placeholder__line_item-title loads"></div></div><div class="tm-project-block-items__properties"><!--[--><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><!--]--></div></li><!--]--></ul></div><div class="tm-placeholder-inset__footer"><div class="tm-placeholder__line tm-placeholder__line_inset-footer loads"></div></div></div><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----></div><!--]--><!----><!--[--><div><div class="placeholder-wrapper"><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><div class="tm-placeholder-promo"><div class="tm-placeholder-promo__header"><div class="tm-placeholder__line tm-placeholder__line_promo-title"></div></div><div class="tm-placeholder-promo__body"><div class="tm-placeholder-promo__posts"><div class="tm-placeholder-promo__post"><div class="tm-placeholder-promo__image"></div><div class="tm-placeholder__line tm-placeholder__line_post-title"></div></div><div class="tm-placeholder-promo__post"><div class="tm-placeholder-promo__image"></div><div class="tm-placeholder__line tm-placeholder__line_post-title"></div></div><div class="tm-placeholder-promo__post"><div class="tm-placeholder-promo__image"></div><div class="tm-placeholder__line tm-placeholder__line_post-title"></div></div></div><div class="tm-placeholder-promo__dots"><div class="tm-placeholder-promo__dot"></div><div class="tm-placeholder-promo__dot"></div><div class="tm-placeholder-promo__dot"></div></div></div></div><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----></div></div><section class="tm-block tm-block tm-block_spacing-top" data-async-called="true"><header class="tm-block__header tm-block__header"><div class="tm-block__header-container"><h2 class="tm-block__title tm-block__title">Работа</h2><!--[--><!--]--></div><!----></header><!--[--><div class="tm-block__body tm-block__body"><!--[--><!--[--><div class="tm-vacancies-block__item"><a class="tm-vacancies-block__vacancy-title" href="https://career.habr.com/vacancies/programmist_javascript" target="_blank">JavaScript разработчик</a><div class="tm-vacancies-block__vacancies-count">131
    вакансия</div></div><!--]--><!--]--></div><!--]--><footer class="tm-block__footer"><!--[--><a class="tm-block-extralink" href="https://career.habr.com/catalog">Все вакансии</a><!--]--></footer></section><section class="tm-block tm-block tm-block_spacing-around tm-events-block" data-navigatable tabindex="0" data-async-called="true"><header class="tm-block__header tm-block__header tm-block__header_variant-borderless-large"><div class="tm-block__header-container"><h2 class="tm-block__title tm-block__title">Ближайшие события</h2><!--[--><!--]--></div><!----></header><!--[--><div class="tm-block__body tm-block__body tm-block__body_variant-equal"><!--[--><div class="swiper-container tm-events-widget" style="--swiper-space-between:22px;"><div class="swiper-wrapper"><!--[--><!--[--><div class="swiper-slide"><!--[--><section class="tm-block tm-block tm-block_spacing-none" id="588" tabindex="-1"><!----><!--[--><div class="tm-event-card tm-event-card_is-widget tm-event-card_responsive"><a href="/ru/events/588/" class=""><img alt class="tm-event-card__image" data-src="https://habrastorage.org/getpro/habr/upload_files/f79/1fc/79d/f791fc79d0d9fdda84397ed0c0717764.png" loading="lazy" src="https://habrastorage.org/r/w390/getpro/habr/upload_files/f79/1fc/79d/f791fc79d0d9fdda84397ed0c0717764.png" srcset="https://habrastorage.org/r/w390/getpro/habr/upload_files/f79/1fc/79d/f791fc79d0d9fdda84397ed0c0717764.png, https://habrastorage.org/getpro/habr/upload_files/f79/1fc/79d/f791fc79d0d9fdda84397ed0c0717764.png 2x"></a><!----><div class="tm-event-card__info"><div class="tm-event-card__date"><!----><div class="tm-event-card__day"><span>17  февраля   – 24  марта  </span></div></div><a href="/ru/events/588/" class="tm-event-card__title-link"><span>Конкурс «Снежный код» от Хекслета. Три гранта на бесплатное 10-месячное обучение</span></a><div class="tm-event-card__places"><div class="tm-event-card__places-list"><!--[--><span class="tm-event-card__places-item"><span>Онлайн</span><!----></span><!--]--></div></div></div><div class="tm-event-card__footer tm-event-card__footer_widget"><a href="/ru/events/#588" class="tm-event-card__link">Больше событий в календаре</a><div class="tm-event-card__categories"><!--[--><div class="event-category__label event-category__label_type-development"><span>Разработка</span></div><!--]--></div></div></div><!--]--><!----></section><!--]--></div><div class="swiper-slide"><!--[--><section class="tm-block tm-block tm-block_spacing-none" id="596" tabindex="-1"><!----><!--[--><div class="tm-event-card tm-event-card_is-widget tm-event-card_responsive"><a href="/ru/events/596/" class=""><img alt class="tm-event-card__image" data-src="https://habrastorage.org/getpro/habr/upload_files/b14/cd3/772/b14cd3772bc67698c8fbfd846e23824a.png" loading="lazy" src="https://habrastorage.org/r/w390/getpro/habr/upload_files/b14/cd3/772/b14cd3772bc67698c8fbfd846e23824a.png" srcset="https://habrastorage.org/r/w390/getpro/habr/upload_files/b14/cd3/772/b14cd3772bc67698c8fbfd846e23824a.png, https://habrastorage.org/getpro/habr/upload_files/b14/cd3/772/b14cd3772bc67698c8fbfd846e23824a.png 2x"></a><!----><div class="tm-event-card__info"><div class="tm-event-card__date"><!----><div class="tm-event-card__day"><span>20  марта  </span></div></div><a href="/ru/events/596/" class="tm-event-card__title-link"><span>Офлайн-конференция Хабр х K-team: как удерживать таланты в 2025 году</span></a><div class="tm-event-card__places"><div class="tm-event-card__places-list"><!--[--><span class="tm-event-card__places-item"><span>Москва</span><!----></span><!--]--></div></div></div><div class="tm-event-card__footer tm-event-card__footer_widget"><a href="/ru/events/#596" class="tm-event-card__link">Больше событий в календаре</a><div class="tm-event-card__categories"><!--[--><div class="event-category__label event-category__label_type-other"><span>Другое</span></div><!--]--></div></div></div><!--]--><!----></section><!--]--></div><div class="swiper-slide"><!--[--><section class="tm-block tm-block tm-block_spacing-none" id="604" tabindex="-1"><!----><!--[--><div class="tm-event-card tm-event-card_is-widget tm-event-card_responsive"><a href="/ru/events/604/" class=""><img alt class="tm-event-card__image" data-src="https://habrastorage.org/getpro/habr/upload_files/733/9ef/194/7339ef1945f3ee6906daf89db79829d4.png" loading="lazy" src="https://habrastorage.org/r/w390/getpro/habr/upload_files/733/9ef/194/7339ef1945f3ee6906daf89db79829d4.png" srcset="https://habrastorage.org/r/w390/getpro/habr/upload_files/733/9ef/194/7339ef1945f3ee6906daf89db79829d4.png, https://habrastorage.org/getpro/habr/upload_files/733/9ef/194/7339ef1945f3ee6906daf89db79829d4.png 2x"></a><!----><div class="tm-event-card__info"><div class="tm-event-card__date"><!----><div class="tm-event-card__day"><span>20  марта  </span></div></div><a href="/ru/events/604/" class="tm-event-card__title-link"><span>IX HappyWorkForum | Аутентичность и ментальное здоровье персонала</span></a><div class="tm-event-card__places"><div class="tm-event-card__places-list"><!--[--><span class="tm-event-card__places-item"><span>Москва</span><span class="tm-event-card__places-separator"> • </span></span><span class="tm-event-card__places-item"><span>Онлайн</span><!----></span><!--]--></div></div></div><div class="tm-event-card__footer tm-event-card__footer_widget"><a href="/ru/events/#604" class="tm-event-card__link">Больше событий в календаре</a><div class="tm-event-card__categories"><!--[--><div class="event-category__label event-category__label_type-other"><span>Другое</span></div><!--]--></div></div></div><!--]--><!----></section><!--]--></div><div class="swiper-slide"><!--[--><section class="tm-block tm-block tm-block_spacing-none" id="612" tabindex="-1"><!----><!--[--><div class="tm-event-card tm-event-card_is-widget tm-event-card_responsive"><a href="/ru/events/612/" class=""><img alt class="tm-event-card__image" data-src="https://habrastorage.org/getpro/habr/upload_files/38f/10d/f4c/38f10df4c7f9d7c5d4610fe426af0ab4.png" loading="lazy" src="https://habrastorage.org/r/w390/getpro/habr/upload_files/38f/10d/f4c/38f10df4c7f9d7c5d4610fe426af0ab4.png" srcset="https://habrastorage.org/r/w390/getpro/habr/upload_files/38f/10d/f4c/38f10df4c7f9d7c5d4610fe426af0ab4.png, https://habrastorage.org/getpro/habr/upload_files/38f/10d/f4c/38f10df4c7f9d7c5d4610fe426af0ab4.png 2x"></a><!----><div class="tm-event-card__info"><div class="tm-event-card__date"><!----><div class="tm-event-card__day"><span>20  марта  </span></div></div><a href="/ru/events/612/" class="tm-event-card__title-link"><span>Вебинар «Мастерская бюджета: как управлять затратами на облачные ресурсы»</span></a><div class="tm-event-card__places"><div class="tm-event-card__places-list"><!--[--><span class="tm-event-card__places-item"><span>Онлайн</span><!----></span><!--]--></div></div></div><div class="tm-event-card__footer tm-event-card__footer_widget"><a href="/ru/events/#612" class="tm-event-card__link">Больше событий в календаре</a><div class="tm-event-card__categories"><!--[--><div class="event-category__label event-category__label_type-development"><span>Разработка</span></div><div class="event-category__label event-category__label_type-admin"><span>Администрирование</span></div><!--]--></div></div></div><!--]--><!----></section><!--]--></div><div class="swiper-slide"><!--[--><section class="tm-block tm-block tm-block_spacing-none" id="616" tabindex="-1"><!----><!--[--><div class="tm-event-card tm-event-card_is-widget tm-event-card_responsive"><a href="/ru/events/616/" class=""><img alt class="tm-event-card__image" data-src="https://habrastorage.org/getpro/habr/upload_files/523/7fb/13a/5237fb13ad7fb6fb483c49691aaec836.png" loading="lazy" src="https://habrastorage.org/r/w390/getpro/habr/upload_files/523/7fb/13a/5237fb13ad7fb6fb483c49691aaec836.png" srcset="https://habrastorage.org/r/w390/getpro/habr/upload_files/523/7fb/13a/5237fb13ad7fb6fb483c49691aaec836.png, https://habrastorage.org/getpro/habr/upload_files/523/7fb/13a/5237fb13ad7fb6fb483c49691aaec836.png 2x"></a><!----><div class="tm-event-card__info"><div class="tm-event-card__date"><!----><div class="tm-event-card__day"><span>21  марта  </span></div></div><a href="/ru/events/616/" class="tm-event-card__title-link"><span>Бизнес-конференция «Digital Brand Day 2025: Орбита 2025»</span></a><div class="tm-event-card__places"><div class="tm-event-card__places-list"><!--[--><span class="tm-event-card__places-item"><span>Москва</span><!----></span><!--]--></div></div></div><div class="tm-event-card__footer tm-event-card__footer_widget"><a href="/ru/events/#616" class="tm-event-card__link">Больше событий в календаре</a><div class="tm-event-card__categories"><!--[--><div class="event-category__label event-category__label_type-marketing"><span>Маркетинг</span></div><div class="event-category__label event-category__label_type-other"><span>Другое</span></div><!--]--></div></div></div><!--]--><!----></section><!--]--></div><div class="swiper-slide"><!--[--><section class="tm-block tm-block tm-block_spacing-none" id="608" tabindex="-1"><!----><!--[--><div class="tm-event-card tm-event-card_is-widget tm-event-card_responsive"><a href="/ru/events/608/" class=""><img alt class="tm-event-card__image" data-src="https://habrastorage.org/getpro/habr/upload_files/8fd/e04/ddd/8fde04ddd9ba3f6bcd515aa6209f96b7.png" loading="lazy" src="https://habrastorage.org/r/w390/getpro/habr/upload_files/8fd/e04/ddd/8fde04ddd9ba3f6bcd515aa6209f96b7.png" srcset="https://habrastorage.org/r/w390/getpro/habr/upload_files/8fd/e04/ddd/8fde04ddd9ba3f6bcd515aa6209f96b7.png, https://habrastorage.org/getpro/habr/upload_files/8fd/e04/ddd/8fde04ddd9ba3f6bcd515aa6209f96b7.png 2x"></a><!----><div class="tm-event-card__info"><div class="tm-event-card__date"><!----><div class="tm-event-card__day"><span>27  марта  </span></div></div><a href="/ru/events/608/" class="tm-event-card__title-link"><span>Вебинар «Контент-маркетинг здорового человека: как привлечь внимание аудитории»</span></a><div class="tm-event-card__places"><div class="tm-event-card__places-list"><!--[--><span class="tm-event-card__places-item"><span>Онлайн</span><!----></span><!--]--></div></div></div><div class="tm-event-card__footer tm-event-card__footer_widget"><a href="/ru/events/#608" class="tm-event-card__link">Больше событий в календаре</a><div class="tm-event-card__categories"><!--[--><div class="event-category__label event-category__label_type-marketing"><span>Маркетинг</span></div><div class="event-category__label event-category__label_type-other"><span>Другое</span></div><!--]--></div></div></div><!--]--><!----></section><!--]--></div><div class="swiper-slide"><!--[--><section class="tm-block tm-block tm-block_spacing-none" id="606" tabindex="-1"><!----><!--[--><div class="tm-event-card tm-event-card_is-widget tm-event-card_responsive"><a href="/ru/events/606/" class=""><img alt class="tm-event-card__image" data-src="https://habrastorage.org/getpro/habr/upload_files/b99/62a/b24/b9962ab2439c6edc80f96d7f0a847c72.png" loading="lazy" src="https://habrastorage.org/r/w390/getpro/habr/upload_files/b99/62a/b24/b9962ab2439c6edc80f96d7f0a847c72.png" srcset="https://habrastorage.org/r/w390/getpro/habr/upload_files/b99/62a/b24/b9962ab2439c6edc80f96d7f0a847c72.png, https://habrastorage.org/getpro/habr/upload_files/b99/62a/b24/b9962ab2439c6edc80f96d7f0a847c72.png 2x"></a><!----><div class="tm-event-card__info"><div class="tm-event-card__date"><!----><div class="tm-event-card__day"><span>31  марта  </span></div></div><a href="/ru/events/606/" class="tm-event-card__title-link"><span>Серия вебинаров «DevOps Middle: AvitoTech vs ecom.tech»</span></a><div class="tm-event-card__places"><div class="tm-event-card__places-list"><!--[--><span class="tm-event-card__places-item"><span>Онлайн</span><!----></span><!--]--></div></div></div><div class="tm-event-card__footer tm-event-card__footer_widget"><a href="/ru/events/#606" class="tm-event-card__link">Больше событий в календаре</a><div class="tm-event-card__categories"><!--[--><div class="event-category__label event-category__label_type-development"><span>Разработка</span></div><div class="event-category__label event-category__label_type-admin"><span>Администрирование</span></div><!--]--></div></div></div><!--]--><!----></section><!--]--></div><div class="swiper-slide"><!--[--><section class="tm-block tm-block tm-block_spacing-none" id="618" tabindex="-1"><!----><!--[--><div class="tm-event-card tm-event-card_is-widget tm-event-card_responsive"><a href="/ru/events/618/" class=""><img alt class="tm-event-card__image" data-src="https://habrastorage.org/getpro/habr/upload_files/f76/0f9/a82/f760f9a827b851a5eeca4802c643a91d.png" loading="lazy" src="https://habrastorage.org/r/w390/getpro/habr/upload_files/f76/0f9/a82/f760f9a827b851a5eeca4802c643a91d.png" srcset="https://habrastorage.org/r/w390/getpro/habr/upload_files/f76/0f9/a82/f760f9a827b851a5eeca4802c643a91d.png, https://habrastorage.org/getpro/habr/upload_files/f76/0f9/a82/f760f9a827b851a5eeca4802c643a91d.png 2x"></a><!----><div class="tm-event-card__info"><div class="tm-event-card__date"><!----><div class="tm-event-card__day"><span>3  апреля  </span></div></div><a href="/ru/events/618/" class="tm-event-card__title-link"><span>Реалити для разработчиков: узнайте, как строится новое публичное облако MWS</span></a><div class="tm-event-card__places"><div class="tm-event-card__places-list"><!--[--><span class="tm-event-card__places-item"><span>Онлайн</span><!----></span><!--]--></div></div></div><div class="tm-event-card__footer tm-event-card__footer_widget"><a href="/ru/events/#618" class="tm-event-card__link">Больше событий в календаре</a><div class="tm-event-card__categories"><!--[--><div class="event-category__label event-category__label_type-development"><span>Разработка</span></div><!--]--></div></div></div><!--]--><!----></section><!--]--></div><div class="swiper-slide"><!--[--><section class="tm-block tm-block tm-block_spacing-none" id="620" tabindex="-1"><!----><!--[--><div class="tm-event-card tm-event-card_is-widget tm-event-card_responsive"><a href="/ru/events/620/" class=""><img alt class="tm-event-card__image" data-src="https://habrastorage.org/getpro/habr/upload_files/eba/c37/879/ebac378793b959ebce42f41713e7b67f.jpg" loading="lazy" src="https://habrastorage.org/r/w390/getpro/habr/upload_files/eba/c37/879/ebac378793b959ebce42f41713e7b67f.jpg" srcset="https://habrastorage.org/r/w390/getpro/habr/upload_files/eba/c37/879/ebac378793b959ebce42f41713e7b67f.jpg, https://habrastorage.org/getpro/habr/upload_files/eba/c37/879/ebac378793b959ebce42f41713e7b67f.jpg 2x"></a><!----><div class="tm-event-card__info"><div class="tm-event-card__date"><!----><div class="tm-event-card__day"><span>3  апреля  </span></div></div><a href="/ru/events/620/" class="tm-event-card__title-link"><span>Открытая встреча «System Analysis Meetup SberHealth»</span></a><div class="tm-event-card__places"><div class="tm-event-card__places-list"><!--[--><span class="tm-event-card__places-item"><span>Москва</span><span class="tm-event-card__places-separator"> • </span></span><span class="tm-event-card__places-item"><span>Онлайн</span><!----></span><!--]--></div></div></div><div class="tm-event-card__footer tm-event-card__footer_widget"><a href="/ru/events/#620" class="tm-event-card__link">Больше событий в календаре</a><div class="tm-event-card__categories"><!--[--><div class="event-category__label event-category__label_type-analytics"><span>Аналитика</span></div><!--]--></div></div></div><!--]--><!----></section><!--]--></div><div class="swiper-slide"><!--[--><section class="tm-block tm-block tm-block_spacing-none" id="590" tabindex="-1"><!----><!--[--><div class="tm-event-card tm-event-card_is-widget tm-event-card_responsive"><a href="/ru/events/590/" class=""><img alt class="tm-event-card__image" data-src="https://habrastorage.org/getpro/habr/upload_files/31b/e68/295/31be6829578e7934fbc944396eb330b1.png" loading="lazy" src="https://habrastorage.org/r/w390/getpro/habr/upload_files/31b/e68/295/31be6829578e7934fbc944396eb330b1.png" srcset="https://habrastorage.org/r/w390/getpro/habr/upload_files/31b/e68/295/31be6829578e7934fbc944396eb330b1.png, https://habrastorage.org/getpro/habr/upload_files/31b/e68/295/31be6829578e7934fbc944396eb330b1.png 2x"></a><!----><div class="tm-event-card__info"><div class="tm-event-card__date"><!----><div class="tm-event-card__day"><span>10  апреля  </span></div></div><a href="/ru/events/590/" class="tm-event-card__title-link"><span>«GoCloud 2025» — масштабная IT-конференция про облака и AI</span></a><div class="tm-event-card__places"><div class="tm-event-card__places-list"><!--[--><span class="tm-event-card__places-item"><span>Москва</span><span class="tm-event-card__places-separator"> • </span></span><span class="tm-event-card__places-item"><span>Онлайн</span><!----></span><!--]--></div></div></div><div class="tm-event-card__footer tm-event-card__footer_widget"><a href="/ru/events/#590" class="tm-event-card__link">Больше событий в календаре</a><div class="tm-event-card__categories"><!--[--><div class="event-category__label event-category__label_type-development"><span>Разработка</span></div><div class="event-category__label event-category__label_type-admin"><span>Администрирование</span></div><div class="event-category__label event-category__label_type-management"><span>Менеджмент</span></div><!--]--></div></div></div><!--]--><!----></section><!--]--></div><div class="swiper-slide"><!--[--><section class="tm-block tm-block tm-block_spacing-none" id="516" tabindex="-1"><!----><!--[--><div class="tm-event-card tm-event-card_is-widget tm-event-card_responsive"><a href="/ru/events/516/" class=""><img alt class="tm-event-card__image" data-src="https://habrastorage.org/getpro/habr/upload_files/0e9/3a8/3ec/0e93a83ecea09f806d1df907ddb036a4.jpg" loading="lazy" src="https://habrastorage.org/r/w390/getpro/habr/upload_files/0e9/3a8/3ec/0e93a83ecea09f806d1df907ddb036a4.jpg" srcset="https://habrastorage.org/r/w390/getpro/habr/upload_files/0e9/3a8/3ec/0e93a83ecea09f806d1df907ddb036a4.jpg, https://habrastorage.org/getpro/habr/upload_files/0e9/3a8/3ec/0e93a83ecea09f806d1df907ddb036a4.jpg 2x"></a><!----><div class="tm-event-card__info"><div class="tm-event-card__date"><!----><div class="tm-event-card__day"><span>25 – 26  апреля  </span></div></div><a href="/ru/events/516/" class="tm-event-card__title-link"><span>IT-конференция Merge Tatarstan 2025</span></a><div class="tm-event-card__places"><div class="tm-event-card__places-list"><!--[--><span class="tm-event-card__places-item"><span>Казань</span><!----></span><!--]--></div></div></div><div class="tm-event-card__footer tm-event-card__footer_widget"><a href="/ru/events/#516" class="tm-event-card__link">Больше событий в календаре</a><div class="tm-event-card__categories"><!--[--><div class="event-category__label event-category__label_type-development"><span>Разработка</span></div><div class="event-category__label event-category__label_type-marketing"><span>Маркетинг</span></div><div class="event-category__label event-category__label_type-other"><span>Другое</span></div><!--]--></div></div></div><!--]--><!----></section><!--]--></div><div class="swiper-slide"><!--[--><section class="tm-block tm-block tm-block_spacing-none" id="610" tabindex="-1"><!----><!--[--><div class="tm-event-card tm-event-card_is-widget tm-event-card_responsive"><a href="/ru/events/610/" class=""><img alt class="tm-event-card__image" data-src="https://habrastorage.org/getpro/habr/upload_files/652/12d/998/65212d998fb4939d9787bd9c726d2acb.png" loading="lazy" src="https://habrastorage.org/r/w390/getpro/habr/upload_files/652/12d/998/65212d998fb4939d9787bd9c726d2acb.png" srcset="https://habrastorage.org/r/w390/getpro/habr/upload_files/652/12d/998/65212d998fb4939d9787bd9c726d2acb.png, https://habrastorage.org/getpro/habr/upload_files/652/12d/998/65212d998fb4939d9787bd9c726d2acb.png 2x"></a><!----><div class="tm-event-card__info"><div class="tm-event-card__date"><!----><div class="tm-event-card__day"><span>20 – 22  июня  </span></div></div><a href="/ru/events/610/" class="tm-event-card__title-link"><span>Летняя айти-тусовка Summer Merge</span></a><div class="tm-event-card__places"><div class="tm-event-card__places-list"><!--[--><span class="tm-event-card__places-item"><span>Ульяновская область</span><!----></span><!--]--></div></div></div><div class="tm-event-card__footer tm-event-card__footer_widget"><a href="/ru/events/#610" class="tm-event-card__link">Больше событий в календаре</a><div class="tm-event-card__categories"><!--[--><div class="event-category__label event-category__label_type-development"><span>Разработка</span></div><div class="event-category__label event-category__label_type-other"><span>Другое</span></div><!--]--></div></div></div><!--]--><!----></section><!--]--></div><!--]--><!--]--></div><!----><!--[--><button class="swiper-button-prev"><span class="tm-svg-icon__wrapper swiper-button-icon"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Влево</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#arrow-back"></use></svg></span></button><button class="swiper-button-next"><span class="tm-svg-icon__wrapper swiper-button-icon"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Вправо</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#arrow-back"></use></svg></span></button><!--]--></div><!--]--></div><!--]--><!----></section><!--]--><!--]--></div><!--]--><!--]--></div></div><!--]--><!--]--></div></div><div class="tm-page__sidebar"><!--[--><!----><!--]--></div></div><!----><!--]--></div></div></main><!----></div><!----><div class="tm-footer"><div class="tm-page-width"><!--[--><div class="tm-footer__container"><div class="tm-footer__title"><a class="tm-svg-icon__wrapper tm-footer__title-link" href="/ru/"><svg class="tm-svg-img tm-svg-icon" height="16" width="16"><title>Хабр</title><use xlink:href="/img/habr-logo-ru.svg#logo"></use></svg></a></div><div class="tm-footer__social"><!--[--><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://www.facebook.com/habrahabr.ru" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="36" width="36"><title>Facebook</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-facebook"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://twitter.com/habr_com" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="36" width="36"><title>Twitter</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-twitter"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://vk.com/habr" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="36" width="36"><title>VK</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-vk"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://telegram.me/habr_com" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="36" width="36"><title>Telegram</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-telegram"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://www.youtube.com/channel/UCd_sTwKqVrweTt4oAKY5y4w" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="36" width="36"><title>Youtube</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-youtube"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://dzen.ru/habr" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="36" width="36"><title>Яндекс Дзен</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-dzen"></use></svg></a><!--]--></div><!--teleport start--><!--teleport end--><button class="tm-footer__link"><svg class="tm-svg-img tm-footer__icon" height="16" width="16"><title>Язык</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#lang"></use></svg> Настройка языка</button><a href="/ru/feedback/" class="tm-footer__link">Техническая поддержка</a><div class="tm-footer-copyright"><span class="tm-copyright"><span class="tm-copyright__years">© 2006–2025, </span><span class="tm-copyright__name"><a class="tm-copyright__link" href="https://company.habr.com/" rel="noopener" target="_blank">Habr</a></span></span></div></div><!--]--></div></div><!----><!--]--></div><!----></div><script>window.__INITIAL_STATE__={"adblock":{"hasAcceptableAdsFilter":false,"hasAdblock":false},"articlesList":{"articlesList":{"467161":{"id":"467161","timePublished":"2019-09-12T12:20:11+00:00","isCorporative":false,"lang":"ru","titleHtml":"Веб-приложение на Kotlin + Spring Boot + Vue.js","leadData":{"textHtml":"Добрый день, дорогие обитатели Хабра!\u003Cbr\u003E\r\n\u003Cbr\u003E\r\nНе так давно мне представилась возможность реализовать небольшой проект без особых требований по технической части. То есть, я был волен выбирать стек технологий на своё усмотрение. Потому не преминул возможностью как следует «пощупать» \u003Cs\u003Eмодные, молодёжные\u003C\u002Fs\u003E многообещающие, но малознакомые мне на практике \u003Cb\u003EKotlin\u003C\u002Fb\u003E и \u003Cb\u003EVue.js\u003C\u002Fb\u003E, добавив туда уже знакомый \u003Cb\u003ESpring Boot\u003C\u002Fb\u003E и примерив всё это на незамысловатое веб-приложение. \u003Cbr\u003E","imageUrl":null,"buttonTextHtml":"Посмотреть, что из этого вышло","image":null},"editorVersion":"1.0","postType":"article","postLabels":[{"type":"sandbox","typeOf":"system","title":"Из песочницы","data":{"url":null}}],"author":{"id":"1395776","alias":"drleprechaun","fullname":"Вадим","avatarUrl":"\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Favatars\u002F483\u002F5b8\u002Fdb5\u002F4835b8db5f4ab9c0abb8011a75bce3bf.jpg","speciality":"Пользователь","scoreStats":{"score":8,"votesCount":10},"rating":0,"relatedData":null,"contacts":[],"authorContacts":[],"paymentDetails":{"paymentYandexMoney":null,"paymentPayPalMe":null,"paymentWebmoney":null},"donationsMethod":null,"isInBlacklist":null,"careerProfile":null},"statistics":{"commentsCount":21,"favoritesCount":206,"readingCount":48071,"score":17,"votesCount":19,"votesCountPlus":18,"votesCountMinus":1},"hubs":[{"id":"19441","alias":"kotlin","type":"collective","title":"Kotlin","titleHtml":"Kotlin","isProfiled":true,"relatedData":null},{"id":"21296","alias":"vuejs","type":"collective","title":"VueJS","titleHtml":"VueJS","isProfiled":true,"relatedData":null}],"flows":[{"id":"1","alias":"develop","title":"Разработка","titleHtml":"Разработка"}],"relatedData":{"vote":null,"unreadCommentsCount":0,"bookmarked":false,"canComment":false,"canEdit":false,"canViewVotes":false,"votePlus":{"canVote":false,"isChargeEnough":false,"isKarmaEnough":false,"isVotingOver":true,"isPublicationLimitEnough":false},"voteMinus":{"canVote":false,"isChargeEnough":false,"isKarmaEnough":false,"isVotingOver":true,"isPublicationLimitEnough":false},"canModerateComments":false,"trackerSubscribed":false,"emailSubscribed":false},"textHtml":"\u003Cdiv xmlns=\"http:\u002F\u002Fwww.w3.org\u002F1999\u002Fxhtml\"\u003EДобрый день, дорогие обитатели Хабра!\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nНе так давно мне представилась возможность реализовать небольшой проект без особых требований по технической части. То есть, я был волен выбирать стек технологий на своё усмотрение. Потому не преминул возможностью как следует «пощупать» \u003Cs\u003Eмодные, молодёжные\u003C\u002Fs\u003E многообещающие, но малознакомые мне на практике \u003Cb\u003EKotlin\u003C\u002Fb\u003E и \u003Cb\u003EVue.js\u003C\u002Fb\u003E, добавив туда уже знакомый \u003Cb\u003ESpring Boot\u003C\u002Fb\u003E и примерив всё это на незамысловатое веб-приложение. \u003Cbr\u002F\u003E\n\u003Ca name=\"habracut\"\u003E\u003C\u002Fa\u003E\u003Cbr\u002F\u003E\nПриступив, я опрометчиво полагал, что в Интернете найдётся множество статей и руководств на эту тему. Материалов действительно достаточно, и все они хороши, но только до первого REST-контроллера. Затем начинаются трудности противоречия. А ведь даже в простом приложении хотелось бы иметь более сложную логику, чем отрисовка на странице текста, возвращаемого сервером.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nКое-как разобравшись, я решил написать собственное руководство, которое, надеюсь, будет кому-нибудь полезно.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Ch3\u003EО чём и для кого статья \u003C\u002Fh3\u003E\u003Cbr\u002F\u003E\nДанный материал — руководство для «быстрого старта» разработки веб-приложения с бэкендом на \u003Cb\u003EKotlin\u003C\u002Fb\u003E + \u003Cb\u003ESpring Boot\u003C\u002Fb\u003E и фронтендом на \u003Cb\u003EVue.js\u003C\u002Fb\u003E. Сразу скажу, что я не «топлю» за них и не говорю о каких-то однозначных преимуществах данного стека. Цель данной статьи — поделиться опытом.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nМатериал рассчитан на разработчиков, имеющих опыт работы с Java, Spring Framework\u002FSpring Boot, React\u002FAngular или хотя бы чистым JavaScript. Подойдёт и тем, у кого нет такого опыта — например, начинающим программистам, но, боюсь, тогда придётся разбираться в некоторых деталях самостоятельно. Вообще, некоторые моменты этого руководства стоит рассмотреть подробнее, но, думаю, лучше сделать это в рамках других публикаций, чтобы сильно не отклоняться от темы и не делать статью громоздкой. \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nБыть может, кому это поможет сформировать представление о бэкенд-разработке на Kotlin без необходимости самому погружаться в данную тематику, а кому-то — сократить время работы, взяв за основу уже готовый скелет приложения.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nНесмотря на описание конкретных практических шагов, в целом, на мой взгляд, статья имеет экспериментально-обзорный характер. Сейчас такой подход, да и сама постановка вопроса видится, скорее, как хипстерская затея — собрать как можно больше модных слов в одном месте. Но в будущем, возможно, и займёт свою нишу в энтерпрайзной разработке. Быть может, среди нас есть начинающие (и продолжающие) программисты, которым предстоит жить и работать во времена, когда Kotlin и Vue.js будут так же популярны и востребованы, как сейчас Java и React. Ведь Kotlin и Vue.js действительно подают большие надежды.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nЗа то время, пока я писал это руководство, в сети уже стали появляться похожие публикации, как, например, \u003Ca href=\"https:\u002F\u002Fauth0.com\u002Fblog\u002Fvuejs-spring-boot-kotlin-and-graphql-building-modern-apps-part-1\u002F\" rel=\"nofollow\"\u003Eэта\u003C\u002Fa\u003E. Повторюсь, материалов, где разбирается порядок действий до первого REST-контроллера достаточно, но интересно было бы увидеть более сложную логику — например, реализацию аутентификации с разделением по ролям, что является довольно необходимым функционалом. Именно этим я дополнил своё собственное руководство. \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Ch3\u003EСодержание\u003C\u002Fh3\u003E\u003Cbr\u002F\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Ca href=\"#Reference\"\u003EКраткая справка\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#Instruments\"\u003EИнструменты разработки\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#Initialization\"\u003EИнициализация проекта\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#RESTAPI\"\u003EREST API\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#DB\"\u003EПодключение к базе данных\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#Authentication\"\u003EАутентификация\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#WaysToImprove\"\u003EПути улучшения\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#Links\"\u003EПолезные ссылки\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\u003Cbr\u002F\u003E\n\u003Ca name=\"Reference\"\u003E\u003C\u002Fa\u003E\u003Cbr\u002F\u003E\n\u003Ch2\u003EКраткая справка\u003C\u002Fh2\u003E\u003Cbr\u002F\u003E\n\u003Ca href=\"https:\u002F\u002Fru.wikipedia.org\u002Fwiki\u002FKotlin\" rel=\"nofollow\"\u003E\u003Cb\u003EKotlin\u003C\u002Fb\u003E\u003C\u002Fa\u003E — язык программирования, работающий поверх \u003Cb\u003EJVM\u003C\u002Fb\u003E и разрабатываемый международной компанией \u003Cb\u003EJetBrains\u003C\u002Fb\u003E.\u003Cbr\u002F\u003E\n\u003Ca href=\"https:\u002F\u002Fru.wikipedia.org\u002Fwiki\u002FVue.js\" rel=\"nofollow\"\u003E\u003Cb\u003EVue.js \u003C\u002Fb\u003E\u003C\u002Fa\u003E — \u003Cb\u003EJavaScript\u003C\u002Fb\u003E -фреймворк для разработки одностраничных приложений в реактивном стиле.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Ca name=\"Instruments\"\u003E\u003C\u002Fa\u003E\u003Cbr\u002F\u003E\n\u003Ch2\u003EИнструменты разработки\u003C\u002Fh2\u003E \u003Cbr\u002F\u003E\nВ качестве среды разработки я бы рекомендовал использовать \u003Cb\u003EIntelliJ IDEA\u003C\u002Fb\u003E — среду разработки от \u003Cb\u003EJetBrains\u003C\u002Fb\u003E, получившую широкую популярность в Java-сообществе, поскольку она имеет удобные инструменты и фичи для работы с Kotlin вплоть для преобразования Java-кода в код на Kotlin. Однако, не стоит рассчитывать, что таким образом можно мигрировать целый проект, и всё вдруг заработает само собой.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nСчастливые обладатели \u003Cb\u003EIntelliJ IDEA Ultimate Edition\u003C\u002Fb\u003E могут для удобства работы с Vue.js установить соответствующий \u003Ca href=\"https:\u002F\u002Fplugins.jetbrains.com\u002Fplugin\u002F9442-vue-js\" rel=\"nofollow\"\u003Eплагин\u003C\u002Fa\u003E. Если же вы ищете компромисс между \u003Cs\u003Eхалявой\u003C\u002Fs\u003E ценой и удобством, то очень рекомендую использовать \u003Cb\u003EMicrosoft Visual Code\u003C\u002Fb\u003E с плагином \u003Ca href=\"https:\u002F\u002Fmarketplace.visualstudio.com\u002Fitems?itemName=octref.vetur\" rel=\"nofollow\"\u003EVetur\u003C\u002Fa\u003E.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nПолагаю, для многих это очевидно, но на всякий случай напомню, что для работы c Vue.js требуется менеджер пакетов \u003Ca href=\"https:\u002F\u002Fwww.npmjs.com\" rel=\"nofollow\"\u003Enpm\u003C\u002Fa\u003E. Инструкцию по установке Vue.js можно найти на сайте \u003Ca href=\"https:\u002F\u002Fcli.vuejs.org\u002Fguide\u002Finstallation.html\" rel=\"nofollow\"\u003EVue CLI\u003C\u002Fa\u003E.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nВ качестве сборщика проектов на Java в данном руководстве используется \u003Ca href=\"https:\u002F\u002Fmaven.apache.org\" rel=\"nofollow\"\u003EMaven\u003C\u002Fa\u003E, в качестве сервера баз данных — \u003Ca href=\"https:\u002F\u002Fwww.postgresql.org\" rel=\"nofollow\"\u003EPostgreSQL\u003C\u002Fa\u003E.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Ca name=\"Initialization\"\u003E\u003C\u002Fa\u003E\u003Cbr\u002F\u003E\n\u003Ch2\u003EИнициализация проекта\u003C\u002Fh2\u003E\u003Cbr\u002F\u003E\nСоздадим директорию проекта, назвав, например \u003Ci\u003Ekotlin-spring-vue\u003C\u002Fi\u003E. Нашем проекте будут два модуля — \u003Cb\u003Ebackend\u003C\u002Fb\u003E и \u003Cb\u003Efrontend\u003C\u002Fb\u003E. Сначала будет собираться фронтенд. Затем, при сборке бэкенд будет копировать себе index.html, favicon.ico и все статические файлы (*.js, *.css, изображения и т.д.). \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nТаким образом, в корневом каталоге у нас будут находится две подпапки — \u003Ci\u003E\u002Fbackend\u003C\u002Fi\u003E и \u003Ci\u003E\u002Ffrontend\u003C\u002Fi\u003E. Однако, не стоит торопиться создавать их вручную.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nИнициализировать модуль бэкенда можно несколькими путями:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cul\u003E\n\u003Cli\u003Eвручную (путь самурая)\u003C\u002Fli\u003E\n\u003Cli\u003Eсгенерирован проект Spring Boot приложения средствами \u003Cb\u003ESpring Tool Suite\u003C\u002Fb\u003E или \u003Cb\u003EIntelliJ IDEA Ultimate Edition\u003C\u002Fb\u003E\u003C\u002Fli\u003E\n\u003Cli\u003EС помощью \u003Ca href=\"https:\u002F\u002Fstart.spring.io\" rel=\"nofollow\"\u003E\u003Cb\u003ESpring Initializr\u003C\u002Fb\u003E\u003C\u002Fa\u003E, указав нужные настройки — это, пожалуй, самый распространенный способ\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\u003Cbr\u002F\u003E\nВ нашем случае первичная конфигурация такова:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cdiv class=\"spoiler\" role=\"button\" tabindex=\"0\"\u003E\n                        \u003Cb class=\"spoiler_title\"\u003EКонфигуарция модуля бэкенда\u003C\u002Fb\u003E\n                        \u003Cdiv class=\"spoiler_text\"\u003E\u003Cul\u003E\n\u003Cli\u003EProject: Maven Project\u003C\u002Fli\u003E\n\u003Cli\u003ELanguage: Kotlin\u003C\u002Fli\u003E\n\u003Cli\u003ESpring Boot: 2.1.6\u003C\u002Fli\u003E\n\u003Cli\u003EProject Metadata: Java 8, JAR packaging\u003C\u002Fli\u003E\n\u003Cli\u003EDependencies: Spring Web Starter, Spring Boot Actuator, Spring Boot DevTools\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw1560\u002Fwebt\u002Frm\u002Fvy\u002Fox\u002Frmvyoxpbqjjaajjcfbvdpe5ams0.png\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fwebt\u002Frm\u002Fvy\u002Fox\u002Frmvyoxpbqjjaajjcfbvdpe5ams0.png\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003C\u002Fdiv\u003E\n                    \u003C\u002Fdiv\u003E\u003Cbr\u002F\u003E\n\u003Ci\u003Epom.xml\u003C\u002Fi\u003E должен выглядеть следующим образом:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cdiv class=\"spoiler\" role=\"button\" tabindex=\"0\"\u003E\n                        \u003Cb class=\"spoiler_title\"\u003Epom.xml - backend\u003C\u002Fb\u003E\n                        \u003Cdiv class=\"spoiler_text\"\u003E\u003Cpre\u003E\u003Ccode class=\"xml\"\u003E&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;project xmlns=\"http:\u002F\u002Fmaven.apache.org\u002FPOM\u002F4.0.0\" xmlns:xsi=\"http:\u002F\u002Fwww.w3.org\u002F2001\u002FXMLSchema-instance\"\n\txsi:schemaLocation=\"http:\u002F\u002Fmaven.apache.org\u002FPOM\u002F4.0.0 http:\u002F\u002Fmaven.apache.org\u002Fxsd\u002Fmaven-4.0.0.xsd\"&gt;\n\t&lt;modelVersion&gt;4.0.0&lt;\u002FmodelVersion&gt;\n\t\n\t&lt;parent&gt;\n\t\t&lt;groupId&gt;com.kotlin-spring-vue&lt;\u002FgroupId&gt;\n\t\t&lt;artifactId&gt;demo&lt;\u002FartifactId&gt;\n\t\t&lt;version&gt;0.0.1-SNAPSHOT&lt;\u002Fversion&gt;\n\t&lt;\u002Fparent&gt;\n\t\n\t&lt;groupId&gt;com.kotlin-spring-vue&lt;\u002FgroupId&gt;\n\t&lt;artifactId&gt;backend&lt;\u002FartifactId&gt;\n\t&lt;version&gt;0.0.1-SNAPSHOT&lt;\u002Fversion&gt;\n\t&lt;name&gt;backend&lt;\u002Fname&gt;\n\t&lt;description&gt;Backend module for Kotlin + Spring Boot + Vue.js&lt;\u002Fdescription&gt;\n\n\t&lt;properties&gt;\n\t\t&lt;java.version&gt;1.8&lt;\u002Fjava.version&gt;\n\t\t&lt;kotlin.version&gt;1.2.71&lt;\u002Fkotlin.version&gt;\n\t\t&lt;project.build.sourceEncoding&gt;UTF-8&lt;\u002Fproject.build.sourceEncoding&gt;\n\t\t&lt;project.reporting.outputEncoding&gt;UTF-8&lt;\u002Fproject.reporting.outputEncoding&gt;\n\t\t&lt;rest-assured.version&gt;3.3.0&lt;\u002Frest-assured.version&gt;\n\t&lt;\u002Fproperties&gt;\n\n\t&lt;dependencies&gt;\n\t\t&lt;dependency&gt;\n\t\t\t&lt;groupId&gt;org.springframework.boot&lt;\u002FgroupId&gt;\n\t\t\t&lt;artifactId&gt;spring-boot-starter-actuator&lt;\u002FartifactId&gt;\n\t\t&lt;\u002Fdependency&gt;\n\t\t&lt;dependency&gt;\n\t\t\t&lt;groupId&gt;org.springframework.boot&lt;\u002FgroupId&gt;\n\t\t\t&lt;artifactId&gt;spring-boot-starter-web&lt;\u002FartifactId&gt;\n\t\t&lt;\u002Fdependency&gt;\n\t\t&lt;dependency&gt;\n\t\t\t&lt;groupId&gt;com.fasterxml.jackson.module&lt;\u002FgroupId&gt;\n\t\t\t&lt;artifactId&gt;jackson-module-kotlin&lt;\u002FartifactId&gt;\n\t\t&lt;\u002Fdependency&gt;\n\t\t&lt;dependency&gt;\n\t\t\t&lt;groupId&gt;org.jetbrains.kotlin&lt;\u002FgroupId&gt;\n\t\t\t&lt;artifactId&gt;kotlin-reflect&lt;\u002FartifactId&gt;\n\t\t&lt;\u002Fdependency&gt;\n\t\t&lt;dependency&gt;\n\t\t\t&lt;groupId&gt;org.jetbrains.kotlin&lt;\u002FgroupId&gt;\n\t\t\t&lt;artifactId&gt;kotlin-stdlib-jdk8&lt;\u002FartifactId&gt;\n\t\t&lt;\u002Fdependency&gt;\n\n\t\t&lt;dependency&gt;\n\t\t\t&lt;groupId&gt;org.springframework.boot&lt;\u002FgroupId&gt;\n\t\t\t&lt;artifactId&gt;spring-boot-devtools&lt;\u002FartifactId&gt;\n\t\t\t&lt;scope&gt;runtime&lt;\u002Fscope&gt;\n\t\t\t&lt;optional&gt;true&lt;\u002Foptional&gt;\n\t\t&lt;\u002Fdependency&gt;\n\t\t&lt;dependency&gt;\n\t\t\t&lt;groupId&gt;org.springframework.boot&lt;\u002FgroupId&gt;\n\t\t\t&lt;artifactId&gt;spring-boot-starter-test&lt;\u002FartifactId&gt;\n\t\t\t&lt;scope&gt;test&lt;\u002Fscope&gt;\n\t\t&lt;\u002Fdependency&gt;\n\t&lt;\u002Fdependencies&gt;\n\n\t&lt;build&gt;\n\t\t&lt;sourceDirectory&gt;${project.basedir}\u002Fsrc\u002Fmain\u002Fkotlin&lt;\u002FsourceDirectory&gt;\n\t\t&lt;testSourceDirectory&gt;${project.basedir}\u002Fsrc\u002Ftest\u002Fkotlin&lt;\u002FtestSourceDirectory&gt;\n\t\t&lt;plugins&gt;\n\t\t\t&lt;plugin&gt;\n\t\t\t\t&lt;groupId&gt;org.springframework.boot&lt;\u002FgroupId&gt;\n\t\t\t\t&lt;artifactId&gt;spring-boot-maven-plugin&lt;\u002FartifactId&gt;\n\t\t\t\t&lt;configuration&gt;\n\t\t\t\t\t&lt;mainClass&gt;com.kotlinspringvue.backend.BackendApplicationKt&lt;\u002FmainClass&gt;\n\t\t\t\t&lt;\u002Fconfiguration&gt;\n\t\t\t&lt;\u002Fplugin&gt;\n\t\t\t&lt;plugin&gt;\n\t\t\t\t&lt;groupId&gt;org.jetbrains.kotlin&lt;\u002FgroupId&gt;\n\t\t\t\t&lt;artifactId&gt;kotlin-maven-plugin&lt;\u002FartifactId&gt;\n\t\t\t\t&lt;configuration&gt;\n\t\t\t\t\t&lt;args&gt;\n\t\t\t\t\t\t&lt;arg&gt;-Xjsr305=strict&lt;\u002Farg&gt;\n\t\t\t\t\t&lt;\u002Fargs&gt;\n\t\t\t\t\t&lt;compilerPlugins&gt;\n\t\t\t\t\t\t&lt;plugin&gt;spring&lt;\u002Fplugin&gt;\n\t\t\t\t\t&lt;\u002FcompilerPlugins&gt;\n\t\t\t\t&lt;\u002Fconfiguration&gt;\n\t\t\t\t&lt;dependencies&gt;\n\t\t\t\t\t&lt;dependency&gt;\n\t\t\t\t\t\t&lt;groupId&gt;org.jetbrains.kotlin&lt;\u002FgroupId&gt;\n\t\t\t\t\t\t&lt;artifactId&gt;kotlin-maven-allopen&lt;\u002FartifactId&gt;\n\t\t\t\t\t\t&lt;version&gt;${kotlin.version}&lt;\u002Fversion&gt;\n\t\t\t\t\t&lt;\u002Fdependency&gt;\n\t\t\t\t&lt;\u002Fdependencies&gt;\n\t\t\t&lt;\u002Fplugin&gt;\n\t\t\t&lt;plugin&gt;\n\t\t\t\t&lt;artifactId&gt;maven-resources-plugin&lt;\u002FartifactId&gt;\n\t\t\t\t&lt;executions&gt;\n\t\t\t\t\t&lt;execution&gt;\n\t\t\t\t\t\t&lt;id&gt;copy Vue.js frontend content&lt;\u002Fid&gt;\n\t\t\t\t\t\t&lt;phase&gt;generate-resources&lt;\u002Fphase&gt;\n\t\t\t\t\t\t&lt;goals&gt;\n\t\t\t\t\t\t\t&lt;goal&gt;copy-resources&lt;\u002Fgoal&gt;\n\t\t\t\t\t\t&lt;\u002Fgoals&gt;\n\t\t\t\t\t\t&lt;configuration&gt;\n\t\t\t\t\t\t\t&lt;outputDirectory&gt;src\u002Fmain\u002Fresources\u002Fpublic&lt;\u002FoutputDirectory&gt;\n\t\t\t\t\t\t\t&lt;overwrite&gt;true&lt;\u002Foverwrite&gt;\n\t\t\t\t\t\t\t&lt;resources&gt;\n\t\t\t\t\t\t\t\t&lt;resource&gt;\n\t\t\t\t\t\t\t\t\t&lt;directory&gt;${project.parent.basedir}\u002Ffrontend\u002Ftarget\u002Fdist&lt;\u002Fdirectory&gt;\n\t\t\t\t\t\t\t\t\t&lt;includes&gt;\n\t\t\t\t\t\t\t\t\t\t&lt;include&gt;static\u002F&lt;\u002Finclude&gt;\n\t\t\t\t\t\t\t\t\t\t&lt;include&gt;index.html&lt;\u002Finclude&gt;\n\t\t\t\t\t\t\t\t\t\t&lt;include&gt;favicon.ico&lt;\u002Finclude&gt;\n\t\t\t\t\t\t\t\t\t&lt;\u002Fincludes&gt;\n\t\t\t\t\t\t\t\t&lt;\u002Fresource&gt;\n\t\t\t\t\t\t\t&lt;\u002Fresources&gt;\n\t\t\t\t\t\t&lt;\u002Fconfiguration&gt;\n\t\t\t\t\t&lt;\u002Fexecution&gt;\n\t\t\t\t&lt;\u002Fexecutions&gt;\n\t\t\t&lt;\u002Fplugin&gt;\n\t\t&lt;\u002Fplugins&gt;\n\t&lt;\u002Fbuild&gt;\n&lt;\u002Fproject&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nОбращаю внимание:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cul\u003E\n\u003Cli\u003EНазвание главного класса заканчивается на \u003Ci\u003EKt\u003C\u002Fi\u003E\u003C\u002Fli\u003E\n\u003Cli\u003EВыполняется копирование ресурсов из \u003Ci\u003Eкорневая_папка_проекта\u002Ffrontend\u002Ftarget\u002Fdist\u003C\u002Fi\u003E в \u003Ci\u003Esrc\u002Fmain\u002Fresources\u002Fpublic\u003C\u002Fi\u003E\u003C\u002Fli\u003E\n\u003Cli\u003EРодительский проект (parent) в лице \u003Ci\u003Espring-boot-starter-parent\u003C\u002Fi\u003E пренесён на уровень главного \u003Ci\u003Epom.xml\u003C\u002Fi\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\u003Cbr\u002F\u003E\n\u003C\u002Fdiv\u003E\n                    \u003C\u002Fdiv\u003E\u003Cbr\u002F\u003E\nЧтобы инициализировать модуль фронтенда, переходим в корневую директорию проекта и выполняем команду:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode class=\"plaintext\"\u003E$ vue create frontend\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nДалее можно выбрать все настройки по умолчанию — в нашем случае этого будет достаточно.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nПо умолчанию модуль будет собираться в подпапку \u003Ci\u003E\u002Fdist\u003C\u002Fi\u003E, однако нам нужно видеть собранные файлы в папке \u002Ftarget. Для этого создадим файл \u003Ci\u003Evue.config.js\u003C\u002Fi\u003E прямо в \u003Ci\u003E\u002Ffrontend\u003C\u002Fi\u003E со следующими настройками:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode class=\"javascript\"\u003Emodule.exports = { \n     outputDir: 'target\u002Fdist',\n     assetsDir: 'static'\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nПоместим в модуль \u003Ci\u003Efrontend\u003C\u002Fi\u003E файл \u003Ci\u003Epom.xml\u003C\u002Fi\u003E такого вида:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cdiv class=\"spoiler\" role=\"button\" tabindex=\"0\"\u003E\n                        \u003Cb class=\"spoiler_title\"\u003Epom.xml - frontend\u003C\u002Fb\u003E\n                        \u003Cdiv class=\"spoiler_text\"\u003E\u003Cpre\u003E\u003Ccode class=\"xml\"\u003E&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;project xmlns=\"http:\u002F\u002Fmaven.apache.org\u002FPOM\u002F4.0.0\" xmlns:xsi=\"http:\u002F\u002Fwww.w3.org\u002F2001\u002FXMLSchema-instance\" xsi:schemaLocation=\"http:\u002F\u002Fmaven.apache.org\u002FPOM\u002F4.0.0 http:\u002F\u002Fmaven.apache.org\u002Fxsd\u002Fmaven-4.0.0.xsd\"&gt;\n  &lt;modelVersion&gt;4.0.0&lt;\u002FmodelVersion&gt;\n  &lt;artifactId&gt;frontend&lt;\u002FartifactId&gt;\n\n  &lt;parent&gt;\n     &lt;groupId&gt;com.kotlin-spring-vue&lt;\u002FgroupId&gt;\n     &lt;artifactId&gt;demo&lt;\u002FartifactId&gt;\n     &lt;version&gt;0.0.1-SNAPSHOT&lt;\u002Fversion&gt;\n  &lt;\u002Fparent&gt;\n\n  &lt;properties&gt;\n     &lt;project.build.sourceEncoding&gt;UTF-8&lt;\u002Fproject.build.sourceEncoding&gt;\n     &lt;project.reporting.outputEncoding&gt;UTF-8&lt;\u002Fproject.reporting.outputEncoding&gt;\n     &lt;java.version&gt;1.8&lt;\u002Fjava.version&gt;\n      &lt;frontend-maven-plugin.version&gt;1.6&lt;\u002Ffrontend-maven-plugin.version&gt;\n  &lt;\u002Fproperties&gt;\n\n  &lt;build&gt;\n     &lt;plugins&gt;\n        &lt;plugin&gt;\n           &lt;groupId&gt;com.github.eirslett&lt;\u002FgroupId&gt;\n           &lt;artifactId&gt;frontend-maven-plugin&lt;\u002FartifactId&gt;\n           &lt;version&gt;${frontend-maven-plugin.version}&lt;\u002Fversion&gt;\n           &lt;executions&gt;\n              &lt;!-- Install our node and npm version to run npm\u002Fnode scripts--&gt;\n              &lt;execution&gt;\n                 &lt;id&gt;install node and npm&lt;\u002Fid&gt;\n                 &lt;goals&gt;\n                    &lt;goal&gt;install-node-and-npm&lt;\u002Fgoal&gt;\n                 &lt;\u002Fgoals&gt;\n                 &lt;configuration&gt;\n                    &lt;nodeVersion&gt;v11.8.0&lt;\u002FnodeVersion&gt;\n                 &lt;\u002Fconfiguration&gt;\n              &lt;\u002Fexecution&gt;\n              &lt;!-- Install all project dependencies --&gt;\n              &lt;execution&gt;\n                 &lt;id&gt;npm install&lt;\u002Fid&gt;\n                 &lt;goals&gt;\n                    &lt;goal&gt;npm&lt;\u002Fgoal&gt;\n                 &lt;\u002Fgoals&gt;\n                 &lt;!-- optional: default phase is \"generate-resources\" --&gt;\n                 &lt;phase&gt;generate-resources&lt;\u002Fphase&gt;\n                 &lt;!-- Optional configuration which provides for running any npm command --&gt;\n                 &lt;configuration&gt;\n                    &lt;arguments&gt;install&lt;\u002Farguments&gt;\n                 &lt;\u002Fconfiguration&gt;\n              &lt;\u002Fexecution&gt;\n              &lt;!-- Build and minify static files --&gt;\n              &lt;execution&gt;\n                 &lt;id&gt;npm run build&lt;\u002Fid&gt;\n                 &lt;goals&gt;\n                    &lt;goal&gt;npm&lt;\u002Fgoal&gt;\n                 &lt;\u002Fgoals&gt;\n                 &lt;configuration&gt;\n                    &lt;arguments&gt;run build&lt;\u002Farguments&gt;\n                    &lt;\u002Fconfiguration&gt;\n              &lt;\u002Fexecution&gt;\n           &lt;\u002Fexecutions&gt;\n        &lt;\u002Fplugin&gt;\n     &lt;\u002Fplugins&gt;\n  &lt;\u002Fbuild&gt;\n&lt;\u002Fproject&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\n\u003C\u002Fdiv\u003E\n                    \u003C\u002Fdiv\u003E\u003Cbr\u002F\u003E\nИ, наконец, поместим \u003Ci\u003Epom.xml\u003C\u002Fi\u003E в корневую директорию проекта:\u003Cbr\u002F\u003E\n\u003Cdiv class=\"spoiler\" role=\"button\" tabindex=\"0\"\u003E\n                        \u003Cb class=\"spoiler_title\"\u003Epom.xml\u003C\u002Fb\u003E\n                        \u003Cdiv class=\"spoiler_text\"\u003E\u003Cpre\u003E\u003Ccode class=\"xml\"\u003E&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;project xmlns=\"http:\u002F\u002Fmaven.apache.org\u002FPOM\u002F4.0.0\"\n         xmlns:xsi=\"http:\u002F\u002Fwww.w3.org\u002F2001\u002FXMLSchema-instance\"\n         xsi:schemaLocation=\"http:\u002F\u002Fmaven.apache.org\u002FPOM\u002F4.0.0 http:\u002F\u002Fmaven.apache.org\u002Fxsd\u002Fmaven-4.0.0.xsd\"&gt;\n    &lt;modelVersion&gt;4.0.0&lt;\u002FmodelVersion&gt;\n\n    &lt;groupId&gt;com.kotlin-spring-vue&lt;\u002FgroupId&gt;\n    &lt;artifactId&gt;demo&lt;\u002FartifactId&gt;\n    &lt;packaging&gt;pom&lt;\u002Fpackaging&gt;\n    &lt;version&gt;0.0.1-SNAPSHOT&lt;\u002Fversion&gt;\n\n    &lt;name&gt;kotlin-spring-vue&lt;\u002Fname&gt;\n    &lt;description&gt;Kotlin + Spring Boot + Vue.js&lt;\u002Fdescription&gt;\n\n    &lt;modules&gt;\n        &lt;module&gt;frontend&lt;\u002Fmodule&gt;\n        &lt;module&gt;backend&lt;\u002Fmodule&gt;\n    &lt;\u002Fmodules&gt;\n\n    &lt;parent&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;\u002FgroupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-parent&lt;\u002FartifactId&gt;\n        &lt;version&gt;2.1.3.RELEASE&lt;\u002Fversion&gt;\n        &lt;relativePath\u002F&gt; &lt;!-- lookup parent from repository --&gt;\n    &lt;\u002Fparent&gt;\n\n    &lt;properties&gt;\n        &lt;main.basedir&gt;${project.basedir}&lt;\u002Fmain.basedir&gt;\n    &lt;\u002Fproperties&gt;\n\n    &lt;build&gt;\n        &lt;plugins&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.jacoco&lt;\u002FgroupId&gt;\n                &lt;artifactId&gt;jacoco-maven-plugin&lt;\u002FartifactId&gt;\n                &lt;executions&gt;\n                    &lt;!-- Prepares the property pointing to the JaCoCo\n                    runtime agent which is passed as VM argument when Maven the Surefire plugin\n                    is executed. --&gt;\n                    &lt;execution&gt;\n                        &lt;id&gt;pre-unit-test&lt;\u002Fid&gt;\n                        &lt;goals&gt;\n                            &lt;goal&gt;prepare-agent&lt;\u002Fgoal&gt;\n                        &lt;\u002Fgoals&gt;\n                    &lt;\u002Fexecution&gt;\n                    &lt;!-- Ensures that the code coverage report for\n                    unit tests is created after unit tests have been run. --&gt;\n                    &lt;execution&gt;\n                        &lt;id&gt;post-unit-test&lt;\u002Fid&gt;\n                        &lt;phase&gt;test&lt;\u002Fphase&gt;\n                        &lt;goals&gt;\n                            &lt;goal&gt;report&lt;\u002Fgoal&gt;\n                        &lt;\u002Fgoals&gt;\n                    &lt;\u002Fexecution&gt;\n                &lt;\u002Fexecutions&gt;\n            &lt;\u002Fplugin&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.eluder.coveralls&lt;\u002FgroupId&gt;\n                &lt;artifactId&gt;coveralls-maven-plugin&lt;\u002FartifactId&gt;\n            &lt;\u002Fplugin&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.jetbrains.kotlin&lt;\u002FgroupId&gt;\n                &lt;artifactId&gt;kotlin-maven-plugin&lt;\u002FartifactId&gt;\n                &lt;version&gt;${kotlin.version}&lt;\u002Fversion&gt;\n                &lt;executions&gt;\n                    &lt;execution&gt;\n                        &lt;id&gt;compile&lt;\u002Fid&gt;\n                        &lt;phase&gt;compile&lt;\u002Fphase&gt;\n                        &lt;goals&gt;\n                            &lt;goal&gt;compile&lt;\u002Fgoal&gt;\n                        &lt;\u002Fgoals&gt;\n                    &lt;\u002Fexecution&gt;\n                    &lt;execution&gt;\n                        &lt;id&gt;test-compile&lt;\u002Fid&gt;\n                        &lt;phase&gt;test-compile&lt;\u002Fphase&gt;\n                        &lt;goals&gt;\n                            &lt;goal&gt;test-compile&lt;\u002Fgoal&gt;\n                        &lt;\u002Fgoals&gt;\n                    &lt;\u002Fexecution&gt;\n                &lt;\u002Fexecutions&gt;\n                &lt;configuration&gt;\n                    &lt;jvmTarget&gt;1.8&lt;\u002FjvmTarget&gt;\n                &lt;\u002Fconfiguration&gt;\n            &lt;\u002Fplugin&gt;\n        &lt;\u002Fplugins&gt;\n    &lt;\u002Fbuild&gt;\n&lt;\u002Fproject&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nгде мы видим два наших модуля — \u003Ci\u003Efrontend\u003C\u002Fi\u003E и \u003Ci\u003Ebackend\u003C\u002Fi\u003E, а также parent — \u003Ci\u003Espring-boot-starter-parent\u003C\u002Fi\u003E.\u003Cbr\u002F\u003E\n\u003C\u002Fdiv\u003E\n                    \u003C\u002Fdiv\u003E\u003Cbr\u002F\u003E\n\u003Cb\u003EВажно:\u003C\u002Fb\u003E модули должны собираться именно в таком порядке — сначала фронтенд, потом бэкенд.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nТеперь мы можем выполнить сборку проекта:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode class=\"plaintext\"\u003E$ mvn install\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nИ, если всё собралось, запустить приложение:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode class=\"plaintext\"\u003E$ mvn --projects backend spring-boot:run\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nПо адресу \u003Ca href=\"http:\u002F\u002Flocalhost:8080\u002F\" rel=\"nofollow\"\u003Ehttp:\u002F\u002Flocalhost:8080\u002F\u003C\u002Fa\u003E будет доступна страничка Vue.js по умолчанию:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw1560\u002Fwebt\u002Fuj\u002Fro\u002F2m\u002Fujro2mhzhzdj77-krllhk2vthwg.png\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fwebt\u002Fuj\u002Fro\u002F2m\u002Fujro2mhzhzdj77-krllhk2vthwg.png\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Ca name=\"RESTAPI\"\u003E\u003C\u002Fa\u003E\u003Cbr\u002F\u003E\n\u003Ch2\u003EREST API\u003C\u002Fh2\u003E\u003Cbr\u002F\u003E\nТеперь давайте создадим какой-нибудь простенький REST-сервис. Например, «Hello, [имя_пользователя]!» (по умолчанию — World), который считает, сколько раз мы его дёрнули.\u003Cbr\u002F\u003E\nДля этого нам понадобится структура данных состоящая из числа и строки — класс, единственным назначением которого является хранение данных. Для этого в Kotlin существуют \u003Ca href=\"https:\u002F\u002Fkotlinlang.ru\u002Fdocs\u002Freference\u002Fdata-classes.html\" rel=\"nofollow\"\u003Eклассы данных\u003C\u002Fa\u003E. И наш класс будет выглядеть так:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Edata class Greeting(val id: Long, val content: String)\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nВсё. Теперь можем написать непосредственно сервис.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cb\u003EПримечание: \u003C\u002Fb\u003Eдля удобства будет вынесить все сервисы в отдельный маршрут \u003Ci\u003E\u002Fapi\u003C\u002Fi\u003E с помощью аннотации \u003Ci\u003E@RequestMapping\u003C\u002Fi\u003E перед объявлением класса:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003E\nimport org.springframework.web.bind.annotation.*\nimport com.kotlinspringvue.backend.model.Greeting\nimport java.util.concurrent.atomic.AtomicLong\n\n@RestController\n@RequestMapping(\"\u002Fapi\")\nclass BackendController() {\n\n     val counter = AtomicLong()\n\n     @GetMapping(\"\u002Fgreeting\")\n     fun greeting(@RequestParam(value = \"name\", defaultValue = \"World\") name: String) =\n     Greeting(counter.incrementAndGet(), \"Hello, $name\")\n\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nТеперь перезапустим приложение и посмотрим результат \u003Ca href=\"http:\u002F\u002Flocalhost:8080\u002Fapi\u002Fgreeting?name=Vadim\" rel=\"nofollow\"\u003Ehttp:\u002F\u002Flocalhost:8080\u002Fapi\u002Fgreeting?name=Vadim\u003C\u002Fa\u003E:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode class=\"plaintext\"\u003E{\"id\":1,\"content\":\"Hello, Vadim\"}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nОбновим страничку и убедимся, что счётчик работает:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode class=\"plaintext\"\u003E{\"id\":2,\"content\":\"Hello, Vadim\"}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nТеперь поработаем над фронтендом, чтобы красиво отрисовывать результат на странице.\u003Cbr\u002F\u003E\nУстановим \u003Ci\u003Evue-router\u003C\u002Fi\u003E для того, чтобы реализовать навигацию по «страницам» (по факту — по маршрутам и компонентам, поскольку страница у нас всего одна) в нашем приложении:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode class=\"plaintext\"\u003E$ npm install --save vue-router \u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nДобавим \u003Ci\u003Erouter.js\u003C\u002Fi\u003E в \u003Ci\u003E\u002Fsrc\u003C\u002Fi\u003E — этот компонент будет отвечать за маршрутизацию:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cdiv class=\"spoiler\" role=\"button\" tabindex=\"0\"\u003E\n                        \u003Cb class=\"spoiler_title\"\u003Erouter.js\u003C\u002Fb\u003E\n                        \u003Cdiv class=\"spoiler_text\"\u003E\u003Cpre\u003E\u003Ccode class=\"javascript\"\u003Eimport Vue from 'vue'\nimport Router from 'vue-router'\nimport HelloWorld from '@\u002Fcomponents\u002FHelloWorld'\nimport Greeting from '@\u002Fcomponents\u002FGreeting'\n\nVue.use(Router)\n\nexport default new Router({\n   mode: 'history',\n   routes: [\n     {\n       path: '\u002F',\n       name: 'Greeting',\n       component: Greeting\n     },\n     {\n       path: '\u002Fhello-world',\n       name: 'HelloWorld',\n       component: HelloWorld\n     }\n   ]\n})\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\n\u003C\u002Fdiv\u003E\n                    \u003C\u002Fdiv\u003E\u003Cbr\u002F\u003E\n\u003Cb\u003EПримечание:\u003C\u002Fb\u003E по корневому маршруту (\"\u002F\") нам будет доступен компонент Greeting.vue, который мы напишем чуть позже.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nСейчас же заимпортируем наш роутер. Для этого внесём изменения в \u003Cdiv class=\"spoiler\" role=\"button\" tabindex=\"0\"\u003E\n                        \u003Cb class=\"spoiler_title\"\u003Emain.js\u003C\u002Fb\u003E\n                        \u003Cdiv class=\"spoiler_text\"\u003E\u003Cpre\u003E\u003Ccode class=\"javascript\"\u003Eimport Vue from 'vue'\nimport App from '.\u002FApp.vue'\nimport router from '.\u002Frouter'\n\nVue.config.productionTip = false\n\nnew Vue({ \n     router,\n     render: h =&gt; h(App),\n}).$mount('#app') \n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\n\u003C\u002Fdiv\u003E\n                    \u003C\u002Fdiv\u003E\u003Cbr\u002F\u003E\nЗатем \u003Cdiv class=\"spoiler\" role=\"button\" tabindex=\"0\"\u003E\n                        \u003Cb class=\"spoiler_title\"\u003EApp.vue\u003C\u002Fb\u003E\n                        \u003Cdiv class=\"spoiler_text\"\u003E\u003Cpre\u003E\u003Ccode class=\"xml\"\u003E&lt;template&gt;\n     &lt;div id=\"app\"&gt;\n           &lt;router-view&gt;&lt;\u002Frouter-view&gt;\n     &lt;\u002Fdiv&gt;\n&lt;\u002Ftemplate&gt;\n\n&lt;script&gt;\nexport default {\n     name: 'app'\n}\n&lt;\u002Fscript&gt;\n\n&lt;style&gt;\n&lt;\u002Fstyle&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\n\u003C\u002Fdiv\u003E\n                    \u003C\u002Fdiv\u003E\u003Cbr\u002F\u003E\nДля выполнения запросов к серверу воспользуемся HTTP-клиентом AXIOS:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode class=\"plaintext\"\u003E$ npm install --save axios\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nДля того, чтобы не писать каждый раз одни и те же настройки (например, маршрут запросов — \"\u002Fapi\") в каждом компоненте, я рекомендую вынести их в отельный компонент \u003Ci\u003Ehttp-common.js\u003C\u002Fi\u003E:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode class=\"javascript\"\u003Eimport axios from 'axios'\n\nexport const AXIOS = axios.create({ \n     baseURL: `\u002Fapi` \n})\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E \u003Cbr\u002F\u003E\n\u003Cb\u003EПримечание:\u003C\u002Fb\u003E чтобы избежать предупреждений при в выводе в консоль (\u003Ci\u003Econsole.log()\u003C\u002Fi\u003E), я рекомендую прописать эту строку в \u003Ci\u003Epackage.json\u003C\u002Fi\u003E:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode class=\"javascript\"\u003E\"rules\": { \n     \"no-console\": \"off\"\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nТеперь, наконец, создадим компонент (в \u003Ci\u003E\u002Fsrc\u002Fcomponents\u003C\u002Fi\u003E)\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cdiv class=\"spoiler\" role=\"button\" tabindex=\"0\"\u003E\n                        \u003Cb class=\"spoiler_title\"\u003EGreeting.vue\u003C\u002Fb\u003E\n                        \u003Cdiv class=\"spoiler_text\"\u003E\u003Cpre\u003E\u003Ccode class=\"xml\"\u003Eimport {AXIOS} from '.\u002Fhttp-common'\n\n&lt;template&gt;\n   &lt;div id=\"greeting\"&gt;\n       &lt;h3&gt;Greeting component&lt;\u002Fh3&gt;\n       &lt;p&gt;Counter: {{ counter }}&lt;\u002Fp&gt;\n       &lt;p&gt;Username: {{ username }}&lt;\u002Fp&gt;\n   &lt;\u002Fdiv&gt;\n&lt;\u002Ftemplate&gt;\n\n&lt;script&gt;\nexport default {\n   name: 'Greeting',\n   data() {\n       return {\n           counter: 0,\n           username: ''\n       }\n   },\n   methods: {\n       loadGreeting() {\n           AXIOS.get('\u002Fgreeting', { params: { name: 'Vadim' } })\n           .then(response =&gt; {\n               this.$data.counter = response.data.id;\n               this.$data.username = response.data.content;\n           })\n           .catch(error =&gt; {\n               console.log('ERROR: ' + error.response.data);\n           })\n       }\n   },\n   mounted() {\n       this.loadGreeting();\n   }\n}\n&lt;\u002Fscript&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\n\u003C\u002Fdiv\u003E\n                    \u003C\u002Fdiv\u003E\u003Cbr\u002F\u003E\n\u003Cb\u003EПримечание:\u003C\u002Fb\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cul\u003E\n\u003Cli\u003EПараметры запросы захардкожены для того, чтобы просто посмотреть, как работает метод\u003C\u002Fli\u003E\n\u003Cli\u003EФункция загрузки и отрисовки данных (\u003Ccode\u003EloadGreeting()\u003C\u002Fcode\u003E) вызывается сразу после загрузки страницы (\u003Ci\u003Emounted()\u003C\u002Fi\u003E)\u003C\u002Fli\u003E\n\u003Cli\u003Eмы импортировали AXIOS уже с нашими кастомными настройками из \u003Ci\u003Ehttp-common\u003C\u002Fi\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw1560\u002Fwebt\u002Fhb\u002F7p\u002F2p\u002Fhb7p2pksym25ceozocomrxo0-fu.png\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fwebt\u002Fhb\u002F7p\u002F2p\u002Fhb7p2pksym25ceozocomrxo0-fu.png\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Ca name=\"DB\"\u003E\u003C\u002Fa\u003E\u003Cbr\u002F\u003E\n\u003Ch2\u003EПодключение к базе данных\u003C\u002Fh2\u003E\u003Cbr\u002F\u003E\nТеперь давайте рассмотрим процесс взаимодействия с базой данных на примере \u003Cb\u003EPostgreSQL\u003C\u002Fb\u003E и \u003Cb\u003ESpring Data\u003C\u002Fb\u003E.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nДля начала создадим тестовую табличку:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode class=\"sql\"\u003ECREATE TABLE public.\"person\"\n     (\n          id serial NOT NULL,\n          name character varying,\n          PRIMARY KEY (id)\n     ); \n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nи наполним её данными:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode class=\"sql\"\u003EINSERT INTO person (name) VALUES ('John'), ('Griselda'), ('Bobby');\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\n\u003Cdiv class=\"spoiler\" role=\"button\" tabindex=\"0\"\u003E\n                        \u003Cb class=\"spoiler_title\"\u003EДополним pom.xml модуля бэкенда:\u003C\u002Fb\u003E\n                        \u003Cdiv class=\"spoiler_text\"\u003E\u003Cpre\u003E\u003Ccode class=\"xml\"\u003E&lt;properties&gt;\n...\n&lt;postgresql.version&gt;42.2.5&lt;\u002Fpostgresql.version&gt;\n...\n&lt;\u002Fproperties&gt;\n...\n&lt;dependency&gt;\n     &lt;groupId&gt;org.springframework.boot&lt;\u002FgroupId&gt;\n     &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;\u002FartifactId&gt;\n&lt;\u002Fdependency&gt;\n&lt;dependency&gt;\n     &lt;groupId&gt;org.postgresql&lt;\u002FgroupId&gt;\n     &lt;artifactId&gt;postgresql&lt;\u002FartifactId&gt;\n     &lt;version&gt;${postgresql.version}&lt;\u002Fversion&gt;\n&lt;\u002Fdependency&gt;\n...\n&lt;plugin&gt;\n&lt;groupId&gt;org.jetbrains.kotlin&lt;\u002FgroupId&gt;\n&lt;artifactId&gt;kotlin-maven-plugin&lt;\u002FartifactId&gt;\n&lt;configuration&gt;\n     &lt;args&gt;\n          &lt;arg&gt;-Xjsr305=strict&lt;\u002Farg&gt;\n     &lt;\u002Fargs&gt;\n     &lt;compilerPlugins&gt;\n          &lt;plugin&gt;spring&lt;\u002Fplugin&gt;\n          &lt;plugin&gt;jpa&lt;\u002Fplugin&gt;\n     &lt;\u002FcompilerPlugins&gt;\n&lt;\u002Fconfiguration&gt; \n...\n&lt;dependency&gt;\n     &lt;groupId&gt;org.jetbrains.kotlin&lt;\u002FgroupId&gt;\n     &lt;artifactId&gt;kotlin-maven-noarg&lt;\u002FartifactId&gt;\n     &lt;version&gt;${kotlin.version}&lt;\u002Fversion&gt;\n&lt;\u002Fdependency&gt; \n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\n\u003C\u002Fdiv\u003E\n                    \u003C\u002Fdiv\u003E\u003Cbr\u002F\u003E\nТеперь дополним файл \u003Ci\u003Eapplication.properties\u003C\u002Fi\u003E модуля бэкенда настройками подключения к БД:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode class=\"plaintext\"\u003Espring.datasource.url=${SPRING_DATASOURCE_URL}\nspring.datasource.username=${SPRING_DATASOURCE_USERNAME}\nspring.datasource.password=${SPRING_DATASOURCE_PASSWORD}\n\nspring.jpa.generate-ddl=true\nspring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults = false\nspring.jpa.database-platform=org.hibernate.dialect.PostgreSQL9Dialect\nspring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\n\u003Cb\u003EПримечание:\u003C\u002Fb\u003E в таком виде первые три параметра ссылаются на переменные среды. Я настоятельно рекомендую передавать конфиденциальные параметры через переменные среды или параметры запуска. Но, если вы точно уверены, что они не попадут в руки коварных злоумышленников, то можете задать их явно. \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nСоздадим сущность (entity-класс) для объектно-реляционного отображения:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cdiv class=\"spoiler\" role=\"button\" tabindex=\"0\"\u003E\n                        \u003Cb class=\"spoiler_title\"\u003EPerson.kt\u003C\u002Fb\u003E\n                        \u003Cdiv class=\"spoiler_text\"\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003E\nimport javax.persistence.Column\nimport javax.persistence.Entity\nimport javax.persistence.GeneratedValue\nimport javax.persistence.GenerationType\nimport javax.persistence.Id\nimport javax.persistence.Table\n\n@Entity\n@Table (name=\"person\")\ndata class Person(\n\n       @Id\n       @GeneratedValue(strategy = GenerationType.AUTO)\n       val id: Long,\n\n       @Column(nullable = false)\n       val name: String\n)\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\n\u003C\u002Fdiv\u003E\n                    \u003C\u002Fdiv\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nИ CRUD-репозиторий для работы с нашей таблицей:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cdiv class=\"spoiler\" role=\"button\" tabindex=\"0\"\u003E\n                        \u003Cb class=\"spoiler_title\"\u003ERepository.kt\u003C\u002Fb\u003E\n                        \u003Cdiv class=\"spoiler_text\"\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003E\nimport com.kotlinspringvue.backend.jpa.Person\nimport org.springframework.stereotype.Repository\nimport org.springframework.data.repository.CrudRepository\nimport org.springframework.data.jpa.repository.JpaRepository\nimport org.springframework.data.repository.query.Param\n\n@Repository\ninterface PersonRepository: CrudRepository&lt;Person, Long&gt; {}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\n\u003Cb\u003EПримечание:\u003C\u002Fb\u003E Мы будем пользоваться методом \u003Ccode\u003EfindAll()\u003C\u002Fcode\u003E, который нет необходимости переопределять, поэтому оставим тело пустым.\u003Cbr\u002F\u003E\n\u003C\u002Fdiv\u003E\n                    \u003C\u002Fdiv\u003E\u003Cbr\u002F\u003E\nИ, наконец, обновим наш контроллер, чтобы увидеть работу с базой данных в действии:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cdiv class=\"spoiler\" role=\"button\" tabindex=\"0\"\u003E\n                        \u003Cb class=\"spoiler_title\"\u003EBackendController.kt\u003C\u002Fb\u003E\n                        \u003Cdiv class=\"spoiler_text\"\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003E\nimport com.kotlinspringvue.backend.repository.PersonRepository\nimport org.springframework.beans.factory.annotation.Autowired\n\n… \n\n@Autowired\nlateinit var personRepository: PersonRepository\n\n… \n\n@GetMapping(\"\u002Fpersons\")\nfun getPersons() = personRepository.findAll() \n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\n\u003C\u002Fdiv\u003E\n                    \u003C\u002Fdiv\u003E\u003Cbr\u002F\u003E\nЗапустим приложение, перейдём по ссылке \u003Ca href=\"https:\u002F\u002Flocalhost:8080\u002Fapi\u002Fpersons\" rel=\"nofollow\"\u003Ehttps:\u002F\u002Flocalhost:8080\u002Fapi\u002Fpersons\u003C\u002Fa\u003E, чтобы убедиться, что всё работает:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode class=\"plaintext\"\u003E[{\"id\":1,\"name\":\"John\"},{\"id\":2,\"name\":\"Griselda\"},{\"id\":3,\"name\":\"Bobby\"}]\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\n\u003Ca name=\"Authentication\"\u003E\u003C\u002Fa\u003E\u003Cbr\u002F\u003E\n\u003Ch2\u003EАутентификация\u003C\u002Fh2\u003E\u003Cbr\u002F\u003E\nТеперь мы можем перейти к аутентификации — также одной из базовых функций приложений, где предусмотрено разграничение доступа к данным.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nРассмотрим реализацию собственного сервера авторизации с использованием \u003Ca href=\"https:\u002F\u002Fru.wikipedia.org\u002Fwiki\u002FJSON_Web_Token\" rel=\"nofollow\"\u003EJWT\u003C\u002Fa\u003E (JSON Web Token).\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cb\u003EПочему не Basic Authentication?\u003C\u002Fb\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cul\u003E\n\u003Cli\u003EНа мой взгляд, Basic Authentication не отвечает современному вызову угроз даже в относительно безопасной среде использования.\u003C\u002Fli\u003E\n\u003Cli\u003EНа эту тему можно найти гораздо больше материалов.\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\u003Cbr\u002F\u003E\n\u003Cb\u003EПочему не OAuth из \u003Cs\u003Eкоробки\u003C\u002Fs\u003E Spring Security OAuth?\u003C\u002Fb\u003E\u003Cbr\u002F\u003E\n\u003Cul\u003E\n\u003Cli\u003EПотому что по OAuth больше материалов.\u003C\u002Fli\u003E\n\u003Cli\u003EТакой подход может диктоваться внешними обстоятельствами: требованиями заказчика, прихотью архитектора и т.д.\u003C\u002Fli\u003E\n\u003Cli\u003EЕсли Вы начинающий разработчик, то в стратегической перспективе будет полезно поковыряться с функционалом безопасности более детально.\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\u003Cbr\u002F\u003E\n\u003Ch3\u003EБэкенд\u003C\u002Fh3\u003E\u003Cbr\u002F\u003E\nПусть в нашем приложении помимо гостей будет две группы пользователей — рядовые пользователи и администраторы. Создадим три таблицы: \u003Ci\u003Eusers\u003C\u002Fi\u003E — для хранения данных пользователей, \u003Ci\u003Eroles\u003C\u002Fi\u003E — для хранения информации о ролях и \u003Ci\u003Eusers_roles\u003C\u002Fi\u003E — для связывания первых двух таблиц.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cdiv class=\"spoiler\" role=\"button\" tabindex=\"0\"\u003E\n                        \u003Cb class=\"spoiler_title\"\u003EСоздадим таблицы, добавим ограничения и заполним таблицу roles\u003C\u002Fb\u003E\n                        \u003Cdiv class=\"spoiler_text\"\u003E\u003Cpre\u003E\u003Ccode class=\"sql\"\u003ECREATE TABLE public.users\n(\n     id serial NOT NULL,\n     username character varying,\n     first_name character varying,\n     last_name character varying,\n     email character varying,\n     password character varying,\n     enabled boolean,\n     PRIMARY KEY (id)\n);\n\nCREATE TABLE public.roles\n(\n     id serial NOT NULL,\n     name character varying,\n     PRIMARY KEY (id)\n); \n\nCREATE TABLE public.users_roles\n(\n     id serial NOT NULL,\n     user_id integer,\n     role_id integer,\n     PRIMARY KEY (id)\n);\n\nALTER TABLE public.users_roles\n     ADD CONSTRAINT users_roles_users_fk FOREIGN KEY (user_id)\n     REFERENCES public.users (id) MATCH SIMPLE\n     ON UPDATE CASCADE\n     ON DELETE CASCADE;\n\nALTER TABLE public.users_roles\n     ADD CONSTRAINT users_roles_roles_fk FOREIGN KEY (role_id)\n     REFERENCES public.roles (id) MATCH SIMPLE\n     ON UPDATE CASCADE\n     ON DELETE CASCADE;\n\nINSERT INTO roles (name) VALUES ('ROLE_USER'), ('ROLE_ADMIN');\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\n\u003C\u002Fdiv\u003E\n                    \u003C\u002Fdiv\u003E\u003Cbr\u002F\u003E\n Создадим Entity-классы:\u003Cbr\u002F\u003E\n\u003Cdiv class=\"spoiler\" role=\"button\" tabindex=\"0\"\u003E\n                        \u003Cb class=\"spoiler_title\"\u003EUser.kt\u003C\u002Fb\u003E\n                        \u003Cdiv class=\"spoiler_text\"\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003E\nimport javax.persistence.*\n\n@Entity\n@Table(name = \"users\")\ndata class User (\n\n       @Id\n       @GeneratedValue(strategy = GenerationType.AUTO)\n       val id: Long? = 0,\n\n       @Column(name=\"username\")\n       var username: String?=null,\n\n       @Column(name=\"first_name\")\n       var firstName: String?=null,\n\n       @Column(name=\"last_name\")\n       var lastName: String?=null,\n\n       @Column(name=\"email\")\n       var email: String?=null,\n\n       @Column(name=\"password\")\n       var password: String?=null,\n\n       @Column(name=\"enabled\")\n       var enabled: Boolean = false,\n\n       @ManyToMany(fetch = FetchType.EAGER)\n       @JoinTable(\n               name = \"users_roles\",\n               joinColumns = [JoinColumn(name = \"user_id\", referencedColumnName = \"id\")],\n               inverseJoinColumns = [JoinColumn(name = \"role_id\", referencedColumnName = \"id\")]\n       )\n       var roles: Collection&lt;Role&gt;? = null\n)\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\n\u003Cb\u003EПримечание:\u003C\u002Fb\u003E таблицы \u003Ci\u003Eusers\u003C\u002Fi\u003E и \u003Ci\u003Eroles\u003C\u002Fi\u003E находятся в отношении «многие-ко-многим» — у одного пользователя может быть несколько ролей (например, рядовой пользователь и администратор), и одной ролью могут быть наделены несколько пользователей. \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cb\u003EИнформация к размышлению:\u003C\u002Fb\u003E Существует подход, когда пользователей наделяют отдельными полномочиями (authorities), в то время как роль подразумевает группы полномочий. Подробнее о разнице между ролями и полномочиями можно прочитать здесь: \u003Ca href=\"https:\u002F\u002Fwww.baeldung.com\u002Fspring-security-granted-authority-vs-role\" rel=\"nofollow\"\u003EGranted Authority Versus Role in Spring Security\u003C\u002Fa\u003E.\u003Cbr\u002F\u003E\n\u003C\u002Fdiv\u003E\n                    \u003C\u002Fdiv\u003E\u003Cbr\u002F\u003E\n\u003Cdiv class=\"spoiler\" role=\"button\" tabindex=\"0\"\u003E\n                        \u003Cb class=\"spoiler_title\"\u003ERole.kt\u003C\u002Fb\u003E\n                        \u003Cdiv class=\"spoiler_text\"\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003E\nimport javax.persistence.*\n\n@Entity\n@Table(name = \"roles\")\ndata class Role (\n\n       @Id\n       @GeneratedValue(strategy = GenerationType.AUTO)\n       val id: Long,\n\n       @Column(name=\"name\")\n       val name: String\n\n)\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\n\u003C\u002Fdiv\u003E\n                    \u003C\u002Fdiv\u003E\u003Cbr\u002F\u003E\nСоздадим репозитории для работы с таблицами:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cdiv class=\"spoiler\" role=\"button\" tabindex=\"0\"\u003E\n                        \u003Cb class=\"spoiler_title\"\u003EUsersRepository.kt\u003C\u002Fb\u003E\n                        \u003Cdiv class=\"spoiler_text\"\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003E\nimport java.util.Optional\nimport com.kotlinspringvue.backend.jpa.User\nimport org.springframework.data.repository.CrudRepository\nimport org.springframework.data.repository.query.Param\nimport org.springframework.data.jpa.repository.JpaRepository\nimport javax.transaction.Transactional\n\ninterface UserRepository: JpaRepository&lt;User, Long&gt; {\n\n   fun existsByUsername(@Param(\"username\") username: String): Boolean\n\n   fun findByUsername(@Param(\"username\") username: String): Optional&lt;User&gt;\n\n   fun findByEmail(@Param(\"email\") email: String): Optional&lt;User&gt;\n\n   @Transactional\n   fun deleteByUsername(@Param(\"username\") username: String)\n\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\n\u003C\u002Fdiv\u003E\n                    \u003C\u002Fdiv\u003E\u003Cbr\u002F\u003E\n\u003Cdiv class=\"spoiler\" role=\"button\" tabindex=\"0\"\u003E\n                        \u003Cb class=\"spoiler_title\"\u003ERolesRepository.kt\u003C\u002Fb\u003E\n                        \u003Cdiv class=\"spoiler_text\"\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003E\nimport com.kotlinspringvue.backend.jpa.Role\nimport org.springframework.data.repository.CrudRepository\nimport org.springframework.data.repository.query.Param\nimport org.springframework.data.jpa.repository.JpaRepository\n\ninterface RoleRepository : JpaRepository&lt;Role, Long&gt; {\n\n   fun findByName(@Param(\"name\") name: String): Role\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\n\u003C\u002Fdiv\u003E\n                    \u003C\u002Fdiv\u003E\u003Cbr\u002F\u003E\nДобавим новые зависимости в\u003Cbr\u002F\u003E\n\u003Cdiv class=\"spoiler\" role=\"button\" tabindex=\"0\"\u003E\n                        \u003Cb class=\"spoiler_title\"\u003Epom.xml модуля бэкенда\u003C\u002Fb\u003E\n                        \u003Cdiv class=\"spoiler_text\"\u003E\u003Cpre\u003E\u003Ccode class=\"xml\"\u003E&lt;dependency&gt;\n     &lt;groupId&gt;org.springframework.boot&lt;\u002FgroupId&gt;\n     &lt;artifactId&gt;spring-boot-starter-security&lt;\u002FartifactId&gt;\n&lt;\u002Fdependency&gt;\n&lt;dependency&gt;\n     &lt;groupId&gt;com.fasterxml.jackson.module&lt;\u002FgroupId&gt;\n     &lt;artifactId&gt;jackson-module-kotlin&lt;\u002FartifactId&gt;\n&lt;\u002Fdependency&gt;\n&lt;dependency&gt;\n     &lt;groupId&gt;io.jsonwebtoken&lt;\u002FgroupId&gt;\n     &lt;artifactId&gt;jjwt&lt;\u002FartifactId&gt;\n     &lt;version&gt;0.9.0&lt;\u002Fversion&gt;\n&lt;\u002Fdependency&gt;\n&lt;dependency&gt;\n     &lt;groupId&gt;io.jsonwebtoken&lt;\u002FgroupId&gt;\n     &lt;artifactId&gt;jjwt-api&lt;\u002FartifactId&gt;\n     &lt;version&gt;0.10.6&lt;\u002Fversion&gt;\n&lt;\u002Fdependency&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\n\u003C\u002Fdiv\u003E\n                    \u003C\u002Fdiv\u003E\u003Cbr\u002F\u003E\nИ добавим новые параметры для работы с токенами в \u003Ci\u003Eapplication.properties\u003C\u002Fi\u003E:\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode class=\"plaintext\"\u003Eassm.app.jwtSecret=jwtAssmSecretKey\nassm.app.jwtExpiration=86400\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nТеперь создадим классы для хранения данных, приходящих с форм авторизации и регистрации:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cdiv class=\"spoiler\" role=\"button\" tabindex=\"0\"\u003E\n                        \u003Cb class=\"spoiler_title\"\u003ELoginUser.kt\u003C\u002Fb\u003E\n                        \u003Cdiv class=\"spoiler_text\"\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003E\nclass LoginUser : Serializable {\n\n   @JsonProperty(\"username\")\n   var username: String? = null\n\n   @JsonProperty(\"password\")\n   var password: String? = null\n\n   constructor() {}\n\n   constructor(username: String, password: String) {\n       this.username = username\n       this.password = password\n   }\n\n   companion object {\n       private const val serialVersionUID = -1764970284520387975L\n   }\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\n\u003C\u002Fdiv\u003E\n                    \u003C\u002Fdiv\u003E\u003Cbr\u002F\u003E\n\u003Cdiv class=\"spoiler\" role=\"button\" tabindex=\"0\"\u003E\n                        \u003Cb class=\"spoiler_title\"\u003ENewUser.kt\u003C\u002Fb\u003E\n                        \u003Cdiv class=\"spoiler_text\"\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003E\nimport com.fasterxml.jackson.annotation.JsonProperty\nimport java.io.Serializable\n\nclass NewUser : Serializable {\n\n   @JsonProperty(\"username\")\n   var username: String? = null\n\n   @JsonProperty(\"firstName\")\n   var firstName: String? = null\n\n   @JsonProperty(\"lastName\")\n   var lastName: String? = null\n\n   @JsonProperty(\"email\")\n   var email: String? = null\n\n   @JsonProperty(\"password\")\n   var password: String? = null\n\n   constructor() {}\n\n   constructor(username: String, firstName: String, lastName: String, email: String, password: String, recaptchaToken: String) {\n       this.username = username\n       this.firstName = firstName\n       this.lastName = lastName\n       this.email = email\n       this.password = password\n   }\n\n   companion object {\n       private const val serialVersionUID = -1764970284520387975L\n   }\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\n\u003C\u002Fdiv\u003E\n                    \u003C\u002Fdiv\u003E\u003Cbr\u002F\u003E\nСделаем специальные классы для ответов сервера — возвращающий токен аутентификации и универсальный (строка):\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cdiv class=\"spoiler\" role=\"button\" tabindex=\"0\"\u003E\n                        \u003Cb class=\"spoiler_title\"\u003EJwtResponse.kt\u003C\u002Fb\u003E\n                        \u003Cdiv class=\"spoiler_text\"\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003E\nimport org.springframework.security.core.GrantedAuthority\n\nclass JwtResponse(var accessToken: String?, var username: String?, val authorities:\n     Collection&lt;GrantedAuthority&gt;) {\n     var type = \"Bearer\"\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\n\u003C\u002Fdiv\u003E\n                    \u003C\u002Fdiv\u003E\u003Cbr\u002F\u003E\n\u003Cdiv class=\"spoiler\" role=\"button\" tabindex=\"0\"\u003E\n                        \u003Cb class=\"spoiler_title\"\u003EResponseMessage.kt\u003C\u002Fb\u003E\n                        \u003Cdiv class=\"spoiler_text\"\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003E\nclass ResponseMessage(var message: String?)\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\n\u003C\u002Fdiv\u003E\n                    \u003C\u002Fdiv\u003E\u003Cbr\u002F\u003E\nТакже нам понадобится исключение «User Already Exists»\u003Cbr\u002F\u003E\n\u003Cdiv class=\"spoiler\" role=\"button\" tabindex=\"0\"\u003E\n                        \u003Cb class=\"spoiler_title\"\u003EUserAlreadyExistException.kt\u003C\u002Fb\u003E\n                        \u003Cdiv class=\"spoiler_text\"\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003E\nclass UserAlreadyExistException : RuntimeException {\n\n     constructor() : super() {}\n\n     constructor(message: String, cause: Throwable) : super(message, cause) {}\n\n     constructor(message: String) : super(message) {}\n\n     constructor(cause: Throwable) : super(cause) {}\n\n     companion object {\n\n          private val serialVersionUID = 5861310537366287163L\n\n     }\n} \n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\n\u003C\u002Fdiv\u003E\n                    \u003C\u002Fdiv\u003E\u003Cbr\u002F\u003E\nДля определения ролей пользователей нам необходим дополнительный сервис, реализующий интерфейс \u003Ci\u003EUserDetailsService\u003C\u002Fi\u003E:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cdiv class=\"spoiler\" role=\"button\" tabindex=\"0\"\u003E\n                        \u003Cb class=\"spoiler_title\"\u003EUserDetailsServiceImpl.kt\u003C\u002Fb\u003E\n                        \u003Cdiv class=\"spoiler_text\"\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003E \nimport com.kotlinspringvue.backend.repository.UserRepository\n\nimport org.springframework.beans.factory.annotation.Autowired\nimport org.springframework.security.core.userdetails.UserDetails\nimport org.springframework.security.core.userdetails.UserDetailsService\nimport org.springframework.security.core.userdetails.UsernameNotFoundException\nimport org.springframework.stereotype.Service\nimport org.springframework.security.core.GrantedAuthority\nimport org.springframework.security.core.authority.SimpleGrantedAuthority\nimport java.util.stream.Collectors\n\n@Service\nclass UserDetailsServiceImpl: UserDetailsService {\n\n   @Autowired\n   lateinit var userRepository: UserRepository\n\n   @Throws(UsernameNotFoundException::class)\n   override fun loadUserByUsername(username: String): UserDetails {\n       val user = userRepository.findByUsername(username).get()\n               ?: throw UsernameNotFoundException(\"User '$username' not found\")\n\n       val authorities: List&lt;GrantedAuthority&gt; = user.roles!!.stream().map({ role -&gt; SimpleGrantedAuthority(role.name)}).collect(Collectors.toList&lt;GrantedAuthority&gt;())\n\n       return org.springframework.security.core.userdetails.User\n               .withUsername(username)\n               .password(user.password)\n               .authorities(authorities)\n               .accountExpired(false)\n               .accountLocked(false)\n               .credentialsExpired(false)\n               .disabled(false)\n               .build()\n   }\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\n\u003C\u002Fdiv\u003E\n                    \u003C\u002Fdiv\u003E\u003Cbr\u002F\u003E\nДля работы с JWT нам потребуются три класса:\u003Cbr\u002F\u003E\n\u003Cb\u003EJwtAuthEntryPoint\u003C\u002Fb\u003E — для обработки ошибок авторизации и дальнейшего использования в настройках веб-безопасности:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cdiv class=\"spoiler\" role=\"button\" tabindex=\"0\"\u003E\n                        \u003Cb class=\"spoiler_title\"\u003EJwtAuthEntryPoint.kt\u003C\u002Fb\u003E\n                        \u003Cdiv class=\"spoiler_text\"\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003E\nimport javax.servlet.ServletException\nimport javax.servlet.http.HttpServletRequest\nimport javax.servlet.http.HttpServletResponse\n\nimport org.slf4j.Logger\nimport org.slf4j.LoggerFactory\nimport org.springframework.security.core.AuthenticationException\nimport org.springframework.security.web.AuthenticationEntryPoint\nimport org.springframework.stereotype.Component\n\n@Component\nclass JwtAuthEntryPoint : AuthenticationEntryPoint {\n\n   @Throws(IOException::class, ServletException::class)\n   override fun commence(request: HttpServletRequest,\n                         response: HttpServletResponse,\n                         e: AuthenticationException) {\n\n       logger.error(\"Unauthorized error. Message - {}\", e!!.message)\n       response.sendError(HttpServletResponse.SC_UNAUTHORIZED, \"Invalid credentials\")\n   }\n\n   companion object {\n       private val logger = LoggerFactory.getLogger(JwtAuthEntryPoint::class.java)\n   }\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\n\u003C\u002Fdiv\u003E\n                    \u003C\u002Fdiv\u003E\u003Cbr\u002F\u003E\n\u003Cb\u003EJwtProvider\u003C\u002Fb\u003E — чтобы генерировать и валидировать токены, а также определять пользователя по его токену:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cdiv class=\"spoiler\" role=\"button\" tabindex=\"0\"\u003E\n                        \u003Cb class=\"spoiler_title\"\u003EJwtProvider.kt\u003C\u002Fb\u003E\n                        \u003Cdiv class=\"spoiler_text\"\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003E\nimport io.jsonwebtoken.*\nimport org.springframework.beans.factory.annotation.Autowired\nimport org.slf4j.Logger\nimport org.slf4j.LoggerFactory\nimport org.springframework.beans.factory.annotation.Value\nimport org.springframework.security.core.Authentication\nimport org.springframework.stereotype.Component\nimport org.springframework.security.core.GrantedAuthority\nimport org.springframework.security.core.authority.SimpleGrantedAuthority\nimport com.kotlinspringvue.backend.repository.UserRepository\nimport java.util.Date\n\n\n@Component\npublic class JwtProvider {\n\n   private val logger: Logger = LoggerFactory.getLogger(JwtProvider::class.java)\n\n   @Autowired\n   lateinit var userRepository: UserRepository\n\n   @Value(\"\\${assm.app.jwtSecret}\")\n   lateinit var jwtSecret: String\n\n   @Value(\"\\${assm.app.jwtExpiration}\")\n   var jwtExpiration:Int?=0\n\n   fun generateJwtToken(username: String): String {\n       return Jwts.builder()\n               .setSubject(username)\n               .setIssuedAt(Date())\n               .setExpiration(Date((Date()).getTime() + jwtExpiration!! * 1000))\n               .signWith(SignatureAlgorithm.HS512, jwtSecret)\n               .compact()\n   }\n\n   fun validateJwtToken(authToken: String): Boolean {\n       try {\n           Jwts.parser().setSigningKey(jwtSecret).parseClaimsJws(authToken)\n           return true\n       } catch (e: SignatureException) {\n           logger.error(\"Invalid JWT signature -&gt; Message: {} \", e)\n       } catch (e: MalformedJwtException) {\n           logger.error(\"Invalid JWT token -&gt; Message: {}\", e)\n       } catch (e: ExpiredJwtException) {\n           logger.error(\"Expired JWT token -&gt; Message: {}\", e)\n       } catch (e: UnsupportedJwtException) {\n           logger.error(\"Unsupported JWT token -&gt; Message: {}\", e)\n       } catch (e: IllegalArgumentException) {\n           logger.error(\"JWT claims string is empty -&gt; Message: {}\", e)\n       }\n\n       return false\n   }\n\n   fun getUserNameFromJwtToken(token: String): String {\n       return Jwts.parser()\n               .setSigningKey(jwtSecret)\n               .parseClaimsJws(token)\n               .getBody().getSubject()\n   }\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\n\u003C\u002Fdiv\u003E\n                    \u003C\u002Fdiv\u003E\u003Cbr\u002F\u003E\n\u003Cb\u003EJwtAuthTokenFilter\u003C\u002Fb\u003E — чтобы аутентифицировать пользователей и фильтровать запросы:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cdiv class=\"spoiler\" role=\"button\" tabindex=\"0\"\u003E\n                        \u003Cb class=\"spoiler_title\"\u003EJwtAuthTokenFilter.kt\u003C\u002Fb\u003E\n                        \u003Cdiv class=\"spoiler_text\"\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003E\nimport java.io.IOException\n\nimport javax.servlet.FilterChain\nimport javax.servlet.ServletException\nimport javax.servlet.http.HttpServletRequest\nimport javax.servlet.http.HttpServletResponse\n\nimport org.slf4j.LoggerFactory\nimport org.springframework.beans.factory.annotation.Autowired\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken\nimport org.springframework.security.core.context.SecurityContextHolder\nimport org.springframework.security.core.userdetails.UserDetails\nimport org.springframework.security.web.authentication.WebAuthenticationDetailsSource\nimport org.springframework.web.filter.OncePerRequestFilter\n\nimport com.kotlinspringvue.backend.service.UserDetailsServiceImpl\n\nclass JwtAuthTokenFilter : OncePerRequestFilter() {\n\n   @Autowired\n   private val tokenProvider: JwtProvider? = null\n\n   @Autowired\n   private val userDetailsService: UserDetailsServiceImpl? = null\n\n   @Throws(ServletException::class, IOException::class)\n   override fun doFilterInternal(request: HttpServletRequest, response: HttpServletResponse, filterChain: FilterChain) {\n       try {\n\n           val jwt = getJwt(request)\n           if (jwt != null &amp;&amp; tokenProvider!!.validateJwtToken(jwt)) {\n               val username = tokenProvider.getUserNameFromJwtToken(jwt)\n\n               val userDetails = userDetailsService!!.loadUserByUsername(username)\n               val authentication = UsernamePasswordAuthenticationToken(\n                       userDetails, null, userDetails.getAuthorities())\n               authentication.setDetails(WebAuthenticationDetailsSource().buildDetails(request))\n\n               SecurityContextHolder.getContext().setAuthentication(authentication)\n           }\n       } catch (e: Exception) {\n           logger.error(\"Can NOT set user authentication -&gt; Message: {}\", e)\n       }\n\n       filterChain.doFilter(request, response)\n   }\n\n   private fun getJwt(request: HttpServletRequest): String? {\n       val authHeader = request.getHeader(\"Authorization\")\n\n       return if (authHeader != null &amp;&amp; authHeader.startsWith(\"Bearer \")) {\n           authHeader.replace(\"Bearer \", \"\")\n       } else null\n   }\n\n   companion object {\n       private val logger = LoggerFactory.getLogger(JwtAuthTokenFilter::class.java)\n   }\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\n\u003C\u002Fdiv\u003E\n                    \u003C\u002Fdiv\u003E\u003Cbr\u002F\u003E\nТеперь мы можем сконфигурировать бин, ответственный за веб-безопасность:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cdiv class=\"spoiler\" role=\"button\" tabindex=\"0\"\u003E\n                        \u003Cb class=\"spoiler_title\"\u003EWebSecurityConfig.kt\u003C\u002Fb\u003E\n                        \u003Cdiv class=\"spoiler_text\"\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003E\nimport org.springframework.context.annotation.Bean\nimport org.springframework.context.annotation.Configuration\nimport org.springframework.beans.factory.annotation.Autowired\nimport org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter\nimport org.springframework.security.config.http.SessionCreationPolicy\nimport org.springframework.security.authentication.AuthenticationManager\nimport org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity\nimport org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder\n\nimport com.kotlinspringvue.backend.jwt.JwtAuthEntryPoint\nimport com.kotlinspringvue.backend.jwt.JwtAuthTokenFilter\nimport com.kotlinspringvue.backend.service.UserDetailsServiceImpl\n\n\n@Configuration\n@EnableWebSecurity\n@EnableGlobalMethodSecurity(prePostEnabled = true)\nclass WebSecurityConfig : WebSecurityConfigurerAdapter() {\n\n   @Autowired\n   internal var userDetailsService: UserDetailsServiceImpl? = null\n\n   @Autowired\n   private val unauthorizedHandler: JwtAuthEntryPoint? = null\n\n   @Bean\n   fun bCryptPasswordEncoder(): BCryptPasswordEncoder {\n       return BCryptPasswordEncoder()\n   }\n\n   @Bean\n   fun authenticationJwtTokenFilter(): JwtAuthTokenFilter {\n       return JwtAuthTokenFilter()\n   }\n\n   @Throws(Exception::class)\n   override fun configure(authenticationManagerBuilder: AuthenticationManagerBuilder) {\n       authenticationManagerBuilder\n               .userDetailsService(userDetailsService)\n               .passwordEncoder(bCryptPasswordEncoder())\n   }\n\n   @Bean\n   @Throws(Exception::class)\n   override fun authenticationManagerBean(): AuthenticationManager {\n       return super.authenticationManagerBean()\n   }\n\n   @Throws(Exception::class)\n   override protected fun configure(http: HttpSecurity) {\n       http.csrf().disable().authorizeRequests()\n               .antMatchers(\"\u002F**\").permitAll()\n               .anyRequest().authenticated()\n               .and()\n               .exceptionHandling().authenticationEntryPoint(unauthorizedHandler).and()\n               .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)\n\n       http.addFilterBefore(authenticationJwtTokenFilter(), UsernamePasswordAuthenticationFilter::class.java)\n   }\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\n\u003C\u002Fdiv\u003E\n                    \u003C\u002Fdiv\u003E\u003Cbr\u002F\u003E\nСоздадим контроллер для регистрации и авторизации:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cdiv class=\"spoiler\" role=\"button\" tabindex=\"0\"\u003E\n                        \u003Cb class=\"spoiler_title\"\u003EAuthController.kt\u003C\u002Fb\u003E\n                        \u003Cdiv class=\"spoiler_text\"\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003E\nimport javax.validation.Valid\nimport java.util.*\nimport java.util.stream.Collectors\n\nimport org.springframework.security.core.Authentication\nimport org.springframework.beans.factory.annotation.Autowired\nimport org.springframework.http.HttpStatus\nimport org.springframework.http.ResponseEntity\nimport org.springframework.security.authentication.AuthenticationManager\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken\nimport org.springframework.security.core.context.SecurityContextHolder\nimport org.springframework.security.core.userdetails.UserDetails\nimport org.springframework.security.crypto.password.PasswordEncoder\nimport org.springframework.security.access.prepost.PreAuthorize\nimport org.springframework.security.core.GrantedAuthority\nimport org.springframework.security.core.authority.SimpleGrantedAuthority\nimport org.springframework.web.bind.annotation.CrossOrigin\nimport org.springframework.web.bind.annotation.PostMapping\nimport org.springframework.web.bind.annotation.RequestBody\nimport org.springframework.web.bind.annotation.RequestMapping\nimport org.springframework.web.bind.annotation.RestController\n\nimport com.kotlinspringvue.backend.model.LoginUser\nimport com.kotlinspringvue.backend.model.NewUser\nimport com.kotlinspringvue.backend.web.response.JwtResponse\nimport com.kotlinspringvue.backend.web.response.ResponseMessage\nimport com.kotlinspringvue.backend.jpa.User\nimport com.kotlinspringvue.backend.repository.UserRepository\nimport com.kotlinspringvue.backend.repository.RoleRepository\nimport com.kotlinspringvue.backend.jwt.JwtProvider\n\n@CrossOrigin(origins = [\"*\"], maxAge = 3600)\n@RestController\n@RequestMapping(\"\u002Fapi\u002Fauth\")\nclass AuthController() {\n\n   @Autowired\n   lateinit var authenticationManager: AuthenticationManager\n\n   @Autowired\n   lateinit var userRepository: UserRepository\n\n   @Autowired\n   lateinit var roleRepository: RoleRepository\n\n   @Autowired\n   lateinit var encoder: PasswordEncoder\n\n   @Autowired\n   lateinit var jwtProvider: JwtProvider\n\n\n   @PostMapping(\"\u002Fsignin\")\n   fun authenticateUser(@Valid @RequestBody loginRequest: LoginUser): ResponseEntity&lt;*&gt; {\n\n       val userCandidate: Optional &lt;User&gt; = userRepository.findByUsername(loginRequest.username!!)\n\n       if (userCandidate.isPresent) {\n           val user: User = userCandidate.get()\n           val authentication = authenticationManager.authenticate(\n                   UsernamePasswordAuthenticationToken(loginRequest.username, loginRequest.password))\n           SecurityContextHolder.getContext().setAuthentication(authentication)\n           val jwt: String = jwtProvider.generateJwtToken(user.username!!)\n           val authorities: List&lt;GrantedAuthority&gt; = user.roles!!.stream().map({ role -&gt; SimpleGrantedAuthority(role.name)}).collect(Collectors.toList&lt;GrantedAuthority&gt;())\n           return ResponseEntity.ok(JwtResponse(jwt, user.username, authorities))\n       } else {\n           return ResponseEntity(ResponseMessage(\"User not found!\"),\n                   HttpStatus.BAD_REQUEST)\n       }\n   }\n\n   @PostMapping(\"\u002Fsignup\")\n   fun registerUser(@Valid @RequestBody newUser: NewUser): ResponseEntity&lt;*&gt; {\n\n       val userCandidate: Optional &lt;User&gt; = userRepository.findByUsername(newUser.username!!)\n\n       if (!userCandidate.isPresent) {\n           if (usernameExists(newUser.username!!)) {\n               return ResponseEntity(ResponseMessage(\"Username is already taken!\"),\n                       HttpStatus.BAD_REQUEST)\n           } else if (emailExists(newUser.email!!)) {\n               return ResponseEntity(ResponseMessage(\"Email is already in use!\"),\n                       HttpStatus.BAD_REQUEST)\n           }\n\n           \u002F\u002F Creating user's account\n           val user = User(\n                   0,\n                   newUser.username!!,\n                   newUser.firstName!!,\n                   newUser.lastName!!,\n                   newUser.email!!,\n                   encoder.encode(newUser.password),\n                   true\n           )\n           user!!.roles = Arrays.asList(roleRepository.findByName(\"ROLE_USER\"))\n\n           userRepository.save(user)\n\n           return ResponseEntity(ResponseMessage(\"User registered successfully!\"), HttpStatus.OK)\n       } else {\n           return ResponseEntity(ResponseMessage(\"User already exists!\"),\n                   HttpStatus.BAD_REQUEST)\n       }\n   }\n\n   private fun emailExists(email: String): Boolean {\n       return userRepository.findByUsername(email).isPresent\n   }\n\n   private fun usernameExists(username: String): Boolean {\n       return userRepository.findByUsername(username).isPresent\n   }\n\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nМы реализовали два метода:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Cb\u003Esignin\u003C\u002Fb\u003E — проверяет, существует ли пользователь и, если да, то возвращает сгенерированный токен, имя пользователя и его роли (вернее, \u003Ci\u003Eauthorities\u003C\u002Fi\u003E — полномочия)\u003C\u002Fli\u003E\n\u003Cli\u003Esignup — проверяет, существует ли пользователь и, если нет, создаёт новую запись в таблице \u003Ci\u003Eusers\u003C\u002Fi\u003E с внешней ссылкой на роль \u003Ci\u003EROLE_USER\u003C\u002Fi\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\u003Cbr\u002F\u003E\n\u003C\u002Fdiv\u003E\n                    \u003C\u002Fdiv\u003E\u003Cbr\u002F\u003E\nИ, наконец, дополним \u003Ci\u003EBackendController\u003C\u002Fi\u003E двумя методами: один будет возвращать данные, доступные только администратору (пользователь с полномочиями ROLE_USER и ROLE_ADMIN) и рядовому пользователю (ROLE_USER).\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cdiv class=\"spoiler\" role=\"button\" tabindex=\"0\"\u003E\n                        \u003Cb class=\"spoiler_title\"\u003EBackendController.kt\u003C\u002Fb\u003E\n                        \u003Cdiv class=\"spoiler_text\"\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003E\nimport org.springframework.security.access.prepost.PreAuthorize\nimport org.springframework.security.core.Authentication\nimport com.kotlinspringvue.backend.repository.UserRepository\nimport com.kotlinspringvue.backend.jpa.User\n\n… \n\n@Autowired\nlateinit var userRepository: UserRepository\n\n… \n\n@GetMapping(\"\u002Fusercontent\")\n@PreAuthorize(\"hasRole('USER') or hasRole('ADMIN')\")\n@ResponseBody\n     fun getUserContent(authentication: Authentication): String {\n     val user: User = userRepository.findByUsername(authentication.name).get()\n     return \"Hello \" + user.firstName + \" \" + user.lastName + \"!\"\n}\n\n\n@GetMapping(\"\u002Fadmincontent\")\n@PreAuthorize(\"hasRole('ADMIN')\")\n@ResponseBody\n     fun getAdminContent(): String {\n     return \"Admin's content\"\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\n\u003C\u002Fdiv\u003E\n                    \u003C\u002Fdiv\u003E\u003Cbr\u002F\u003E\n\u003Ch3\u003EФронтенд\u003C\u002Fh3\u003E\u003Cbr\u002F\u003E\nСоздадим несколько новых компонентов:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cul\u003E\n\u003Cli\u003EHome\u003C\u002Fli\u003E\n\u003Cli\u003ESignIn\u003C\u002Fli\u003E\n\u003Cli\u003ESignUp\u003C\u002Fli\u003E\n\u003Cli\u003EAdminPage\u003C\u002Fli\u003E\n\u003Cli\u003EUserPage\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\u003Cbr\u002F\u003E\nС шаблонным содержимым (для \u003Cs\u003Eудобного копипаста\u003C\u002Fs\u003E начала):\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cdiv class=\"spoiler\" role=\"button\" tabindex=\"0\"\u003E\n                        \u003Cb class=\"spoiler_title\"\u003EШаблон компонента\u003C\u002Fb\u003E\n                        \u003Cdiv class=\"spoiler_text\"\u003E\u003Cpre\u003E\u003Ccode class=\"xml\"\u003E&lt;template&gt;\n     &lt;div&gt;\n     &lt;\u002Fdiv&gt;\n&lt;\u002Ftemplate&gt;\n\n&lt;script&gt;\n&lt;\u002Fscript&gt;\n\n&lt;style&gt;\n&lt;\u002Fstyle&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\n\u003C\u002Fdiv\u003E\n                    \u003C\u002Fdiv\u003E\u003Cbr\u002F\u003E\nДобавим \u003Ci\u003Eid=«название_компонента»\u003C\u002Fi\u003E в каждый \u003Ci\u003Ediv\u003C\u002Fi\u003E внутри \u003Ci\u003Etemplate\u003C\u002Fi\u003E и \u003Ci\u003Eexport default {name: ‘[component_name]’}\u003C\u002Fi\u003E в \u003Ci\u003Escript\u003C\u002Fi\u003E.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nТеперь добавим новые маршруты:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cdiv class=\"spoiler\" role=\"button\" tabindex=\"0\"\u003E\n                        \u003Cb class=\"spoiler_title\"\u003Erouter.js\u003C\u002Fb\u003E\n                        \u003Cdiv class=\"spoiler_text\"\u003E\u003Cpre\u003E\u003Ccode class=\"javascript\"\u003Eimport Vue from 'vue'\nimport Router from 'vue-router'\nimport Home from '@\u002Fcomponents\u002FHome'\nimport SignIn from '@\u002Fcomponents\u002FSignIn'\nimport SignUp from '@\u002Fcomponents\u002FSignUp'\nimport AdminPage from '@\u002Fcomponents\u002FAdminPage'\nimport UserPage from '@\u002Fcomponents\u002FUserPage'\n\nVue.use(Router)\n\nexport default new Router({\n   mode: 'history',\n   routes: [\n     {\n       path: '\u002F',\n       name: 'Home',\n       component: Home\n     },\n     {\n       path: '\u002Fhome',\n       name: 'Home',\n       component: Home\n     },\n     {\n       path: '\u002Flogin',\n       name: 'SignIn',\n       component: SignIn\n     },\n     {\n       path: '\u002Fregister',\n       name: 'SignUp',\n       component: SignUp\n     },\n     {\n       path: '\u002Fuser',\n       name: 'UserPage',\n       component: UserPage\n     },\n     {\n       path: '\u002Fadmin',\n       name: 'AdminPage',\n       component: AdminPage\n     }\n   ]\n})\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\n\u003C\u002Fdiv\u003E\n                    \u003C\u002Fdiv\u003E\u003Cbr\u002F\u003E\nДля хранения токенов и использования их при запросах к серверу воспользуемся \u003Ca href=\"https:\u002F\u002Fvuex.vuejs.org\" rel=\"nofollow\"\u003EVuex\u003C\u002Fa\u003E. \u003Cb\u003EVuex\u003C\u002Fb\u003E — это паттерн управления состоянием + библиотека Vue.js. Он служит централизованным хранилищем данных для всех компонентов приложения с правилами, гарантирующими, что состояние может быть изменено только предсказуемым образом.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode class=\"plaintext\"\u003E$ npm install --save vuex\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nДобавим \u003Ci\u003Estore\u003C\u002Fi\u003E в виде отдельного файла в \u003Ci\u003Esrc\u002Fstore\u003C\u002Fi\u003E:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cdiv class=\"spoiler\" role=\"button\" tabindex=\"0\"\u003E\n                        \u003Cb class=\"spoiler_title\"\u003Eindex.js\u003C\u002Fb\u003E\n                        \u003Cdiv class=\"spoiler_text\"\u003E\u003Cpre\u003E\u003Ccode class=\"javascript\"\u003Eimport Vue from 'vue';\nimport Vuex from 'vuex';\n\nVue.use(Vuex);\n\nconst state = {\n token: localStorage.getItem('user-token') || '',\n role: localStorage.getItem('user-role') || '',\n username: localStorage.getItem('user-name') || '',\n authorities: localStorage.getItem('authorities') || '',\n};\n\nconst getters = {\n isAuthenticated: state =&gt; {\n   if (state.token != null &amp;&amp; state.token != '') {\n     return true;\n   } else {\n     return false;\n   }\n },\n isAdmin: state =&gt; {\n   if (state.role === 'admin') {\n     return true;\n   } else {\n     return false;\n   }\n },\n getUsername: state =&gt; {\n   return state.username;\n },\n getAuthorities: state =&gt; {\n   return state.authorities;\n },\n getToken: state =&gt; {\n   return state.token;\n }\n};\n\nconst mutations = {\n auth_login: (state, user) =&gt; {\n   localStorage.setItem('user-token', user.token);\n   localStorage.setItem('user-name', user.name);\n   localStorage.setItem('user-authorities', user.roles);\n   state.token = user.token;\n   state.username = user.username;\n   state.authorities = user.roles;\n   var isUser = false;\n   var isAdmin = false;\n   for (var i = 0; i &lt; user.roles.length; i++) {\n     if (user.roles[i].authority === 'ROLE_USER') {\n       isUser = true;\n     } else if (user.roles[i].authority === 'ROLE_ADMIN') {\n       isAdmin = true;\n     }\n   }\n   if (isUser) {\n     localStorage.setItem('user-role', 'user');\n     state.role = 'user';\n   }\n   if (isAdmin) {\n     localStorage.setItem('user-role', 'admin');\n     state.role = 'admin';\n   }\n },\n auth_logout: () =&gt; {\n   state.token = '';\n   state.role = '';\n   state.username = '';\n   state.authorities = [];\n   localStorage.removeItem('user-token');\n   localStorage.removeItem('user-role');\n   localStorage.removeItem('user-name');\n   localStorage.removeItem('user-authorities');\n }\n};\n\nconst actions = {\n login: (context, user) =&gt; {\n   context.commit('auth_login', user)\n },\n logout: (context) =&gt; {\n   context.commit('auth_logout');\n }\n};\n\nexport const store = new Vuex.Store({\n state,\n getters,\n mutations,\n actions\n});\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nПосмотрим, что у нас тут есть:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Cb\u003Estore\u003C\u002Fb\u003E — собственно, данные для передачи между компонентами — имя пользователя, токен, полномочия и роль (в данном контексте роль — обещающая сущность для полномочий (authorities): посколько полномочия простого пользователя — это подмножество полномочий администратора, то мы можем просто сказать, что пользователь с полномочиями \u003Ci\u003Eadmin\u003C\u002Fi\u003E и \u003Ci\u003Euser\u003C\u002Fi\u003E — администратор\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cb\u003Egetters\u003C\u002Fb\u003E — функции для определения особых аспектов состояния\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cb\u003Emutations\u003C\u002Fb\u003E — функции для изменения состояния\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cb\u003Eactions\u003C\u002Fb\u003E — функции для фиксации мутаций, они могут содержать асинхронные операции\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\u003Cbr\u002F\u003E\n\u003Cb\u003EВажно:\u003C\u002Fb\u003E использование мутаций (mutations) — это единственный правильный способ изменения состояния.\u003Cbr\u002F\u003E\n\u003C\u002Fdiv\u003E\n                    \u003C\u002Fdiv\u003E\u003Cbr\u002F\u003E\nВнесём соответствующие изменения в\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cdiv class=\"spoiler\" role=\"button\" tabindex=\"0\"\u003E\n                        \u003Cb class=\"spoiler_title\"\u003Emain.js\u003C\u002Fb\u003E\n                        \u003Cdiv class=\"spoiler_text\"\u003E\u003Cpre\u003E\u003Ccode class=\"javascript\"\u003Eimport { store } from '.\u002Fstore';\n\n...\n\nnew Vue({\n     router,\n     store,\n     render: h =&gt; h(App)\n}).$mount('#app')\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\n\u003C\u002Fdiv\u003E\n                    \u003C\u002Fdiv\u003E\u003Cbr\u002F\u003E\nДля того, чтобы интерфейс сразу выглядел красиво и опрятно даже в экспериментальном приложении я использую . Но это, как говорится, дело вкуса, и на базовую функциональность не влияет:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode class=\"plaintext\"\u003E$ npm install --save bootstrap bootstrap-vue\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\n\u003Cdiv class=\"spoiler\" role=\"button\" tabindex=\"0\"\u003E\n                        \u003Cb class=\"spoiler_title\"\u003EBootstrap в main.js\u003C\u002Fb\u003E\n                        \u003Cdiv class=\"spoiler_text\"\u003E\u003Cpre\u003E\u003Ccode class=\"javascript\"\u003Eimport BootstrapVue from 'bootstrap-vue'\nimport 'bootstrap\u002Fdist\u002Fcss\u002Fbootstrap.css'\nimport 'bootstrap-vue\u002Fdist\u002Fbootstrap-vue.css'\n\n… \n\nVue.use(BootstrapVue) \n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\n\u003C\u002Fdiv\u003E\n                    \u003C\u002Fdiv\u003E\u003Cbr\u002F\u003E\nТеперь поработаем над компонентом App:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cul\u003E\n\u003Cli\u003EДобавим возможность «разлогинивания» для всех авторизованных пользователей\u003C\u002Fli\u003E\n\u003Cli\u003EДобавим автоматическую переадресацию на домашнюю страницу после выхода (logout)\u003C\u002Fli\u003E\n\u003Cli\u003EБудем показывать кнопки меню навигации «User» и «Logout» для всех авторизованных пользователей и «Login» — для неавторизованных\u003C\u002Fli\u003E\n\u003Cli\u003EБудем показывать кнопку «Admin» меню навигации только авторизованным администраторам\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\u003Cbr\u002F\u003E\nДля этого:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cdiv class=\"spoiler\" role=\"button\" tabindex=\"0\"\u003E\n                        \u003Cb class=\"spoiler_title\"\u003Eдобавим метод logout()\u003C\u002Fb\u003E\n                        \u003Cdiv class=\"spoiler_text\"\u003E\u003Cpre\u003E\u003Ccode class=\"javascript\"\u003Emethods: {\n     logout() {\n          this.$store.dispatch('logout');\n          this.$router.push('\u002F')\n     }\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\n\u003C\u002Fdiv\u003E\n                    \u003C\u002Fdiv\u003E\u003Cbr\u002F\u003E\n\u003Cdiv class=\"spoiler\" role=\"button\" tabindex=\"0\"\u003E\n                        \u003Cb class=\"spoiler_title\"\u003Eи отредактируем шаблон (template)\u003C\u002Fb\u003E\n                        \u003Cdiv class=\"spoiler_text\"\u003E\u003Cpre\u003E\u003Ccode class=\"xml\"\u003E&lt;template&gt;\n     &lt;div id=\"app\"&gt;\n          &lt;b-navbar style=\"width: 100%\" type=\"dark\" variant=\"dark\"&gt;\n               &lt;b-navbar-brand id=\"nav-brand\" href=\"#\"&gt;Kotlin+Spring+Vue&lt;\u002Fb-navbar-brand&gt;\n               &lt;router-link to=\"\u002F\"&gt;&lt;img height=\"30px\" src=\".\u002Fassets\u002Fimg\u002Fkotlin-logo.png\" alt=\"Kotlin+Spring+Vue\"\u002F&gt;&lt;\u002Frouter-link&gt;\n               &lt;router-link to=\"\u002F\"&gt;&lt;img height=\"30px\" src=\".\u002Fassets\u002Fimg\u002Fspring-boot-logo.png\" alt=\"Kotlin+Spring+Vue\"\u002F&gt;&lt;\u002Frouter-link&gt;\n               &lt;router-link to=\"\u002F\"&gt;&lt;img height=\"30px\" src=\".\u002Fassets\u002Fimg\u002Fvuejs-logo.png\" alt=\"Kotlin+Spring+Vue\"\u002F&gt;&lt;\u002Frouter-link&gt;\n               &lt;router-link to=\"\u002Fuser\" class=\"nav-link text-light\" v-if=\"this.$store.getters.isAuthenticated\"&gt;User&lt;\u002Frouter-link&gt;\n               &lt;router-link to=\"\u002Fadmin\" class=\"nav-link text-light\" v-if=\"this.$store.getters.isAuthenticated &amp;&amp; this.$store.getters.isAdmin\"&gt;Admin&lt;\u002Frouter-link&gt;\n               &lt;router-link to=\"\u002Fregister\" class=\"nav-link text-light\" v-if=\"!this.$store.getters.isAuthenticated\"&gt;Register&lt;\u002Frouter-link&gt;\n               &lt;router-link to=\"\u002Flogin\" class=\"nav-link text-light\" v-if=\"!this.$store.getters.isAuthenticated\"&gt;Login&lt;\u002Frouter-link&gt;\n               &lt;a href=\"#\" class=\"nav-link text-light\" v-if=\"this.$store.getters.isAuthenticated\" v-on:click=\"logout\"&gt;Logout &lt;\u002Fa&gt;\n          &lt;\u002Fb-navbar&gt;\n          &lt;router-view&gt;&lt;\u002Frouter-view&gt;\n     &lt;\u002Fdiv&gt;\n&lt;\u002Ftemplate&gt; \n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\n\u003Cb\u003EПримечание:\u003C\u002Fb\u003E \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cul\u003E\n\u003Cli\u003EЧерез store мы получаем информацию о полномочиях пользователя и о том, авторизован ли он. В зависимости от этого принимаем решение, какие кнопки показывать, а какие скрывать («v-if»)\u003C\u002Fli\u003E\n\u003Cli\u003EВ панель навигации я добавил логотипы Kotlin, Spring Boot и Vue.js, лежащие в \u003Ci\u003E\u002Fassets\u002Fimg\u002F\u003C\u002Fi\u003E. Их можно либо убрать совсем, либо взять из репозитория моего приложения (ссылка есть в конце статьи)\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\u003Cbr\u002F\u003E\n\u003C\u002Fdiv\u003E\n                    \u003C\u002Fdiv\u003E\u003Cbr\u002F\u003E\nОбновим компоненты:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cdiv class=\"spoiler\" role=\"button\" tabindex=\"0\"\u003E\n                        \u003Cb class=\"spoiler_title\"\u003EHome.vue\u003C\u002Fb\u003E\n                        \u003Cdiv class=\"spoiler_text\"\u003E\u003Cpre\u003E\u003Ccode class=\"xml\"\u003E&lt;template&gt;\n   &lt;div div=\"home\"&gt;\n       &lt;b-jumbotron&gt;\n       &lt;template slot=\"header\"&gt;Kotlin + Spring Boot + Vue.js&lt;\u002Ftemplate&gt;\n\n       &lt;template slot=\"lead\"&gt;\n         This is the demo web-application written in Kotlin using Spring Boot and Vue.js for frontend\n       &lt;\u002Ftemplate&gt;\n\n       &lt;hr class=\"my-4\" \u002F&gt;\n\n       &lt;p v-if=\"!this.$store.getters.isAuthenticated\"&gt;\n         Login and start\n       &lt;\u002Fp&gt;\n\n       &lt;router-link to=\"\u002Flogin\" v-if=\"!this.$store.getters.isAuthenticated\"&gt;\n           &lt;b-button variant=\"primary\"&gt;Login&lt;\u002Fb-button&gt;\n       &lt;\u002Frouter-link&gt;\n\n     &lt;\u002Fb-jumbotron&gt;\n   &lt;\u002Fdiv&gt;\n&lt;\u002Ftemplate&gt;\n\n&lt;script&gt;\n&lt;\u002Fscript&gt;\n\n&lt;style&gt;\n&lt;\u002Fstyle&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\n\u003C\u002Fdiv\u003E\n                    \u003C\u002Fdiv\u003E\u003Cbr\u002F\u003E\n\u003Cdiv class=\"spoiler\" role=\"button\" tabindex=\"0\"\u003E\n                        \u003Cb class=\"spoiler_title\"\u003ESignIn.vue\u003C\u002Fb\u003E\n                        \u003Cdiv class=\"spoiler_text\"\u003E\u003Cpre\u003E\u003Ccode class=\"xml\"\u003E&lt;template&gt;\n   &lt;div div=\"signin\"&gt;\n       &lt;div class=\"login-form\"&gt;\n           &lt;b-card\n             title=\"Login\"\n             tag=\"article\"\n             style=\"max-width: 20rem;\"\n             class=\"mb-2\"\n           &gt;\n           &lt;div&gt;\n               &lt;b-alert\n                     :show=\"dismissCountDown\"\n                     dismissible\n                     variant=\"danger\"\n                     @dismissed=\"dismissCountDown=0\"\n                     @dismiss-count-down=\"countDownChanged\"\n                   &gt; {{ alertMessage }}\n                   &lt;\u002Fb-alert&gt;\n           &lt;\u002Fdiv&gt;\n             &lt;div&gt;\n                &lt;b-form-input type=\"text\" placeholder=\"Username\" v-model=\"username\" \u002F&gt;\n                &lt;div class=\"mt-2\"&gt;&lt;\u002Fdiv&gt;\n\n                &lt;b-form-input type=\"password\" placeholder=\"Password\" v-model=\"password\" \u002F&gt;\n                &lt;div class=\"mt-2\"&gt;&lt;\u002Fdiv&gt;\n             &lt;\u002Fdiv&gt;\n\n             &lt;b-button v-on:click=\"login\" variant=\"primary\"&gt;Login&lt;\u002Fb-button&gt;\n\n             &lt;hr class=\"my-4\" \u002F&gt;\n\n             &lt;b-button variant=\"link\"&gt;Forget password?&lt;\u002Fb-button&gt;\n           &lt;\u002Fb-card&gt;\n         &lt;\u002Fdiv&gt;\n   &lt;\u002Fdiv&gt;\n&lt;\u002Ftemplate&gt;\n\n&lt;script&gt;\nimport {AXIOS} from '.\u002Fhttp-common'\nexport default {\n   name: 'SignIn',\n   data() {\n         return {\n         username: '',\n         password: '',\n         dismissSecs: 5,\n         dismissCountDown: 0,\n         alertMessage: 'Request error',\n     }\n   },\n   methods: {\n     login() {\n       AXIOS.post(`\u002Fauth\u002Fsignin`, {'username': this.$data.username, 'password': this.$data.password})\n         .then(response =&gt; {\n           this.$store.dispatch('login', {'token': response.data.accessToken, 'roles': response.data.authorities, 'username': response.data.username});\n           this.$router.push('\u002Fhome')\n         }, error =&gt; {\n           this.$data.alertMessage = (error.response.data.message.length &lt; 150) ? error.response.data.message : 'Request error. Please, report this error website owners';\n           console.log(error)\n         })\n         .catch(e =&gt; {\n           console.log(e);\n           this.showAlert();\n         })\n     },\n     countDownChanged(dismissCountDown) {\n         this.dismissCountDown = dismissCountDown\n     },\n     showAlert() {\n         this.dismissCountDown = this.dismissSecs\n     },\n   }\n }\n&lt;\u002Fscript&gt;\n\n&lt;style&gt;\n.login-form {\n   margin-left: 38%;\n   margin-top: 50px;\n}\n&lt;\u002Fstyle&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nЧто тут происходит:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cul\u003E\n\u003Cli\u003EЗапрос авторизации отправляется на сервер с помощью POST-запроса\u003C\u002Fli\u003E\n\u003Cli\u003EОт сервера мы получаем токен и сохраняем его в storage\u003C\u002Fli\u003E\n\u003Cli\u003EПоказываем «красивое» сообщение от Bootstrap об ошибке в случае ошибки\u003C\u002Fli\u003E\n\u003Cli\u003EЕсли авторизация проходит успешно, переадресовываем пользователя на \u003Ci\u003E\u002Fhome\u003C\u002Fi\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\u003Cbr\u002F\u003E\n\u003C\u002Fdiv\u003E\n                    \u003C\u002Fdiv\u003E\u003Cbr\u002F\u003E\n\u003Cdiv class=\"spoiler\" role=\"button\" tabindex=\"0\"\u003E\n                        \u003Cb class=\"spoiler_title\"\u003ESignUp.vue\u003C\u002Fb\u003E\n                        \u003Cdiv class=\"spoiler_text\"\u003E\u003Cpre\u003E\u003Ccode class=\"xml\"\u003E&lt;template&gt;\n   &lt;div div=\"signup\"&gt;\n       &lt;div class=\"login-form\"&gt;\n       &lt;b-card\n             title=\"Register\"\n             tag=\"article\"\n             style=\"max-width: 20rem;\"\n             class=\"mb-2\"\n           &gt;\n           &lt;div&gt;\n               &lt;b-alert\n                     :show=\"dismissCountDown\"\n                     dismissible\n                     variant=\"danger\"\n                     @dismissed=\"dismissCountDown=0\"\n                     @dismiss-count-down=\"countDownChanged\"\n                   &gt; {{ alertMessage }}\n                   &lt;\u002Fb-alert&gt;\n           &lt;\u002Fdiv&gt;\n           &lt;div&gt;\n             &lt;b-alert variant=\"success\" :show=\"successfullyRegistered\"&gt;\n               You have been successfully registered! Now you can login with your credentials\n               &lt;hr \u002F&gt;\n               &lt;router-link to=\"\u002Flogin\"&gt;\n                    &lt;b-button variant=\"primary\"&gt;Login&lt;\u002Fb-button&gt;\n               &lt;\u002Frouter-link&gt;\n             &lt;\u002Fb-alert&gt;\n           &lt;\u002Fdiv&gt;\n             &lt;div&gt;\n                &lt;b-form-input type=\"text\" placeholder=\"Username\" v-model=\"username\" \u002F&gt;\n                &lt;div class=\"mt-2\"&gt;&lt;\u002Fdiv&gt;\n\n                &lt;b-form-input type=\"text\" placeholder=\"First Name\" v-model=\"firstname\" \u002F&gt;\n                &lt;div class=\"mt-2\"&gt;&lt;\u002Fdiv&gt;\n\n                &lt;b-form-input type=\"text\" placeholder=\"Last name\" v-model=\"lastname\" \u002F&gt;\n                &lt;div class=\"mt-2\"&gt;&lt;\u002Fdiv&gt;\n\n                &lt;b-form-input type=\"text\" placeholder=\"Email\" v-model=\"email\" \u002F&gt;\n                &lt;div class=\"mt-2\"&gt;&lt;\u002Fdiv&gt;\n\n                &lt;b-form-input type=\"password\" placeholder=\"Password\" v-model=\"password\" \u002F&gt;\n                &lt;div class=\"mt-2\"&gt;&lt;\u002Fdiv&gt;\n\n               &lt;b-form-input type=\"password\" placeholder=\"Confirm Password\" v-model=\"confirmpassword\" \u002F&gt;\n                &lt;div class=\"mt-2\"&gt;&lt;\u002Fdiv&gt;\n             &lt;\u002Fdiv&gt;\n\n             &lt;b-button v-on:click=\"register\" variant=\"primary\"&gt;Register&lt;\u002Fb-button&gt;\n\n           &lt;\u002Fb-card&gt;\n       &lt;\u002Fdiv&gt;\n   &lt;\u002Fdiv&gt;\n&lt;\u002Ftemplate&gt;\n\n&lt;script&gt;\nimport {AXIOS} from '.\u002Fhttp-common'\nexport default {\n   name: 'SignUp',\n   data () {\n       return {\n           username: '',\n           firstname: '',\n           lastname: '',\n           email: '',\n           password: '',\n           confirmpassword: '',\n           dismissSecs: 5,\n           dismissCountDown: 0,\n           alertMessage: '',\n           successfullyRegistered: false\n       }\n   },\n   methods: {\n       register: function () {\n           if (this.$data.username === '' || this.$data.username == null) {\n               this.$data.alertMessage = 'Please, fill \"Username\" field';\n               this.showAlert();\n           } else if (this.$data.firstname === '' || this.$data.firstname == null) {\n               this.$data.alertMessage = 'Please, fill \"First name\" field';\n               this.showAlert();\n           } else if (this.$data.lastname === '' || this.$data.lastname == null) {\n               this.$data.alertMessage = 'Please, fill \"Last name\" field';\n               this.showAlert();\n           } else if (this.$data.email === '' || this.$data.email == null) {\n               this.$data.alertMessage = 'Please, fill \"Email\" field';\n               this.showAlert();\n           } else if (!this.$data.email.includes('@')) {\n               this.$data.alertMessage = 'Email is incorrect';\n               this.showAlert();\n           } else if (this.$data.password === '' || this.$data.password == null) {\n               this.$data.alertMessage = 'Please, fill \"Password\" field';\n               this.showAlert();\n           } else if (this.$data.confirmpassword === '' || this.$data.confirmpassword == null) {\n               this.$data.alertMessage = 'Please, confirm password';\n               this.showAlert();\n           } else if (this.$data.confirmpassword !== this.$data.password) {\n               this.$data.alertMessage = 'Passwords are not match';\n               this.showAlert();\n           } else {\n               var newUser = {\n                   'username': this.$data.username,\n                   'firstName': this.$data.firstname,\n                   'lastName': this.$data.lastname,\n                   'email': this.$data.email,\n                   'password': this.$data.password\n               };\n               AXIOS.post('\u002Fauth\u002Fsignup', newUser)\n               .then(response =&gt; {\n                   console.log(response);\n                   this.successAlert();\n               }, error =&gt; {\n                   this.$data.alertMessage = (error.response.data.message.length &lt; 150) ? error.response.data.message : 'Request error. Please, report this error website owners'\n                   this.showAlert();\n               })\n                .catch(error =&gt; {\n                   console.log(error);\n                   this.$data.alertMessage = 'Request error. Please, report this error website owners';\n                   this.showAlert();\n                });\n           }\n       },\n       countDownChanged(dismissCountDown) {\n           this.dismissCountDown = dismissCountDown\n       },\n       showAlert() {\n           this.dismissCountDown = this.dismissSecs\n       },\n       successAlert() {\n           this.username = '';\n           this.firstname = '';\n           this.lastname = '';\n           this.email = '';\n           this.password = '';\n           this.confirmpassword = '';\n           this.successfullyRegistered = true;\n       }\n   }\n}\n&lt;\u002Fscript&gt;\n\n&lt;style&gt;\n.login-form {\n   margin-left: 38%;\n   margin-top: 50px;\n}\n&lt;\u002Fstyle&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nЧто тут происходит:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cul\u003E\n\u003Cli\u003EДанные с формы регистрации передаются на сервер с помощью POST-запроса\u003C\u002Fli\u003E\n\u003Cli\u003EПоказывается сообщение об ошибке от Bootstrap в случае ошибки \u003C\u002Fli\u003E\n\u003Cli\u003EЕсли регистрация прошла успешно, выводим Bootstrap-овское сообщение с предложением авторизоваться\u003C\u002Fli\u003E\n\u003Cli\u003EПеред отправкой запроса происходит валидация полей\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\u003Cbr\u002F\u003E\n\u003C\u002Fdiv\u003E\n                    \u003C\u002Fdiv\u003E\u003Cbr\u002F\u003E\n\u003Cdiv class=\"spoiler\" role=\"button\" tabindex=\"0\"\u003E\n                        \u003Cb class=\"spoiler_title\"\u003EUserPage.vue\u003C\u002Fb\u003E\n                        \u003Cdiv class=\"spoiler_text\"\u003E\u003Cpre\u003E\u003Ccode class=\"xml\"\u003E&lt;template&gt;\n   &lt;div div=\"userpage\"&gt;\n       &lt;h2&gt;{{ pageContent }}&lt;\u002Fh2&gt;\n   &lt;\u002Fdiv&gt;\n&lt;\u002Ftemplate&gt;\n\n&lt;script&gt;\nimport {AXIOS} from '.\u002Fhttp-common'\nexport default {\n   name: 'UserPage',\n   data() {\n       return {\n           pageContent: ''\n       }\n   },\n   methods: {\n       loadUserContent() {\n           const header = {'Authorization': 'Bearer ' + this.$store.getters.getToken};\n           AXIOS.get('\u002Fusercontent', { headers: header })\n           .then(response =&gt; {\n               this.$data.pageContent = response.data;\n           })\n           .catch(error =&gt; {\n               console.log('ERROR: ' + error.response.data);\n           })\n       }\n   },\n   mounted() {\n       this.loadUserContent();\n   }\n}\n&lt;\u002Fscript&gt;\n\n&lt;style&gt;\n&lt;\u002Fstyle&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nЧто тут происходит:\u003Cbr\u002F\u003E\n\u003Cul\u003E\n\u003Cli\u003EЗагрузка данных с сервера происходит сразу после загрузки страницы\u003C\u002Fli\u003E\n\u003Cli\u003EВместе с запросом мы передаём токен, хранящийся в storage\u003C\u002Fli\u003E\n\u003Cli\u003EПолученные данные мы отрисовываем на странице\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\u003Cbr\u002F\u003E\n\u003C\u002Fdiv\u003E\n                    \u003C\u002Fdiv\u003E\u003Cbr\u002F\u003E\n\u003Cdiv class=\"spoiler\" role=\"button\" tabindex=\"0\"\u003E\n                        \u003Cb class=\"spoiler_title\"\u003EAdmin.vue\u003C\u002Fb\u003E\n                        \u003Cdiv class=\"spoiler_text\"\u003E\u003Cpre\u003E\u003Ccode class=\"xml\"\u003E&lt;template&gt;\n   &lt;div div=\"adminpage\"&gt;\n       &lt;h2&gt;{{ pageContent }}&lt;\u002Fh2&gt;\n   &lt;\u002Fdiv&gt;\n&lt;\u002Ftemplate&gt;\n\n&lt;script&gt;\nimport {AXIOS} from '.\u002Fhttp-common'\nexport default {\n   name: 'AdminPage',\n   data() {\n       return {\n           pageContent: ''\n       }\n   },\n   methods: {\n       loadUserContent() {\n           const header = {'Authorization': 'Bearer ' + this.$store.getters.getToken};\n           AXIOS.get('\u002Fadmincontent', { headers: header })\n           .then(response =&gt; {\n               this.$data.pageContent = response.data;\n           })\n           .catch(error =&gt; {\n               console.log('ERROR: ' + error.response.data);\n           })\n       }\n   },\n   mounted() {\n       this.loadUserContent();\n   }\n}\n&lt;\u002Fscript&gt;\n\n&lt;style&gt;\n&lt;\u002Fstyle&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nЗдесь происходит всё то же самое, что и в \u003Ci\u003EUserPage\u003C\u002Fi\u003E.\u003Cbr\u002F\u003E\n\u003C\u002Fdiv\u003E\n                    \u003C\u002Fdiv\u003E\u003Cbr\u002F\u003E\n\u003Ch3\u003EЗапуск приложения\u003C\u002Fh3\u003E\u003Cbr\u002F\u003E\nЗарегистрируем нашего первого администратора:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw1560\u002Fwebt\u002Fvj\u002Fn1\u002Fsx\u002Fvjn1sxqgh21twatqxdnwdsax-da.png\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fwebt\u002Fvj\u002Fn1\u002Fsx\u002Fvjn1sxqgh21twatqxdnwdsax-da.png\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw1560\u002Fwebt\u002Fty\u002Fxq\u002Frd\u002Ftyxqrdt_bdanmy9ughcq050i5q8.png\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fwebt\u002Fty\u002Fxq\u002Frd\u002Ftyxqrdt_bdanmy9ughcq050i5q8.png\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cb\u003EВажно:\u003C\u002Fb\u003E по умолчанию все новые пользователи — обычные. Дадим первому администратору его полномочия:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode class=\"sql\"\u003EINSERT INTO users_roles (user_id, role_id) VALUES (1, 2);\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nЗатем:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Col\u003E\n\u003Cli\u003EЗайдём под учётной записью администратора\u003C\u002Fli\u003E\n\u003Cli\u003EПроверим страницу User: \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw1560\u002Fwebt\u002F7-\u002Fhl\u002Ftu\u002F7-hltu0rtm5vigbfhq3hmhin0ri.png\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fwebt\u002F7-\u002Fhl\u002Ftu\u002F7-hltu0rtm5vigbfhq3hmhin0ri.png\"\u002F\u003E\u003C\u002Fli\u003E\n\u003Cli\u003EПроверим страницу Admin: \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw1560\u002Fwebt\u002Fse\u002Fhr\u002Flu\u002Fsehrlu8m5npgbdf1dtotvukfk-g.png\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fwebt\u002Fse\u002Fhr\u002Flu\u002Fsehrlu8m5npgbdf1dtotvukfk-g.png\"\u002F\u003E\u003C\u002Fli\u003E\n\u003Cli\u003EВыйдем из администраторской учётной записи\u003C\u002Fli\u003E\n\u003Cli\u003EЗарегистрируем аккаунт обычного пользователя\u003C\u002Fli\u003E\n\u003Cli\u003EПроверим доступность страницы User\u003C\u002Fli\u003E\n\u003Cli\u003EПопробуем получить администраторские данные, используя REST API: \u003Ca href=\"http:\u002F\u002Flocalhost:8080\u002Fapi\u002Fadmincontent\" rel=\"nofollow\"\u003Ehttp:\u002F\u002Flocalhost:8080\u002Fapi\u002Fadmincontent\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode class=\"plaintext\"\u003EERROR 77100 --- [nio-8080-exec-2] c.k.backend.jwt.JwtAuthEntryPoint : Unauthorized error. Message - Full authentication is required to access this resource\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\n\u003Ca name=\"WaysToImprove\"\u003E\u003C\u002Fa\u003E\u003Cbr\u002F\u003E\n\u003Ch2\u003EПути улучшения\u003C\u002Fh2\u003E\u003Cbr\u002F\u003E\nВообще говоря, их в любом деле всегда очень много. Перечислю самые очевидные:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cul\u003E\n\u003Cli\u003EИспользовать для сборки Gradle (если считать это улучшением)\u003C\u002Fli\u003E\n\u003Cli\u003EСразу покрывать код модульными тестами (это уже, без сомнения, хорошая практика)\u003C\u002Fli\u003E\n\u003Cli\u003EС самого начала выстраивать CI\u002FCD Pipeline: размещать код в репозитории, контейнизировать приложение, автоматизировать сборку и деплой\u003C\u002Fli\u003E\n\u003Cli\u003EДобавить PUT и DELETE запросы (например, обновление данных пользователей и удаление учётных записей)\u003C\u002Fli\u003E\n\u003Cli\u003EРеализовать активацию\u002Fдеактивацию учетных записей\u003C\u002Fli\u003E\n\u003Cli\u003EНе использовать local storage для хранения токена — это не безопасно\u003C\u002Fli\u003E\n\u003Cli\u003EИспользовать OAuth\u003C\u002Fli\u003E\n\u003Cli\u003EВерифицировать адреса электронной почты при регистрации нового пользователя\u003C\u002Fli\u003E\n\u003Cli\u003EИспользовать защиту от спама, например, reCAPTCHA\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\u003Cbr\u002F\u003E\n\u003Ca name=\"Links\"\u003E\u003C\u002Fa\u003E\u003Cbr\u002F\u003E\n\u003Ch2\u003EПолезные ссылки\u003C\u002Fh2\u003E\u003Cbr\u002F\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fvaadimblog.blogspot.com\u002Fp\u002Fkotlin-spring-boot-vuejs.html\" rel=\"nofollow\"\u003EТо же самое руководство\u003C\u002Fa\u003E, написанное мной же, только более подробное, где также рассматривается разворачивание приложения в Heroku, reCAPTCHA и работа с почтой. На английском языке, зато с картинками\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FDrLeprechaun\u002Fkotlin-spring-vue\" rel=\"nofollow\"\u003EGitHub репозиторий\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fkotlin-spring-vue-demo.herokuapp.com\" rel=\"nofollow\"\u003EГотовое приложение\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fjonashackt\u002Fspring-boot-vuejs\" rel=\"nofollow\"\u003EОтдельное спасибо\u003C\u002Fa\u003E — этот материал вдохновил меня на написание данной статьи\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fauth0.com\u002Fblog\u002Fvuejs-spring-boot-kotlin-and-graphql-building-modern-apps-part-1\u002F\" rel=\"nofollow\"\u003EVue.js, Spring Boot, Kotlin, and GraphQL: Building Modern Apps\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fwww.baeldung.com\" rel=\"nofollow\"\u003EBaeldung — Java, Spring and Web Development tutorials\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fwww.baeldung.com\u002Fspring-boot-vue-js\" rel=\"nofollow\"\u003EVue.js Frontend with a Spring Boot Backend\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fkotlinlang.org\u002Fdocs\u002Ftutorials\u002Fspring-boot-restful.html\" rel=\"nofollow\"\u003ECreating a RESTful Web Service with Spring Boot (Kotlin)\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fkotlinlang.org\u002Fdocs\u002Freference\u002Fdata-classes.html\" rel=\"nofollow\"\u003EData Classes (Kotlin)\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fwww.baeldung.com\u002Fkotlin-data-classes\" rel=\"nofollow\"\u003EData Classes in Kotlin\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Flogrocket.com\u002Fblog\u002Fjwt-authentication-best-practices\u002F\" rel=\"nofollow\"\u003EJWT authentication: When and how to use it\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fvuex.vuejs.org\" rel=\"nofollow\"\u003EWhat is Vuex?\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fitnext.io\u002Fmanaging-state-in-vue-js-with-vuex-f036fd71f432\" rel=\"nofollow\"\u003EManaging state in Vue.js with Vuex\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nДополнение к этому материалу \u003Ca href=\"https:\u002F\u002Fhabr.com\u002Fru\u002Fpost\u002F482222\u002F\"\u003Eздесь\u003C\u002Fa\u003E\u003C\u002Fdiv\u003E","tags":[{"titleHtml":"kotlin"},{"titleHtml":"spring"},{"titleHtml":"spring framework"},{"titleHtml":"spring boot"},{"titleHtml":"vue"},{"titleHtml":"vue.js"},{"titleHtml":"vuejs"},{"titleHtml":"fullstack"},{"titleHtml":"fullstack development"}],"metadata":{"stylesUrls":[],"scriptUrls":[],"shareImageUrl":"https:\u002F\u002Fhabr.com\u002Fshare\u002Fpublication\u002F467161\u002Fa279aa7d55f3b1fadd8d565604c68581\u002F","shareImageWidth":1200,"shareImageHeight":630,"vkShareImageUrl":"https:\u002F\u002Fhabr.com\u002Fshare\u002Fpublication\u002F467161\u002Fa279aa7d55f3b1fadd8d565604c68581\u002F?format=vk","schemaJsonLd":"{\"@context\":\"http:\\\u002F\\\u002Fschema.org\",\"@type\":\"Article\",\"mainEntityOfPage\":{\"@type\":\"WebPage\",\"@id\":\"https:\\\u002F\\\u002Fhabr.com\\\u002Fru\\\u002Farticles\\\u002F467161\\\u002F\"},\"headline\":\"Веб-приложение на Kotlin + Spring Boot + Vue.js\",\"datePublished\":\"2019-09-12T15:20:11+03:00\",\"dateModified\":\"2020-07-02T22:51:31+03:00\",\"author\":{\"@type\":\"Person\",\"name\":\"Вадим\"},\"publisher\":{\"@type\":\"Organization\",\"name\":\"Habr\",\"logo\":{\"@type\":\"ImageObject\",\"url\":\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fwebt\\\u002Fa_\\\u002Flk\\\u002F9m\\\u002Fa_lk9mjkccjox-zccjrpfolmkmq.png\"}},\"description\":\"Добрый день, дорогие обитатели Хабра!  Не так давно мне представилась возможность реализовать небольшой проект без особых требований по технической части. То ест...\",\"url\":\"https:\\\u002F\\\u002Fhabr.com\\\u002Fru\\\u002Farticles\\\u002F467161\\\u002F#post-content-body\",\"about\":[\"h_kotlin\",\"h_vuejs\",\"f_develop\"],\"image\":[\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fwebt\\\u002Frm\\\u002Fvy\\\u002Fox\\\u002Frmvyoxpbqjjaajjcfbvdpe5ams0.png\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fwebt\\\u002Fuj\\\u002Fro\\\u002F2m\\\u002Fujro2mhzhzdj77-krllhk2vthwg.png\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fwebt\\\u002Fhb\\\u002F7p\\\u002F2p\\\u002Fhb7p2pksym25ceozocomrxo0-fu.png\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fwebt\\\u002Fvj\\\u002Fn1\\\u002Fsx\\\u002Fvjn1sxqgh21twatqxdnwdsax-da.png\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fwebt\\\u002Fty\\\u002Fxq\\\u002Frd\\\u002Ftyxqrdt_bdanmy9ughcq050i5q8.png\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fwebt\\\u002F7-\\\u002Fhl\\\u002Ftu\\\u002F7-hltu0rtm5vigbfhq3hmhin0ri.png\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fwebt\\\u002Fse\\\u002Fhr\\\u002Flu\\\u002Fsehrlu8m5npgbdf1dtotvukfk-g.png\"]}","metaDescription":"Добрый день, дорогие обитатели Хабра! Не так давно мне представилась возможность реализовать небольшой проект без особых требований по технической части. То есть, я был волен выбирать стек технологий...","mainImageUrl":null,"amp":false,"customTrackerLinks":[]},"polls":[],"commentsEnabled":{"status":true,"reason":null},"rulesRemindEnabled":false,"votesEnabled":true,"status":"published","plannedPublishTime":null,"checked":null,"hasPinnedComments":false,"format":"tutorial","banner":null,"multiwidget":null,"multiwidgetUuid":null,"readingTime":40,"complexity":null,"isEditorial":false}},"articlesIds":{},"isLoading":false,"pagesCount":{},"route":{},"reasonsList":null,"postReasonsList":null,"view":"list","lastVisitedRoute":{},"ssrCommentsArticleIds":[""],"viewedPosts":[],"myFeedFilter":{"complexity":"all","score":"all","types":["articles","posts","news"]},"myFeedIsApplyFilters":false,"myFeedIsForce":false,"karma":{"userReasonsList":null}},"authorContribution":{"authors":{}},"betaTest":{"currentAnnouncement":null,"announcements":{},"announcementCards":null,"announcementComments":{},"announcementCommentThreads":{},"announcementCommentingStatuses":{},"archivedList":[]},"authorStatistics":{"articleRefs":{},"articleIds":{},"pagesCount":{},"route":{},"viewsCount":[],"maxStatsCount":{}},"career":{"seoLandings":[{"title":"JavaScript разработчик","vacanciesCount":131,"itemUrl":"https:\u002F\u002Fcareer.habr.com\u002Fvacancies\u002Fprogrammist_javascript","itemHubs":["javascript","nodejs","angular","reactjs","vuejs","typescript","sveltejs"]}],"hubs":"kotlin,vuejs"},"comments":{"articleComments":{},"articlePinnedComments":{},"searchCommentsResults":null,"pagesCount":null,"commentAccess":{},"scrollParents":{},"pageArticleComments":{"lastViewedComment":0,"postId":null,"lastCommentTimestamp":"","moderated":[],"moderatedIds":[],"commentRoute":"","idempotenceKey":""}},"companies":{"companyRefs":{},"companyIds":{},"companyTopIds":{},"pagesCount":{},"companyProfiles":{},"companiesCategories":[],"companiesCategoriesTotalCount":0,"companiesWidgets":{},"companiesWorkers":{},"companiesFans":{},"multiwidgets":{},"route":{},"isLoading":false,"companyWorkersLoading":false,"companyFansLoading":false,"multiwidgetLoading":false,"vacancies":{},"companiesGalleries":{},"companiesBanners":{},"companiesLandingVacancies":{},"companiesTechnologies":{},"workplaceInfo":null},"companyAdmin":{"companyInfo":null,"companyInfoLoading":false,"faqArticles":null,"brandingPreviewImageUrl":null,"jivoStatus":0,"adminNotifications":null,"availableInvitesCount":{}},"companyAdd":{"currentStep":"","stepsData":{},"uncompletedSteps":[],"isStepLoading":true,"isStepCommitting":false,"isInitialized":false,"agreementContent":""},"companiesContribution":{"hubs":{},"flows":{},"companyRefs":{}},"companyHubsContribution":{"contributionRefs":{"hubRefs":{},"hubIds":{}}},"conversation":{"messages":[],"respondent":null,"isLoadMore":false},"conversations":{"conversations":[],"pagesCount":0},"docs":{"menu":{},"articles":{},"mainMenu":[],"loading":{"main":false,"dropdown":false,"article":false}},"feature":{"isProbablyVisible":true},"fixedBanner":{"isArticleStickyPanelVisible":false,"isArticleStickyPanelAtTheBottom":false,"isFixedBannerVisible":false,"isStickyPanelIconsHidden":false},"flows":{"flows":[{"id":"1","alias":"develop","title":"Разработка","titleHtml":"Разработка","route":{"name":"FLOW_PAGE","params":{"flowName":"develop"}}},{"id":"6","alias":"admin","title":"Администрирование","titleHtml":"Администрирование","route":{"name":"FLOW_PAGE","params":{"flowName":"admin"}}},{"id":"2","alias":"design","title":"Дизайн","titleHtml":"Дизайн","route":{"name":"FLOW_PAGE","params":{"flowName":"design"}}},{"id":"3","alias":"management","title":"Менеджмент","titleHtml":"Менеджмент","route":{"name":"FLOW_PAGE","params":{"flowName":"management"}}},{"id":"4","alias":"marketing","title":"Маркетинг","titleHtml":"Маркетинг","route":{"name":"FLOW_PAGE","params":{"flowName":"marketing"}}},{"id":"7","alias":"popsci","title":"Научпоп","titleHtml":"Научпоп","route":{"name":"FLOW_PAGE","params":{"flowName":"popsci"}}}],"updates":{}},"global":{"isPwa":false,"device":"mobile","isHabrCom":true,"requestId":"a3b91a170d508312a748cc6363f25d81"},"hubs":{"hubRefs":{},"hubIds":{},"pagesCount":{},"isLoading":false,"route":{}},"hubsBlock":{"hubRefs":{},"hubIds":{}},"i18n":{"fl":"ru","hl":"ru"},"info":{"welcomePage":{},"isLoading":true},"location":{"urlStruct":{"protocol":null,"slashes":null,"auth":null,"host":null,"port":null,"hostname":null,"hash":null,"query":{},"pathname":"\u002Fru\u002Farticles\u002F467161\u002F","path":"\u002Fru\u002Farticles\u002F467161\u002F","href":"\u002Fru\u002Farticles\u002F467161\u002F"}},"me":{"user":null,"uuid":null,"ppgDemanded":false,"karmaResetInfo":{"canReincarnate":null,"wasReincarnated":null,"currentScore":null},"notes":null,"userUpdates":{"feeds":{"newPostsCount":null,"newThreadsCount":null,"newNewsCount":null,"newCount":null},"conversationUnreadCount":0}},"mostReadingList":{"mostReadingListIds":[],"mostReadingListRefs":null,"promoPost":null},"onboarding":{"currentStep":null,"stepsData":{},"stepsErrors":{},"completedSteps":[],"isStepCommitting":false,"isCommitDisabled":true},"ppa":{"articles":{},"card":null,"transactions":null,"totalTransactions":null,"isAccessible":null},"projectsBlocks":{"activeBlocks":{"vacancies":"project-block-article"}},"promoData":{"isLoading":false,"hasLoaded":false,"featurer":null,"megaposts":null,"promoLinks":null,"promoPosts":null,"sticker":null},"publicationStatistics":{"statsInfo":{},"statsFunnels":{},"statsGraph":{},"defaultSuggest":{},"suggest":{},"timeTracker":{},"isTrackingActivity":false,"isUserActive":true,"otherPublicationStats":{}},"pullRefresh":{"shouldRefresh":false},"sandbox":{"articleIds":[],"articleRefs":{},"pagesCount":null,"route":{},"lastVisitedRoute":{},"isLoading":false},"search":{"searchQueryError":null},"settingsOther":{"inputs":{"uiLang":{"errors":[],"ref":null,"value":""},"articlesLangEnglish":{"errors":[],"ref":null,"value":false},"articlesLangRussian":{"errors":[],"ref":null,"value":false},"agreement":{"errors":[],"ref":null,"value":false},"email":{"errors":[],"ref":null,"value":true},"digest":{"errors":[],"ref":null,"value":true}}},"similarList":{"similarListIds":[],"similarListRefs":null},"ssr":{"error":null,"isDataLoaded":true,"isDataLoading":false,"isHydrationFailed":false,"isServer":false},"stories":{"stories":[{"id":"story-998","author":{"logo":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F91a\u002F166\u002F49f\u002F91a16649f9ef89302a5a56cfa22a451d.png","title":"Яндекс Практикум","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up"},"title":"Как расти на работе?","lang":"ru","startTime":"2025-03-18T18:45:00+03:00","finishTime":"2025-03-31T19:00:00+03:00","slides":[{"id":"story-998_1","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fbf4\u002F911\u002F7e6\u002Fbf49117e637ff2099b3944f8803cd7a3.png","button":null},{"id":"story-998_2","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F3e3\u002Fc84\u002Fe83\u002F3e3c84e8330ea1ddf72e9d310457ed2f.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_3","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F84b\u002F533\u002F3c3\u002F84b5333c3e77e8dac62a8b50d042acb9.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_4","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F257\u002Feb0\u002F2be\u002F257eb02bea1777e13f3e647cae6e06cd.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_5","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F858\u002F086\u002F0ed\u002F8580860ed3497c043c04f9a42054d74f.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_6","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fcdf\u002F32f\u002F387\u002Fcdf32f38777f046c063b5182f4125e14.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_7","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fd48\u002Ff2d\u002F0e2\u002Fd48f2d0e2ecd7d746d738191bb913d8f.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_8","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fb38\u002Ffd7\u002Fee0\u002Fb38fd7ee04848bf3b058be7403438bd1.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_9","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F79e\u002Feaa\u002F9d8\u002F79eeaa9d8af5a288ad42bd9d63b5793a.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_10","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fcdc\u002F17e\u002F385\u002Fcdc17e38582dc67838b9abfb200d982e.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}}]},{"id":"story-996","author":{"logo":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fe63\u002F36d\u002Fa24\u002Fe6336da24460ab6b9fbc347d03eb263a.png","title":"Хабр","link":null},"title":"Здоровье айтишника","lang":"ru","startTime":"2025-03-17T10:22:00+03:00","finishTime":"2025-04-13T10:22:00+03:00","slides":[{"id":"story-996_1","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fb7c\u002F6de\u002F8ea\u002Fb7c6de8ea6789dbc30f071716172b6dd.jpg","button":null},{"id":"story-996_2","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F2e7\u002F88a\u002F0fe\u002F2e788a0fe61729ca8b23eb59069c844f.jpg","button":{"title":"Личный опыт","link":"https:\u002F\u002Fu.habr.com\u002Fzd-1","colorType":"light"}},{"id":"story-996_3","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fb93\u002F6f4\u002F256\u002Fb936f425653b84fa60ab00d09f78c543.jpg","button":{"title":"Как это было","link":"https:\u002F\u002Fu.habr.com\u002Fzd-2","colorType":"light"}},{"id":"story-996_4","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fc10\u002Fd14\u002Ff5a\u002Fc10d14f5a4859fe10baecbcc2bcb8828.jpg","button":{"title":"Шея в фокусе","link":"https:\u002F\u002Fu.habr.com\u002Fzd-3","colorType":"dark"}},{"id":"story-996_5","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F535\u002Fe1b\u002F77a\u002F535e1b77a9eb896262ad73321f2ad99f.jpg","button":{"title":"Фотоинструкция","link":"https:\u002F\u002Fu.habr.com\u002Fzd-4","colorType":"light"}},{"id":"story-996_6","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F569\u002Fc39\u002F49f\u002F569c3949f5b330ea85d4a1864f481c3d.jpg","button":{"title":"Сидите (не)правильно","link":"https:\u002F\u002Fu.habr.com\u002Fzd-5","colorType":"dark"}},{"id":"story-996_7","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F1f2\u002F1de\u002Fdbf\u002F1f21dedbf2902bc4061a75b839b63595.jpg","button":{"title":"Журнал изменений","link":"https:\u002F\u002Fu.habr.com\u002Fzd-6","colorType":"dark"}},{"id":"story-996_8","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F95a\u002F164\u002F21b\u002F95a16421badc3a9f1135309ab0c42c41.jpg","button":{"title":"Альтернатива","link":"https:\u002F\u002Fu.habr.com\u002Fzd-7","colorType":"light"}},{"id":"story-996_9","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F624\u002F027\u002F54d\u002F62402754d311798af44bcfe7f9abfedc.jpg","button":{"title":"Хроника поисков","link":"https:\u002F\u002Fu.habr.com\u002Fzd-8","colorType":"dark"}}]},{"id":"story-992","author":{"logo":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F3fe\u002F2fc\u002Fb05\u002F3fe2fcb05df852d7e1e00d44e54e39ae.png","title":"Сезоны Хабра","link":"https:\u002F\u002Fu.habr.com\u002Ffnstories"},"title":"Угадайте будущее в новом сезоне","lang":"ru","startTime":"2025-03-12T19:15:00+03:00","finishTime":"2025-03-31T23:56:00+03:00","slides":[{"id":"story-992_1","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fc56\u002Faf5\u002Fc43\u002Fc56af5c4377f7f7b94f7b6ad20fc92c3.png","button":{"title":"А что за сезон?","link":"https:\u002F\u002Fu.habr.com\u002Ffnstories","colorType":"light"}},{"id":"story-992_2","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F8fa\u002Fde7\u002F65d\u002F8fade765d99207f31c597283ae6ce912.png","button":{"title":"Какие темы нужны","link":"https:\u002F\u002Fu.habr.com\u002Ffnstories","colorType":"dark"}},{"id":"story-992_3","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F23e\u002F7b9\u002Fb24\u002F23e7b9b24cb056d1a42e8d31ccea16ce.png","button":{"title":"Сезон будущего ИИ","link":"https:\u002F\u002Fu.habr.com\u002Ffnstories","colorType":"dark"}},{"id":"story-992_4","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F27b\u002Fbfc\u002Fa18\u002F27bbfca18e656ee0122b5cb8eb2cb502.png","button":{"title":"Все правила сезона","link":"https:\u002F\u002Fu.habr.com\u002Ffnstories","colorType":"dark"}},{"id":"story-992_5","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F1e0\u002F6c6\u002Ff33\u002F1e06c6f33e703bbd2b2ae3baee3376fd.png","button":{"title":"Как участвовать","link":"https:\u002F\u002Fu.habr.com\u002Ffnstories","colorType":"dark"}}]},{"id":"story-990","author":{"logo":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F282\u002Fe80\u002Fbf1\u002F282e80bf1b73484126ed53c6f3e42692.png","title":"Aeza","link":"https:\u002F\u002Fu.habr.com\u002FI72qi"},"title":"С праздником весны!","lang":"ru","startTime":"2025-03-09T10:15:00+03:00","finishTime":"2025-03-30T23:59:00+03:00","slides":[{"id":"story-990_1","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F064\u002F9dd\u002Ff59\u002F0649ddf5949cae6c9342fb62034a36ac.png","button":null},{"id":"story-990_2","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F05f\u002F96b\u002F25e\u002F05f96b25e910c32256ee0b1916f21380.png","button":{"title":"Семейная история","link":"https:\u002F\u002Fu.habr.com\u002Fey2bY","colorType":"light"}},{"id":"story-990_3","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fcd1\u002Ff5d\u002F921\u002Fcd1f5d921bb9489ac11727272660bdb6.png","button":{"title":"Движущиеся картинки","link":"https:\u002F\u002Fu.habr.com\u002FWLKXU","colorType":"light"}},{"id":"story-990_4","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fb55\u002Fd45\u002Fec5\u002Fb55d45ec50e53275c60d16ea886a0672.png","button":{"title":"Личный опыт","link":"https:\u002F\u002Fu.habr.com\u002FSxrki","colorType":"light"}},{"id":"story-990_5","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Ffa7\u002F1ce\u002Ffca\u002Ffa71cefca5ed0a3fe8b50bd703b3605f.png","button":{"title":"Алгоритм","link":"https:\u002F\u002Fu.habr.com\u002Ftbz2p","colorType":"light"}},{"id":"story-990_6","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F435\u002F89d\u002Ff90\u002F43589df9018846cc6a8eed986226b252.png","button":{"title":"Выбрать сценарий","link":"https:\u002F\u002Fu.habr.com\u002F0RCPk","colorType":"light"}},{"id":"story-990_7","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F514\u002F5f8\u002F619\u002F5145f86194ad48dad48a846b42af0f93.png","button":{"title":"Jiraзамещение","link":"https:\u002F\u002Fu.habr.com\u002FEwhYq","colorType":"light"}},{"id":"story-990_8","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F439\u002Fa83\u002Fae7\u002F439a83ae78f7ef711e3b9bbed1ec26c5.png","button":{"title":"8 вещей","link":"https:\u002F\u002Fu.habr.com\u002FVTv2r","colorType":"light"}},{"id":"story-990_9","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F02d\u002F783\u002F2f7\u002F02d7832f7b1c95d88bff9f34209e204a.png","button":{"title":"Интерфейсы","link":"https:\u002F\u002Fu.habr.com\u002FUFOMZ","colorType":"light"}},{"id":"story-990_10","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F0cb\u002Ff7f\u002F0d9\u002F0cbf7f0d905d486ce4ff82bc939b21d5.png","button":{"title":"Стикеры ваши","link":"https:\u002F\u002Fu.habr.com\u002FoA1K7","colorType":"light"}}]},{"id":"story-984","author":{"logo":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F648\u002F61b\u002F9ae\u002F64861b9aecb7c474cd94063f98045541.png","title":"Хабр","link":null},"title":"Всегда котов!","lang":"ru","startTime":"2025-03-01T00:01:09+03:00","finishTime":"2025-03-23T16:21:00+03:00","slides":[{"id":"story-984_1","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fc06\u002Fc21\u002F93f\u002Fc06c2193ff34362ac2af782cf2571f55.png","button":null},{"id":"story-984_2","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fb68\u002F15f\u002F763\u002Fb6815f7630b9c015b1e67efb5bdf12d4.jpg","button":{"title":"Сделать purrrr","link":"https:\u002F\u002Fu.habr.com\u002Fj4DN1","colorType":"light"}},{"id":"story-984_3","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F550\u002F76e\u002Fd7a\u002F55076ed7a0954e243f944fc2f330623a.png","button":{"title":"Тыгыдык","link":"https:\u002F\u002Fu.habr.com\u002Fya360_kotov","colorType":"dark"}},{"id":"story-984_4","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F2fb\u002F23b\u002F06c\u002F2fb23b06cf294c2050104b2aef589788.jpg","button":{"title":"Исследование","link":"https:\u002F\u002Fu.habr.com\u002FbO3r0","colorType":"light"}},{"id":"story-984_5","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Ff50\u002F50f\u002F0ae\u002Ff5050f0aeea1335c4f0544c1863f8342.jpg","button":{"title":"Детали проекта","link":"https:\u002F\u002Fu.habr.com\u002FQJmhe","colorType":"light"}},{"id":"story-984_6","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F825\u002F3dd\u002F5f5\u002F8253dd5f5c19dd061578f1d09310a45f.jpg","button":{"title":"Эксперименты","link":"https:\u002F\u002Fu.habr.com\u002FVaOdo","colorType":"light"}},{"id":"story-984_7","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F3fb\u002Fc92\u002F0f9\u002F3fbc920f9ea81eca2c1c027ff77fc659.jpg","button":{"title":"Это не мем","link":"https:\u002F\u002Fu.habr.com\u002F0Wb3p","colorType":"light"}},{"id":"story-984_8","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F2b4\u002F794\u002Fc33\u002F2b4794c33844e60aad9468018fd132cd.jpg","button":{"title":"В засаде","link":"https:\u002F\u002Fu.habr.com\u002FnasCD","colorType":"dark"}}]}]},"technotext":{"years":[],"technotextDocForNominees":null,"technotextDocForWinners":null,"technotextInfo":{},"technotextInfoLoading":false,"technotextWinners":{},"technotextWinnersLoading":false},"userHubsContribution":{"contributionRefs":{"hubRefs":{},"hubIds":{}}},"userInvites":{"availableInvites":0,"usedInvitesIds":[],"usedInvitesRefs":{},"usedInvitesPagesCount":0,"unusedInvitesIds":[],"unusedInvitesRefs":{},"unusedInvitesPagesCount":0},"userVotes":{"karmaVotesList":[],"karmaVotesPagesCount":null,"karmaVotesListLoading":false,"commentsVotesList":[],"commentsVotesPagesCount":null,"commentsVotesListLoading":false,"postsVotesList":[],"postsVotesPagesCount":null,"postsVotesListLoading":false,"userVotesList":[],"userVotesPagesCount":null,"userVotesListLoading":false},"users":{"authorRefs":{},"authorIds":{},"pagesCount":{},"authorProfiles":{"drleprechaun":{"alias":"drleprechaun","badgets":[{"title":"Захабренный","description":"Пользователь с кармой \u003E0","url":null,"isRemovable":false}],"aboutHtml":"","contacts":[],"invitedBy":{"issuerLogin":null,"timeCreated":"2019-09-12T12:20:09+00:00"},"careerProfile":null,"companies":{"pagesCount":1,"companyIds":["drweb","epam_systems","google","JetBrains","microsoft","playgendary","postgrespro","sberbank","vk","yandex"],"companyRefs":{"drweb":{"id":"171","alias":"drweb","titleHtml":"Доктор Веб","descriptionHtml":null,"imageUrl":"\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fcompany\u002F002\u002F8a7\u002Fc16\u002F0028a7c16cc021fea7f86c13e082f507.gif","relatedData":null,"statistics":{"subscribersCount":858,"rating":52.01,"invest":null},"commonHubs":[]},"epam_systems":{"id":"1559","alias":"epam_systems","titleHtml":"EPAM","descriptionHtml":"Компания для карьерного и профессионального роста","imageUrl":"\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fcompany\u002F8f2\u002F731\u002F893\u002F8f27318934fc268bea41d8e66fce2b10.jpg","relatedData":null,"statistics":{"subscribersCount":55404,"rating":0,"invest":null},"commonHubs":[]},"google":{"id":"65","alias":"google","titleHtml":"Google Developers","descriptionHtml":"Build anything with Google","imageUrl":"\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fcompany\u002Ff34\u002Fb40\u002Fc71\u002Ff34b40c71b0c18155e36164199ed9a29.png","relatedData":null,"statistics":{"subscribersCount":15635,"rating":0,"invest":null},"commonHubs":[]},"JetBrains":{"id":"559","alias":"JetBrains","titleHtml":"JetBrains","descriptionHtml":"Делаем эффективные инструменты для разработчиков","imageUrl":"\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fcompany\u002F8dc\u002F19c\u002Fa06\u002F8dc19ca065174d2bc9027bbd2a47f072.png","relatedData":null,"statistics":{"subscribersCount":101730,"rating":0,"invest":null},"commonHubs":[]},"microsoft":{"id":"68","alias":"microsoft","titleHtml":"Microsoft","descriptionHtml":"Microsoft — мировой лидер в области ПО и ИТ-услуг","imageUrl":"\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fcompany\u002Fe98\u002F5cf\u002F6a0\u002Fe985cf6a01b15006350561f26c70a41f.png","relatedData":null,"statistics":{"subscribersCount":163238,"rating":0,"invest":null},"commonHubs":[]},"playgendary":{"id":"5815","alias":"playgendary","titleHtml":"Playgendary","descriptionHtml":"Разрабатываем и издаем мобильные игры","imageUrl":"\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fcompany\u002F5ec\u002F2ea\u002Fefc\u002F5ec2eaefcbdb992722740b91c4798dbb.png","relatedData":null,"statistics":{"subscribersCount":10259,"rating":0,"invest":null},"commonHubs":[]},"postgrespro":{"id":"3471","alias":"postgrespro","titleHtml":"Postgres Professional","descriptionHtml":"Разработчик СУБД Postgres Pro","imageUrl":"\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fcompany\u002F4e0\u002F339\u002F621\u002F4e0339621abc865fefb88f9e9f44748f.jpg","relatedData":null,"statistics":{"subscribersCount":131978,"rating":327.71,"invest":null},"commonHubs":[]},"sberbank":{"id":"1272","alias":"sberbank","titleHtml":"Сбер","descriptionHtml":"Больше чем банк","imageUrl":"\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fcompany\u002F0dd\u002Fcfc\u002Ff94\u002F0ddcfcf9441f7977e9841a2010376271.jpg","relatedData":null,"statistics":{"subscribersCount":133262,"rating":630.49,"invest":null},"commonHubs":[]},"vk":{"id":"2","alias":"vk","titleHtml":"VK","descriptionHtml":"Building the Internet","imageUrl":"\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fcompany\u002F4b6\u002Fb3a\u002F7f0\u002F4b6b3a7f070b96467c0b0f15c3159fa8.png","relatedData":null,"statistics":{"subscribersCount":234311,"rating":294.89,"invest":null},"commonHubs":[]},"yandex":{"id":"1","alias":"yandex","titleHtml":"Яндекс","descriptionHtml":"Как мы делаем Яндекс","imageUrl":"\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fcompany\u002Fb02\u002Fd9b\u002F1d4\u002Fb02d9b1d4a6e64ff069e2ab32fdedae2.png","relatedData":null,"statistics":{"subscribersCount":239643,"rating":709.92,"invest":null},"commonHubs":[]}}}}},"userHubs":{},"userInvitations":{},"authorFollowers":{},"authorFollowed":{},"userSpecialization":{},"karmaStats":[],"statistics":null,"isLoading":false,"authorFollowersLoading":false,"authorFollowedLoading":false,"userHubsLoading":false,"userInvitationsLoading":false,"route":{}},"viewport":{"prevScrollY":{},"scrollY":0,"width":0},"tracker":{"notificationsLoading":false,"notificationsList":[],"notificationsPageCount":0,"pendingMarkNotificationsRead":[],"publicationsLoading":true,"publicationsList":[],"publicationsPageCount":0,"pendingDeletePublications":false,"pendingMarkPublicationsRead":false},"events":{"eventRefs":{},"eventIds":[],"pagesCount":0,"categories":[],"cities":[],"actualEvents":[{"id":"588","titleHtml":"Конкурс «Снежный код» от Хекслета. Три гранта на бесплатное 10-месячное обучение","descriptionHtml":"\u003Cp\u003EУчаствуйте в конкурсе грантов от онлайн-школы программирования Хекслет. Три победителя пройдут 10-месячное обучение с наставником, освоив один из востребованных стеков: Java, Python, JavaScript, PHP или Node.js.\u003C\u002Fp\u003E\u003Cp\u003EЭто шанс без вложений освоить новый стек, систематизировать знания, восполнить пробелы и повысить свою ценность на рынке. Технологии развиваются быстро — обновляйте навыки, чтобы не отставать.\u003C\u002Fp\u003E\u003Cp\u003EПомимо грантов, можно выиграть доступ ко всем курсам Хекслета, полезные подписки, сертификаты и подарки от Хабра и партнеров.\u003C\u002Fp\u003E\u003Cp\u003EВ прошлом году три победителя успешно завершили программу и уже работают в IT.  Инвестируйте время в свое развитие — участвуйте! \u003C\u002Fp\u003E","imageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Ff79\u002F1fc\u002F79d\u002Ff791fc79d0d9fdda84397ed0c0717764.png","eventUrl":"https:\u002F\u002Fspecial.hexlet.io\u002Fgrant?utm_source=partners&utm_medium=referral&utm_campaign=grant&utm_content=link&utm_term=placement_habr","startDay":"2025-02-17","finishDay":"2025-03-24","isOnline":true,"geo":[],"isArchive":false,"categories":[{"id":"2","titleHtml":"Разработка"}],"tags":["гранты","конкурс","Хекслет","Java","Python","JavaScript","PHP","Node.js"],"metadata":null},{"id":"596","titleHtml":"Офлайн-конференция Хабр х K-team: как удерживать таланты в 2025 году","descriptionHtml":"\u003Cp\u003EМы — Хабр и K-Team — провели масштабное исследование, чтобы разобраться, что на самом деле мотивирует сотрудников оставаться в компании и быть лояльными\u003C\u002Fp\u003E\u003Cp\u003EВместе прошли по тернистому пути к лояльности, опросив&nbsp;3 000+ сотрудников, HR и руководителей из разных отраслей:&nbsp;от ретейла и логистики до IT и промышленности. Мы заботливо собрали самые разные мнения, чтобы понять, что по-настоящему важно для людей, которые остаются в компании надолго и любят свою работу. \u003C\u002Fp\u003E\u003Cp\u003EНаша цель проста — помочь бизнесу не сливать бюджет на бесполезные инициативы, а сотрудникам — получать то, что им действительно нужно. \u003C\u002Fp\u003E\u003Cp\u003EПриглашаем вас на офлайн-презентацию в Москве в марте. Обсудим результаты исследования, ключевые выводы и разберем, как строить эффективные Retention-стратегии в 2025 году.\u003C\u002Fp\u003E\u003Cp\u003EКоличество мест ограничено, заявки проходят модерацию. Если ваша заявка будет одобрена, вы получите письмо с подтверждением и адресом встречи.\u003C\u002Fp\u003E\u003Cp\u003EЕсли прийти не получится — после ивента отправим результаты исследования всем, кто зарегистрируется на лендинге.\u003C\u002Fp\u003E\u003Cp\u003EМентальное здоровье сотрудников — важная часть корпоративной культуры. В «Ясно для бизнеса» изучают, как забота о команде влияет на вовлечённость и эффективность. Они подготовили гайд о работе с молодыми специалистами, а для теста сервиса есть промокод CORP-HABRTLNT-DISC20 на скидку 20% для первых сессий: https:\u002F\u002Fu.habr.com\u002FPQP4b\u003C\u002Fp\u003E\u003Cp\u003E\u003C\u002Fp\u003E","imageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fb14\u002Fcd3\u002F772\u002Fb14cd3772bc67698c8fbfd846e23824a.png","eventUrl":"https:\u002F\u002Fevent.k-team.ru\u002Fexpectations_vs_reality?utm_source=habr","startDay":"2025-03-20","startTime":"10:00","finishDay":"2025-03-20","finishTime":"17:00","isOnline":false,"geo":["Москва"],"isArchive":false,"categories":[{"id":"16","titleHtml":"Другое"}],"tags":["HR","HRD","Удержание сотрудников"],"metadata":null},{"id":"604","titleHtml":"IX HappyWorkForum | Аутентичность и ментальное здоровье персонала","descriptionHtml":"\u003Cp\u003EБолее 250 HRD, первые лица компаний и владельцы крупного бизнеса обсудят лучшие практики благополучия и управление командой.\u003C\u002Fp\u003E\u003Cp\u003EПочему ментальное здоровье становится KPI бизнеса?\u003C\u002Fp\u003E\u003Cp\u003EГде граница ответственности за выгорание и стресс сотрудников?\u003C\u002Fp\u003E\u003Cp\u003EКак стать работодателем №1?\u003C\u002Fp\u003E\u003Cp\u003EКак управлять уставшими командами?\u003C\u002Fp\u003E\u003Cp\u003EКак справляться с выгоранием руководителей?\u003C\u002Fp\u003E\u003Cp\u003EЧем замотивировать сотрудников, когда деньги уже не работают?&nbsp;&nbsp;\u003C\u002Fp\u003E\u003Cp\u003EКак решать ценностные конфликты?\u003C\u002Fp\u003E\u003Cp\u003EУспешные корпоративные программы: что реально работает?&nbsp;&nbsp;\u003C\u002Fp\u003E\u003Cp\u003EВ программе презентация отчёта по развитию лидерства, батлы, практические кейсы и нетворкинг.\u003C\u002Fp\u003E\u003Cp\u003EСреди спикеров, представители компаний: Т-банк, Сравни.ру, Ростелеком, ТД Ренна, Спортмастер, ТрансТелеком, Оптиком, Норникель, Азбука вкуса, ЕВМ и другие.\u003C\u002Fp\u003E\u003Cp\u003EУчастие для HRD, руководителей и владельцев бизнеса без оплаты. Действует строгая модерация.\u003C\u002Fp\u003E\u003Cp\u003E\u003C\u002Fp\u003E","imageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F733\u002F9ef\u002F194\u002F7339ef1945f3ee6906daf89db79829d4.png","eventUrl":"https:\u002F\u002Fhappyforum.ru\u002F?utm_source=habr&utm_medium=email&utm_campaign=hwf","startDay":"2025-03-20","startTime":"10:00","finishDay":"2025-03-20","finishTime":"18:00","isOnline":true,"geo":["Москва"],"isArchive":false,"categories":[{"id":"16","titleHtml":"Другое"}],"tags":["HRD","HR"],"metadata":null},{"id":"612","titleHtml":"Вебинар «Мастерская бюджета: как управлять затратами на облачные ресурсы»","descriptionHtml":"\u003Cp\u003EРасскажем, как сэкономить на использовании облачных сервисов через возможности личного кабинета, сервисы с free tier и акции. Покажем, как оптимизировать потребление ресурсов и настроить лимиты бюджетов.\u003C\u002Fp\u003E\u003Cp\u003EПрограмма вебинара:\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003EАнализ текущей утилизации ресурсов: поиск ресурсов с низкой утилизацией и анализ возможной оптимизации.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EКалькулятор затрат: демо-настройки параметров для точных прогнозов расходов.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EАнализ детализированных данных: подходы к аналитике, включая метаданные.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EОптимизация потребления: использование зарезервированных инстансов и спотовых экземпляров.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EАнализ бесплатного потребления: как использовать free tier для сокращения затрат.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EНастройка лимитов бюджетов: автоматизация и уведомления для контроля расходов.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EИспользование Public API: тегирование ресурсов для лучшей аналитики затрат.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003EВебинар будет интересен менеджерам облачных ресурсов и IT-департаментов, DevOps-инженерам и сотрудникам, в чью зону ответственности входит контроль над облачными расходами.\u003C\u002Fp\u003E","imageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F38f\u002F10d\u002Ff4c\u002F38f10df4c7f9d7c5d4610fe426af0ab4.png","eventUrl":"https:\u002F\u002Fu.habr.com\u002Fcldr_cloudeventwebinar","startDay":"2025-03-20","startTime":"11:00","finishDay":"2025-03-20","isOnline":true,"geo":[],"isArchive":false,"categories":[{"id":"2","titleHtml":"Разработка"},{"id":"4","titleHtml":"Администрирование"}],"tags":["вебинар cloudru","вебинар для айтишников","вебинар про облака"],"metadata":null},{"id":"616","titleHtml":"Бизнес-конференция «Digital Brand Day 2025: Орбита 2025»","descriptionHtml":"\u003Cp\u003E21 марта конференция «Digital Brand Day 2025: Орбита 2025» в восьмой раз соберёт ведущих экспертов цифрового маркетинга и рекламы для обсуждения главных трендов digital-рынка и новых инструментов, которые определят стратегию брендов.\u003C\u002Fp\u003E\u003Cp\u003EВ основе темы Digital Brand Day 2025 лежит фундаментальный вопрос философии: что первично — материя или сознание? А что же первично в цифровой среде — технологии или идеи? Конференция станет эпицентром открытий, где мы вместе проложим путь сквозь бескрайние просторы рекламного космоса и наметим вектор развития цифрового маркетинга.\u003C\u002Fp\u003E\u003Cp\u003EГостей «Digital Brand Day: Орбита 2025» ждёт не только насыщенная программа, но и возможность завести полезные знакомства, увидеть, каким будет диджитал завтра.\u003C\u002Fp\u003E","imageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F523\u002F7fb\u002F13a\u002F5237fb13ad7fb6fb483c49691aaec836.png","eventUrl":"https:\u002F\u002Fu.habr.com\u002Fcldr_digitalbrandday","startDay":"2025-03-21","startTime":"10:00","isOnline":false,"geo":["Москва"],"isArchive":false,"categories":[{"id":"10","titleHtml":"Маркетинг"},{"id":"16","titleHtml":"Другое"}],"tags":["digital brand day","бизнес-конференция digital brand day","цифровой маркетинг","digital-рынок"],"metadata":null},{"id":"608","titleHtml":"Вебинар «Контент-маркетинг здорового человека: как привлечь внимание аудитории»","descriptionHtml":"\u003Cp\u003E27 марта в 16:00 МСК вместе с агентством Loft PR Studio проведем открытый вебинар о том, как писать про здоровье на Хабре. \u003C\u002Fp\u003E\u003Cp\u003EНа вебинаре разберем, что помогает удерживать внимание и превращает контент в работающий инструмент. Поделимся опытом брендов, которые ведут блоги и регулярно публикуют статьи.\u003C\u002Fp\u003E\u003Cp\u003EБудет интересно тем, кто продвигает товары и услуги для здоровья на аудиторию B2C и B2B. \u003C\u002Fp\u003E\u003Cp\u003E🔗 Участие бесплатное, но нужна предварительная регистрация.\u003C\u002Fp\u003E","imageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F8fd\u002Fe04\u002Fddd\u002F8fde04ddd9ba3f6bcd515aa6209f96b7.png","eventUrl":"https:\u002F\u002Fhabr.timepad.ru\u002Fevent\u002F3266126\u002F?utm_refcode=b5d44b4f1d5f2c06b5696586408b58e610baafd8","startDay":"2025-03-27","startTime":"16:00","finishDay":"2025-03-27","finishTime":"18:00","isOnline":true,"geo":[],"isArchive":false,"categories":[{"id":"10","titleHtml":"Маркетинг"},{"id":"16","titleHtml":"Другое"}],"tags":["Вебинар","Контент","Хабр"],"metadata":null},{"id":"606","titleHtml":"Серия вебинаров «DevOps Middle: AvitoTech vs ecom.tech»","descriptionHtml":"\u003Cp\u003EУчебный центр Слёрм запустил серию бесплатных вебинаров «Честные вакансии: DevOps Middle».\u003C\u002Fp\u003E\u003Cp\u003EДва раза в неделю Вячеслав Федосеев, TeamLead DevOps в «Честном знаке» и автор телеграм-канала «DevOps Bootcamp с Федосеевым» встречается в прямом эфире с экспертами из бигтеха, чтобы обсудить:\u003C\u002Fp\u003E\u003Col\u003E\u003Cli\u003E\u003Cp\u003EКакие задачи должен решать DevOps middle.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EКакими основными и дополнительными инструментами и подходами должен владеть DevOps middle.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EСтоп-факторы на собеседовании.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EКак выглядит рабочий день DevOps middle.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EКакие софт-скилы действительно важны.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Fol\u003E\u003Cp\u003E31 марта состоится встреча с экспертами AvitoTech, 2 апреля — с ecom.tech. Кому подходите вы, а кто — вам? Разберёмся вместе на вебинарах.\u003C\u002Fp\u003E\u003Cp\u003EПодробности — в telegram-боте.\u003C\u002Fp\u003E\u003Cp\u003E\u003C\u002Fp\u003E","imageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fb99\u002F62a\u002Fb24\u002Fb9962ab2439c6edc80f96d7f0a847c72.png","eventUrl":"https:\u002F\u002Fu.habr.com\u002Fcldr_slermdevops","startDay":"2025-03-31","startTime":"17:00","isOnline":true,"geo":[],"isArchive":false,"categories":[{"id":"2","titleHtml":"Разработка"},{"id":"4","titleHtml":"Администрирование"}],"tags":["Вебинар Слерм","Вебинар Devops","Честные вакансии","Слерм","Честные вакансии Devops Middle"],"metadata":null},{"id":"618","titleHtml":"Реалити для разработчиков: узнайте, как строится новое публичное облако MWS","descriptionHtml":"\u003Cp\u003EBuilding the Cloud — это реалити-проект для разработчиков о новом облаке МТС Web Services. Каждый эпизод посвящён отдельному building-блоку новой облачной платформы.\u003C\u002Fp\u003E\u003Cp\u003EВ прямом эфире:\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003EПоказываем архитектуру сервисов облака ещё до релиза.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EДелимся опытом на реальных кейсах из разработки.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EОтвечаем на вопросы в прямом эфире.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003EВ новом выпуске проекта расскажем, как строим underlay-сеть нового облака.\u003C\u002Fp\u003E\u003Cp\u003EВы узнаете:\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003EКак мы поменяли подход к построению underlay-сети в новом облаке MWS.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EКакую архитектуру строим и как реализовали изоляцию management и data plane.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EКак обеспечиваем отказоустойчивость и производительность на уровне физической инфраструктуры.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003EНовый выпуск Building the Cloud будет интересен сетевым инженерам, backend-разработчикам, DevOps- и SRE-инженерам, а также всем, кто интересуется сетевыми или облачными технологиями.\u003C\u002Fp\u003E\u003Cp\u003EРегистрируйтесь по ссылке, подключайтесь к прямому эфиру и задавайте вопросы в чате.\u003C\u002Fp\u003E\u003Cp\u003EЗа самый интересный вопрос подарим фирменный мерч MWS.\u003C\u002Fp\u003E\u003Cp\u003EДо встречи в эфире.\u003C\u002Fp\u003E","imageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Ff76\u002F0f9\u002Fa82\u002Ff760f9a827b851a5eeca4802c643a91d.png","eventUrl":"https:\u002F\u002Fu.habr.com\u002Fcldr_buildingthecloud4","startDay":"2025-04-03","startTime":"11:00","isOnline":true,"geo":[],"isArchive":false,"categories":[{"id":"2","titleHtml":"Разработка"}],"tags":["реалити-проект для разработчиков","Реалити для разработчиков","облако","облако MWS"],"metadata":null},{"id":"620","titleHtml":"Открытая встреча «System Analysis Meetup SberHealth»","descriptionHtml":"\u003Cp\u003EВ программе:\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003EГоргоц Мария, старший системный аналитик, расскажет про описание требований для мобильных приложений.&nbsp;\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EНижник Станислав, ведущий системный аналитик, расскажет про книжный клуб системных аналитиков: «Как мы создали сообщество для обмена знаниями».\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EВ качестве приглашённого спикера Севостьянова Анастасия, ведущий системный аналитик в Альфа-Банке, расскажет про мидл слой без хаоса: «Как сделать документацию понятной и живой».&nbsp;\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003EПосле сессии с докладами проведём профессиональную игру для офлайн-участников «Искусство защиты абсурда».&nbsp;\u003C\u002Fp\u003E\u003Cp\u003EВедущая митапа Пашкова Ольга, руководитель направления методологии и системного анализа в СберЗдоровье.\u003C\u002Fp\u003E","imageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Feba\u002Fc37\u002F879\u002Febac378793b959ebce42f41713e7b67f.jpg","eventUrl":"https:\u002F\u002Fu.habr.com\u002Fcldr_sbermeetup","startDay":"2025-04-03","startTime":"17:00","finishDay":"2025-04-03","finishTime":"23:00","isOnline":true,"geo":["Москва"],"isArchive":false,"categories":[{"id":"12","titleHtml":"Аналитика"}],"tags":["Семинар аналитика","сбер митап","системная аналитика митап","системная аналитика"],"metadata":null},{"id":"590","titleHtml":"«GoCloud 2025» — масштабная IT-конференция про облака и AI","descriptionHtml":"\u003Cp\u003EПоговорим про глобальные тренды в AI, расскажем про широкий набор сценариев работы в облаке, поделимся последними релизами и нашими планами, чтобы показать, какой простор открывают облачные и AI-технологии для бизнеса и разработчиков.\u003C\u002Fp\u003E\u003Cp\u003EЧто ждёт участников в этом году:\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003EТри трека: инфраструктура и инструменты, AI и R&amp;D и сценарии работы в облаке.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003E30+ спикеров из Cloud.ru и ведущих российских компаний.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003ELive-демонстрации облачных платформ и нетворкинг с экспертами.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EНе только доклады: интерактивные зоны, afterparty с музыкальной программой и кастомный мерч.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003EКому будет полезно: техническим лидерам, IT-директорам, бизнес-руководителям, разработчикам, DevOps-инженерам, архитекторам, дата-инженерам, AI\u002FML-инженерам, дата-сайентистам, SRE-инженерам, системным администраторам, специалистам по информационной безопасности.\u003C\u002Fp\u003E\u003Cp\u003EАдрес: Москва, Цифровое деловое пространство (ЦДП), ул. Покровка, 47.\u003C\u002Fp\u003E\u003Cp\u003E\u003C\u002Fp\u003E","imageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F31b\u002Fe68\u002F295\u002F31be6829578e7934fbc944396eb330b1.png","eventUrl":"https:\u002F\u002Fu.habr.com\u002Fcldr_gocloud","startDay":"2025-04-10","startTime":"10:00","finishDay":"2025-04-10","finishTime":"20:00","isOnline":true,"geo":["Москва"],"isArchive":false,"categories":[{"id":"2","titleHtml":"Разработка"},{"id":"4","titleHtml":"Администрирование"},{"id":"8","titleHtml":"Менеджмент"}],"tags":["конференция Cloud.ru","AI","ИИ","айти конференция","облачные хранилища"],"metadata":null},{"id":"516","titleHtml":"IT-конференция Merge Tatarstan 2025","descriptionHtml":"\u003Cp\u003EКрупнейшая региональная IT-конференция России собирает профессионалов со всей страны для нетворкинга, обмена опытом и поиска новых деловых контактов.\u003C\u002Fp\u003E\u003Cp\u003EMerge Tatarstan — это 7 тематических конференций на одной площадке, 2000 участников, более 170 спикеров-практиков, мастер-классы, воркшопы и BoF-сессии.\u003C\u002Fp\u003E\u003Cp\u003EК участию в конференции приглашаются разработчики, QA, тимлиды, Project\u002FProduct-менеджеры, маркетологи, аналитики, UI\u002FUX-дизайнеры, PR-специалисты, HR-менеджеры, владельцы бизнеса и начинающие специалисты.\u003C\u002Fp\u003E\u003Cp\u003E\u003C\u002Fp\u003E","imageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F0e9\u002F3a8\u002F3ec\u002F0e93a83ecea09f806d1df907ddb036a4.jpg","eventUrl":"https:\u002F\u002Fu.habr.com\u002Fcldr_tatarstan","startDay":"2025-04-25","startTime":"09:00","finishDay":"2025-04-26","finishTime":"19:30","isOnline":false,"geo":["Казань"],"isArchive":false,"categories":[{"id":"2","titleHtml":"Разработка"},{"id":"10","titleHtml":"Маркетинг"},{"id":"16","titleHtml":"Другое"}],"tags":["Разработка","IT","PR","UI\u002FUX","бизнес","маркетинг","аналитика"],"metadata":null},{"id":"610","titleHtml":"Летняя айти-тусовка Summer Merge","descriptionHtml":"\u003Cp\u003EЛетняя айти-тусовка возвращается.\u003C\u002Fp\u003E\u003Cp\u003EВырваться из рутины и сменить обстановку на несколько дней можно вместе с Summer Merge.&nbsp;\u003C\u002Fp\u003E\u003Cp\u003EСосновый лес, чистый воздух, живое общение с экспертами IT, спортивные состязания, мастер-классы, квесты, встречи с друзьями, новые знакомства, afterparty — забудьте про суету города и окунитесь в приятную атмосферу digital detox. В эти летние IT-выходные мы обещаем атмосферу ярких приключений.&nbsp;\u003C\u002Fp\u003E\u003Cp\u003EЖдём вас 20—22 июня в экопарке «Русский берег» на Summer Merge.\u003C\u002Fp\u003E","imageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F652\u002F12d\u002F998\u002F65212d998fb4939d9787bd9c726d2acb.png","eventUrl":"https:\u002F\u002Fu.habr.com\u002Fcldr_summermerge","startDay":"2025-06-20","finishDay":"2025-06-22","isOnline":false,"geo":["Ульяновская область"],"isArchive":false,"categories":[{"id":"2","titleHtml":"Разработка"},{"id":"16","titleHtml":"Другое"}],"tags":["летняя айти-тусовка","айти-кэмп","летний выезд для айтишников","Summer Merge"],"metadata":null}],"currentEvent":null,"eventsFilter":{"city":"all","timeStarted":null,"timeEnded":null}},"wysiwyg":{"WYSIWYGRulesRefs":null}};(function(){var s;(s=document.currentScript||document.scripts[document.scripts.length-1]).parentNode.removeChild(s);}());</script><script src="https://assets.habr.com/habr-web/js/chunk-vendors.3b11d41f.js" defer></script><script src="https://assets.habr.com/habr-web/js/app.7a97ea6d.js" defer></script></div>
    <div id="overlays"><!----><!--teleport anchor--><!----><!--teleport anchor--><!----><!--teleport anchor--><!----><!--teleport anchor--><!----><!--teleport anchor--><!----><!--teleport anchor--></div>
    
    
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-S28W1WC23F"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());
    </script>
  
  <script type="text/javascript" >
    (function(m,e,t,r,i,k,a){m[i]=m[i]||function(){(m[i].a=m[i].a||[]).push(arguments)};
    m[i].l=1*new Date();k=e.createElement(t),a=e.getElementsByTagName(t)[0],k.async=1,k.src=r,a.parentNode.insertBefore(k,a)})
    (window, document, "script", "https://mc.yandex.ru/metrika/tag.js", "ym");

  </script>
    <script type="text/javascript">
      window.addEventListener('load', function () {
        setTimeout(() => {
          const img = new Image();
          img.src = 'https://vk.com/rtrg?p=VK-RTRG-421343-57vKE';
        }, 0);
      });
    </script>
  
    </body>

    </html>
