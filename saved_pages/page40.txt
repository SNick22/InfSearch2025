<!DOCTYPE html>
<html lang="ru">

  <head>
    <title>Kotlin, компиляция в байткод и производительность (часть 2) &#x2F; Хабр</title>
<meta property="fb:app_id" content="444736788986613">
<meta property="fb:pages" content="472597926099084">
<meta name="twitter:card" content="summary_large_image">
<meta name="twitter:site" content="@habr_com">
<meta property="og:site_name" content="Хабр">
<link href="https://habr.com/ru/rss/post/330064/?fl=ru" type="application/rss+xml" title rel="alternate" name="rss">
<link href="https://habr.com/ru/companies/inforion/articles/330064/" rel="canonical" data-hid="e3fa780">
<link rel="image_src" href="https://habr.com/share/publication/330064/4719dc532575c3ca3880bf6ab8268a81/" data-hid="2a79c45">
<meta property="og:title" content="Kotlin, компиляция в байткод и производительность (часть 2)">
<meta name="twitter:title" content="Kotlin, компиляция в байткод и производительность (часть 2)">
<meta name="aiturec:title" content="Kotlin, компиляция в байткод и производительность (часть 2)">
<meta name="description" content="Это продолжение публикации. Первую часть можно посмотреть тут Содержание: Циклы When Делегаты Object и companion object lateinit свойства coroutines Выводы Циклы: В языке Kotlin отсутствует...">
<meta itemprop="description" content="Это продолжение публикации. Первую часть можно посмотреть тут Содержание: Циклы When Делегаты Object и companion object lateinit свойства coroutines Выводы Циклы: В языке Kotlin отсутствует...">
<meta property="og:description" content="Это продолжение публикации. Первую часть можно посмотреть тут Содержание: Циклы When Делегаты Object и companion object lateinit свойства coroutines Выводы Циклы: В языке Kotlin отсутствует...">
<meta name="twitter:description" content="Это продолжение публикации. Первую часть можно посмотреть тут Содержание: Циклы When Делегаты Object и companion object lateinit свойства coroutines Выводы Циклы: В языке Kotlin отсутствует...">
<meta property="aiturec:description" content="Это продолжение публикации. Первую часть можно посмотреть тут Содержание: Циклы When Делегаты Object и companion object lateinit свойства coroutines Выводы Циклы: В языке Kotlin отсутствует...">
<meta itemprop="image" content="https://habr.com/share/publication/330064/4719dc532575c3ca3880bf6ab8268a81/">
<meta property="og:image" content="https://habr.com/share/publication/330064/4719dc532575c3ca3880bf6ab8268a81/">
<meta property="og:image:width" content="1200">
<meta property="og:image:height" content="630">
<meta property="aiturec:image" content="https://habr.com/share/publication/330064/4719dc532575c3ca3880bf6ab8268a81/">
<meta name="twitter:image" content="https://habr.com/share/publication/330064/4719dc532575c3ca3880bf6ab8268a81/">
<meta property="vk:image" content="https://habr.com/share/publication/330064/4719dc532575c3ca3880bf6ab8268a81/?format=vk">
<meta property="vk:image" content="https://habr.com/share/publication/330064/4719dc532575c3ca3880bf6ab8268a81/?format=vk?format=vk">
<meta property="aiturec:item_id" content="330064">
<meta property="aiturec:datetime" content="2017-06-02T10:10:06.000Z">
<meta content="https://habr.com/ru/companies/inforion/articles/330064/" property="og:url">
<meta property="og:type" content="article">
<meta property="og:locale" content="ru_RU">
<meta property="og:image:width" content="1200">
<meta property="og:image:height" content="630">
<meta name="keywords" content="java, kotlin, разработка, программирование, байткод">
<script type="application/ld+json" data-hid="1e0f0a2">{"@context":"http:\/\/schema.org","@type":"Article","mainEntityOfPage":{"@type":"WebPage","@id":"https:\/\/habr.com\/ru\/companies\/inforion\/articles\/330064\/"},"headline":"Kotlin, компиляция в байткод и производительность (часть 2)","datePublished":"2017-06-02T13:10:06+03:00","dateModified":"2017-06-02T16:45:11+03:00","author":{"@type":"Person","name":"Nerumb"},"publisher":{"@type":"Organization","name":"Habr","logo":{"@type":"ImageObject","url":"https:\/\/habrastorage.org\/webt\/a_\/lk\/9m\/a_lk9mjkccjox-zccjrpfolmkmq.png"}},"description":"Это продолжение публикации. Первую часть можно посмотреть тут   Содержание: Циклы When Делегаты Object и companion object lateinit свойства coroutines Выводы...","url":"https:\/\/habr.com\/ru\/companies\/inforion\/articles\/330064\/#post-content-body","about":["c_inforion","h_java","h_kotlin","h_compilers","h_programming","f_develop"],"image":["https:\/\/habrastorage.org\/web\/3af\/e51\/f5a\/3afe51f5a54a4ce583d5665dfb4d06c3.png","https:\/\/habrastorage.org\/web\/3a3\/b67\/b5b\/3a3b67b5bb2b43fd84f2fc6010a9ae06.png","https:\/\/habrastorage.org\/web\/98c\/395\/ff6\/98c395ff6ef941069dab59860b1f1d1d.png"]}</script>
    <meta charset="UTF-8">
    <meta name="viewport"
      content="width=device-width,initial-scale=1.0,viewport-fit=cover,maximum-scale=1,user-scalable=0">
    <meta name="referrer" content="unsafe-url">
    <style>
      /* cyrillic-ext */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 400;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9E4kDNxMZdWfMOD5VvmojLazX3dGTP.woff2) format('woff2');
        unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;
      }

      /* cyrillic */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 400;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9E4kDNxMZdWfMOD5Vvk4jLazX3dGTP.woff2) format('woff2');
        unicode-range: U+0301, U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;
      }

      /* latin-ext */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 400;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9E4kDNxMZdWfMOD5VvmYjLazX3dGTP.woff2) format('woff2');
        unicode-range: U+0100-02AF, U+0304, U+0308, U+0329, U+1E00-1E9F, U+1EF2-1EFF, U+2020, U+20A0-20AB, U+20AD-20C0, U+2113, U+2C60-2C7F, U+A720-A7FF;
      }

      /* latin */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 400;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9E4kDNxMZdWfMOD5Vvl4jLazX3dA.woff2) format('woff2');
        unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+0304, U+0308, U+0329, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
      }

      /* cyrillic-ext */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 500;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnZKveSxf6Xl7Gl3LX.woff2) format('woff2');
        unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;
      }

      /* cyrillic */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 500;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnZKveQhf6Xl7Gl3LX.woff2) format('woff2');
        unicode-range: U+0301, U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;
      }

      /* latin-ext */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 500;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnZKveSBf6Xl7Gl3LX.woff2) format('woff2');
        unicode-range: U+0100-02AF, U+0304, U+0308, U+0329, U+1E00-1E9F, U+1EF2-1EFF, U+2020, U+20A0-20AB, U+20AD-20C0, U+2113, U+2C60-2C7F, U+A720-A7FF;
      }

      /* latin */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 500;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnZKveRhf6Xl7Glw.woff2) format('woff2');
        unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+0304, U+0308, U+0329, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
      }

      /* cyrillic-ext */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 700;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnLK3eSxf6Xl7Gl3LX.woff2) format('woff2');
        unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;
      }

      /* cyrillic */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 700;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnLK3eQhf6Xl7Gl3LX.woff2) format('woff2');
        unicode-range: U+0301, U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;
      }

      /* latin-ext */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 700;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnLK3eSBf6Xl7Gl3LX.woff2) format('woff2');
        unicode-range: U+0100-02AF, U+0304, U+0308, U+0329, U+1E00-1E9F, U+1EF2-1EFF, U+2020, U+20A0-20AB, U+20AD-20C0, U+2113, U+2C60-2C7F, U+A720-A7FF;
      }

      /* latin */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 700;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnLK3eRhf6Xl7Glw.woff2) format('woff2');
        unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+0304, U+0308, U+0329, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
      }
    </style>
    <link rel="preload" href="https://assets.habr.com/habr-web/css/theme/light-v1.css" as="style" media="(prefers-color-scheme: light)" /><link rel="preload" href="https://assets.habr.com/habr-web/css/theme/dark-v1.css" as="style" media="(prefers-color-scheme: dark)" /><link id="light-colors" rel="stylesheet" href="https://assets.habr.com/habr-web/css/theme/light-v1.css" media="(prefers-color-scheme: light)" /><link id="dark-colors" rel="stylesheet" href="https://assets.habr.com/habr-web/css/theme/dark-v1.css" media="(prefers-color-scheme: dark)" />
    <script>window.i18nFetch = new Promise((res, rej) => {
          const xhr = new XMLHttpRequest();
          xhr.open('GET', '/js/i18n/ru-compiled.35b2fec11bb79a62419ab67779c2dd82.json');
          xhr.responseType = 'json';
          xhr.onload = function(e) {
            if (this.status === 200) {
              res({ru: xhr.response});
            } else {
              rej(e);
            }
          };
          xhr.send();
        });</script>
    <style>
      .grecaptcha-badge {
        visibility: hidden;
      }
    </style>
    <meta name="habr-version" content="2.233.0">
    
    <meta name="apple-mobile-web-app-status-bar-style" content="#303b44">
    <meta name="msapplication-TileColor" content="#629FBC">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="mobile-web-app-capable" content="yes">
    <link rel="shortcut icon" type="image/png" sizes="16x16" href="https://assets.habr.com/habr-web/img/favicons/favicon-16.png">
    <link rel="shortcut icon" type="image/png" sizes="32x32" href="https://assets.habr.com/habr-web/img/favicons/favicon-32.png">
    <link rel="apple-touch-icon" type="image/png" sizes="76x76" href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-76.png">
    <link rel="apple-touch-icon" type="image/png" sizes="120x120" href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-120.png">
    <link rel="apple-touch-icon" type="image/png" sizes="152x152" href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-152.png">
    <link rel="apple-touch-icon" type="image/png" sizes="180x180" href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-180.png">
    <link rel="apple-touch-icon" type="image/png" sizes="256x256" href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-256.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 320px) and (device-height: 568px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1136x640.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 375px) and (device-height: 812px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2436x1125.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1792x828.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_828x1792.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 375px) and (device-height: 667px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1334x750.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1242x2668.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 414px) and (device-height: 736px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2208x1242.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 375px) and (device-height: 812px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1125x2436.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 414px) and (device-height: 736px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1242x2208.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 1024px) and (device-height: 1366px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2732x2048.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2688x1242.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 834px) and (device-height: 1112px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2224x1668.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 375px) and (device-height: 667px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_750x1334.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 1024px) and (device-height: 1366px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2048x2732.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 834px) and (device-height: 1194px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2388x1668.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 834px) and (device-height: 1112px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1668x2224.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 320px) and (device-height: 568px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_640x1136.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 834px) and (device-height: 1194px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1668x2388.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 768px) and (device-height: 1024px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2048x1536.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 768px) and (device-height: 1024px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1536x2048.png">
    <link rel="mask-icon" color="#77a2b6" href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-120.svg">
    <link crossorigin="use-credentials" href="/manifest.webmanifest" rel="manifest">
    <script async src="https://unpkg.com/pwacompat" crossorigin="anonymous"></script>
    <script>window.yaContextCb = window.yaContextCb || []</script>
    <script src="https://yandex.ru/ads/system/context.js" async></script>
  <link rel="preload" href="https://assets.habr.com/habr-web/css/chunk-vendors.04465f7c.css" as="style"><link rel="preload" href="https://assets.habr.com/habr-web/js/chunk-vendors.3b11d41f.js" as="script"><link rel="preload" href="https://assets.habr.com/habr-web/css/app.20959a76.css" as="style"><link rel="preload" href="https://assets.habr.com/habr-web/js/app.7a97ea6d.js" as="script"><link rel="stylesheet" href="https://assets.habr.com/habr-web/css/chunk-vendors.04465f7c.css"><link rel="stylesheet" href="https://assets.habr.com/habr-web/css/app.20959a76.css"></head>
  <body>
    
    <div id="mount"><div id="app" data-async-called="true"><div class="tm-layout__wrapper"><!--[--><!----><div></div><div class="tm-feature tm-feature"><!----></div><header class="tm-header" data-test-id="header"><div class="tm-page-width"><!--[--><div class="tm-header__container"><div class="tm-header__burger-nav" data-test-id="burger-nav"><button class="tm-header__button tm-header__button_burger" type="button"><svg class="tm-svg-img tm-header__icon tm-header__icon-burger" height="16" width="16"><title>Меню</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#header-burger"></use></svg></button></div><span class="tm-header__logo-wrap"><a class="tm-header__logo tm-header__logo_hl-ru tm-header__logo" href="/ru/"><svg class="tm-svg-img tm-header__icon" height="16" width="16"><title>Хабр</title><use xlink:href="/img/habr-logo-ru.svg#logo"></use></svg></a><span style="display:none;" class="tm-header__beta-sign">β</span></span><!----><div class="tm-header-user-menu tm-header_user-menu"><a href="/ru/search/" class="tm-header-user-menu__item tm-header-user-menu__search" data-test-id="search-button"><svg class="tm-svg-img tm-header-user-menu__icon tm-header-user-menu__icon_search" height="24" width="24"><title>Поиск</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#search"></use></svg></a><!----><!----><div class="tm-header-user-menu__item tm-header-user-menu__write"><div><svg class="tm-svg-img tm-header-user-menu__icon tm-header-user-menu__icon_write" height="24" width="24"><title>Написать публикацию</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#write"></use></svg></div><!----></div><!--[--><div class="tm-header-user-menu__item"><button class="tm-header-user-menu__toggle" data-test-id="user-menu-settings"><svg class="tm-svg-img tm-header-user-menu__icon" height="24" width="24"><title>Настройки</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#page-settings"></use></svg></button></div><a href="https://habr.com/kek/v1/auth/habrahabr/?back=/ru/companies/inforion/articles/330064/&amp;hl=ru" rel="nofollow" class="tm-header-user-menu__item"><!--[--><button class="btn btn_solid btn_small tm-header-user-menu__login" type="button"><!--[-->Войти<!--]--></button><!--]--></a><!--]--><!----><!--teleport start--><!--teleport end--><!----></div></div><!--]--></div></header><div class="tm-layout"><div class="tm-page-progress-bar"></div><!----><!----><div class="tm-page-width"><!--[--><!--]--></div><main class="tm-layout__container"><div class="tm-page" hl="ru" companyname="inforion" data-async-called="true" style="--0c809c5a:16px;--a086013e:100%;--7c457026:0;"><div class="tm-page-width"><!--[--><div class="tm-page__header"><!--[--><!--]--></div><div class="tm-page__wrapper"><div class="tm-page__main_has-sidebar tm-page__main"><div class="pull-down"><!----><div class="pull-down__header" style="height:0px;"><div class="pull-down__content" style="bottom:10px;"><svg class="tm-svg-img pull-down__icon pull-down__arrow" height="24" width="24"><title>Обновить</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#pull-arrow"></use></svg></div></div><!--[--><!--[--><div class="tm-article-presenter"><!--[--><!--[--><div class="banner-wrapper narrow" style="--467224fc:100px;--58ff5eba:auto;" data-v-ad758baa><!--[--><div class="placeholder-wrapper placeholder" data-v-ad758baa><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><div class="adfox-banner-placeholder narrow" data-v-12f7bcca><div class="image loads" data-v-12f7bcca></div><div class="lines" data-v-12f7bcca><div class="line loads" data-v-12f7bcca></div><div class="line loads" data-v-12f7bcca></div><div class="line loads" data-v-12f7bcca></div></div></div><!----></div><div id="adfox_169815559787254866" class="tm-adfox-banner" data-v-ad758baa></div><!--]--></div><!----><!----><!--]--><!--]--><div class="tm-article-presenter__body" data-test-id="article-body"><div class="tm-misprint-area"><div class="tm-misprint-area__wrapper"><!--[--><article class="tm-article-presenter__content tm-article-presenter__content_narrow"><!--[--><div class="tm-article-presenter__header"><!--[--><!--]--><div class="tm-article-snippet tm-article-snippet tm-article-presenter__snippet"><!--[--><!--]--><div class="tm-article-snippet__meta-container"><div class="tm-article-snippet__meta"><span class="tm-user-info tm-article-snippet__author"><a href="/ru/users/nerumb/" class="tm-user-info__userpic" data-test-id="user-info-pic" title="nerumb"><div class="tm-entity-image"><img alt="" class="tm-entity-image__pic" height="32" src="//habrastorage.org/r/w64/getpro/habr/avatars/a97/bea/92d/a97bea92d70b5a05f5321c690e05331d.png" width="32"></div></a><span class="tm-user-info__user tm-user-info__user_appearance-default" data-test-id="user-info-description"><a href="/ru/users/nerumb/" class="tm-user-info__username">nerumb <!----></a><!--[--><span class="tm-article-datetime-published"><time datetime="2017-06-02T10:10:06.000Z" title="2017-06-02, 13:10">2  июн  2017 в 13:10</time></span><!--]--></span></span></div><!----></div><h1 class="tm-title tm-title_h1" lang="ru" data-test-id="articleTitle"><span>Kotlin, компиляция в байткод и производительность (часть 2)</span></h1><div class="tm-article-snippet__stats" data-test-id="articleStats"><!----><div class="tm-article-reading-time"><span class="tm-svg-icon__wrapper tm-article-reading-time__icon"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Время на прочтение</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#clock"></use></svg></span><span class="tm-article-reading-time__label">11 мин</span></div><span class="tm-icon-counter tm-data-icons__item"><svg class="tm-svg-img tm-icon-counter__icon" height="24" width="24"><title>Количество просмотров</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-views"></use></svg><span class="tm-icon-counter__value" title="25945">26K</span></span></div><div class="tm-publication-hubs__container" data-test-id="articleHubsList"><div class="tm-publication-hubs"><!--[--><span class="tm-publication-hub__link-container"><a href="/ru/companies/inforion/articles/" class="tm-publication-hub__link"><!--[--><span>Блог компании ИНФОРИОН</span><!----><!--]--></a></span><span class="tm-publication-hub__link-container"><a href="/ru/hubs/java/" class="tm-publication-hub__link"><!--[--><span>Java</span><span class="tm-article-snippet__profiled-hub" title="Профильный хаб">*</span><!--]--></a></span><span class="tm-publication-hub__link-container"><a href="/ru/hubs/kotlin/" class="tm-publication-hub__link"><!--[--><span>Kotlin</span><span class="tm-article-snippet__profiled-hub" title="Профильный хаб">*</span><!--]--></a></span><span class="tm-publication-hub__link-container"><a href="/ru/hubs/compilers/" class="tm-publication-hub__link"><!--[--><span>Компиляторы</span><span class="tm-article-snippet__profiled-hub" title="Профильный хаб">*</span><!--]--></a></span><span class="tm-publication-hub__link-container"><a href="/ru/hubs/programming/" class="tm-publication-hub__link"><!--[--><span>Программирование</span><span class="tm-article-snippet__profiled-hub" title="Профильный хаб">*</span><!--]--></a></span><!--]--></div></div><!----><!----><!----></div></div><!--[--><!----><div class="tm-article-body" data-gallery-root lang="ru"><div><!--[--><!--]--></div><div id="post-content-body"><div><div class="article-formatted-body article-formatted-body article-formatted-body_version-1"><div xmlns="http://www.w3.org/1999/xhtml"><img src="https://habrastorage.org/r/w1560/web/3af/e51/f5a/3afe51f5a54a4ce583d5665dfb4d06c3.png" data-src="https://habrastorage.org/web/3af/e51/f5a/3afe51f5a54a4ce583d5665dfb4d06c3.png"/><br/>
<br/>
Это продолжение публикации. Первую часть можно посмотреть <a href="https://habrahabr.ru/company/inforion/blog/330060/">тут</a> <br/>
<br/>
<h2>Содержание:</h2><br/>
<a href="https://habrahabr.ru/company/inforion/blog/330064/#P1">Циклы</a><br/>
<a href="https://habrahabr.ru/company/inforion/blog/330064/#P2">When</a><br/>
<a href="https://habrahabr.ru/company/inforion/blog/330064/#P3">Делегаты</a><br/>
<a href="https://habrahabr.ru/company/inforion/blog/330064/#P4">Object и companion object</a><br/>
<a href="https://habrahabr.ru/company/inforion/blog/330064/#P5">lateinit свойства</a><br/>
<a href="https://habrahabr.ru/company/inforion/blog/330064/#P6">coroutines</a><br/>
<a href="https://habrahabr.ru/company/inforion/blog/330064/#P7">Выводы</a><br/>
<a name="habracut"></a><br/>
<h2>Циклы:</h2><a name="P1"></a><br/>
В языке Kotlin отсутствует классический for с тремя частями, как в Java. Кому-то это может показаться проблемой, но если подробнее посмотреть все случаи использования такого цикла, то можно увидеть, что по большей части он применяется как раз для перебора значений. На смену ему в Kotlin есть упрощенная конструкция.<br/>
<br/>
<pre><code>//Kotlin
fun rangeLoop() {
    for (i in 1..10) {
        println(i)
    }
}
</code></pre><br/>
1..10 тут это диапазон по которому происходит итерация. Компилятор Kotlin достаточно умный, он понимает что мы собираемся в данном случае делать и поэтому убирает весь лишний оверхед. Код компилируется в обычный цикл while с переменной счетчика цикла. Никаких итераторов, никакого оверхеда, все достаточно компактно. <br/>
<br/>
<pre><code>//Java
public static final void rangeLoop() {
      int i = 1;
      byte var1 = 10;
      if(i &lt;= var1) {
         while(true) {
            System.out.println(i);
            if(i == var1) {
               break;
            }
 
            ++i;
         }
      }
 
 }
</code></pre><br/>
Похожий цикл по массиву (который в Kotlin записывается в виде Array&lt;*&gt;), компилируется аналогичным образом в цикл for.<br/>
<br/>
<pre><code>//Kotlin
fun arrayLoop(x: Array&lt;String&gt;) {
    for (s in x) {
        println(s)
    }
}
</code></pre><br/>
<pre><code class="java">//Java
public static final void arrayLoop(@NotNull String[] x) {
      Intrinsics.checkParameterIsNotNull(x, "x");
 
      for(int var2 = 0; var2 &lt; x.length; ++var2) {
         String s = x[var2];
         System.out.println(s);
      }
 
 }
</code></pre><br/>
Немного другая ситуация возникает, когда происходит перебор элементов из списка:<br/>
<br/>
<pre><code>//Kotlin
fun listLoop(x: List&lt;String&gt;) {
    for (s in x) {
        println(s)
    }
}
</code></pre><br/>
В этом случае приходится использовать итератор:<br/>
<br/>
<pre><code class="java">//Java
public static final void listLoop(@NotNull List x) {
      Intrinsics.checkParameterIsNotNull(x, "x");
      Iterator var2 = x.iterator();
 
      while(var2.hasNext()) {
         String s = (String)var2.next();
         System.out.println(s);
      }
 
 }
</code></pre><br/>
Таким образом, в зависимости от того по каким элементам происходит перебор, компилятор Kotlin сам выбирает самый эффективный способ преобразовать цикл в байткод.<br/>
<br/>
Ниже приведено сравнение производительности для циклов с аналогичными решениями в Java:<br/>
<br/>
<h4>Циклы</h4><br/>
<img src="https://habrastorage.org/r/w1560/web/3a3/b67/b5b/3a3b67b5bb2b43fd84f2fc6010a9ae06.png" data-src="https://habrastorage.org/web/3a3/b67/b5b/3a3b67b5bb2b43fd84f2fc6010a9ae06.png"/><br/>
<br/>
Как видно разница между Kotlin и Java минимальна. Байткод получается очень близким к тому что генерирует javac. По словам разработчиков они еще планируют улучшить это в следующих версиях Kotlin, чтобы результирующий байткод был максимально близок к тем паттернам, которые генерирует javac.<br/>
<br/>
<h2>When</h2><a name="P2"></a><br/>
When — это аналог switch из Java, только с большей функциональностью. Рассмотрим ниже несколько примеров и то, во что они компилируются:<br/>
<br/>
<pre><code>/Kotlin
fun tableWhen(x: Int): String = when(x) {
    0 -&gt; "zero"
    1 -&gt; "one"
    else -&gt; "many"
}
</code></pre><br/>
Для такого простого случая результирующий код компилируется в обычный switch, тут никакой магии не происходит: <br/>
<br/>
<pre><code class="java">//Java
public static final String tableWhen(int x) {
      String var10000;
      switch(x) {
      case 0:
         var10000 = "zero";
         break;
      case 1:
         var10000 = "one";
         break;
      default:
         var10000 = "many";
      }
 
      return var10000;
}
</code></pre><br/>
Если же немного изменить пример выше, и добавить константы:<br/>
<br/>
<pre><code>//Kotlin 
val ZERO = 1
val ONE = 1
 
fun constWhen(x: Int): String = when(x) {
    ZERO -&gt; "zero"
    ONE -&gt; "one"
    else -&gt; "many"
}
</code></pre><br/>
То код в этом случае уже компилируется в следующий вид:<br/>
<br/>
<pre><code>//Java
public static final String constWhen(int x) {
      return x == ZERO?"zero":(x == ONE?"one":"many");
}
</code></pre><br/>
Это происходит потому, что на данный момент компилятор Kotlin не понимает, что значения являются константами, и вместо преобразования к switch, код преобразуется к набору сравнений. Поэтому вместо константного времени происходит переход к линейному (в зависимости от количества сравнений). По словам разработчиков языка, в будущем это может быть легко исправлено, но в текущей версии это пока так. <br/>
<br/>
Существует также возможность использовать модификатор const для констант, известных на момент компиляции.<br/>
<pre><code>//Kotlin (файл When2.kt)
const val ZERO = 1
const val ONE = 1
 
fun constWhen(x: Int): String = when(x) {
    ZERO -&gt; "zero"
    ONE -&gt; "one"
    else -&gt; "many"
}
</code></pre><br/>
Тогда в этом случае компилятор уже правильно оптимизирует when:<br/>
<pre><code class="java">public final class When2Kt {
   public static final int ZERO = 1;
   public static final int ONE = 2;

   @NotNull
   public static final String constWhen(int x) {
      String var10000;
      switch(x) {
      case 1:
         var10000 = "zero";
         break;
      case 2:
         var10000 = "one";
         break;
      default:
         var10000 = "many";
      }

      return var10000;
   }
}
</code></pre><br/>
Если же заменить константы на Enum:<br/>
<br/>
<pre><code>//Kotlin (файл When3.kt)
enum class NumberValue {
    ZERO, ONE, MANY
}
 
fun enumWhen(x: NumberValue): String = when(x) {
    NumberValue.ZERO -&gt; "zero"
    NumberValue.ONE -&gt; "one"
    NumberValue.MANY -&gt; "many"
}
</code></pre><br/>
То код, также как в первом случае, будет компилироваться в switch (практический такой же как в случае перебора enum в Java). <br/>
<br/>
<pre><code class="java">//Java
public final class When3Kt$WhenMappings {
   // $FF: synthetic field
   public static final int[] $EnumSwitchMapping$0 = new int[NumberValue.values().length];
 
   static {
      $EnumSwitchMapping$0[NumberValue.ZERO.ordinal()] = 1;
      $EnumSwitchMapping$0[NumberValue.ONE.ordinal()] = 2;
      $EnumSwitchMapping$0[NumberValue.MANY.ordinal()] = 3;
   }
}


public static final String enumWhen(@NotNull NumberValue x) {
      Intrinsics.checkParameterIsNotNull(x, "x");
      String var10000;
      switch(When3Kt$WhenMappings.$EnumSwitchMapping$0[x.ordinal()]) {
      case 1:
         var10000 = "zero";
         break;
      case 2:
         var10000 = "one";
         break;
      case 3:
         var10000 = "many";
         break;
      default:
         throw new NoWhenBranchMatchedException();
      }
 
      return var10000;
}
</code></pre><br/>
По ordinal номеру элемента определяется номер ветки в switch, по которому далее и происходит выбор нужной ветви. <br/>
<br/>
Посмотрим на сравнение производительности решений на Kotlin и Java: <br/>
<br/>
<h4>When</h4><br/>
<img src="https://habrastorage.org/r/w1560/web/98c/395/ff6/98c395ff6ef941069dab59860b1f1d1d.png" data-src="https://habrastorage.org/web/98c/395/ff6/98c395ff6ef941069dab59860b1f1d1d.png"/><br/>
<br/>
Как видно простой switch работает точно также. В случае, когда компилятор Kotlin не смог определить что переменные константы и перешел к сравнениям, Java работает чуть быстрее. И в ситуации, когда перебираем значения enum, также есть небольшая потеря на возню с определением ветви по значению ordinal. Но все эти недостатки будут исправлены в будущих версиях, и к тому же потеря в производительности не очень большая, а в критичных местах можно переписать код на другой вариант. Вполне разумная цена за удобство использования. <br/>
<br/>
<h2>Делегаты</h2><a name="P3"></a><br/>
Делегирование — это хорошая альтернатива наследованию, и Kotlin поддерживает его прямо из коробки. Рассмотрим простой пример с делегированием класса:<br/>
<br/>
<pre><code>//Kotlin
package examples
 
interface Base {
    fun print()
}
 
class BaseImpl(val x: Int) : Base {
    override fun print() { print(x) }
}
 
class Derived(b: Base) : Base by b {
    fun anotherMethod(): Unit {}
}
</code></pre><br/>
Класс Derived в конструкторе получает экземпляр класса, реализующий интерфейс Base, и в свою очередь делегирует реализацию всех методов интерфейса Base к передаваемому экземпляру. Декомпилированный код класса Derived будет выглядеть следующим образом:<br/>
<br/>
<pre><code class="java">public final class Derived implements Base {
   private final Base $$delegate_0;
 
   public Derived(@NotNull Base b) {
      Intrinsics.checkParameterIsNotNull(b, "b");
      super();
      this.$$delegate_0 = b;
   }
 
   public void print() {
      this.$$delegate_0.print();
   }

   public final void anotherMethod() {
   }
}
</code></pre><br/>
В конструктор класса передается экземпляр класса, который запоминается в неизменяемом внутреннем поле. Также переопределяется метод print интерфейса Base, в котором просто происходит вызов метода из делегата. Все достаточно просто. <br/>
 <br/>
Существует также возможность делегировать не только реализацию всего класса, но и отдельных его свойств (а с версии 1.1 еще возможно делегировать инициализацию в локальных переменных).<br/>
<br/>
Код на Kotlin:<br/>
<br/>
<pre><code>//Kotlin
class DeleteExample {
    val name: String by Delegate()
}
</code></pre><br/>
Компилируется в код:<br/>
<br/>
<pre><code class="java">public final class DeleteExample {
   @NotNull
   private final Delegate name$delegate = new Delegate();
 
  static final KProperty[] $$delegatedProperties = new KProperty[]{(KProperty)Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(DeleteExample.class), "name", "getName()Ljava/lang/String;"))};
 
   @NotNull
   public final String getName() {
      return this.name$delegate.getValue(this, $$delegatedProperties[0]);
   }
}
</code></pre><br/>
При инициализации класса DeleteExample создается экземпляр класса Delegate, сохраняемый в поле name$delegate. И далее вызов функции getName переадресовывается к вызову функции getValue из name$delegate. <br/>
 <br/>
В Kotlin есть уже несколько стандартных делегатов:<br/>
<br/>
 — lazy, для ленивых вычислений значения поля.<br/>
 — observable, который позволяет получать уведомления обо всех изменения значения поля<br/>
 — map, используемый для инициализации значений поля из значений Map. <br/>
<br/>
<h2>Object и companion object</h2><a name="P4"></a><br/>
В Kotlin нет модификатора static для методов и полей. Вместо них, по большей части, рекомендуется использовать функции на уровне файла. Если же нужно объявить функции, которые можно вызывать без экземпляра класса, то для этого есть object и companion object. Рассмотрим на примерах как они выглядят в байткоде:<br/>
 <br/>
Простое объявление object с одним методом выглядит следующим образом:<br/>
<br/>
<pre><code>//Kotlin
object ObjectExample {
    fun objectFun(): Int {
        return 1
    }
}
</code></pre><br/>
В коде дальше можно обращаться к методу objectFun без создания экземпляра ObjectExample. Код компилируется в практически каноничный синглтон:<br/>
<br/>
<pre><code class="java">public final class ObjectExample {
   public static final ObjectExample INSTANCE;
 
   public final int objectFun() {
      return 1;
   }
 
   private ObjectExample() {
      INSTANCE = (ObjectExample)this;
   }
 
   static {
      new ObjectExample();
   }
}
</code></pre><br/>
И место вызова:<br/>
<br/>
<pre><code>//Kotlin
val value = ObjectExample.objectFun()
</code></pre><br/>
Компилируется к вызову INSTANCE:<br/>
<br/>
<pre><code>//Java
int value = ObjectExample.INSTANCE.objectFun();
</code></pre><br/>
companion object используется для создания аналогичных методов только уже в классе, для которого предполагается создание экземпляров. <br/>
<br/>
<pre><code>//Kotlin
class ClassWithCompanion {
    val name: String = "Kurt"
    
    companion object {
        fun companionFun(): Int = 5
    }
}

//method call
ClassWithCompanion.companionFun()
</code></pre><br/>
Обращение к методу companionFun также не требует создания экземпляра класса, и в Kotlin будет выглядеть как простое обращение к статическому методу. Но на самом деле происходит обращение к компаньону класса. Посмотрим декомпилированный код:<br/>
<br/>
<pre><code class="java">//Java
public final class ClassWithCompanion {
   @NotNull
   private final String name = "Kurt";
   public static final ClassWithCompanion.Companion Companion = new ClassWithCompanion.Companion((DefaultConstructorMarker)null);
 
   @NotNull
   public final String getName() {
      return this.name;
   }
 
   public static final class Companion {
      public final int companionFun() {
         return 5;
      }
 
      private Companion() {
      }
 
      public Companion(DefaultConstructorMarker $constructor_marker) {
         this();
      }
   }
}

//вызов функции
ClassWithCompanion.Companion.companionFun();
</code></pre><br/>
Компилятор Kotlin упрощает вызовы, но из Java, правда, выглядит уже не так красиво. К счастью, есть возможность объявить методы по настоящему статическими. Для этого существует аннотация @JvmStatic. Ее можно добавить как к методам object, так и к методам companion object. Рассмотрим на примере object:<br/>
<br/>
<pre><code>//Kotlin
object ObjectWithStatic {
    @JvmStatic
    fun staticFun(): Int {
        return 5
    }
}
</code></pre><br/>
В этом случае метод staticFun будет действительно объявлен статическим:<br/>
<br/>
<pre><code class="java">public final class ObjectWithStatic {
   public static final ObjectWithStatic INSTANCE;
 
   @JvmStatic
   public static final int staticFun() {
      return 5;
   }
 
   private ObjectWithStatic() {
      INSTANCE = (ObjectWithStatic)this;
   }
 
   static {
      new ObjectWithStatic();
   }
}
</code></pre><br/>
Для методов из companion object тоже можно добавить аннотацию @JvmStatic:<br/>
<br/>
<pre><code>class ClassWithCompanionStatic {
    val name: String = "Kurt"

    companion object {
        @JvmStatic
        fun companionFun(): Int = 5
    }
}
</code></pre><br/>
Для такого кода будет также создан статичный метод companionFun. Но сам метод все равно будет вызывать метод из компаньона:<br/>
<br/>
<pre><code class="java">public final class ClassWithCompanionStatic {
   @NotNull
   private final String name = "Kurt";
   public static final ClassWithCompanionStatic.Companion Companion = new ClassWithCompanionStatic.Companion((DefaultConstructorMarker)null);

   @NotNull
   public final String getName() {
      return this.name;
   }

   @JvmStatic
   public static final int companionFun() {
      return Companion.companionFun();
   }

   public static final class Companion {
      @JvmStatic
      public final int companionFun() {
         return 5;
      }

      private Companion() {
      }

      // $FF: synthetic method
      public Companion(DefaultConstructorMarker $constructor_marker) {
         this();
      }
   }
}
</code></pre><br/>
Как показано выше, Kotlin предоставляет различные возможности для объявления как статических методов так и методов компаньонов. Вызов статических методов чуть быстрее, поэтому в местах, где важна производительность, все же лучше ставить аннотации @JvmStatic на методы (но все равно не стоит рассчитывать на большой выигрыш в быстродействии)<br/>
<br/>
<h2>lateinit свойства</h2><a name="P5"></a><br/>
Иногда возникает ситуация, когда нужно объявить notnull свойство в классе, значение для которого мы не можем сразу указать. Но при инициализации notnull поля мы обязаны присвоить ему значение по умолчанию, либо сделать свойство Nullable и записать в него null. Чтобы не переходить к nullable, в Kotlin существует специальный модификатор lateinit, который говорит компилятору Kotlin о том, что мы обязуемся сами позднее инициализировать свойство.<br/>
<br/>
<pre><code>//Kotlin
class LateinitExample {
    lateinit var lateinitValue: String
}
</code></pre><br/>
Если же мы попробуем обратиться к свойству без инициализации, то будет брошено исключение UninitializedPropertyAccessException. Подобная функциональность работает достаточно просто:<br/>
<br/>
<pre><code class="java">//Java
public final class LateinitExample {
   @NotNull
   public String lateinitValue;
 
   @NotNull
   public final String getLateinitValue() {
      String var10000 = this.lateinitValue;
      if(this.lateinitValue == null) {
         Intrinsics.throwUninitializedPropertyAccessException("lateinitValue");
      }
 
      return var10000;
   }
 
   public final void setLateinitValue(@NotNull String var1) {
      Intrinsics.checkParameterIsNotNull(var1, "&lt;set-?&gt;");
      this.lateinitValue = var1;
   }
}
</code></pre><br/>
В getter вставляется дополнительная проверка значения свойства, и если в нем хранится null, то кидается исключение. Кстати именно из-за этого в Kotlin нельзя сделать lateinit свойство с типом Int, Long и других типов, которые соответствуют примитивным типам Java.<br/>
<br/>
<h2>coroutines</h2><a name="P6"></a><br/>
В версии Kotlin 1.1 появилась новая функциональность, называемая корутины (coroutines). С ее помощью можно легко писать асинхронный код в синхронном виде. Помимо основной библиотеки (kotlinx-coroutines-core) для поддержки прерываний, есть еще и большой набор библиотек с различными расширениями:<br/>
<br/>
kotlinx-coroutines-jdk8 — дополнительная библиотека для JDK8 <br/>
kotlinx-coroutines-nio — расширения для асинхронного IO из JDK7+.<br/>
 <br/>
kotlinx-coroutines-reactive — утилиты для реактивных стримов<br/>
kotlinx-coroutines-reactor — утилиты для Reactor<br/>
kotlinx-coroutines-rx1 — утилиты для RxJava 1.x<br/>
kotlinx-coroutines-rx2 — утилиты для RxJava 2.x<br/>
 <br/>
kotlinx-coroutines-android — UI контекст для Android.<br/>
kotlinx-coroutines-javafx — JavaFx контекст для JavaFX UI приложений.<br/>
kotlinx-coroutines-swing — Swing контекст для Swing UI приложений.<br/>
<br/>
<b>Примечание: Функциональность пока находится в экспериментальной стадии, поэтому все сказанное ниже еще может измениться. </b><br/>
<br/>
Для того, чтобы обозначить, что функция может быть прервана и использована в контексте прерывания, используется модификатор suspend<br/>
<br/>
<pre><code>//Kotlin
suspend fun asyncFun(x: Int): Int {
    return x * 3
}
</code></pre><br/>
Декомпилированный код выглядит следующим образом:<br/>
<br/>
<pre><code>//Java
public static final Object asyncFun(int x, @NotNull Continuation $continuation) {
      Intrinsics.checkParameterIsNotNull($continuation, "$continuation");
      return Integer.valueOf(x * 3);
}
</code></pre><br/>
Получается практически исходная функция, за исключением того, что еще передается один дополнительный параметр, реализующий интерфейс Continuation.<br/>
<br/>
<pre><code>interface Continuation&lt;in T&gt; {
   val context: CoroutineContext
   fun resume(value: T)
   fun resumeWithException(exception: Throwable)
}
</code></pre><br/>
В нем хранится контекст выполнения, определена функция возвращения результата и функция возвращения исключения, в случае ошибки. <br/>
<br/>
Корутины компилируются в конечный автомат (state machine). Рассмотрим на примере:<br/>
<br/>
<pre><code>val a = a()
val y = foo(a).await() // точка прерывания #1
b()
val z = bar(a, y).await() // точка прерывания #2
c(z)
</code></pre><br/>
Функции foo и bar возвращают CompletableFuture, на которых вызывается suspend функция await. Декомпилировать в Java такой код не получится (по большей части из-за goto), поэтому рассмотрим его в псевдокоде:<br/>
<br/>
<pre><code>class &lt;anonymous_for_state_machine&gt; extends CoroutineImpl&lt;...&gt; implements Continuation&lt;Object&gt; {
    // текущее состояние машины состояний
    int label = 0
    
    // локальные переменные корутин
    A a = null
    Y y = null
    
    void resume(Object data) {
        if (label == 0) goto L0
        if (label == 1) goto L1
        if (label == 2) goto L2
        else throw IllegalStateException()
        
      L0:
        a = a()
        label = 1
        data = foo(a).await(this) // 'this' передается как continuation 
        if (data == COROUTINE_SUSPENDED) return // возвращение, если await прервал выполнение
      L1:
        // внешний код возвращает выполнение корутины, передавая результат как data
        y = (Y) data
        b()
        label = 2
        data = bar(a, y).await(this) // 'this' передается как continuation
        if (data == COROUTINE_SUSPENDED) return // возвращение, если await прервал выполнение
      L2:
        // внешний код возвращает выполнение корутины передавая результат как data 
        Z z = (Z) data
        c(z)
        label = -1 // Не допускается больше никаких шагов
        return
    }          
}    
</code></pre><br/>
Как видно, получаются 3 состояния: L0, L1, L2. Выполнение начинается в состоянии L0, далее из которого происходит переключение в состояние L1 и после в L2. В конце происходит переключение состояния в -1 как индикация того, что больше никаких шагов не допускается. <br/>
 <br/>
Сами корутины могут выполняться в различных потоках, есть удобный механизм для управления этим при помощи указания пула в контексте запуска корутины. Можно посмотреть подробный <a href="https://github.com/Kotlin/kotlinx.coroutines/blob/master/coroutines-guide.md">гайд</a> с большим количеством примеров и описанием их использования. <br/>
 <br/>
Все исходные коды на Kotlin доступны в <a href="https://github.com/evgzakharov/kotlin_bytecode_examples">github</a>. Можно открыть их у себя и поэкспериментировать с кодом, параллельно просматривая, в какой итоговый байткод компилируются исходники. <br/>
<br/>
<h2>Выводы</h2><a name="P7"></a><br/>
Производительность приложений на Kotlin будет не сильно хуже, чем на Java, а с использованием модификатора inline может даже оказаться лучше. Компилятор во всех местах старается генерировать наиболее оптимизированный байткод. Поэтому не стоит бояться, что при переходе на Kotlin вы получите большое ухудшение производительности. А в особо критичных местах, зная во что компилируется Kotlin, всегда можно переписать код на более подходящий вариант. Небольшая плата за то, что язык позволяет реализовывать сложные конструкции в достаточно лаконичном и простом виде. <br/>
 <br/>
Спасибо за внимание! Надеюсь вам понравилась статья. Прошу всех тех, кто заметил какие-либо ошибки или неточности написать мне об этом в личном сообщении.</div></div></div><!----><!----></div><!----><!----></div><!--]--><!----><div class="tm-article-presenter__meta" data-test-id="article-meta-links"><div class="tm-separated-list tm-article-presenter__meta-list"><span class="tm-separated-list__title">Теги:</span><ul class="tm-separated-list__list"><!--[--><li class="tm-separated-list__item"><!--[--><a href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[java]" class="tm-tags-list__link"><span>java</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[kotlin]" class="tm-tags-list__link"><span>kotlin</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[%D1%80%D0%B0%D0%B7%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%BA%D0%B0]" class="tm-tags-list__link"><span>разработка</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5]" class="tm-tags-list__link"><span>программирование</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[%D0%B1%D0%B0%D0%B9%D1%82%D0%BA%D0%BE%D0%B4]" class="tm-tags-list__link"><span>байткод</span></a><!--]--></li><!--]--><!----></ul></div><div class="tm-separated-list tm-article-presenter__meta-list"><span class="tm-separated-list__title">Хабы:</span><ul class="tm-separated-list__list"><!--[--><li class="tm-separated-list__item"><!--[--><a href="/ru/companies/inforion/articles/" class="tm-hubs-list__link"><!--[--><span>Блог компании ИНФОРИОН</span><!--]--></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a href="/ru/hubs/java/" class="tm-hubs-list__link"><!--[--><span>Java</span><!--]--></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a href="/ru/hubs/kotlin/" class="tm-hubs-list__link"><!--[--><span>Kotlin</span><!--]--></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a href="/ru/hubs/compilers/" class="tm-hubs-list__link"><!--[--><span>Компиляторы</span><!--]--></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a href="/ru/hubs/programming/" class="tm-hubs-list__link"><!--[--><span>Программирование</span><!--]--></a><!--]--></li><!--]--><!----></ul></div></div><!----><!--]--></article><!--]--></div><!----></div><div style="" class="tm-article-sticky-panel" data-test-id="article-sticky-panel"><div class="tm-data-icons tm-data-icons tm-data-icons_space-big tm-article-sticky-panel__icons" data-test-id="article-stats-icons"><div class="tm-article-rating tm-data-icons__item"><div class="tm-votes-meter tm-article-rating__votes-switcher"><svg class="tm-svg-img tm-votes-meter__icon tm-votes-meter__icon tm-votes-meter__icon_appearance-article" height="24" width="24"><title>Всего голосов 12: ↑11 и ↓1</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-rating"></use></svg><span class="tm-votes-meter__value tm-votes-meter__value_positive tm-votes-meter__value_appearance-article tm-votes-meter__value_rating tm-votes-meter__value" data-test-id="votes-meter-value" title="Всего голосов 12: ↑11 и ↓1">+10</span></div><!--teleport start--><!--teleport end--><!----></div><!----><!----><button class="bookmarks-button tm-data-icons__item" title="Добавить в закладки" type="button"><span class="tm-svg-icon__wrapper bookmarks-button__icon"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Добавить в закладки</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-favorite"></use></svg></span><span class="bookmarks-button__counter" title="Количество пользователей, добавивших публикацию в закладки">110</span></button><div class="tm-sharing tm-data-icons__item" title="Поделиться"><button class="tm-sharing__button" type="button"><svg viewbox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" class="tm-sharing__icon"><path fill="currentColor" d="M13.8 13.8V18l7.2-6.6L13.8 5v3.9C5 8.9 3 18.6 3 18.6c2.5-4.4 6-4.8 10.8-4.8z"></path></svg></button><!--teleport start--><!--teleport end--></div><div class="tm-article-comments-counter-link tm-data-icons__item" title="Читать комментарии"><a href="/ru/companies/inforion/articles/330064/comments/" class="tm-article-comments-counter-link__link" data-test-id="counter-comments"><!--[--><svg class="tm-svg-img tm-article-comments-counter-link__icon" height="24" width="24"><title>Комментарии</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-comments"></use></svg><span class="tm-article-comments-counter-link__value">5</span><!--]--></a><!----></div><!--[--><!--[--><!--[--><!----><!--]--><!--]--><!--]--><!--teleport start--><!--teleport end--><!----></div></div></div><!--[--><!--]--><div class="tm-article-presenter__footer"><!--[--><!--[--><div class="tm-article-blocks"><!----><!--[--><section class="tm-block tm-block tm-block_spacing-bottom"><!----><!--[--><div class="tm-block__body tm-block__body tm-block__body_variant-balanced"><!--[--><div class="tm-article-author" data-test-id="article-author-info" data-async-called="true"><!--[--><!--[--><div class="tm-article-author__company"><div class="tm-article-author__company-card"><div class="tm-company-snippet"><a href="/ru/companies/inforion/profile/" class="tm-company-snippet__logo-link"><div class="tm-entity-image"><img alt="" class="tm-entity-image__pic" height="40" src="//habrastorage.org/getpro/habr/company/2a6/232/764/2a6232764dc34e33fdd04538388a295b.jpg" width="40"></div></a><div class="tm-company-snippet__info"><a href="/ru/companies/inforion/profile/" class="tm-company-snippet__title" data-test-id="company-title"><span>ИНФОРИОН</span></a><div class="tm-company-snippet__description">Решения ИТ-инфраструктуры и защита информации</div></div></div><div class="tm-article-author__buttons"><!----><!----></div></div><div class="tm-article-author__company-contacts"><!--[--><a class="tm-article-author__contact" href="https://inforion.ru/" rel="noopener" target="_blank">Сайт</a><a class="tm-article-author__contact" href="https://github.com/inforion" rel="noopener" target="_blank">Github</a><!--]--></div><div class="tm-article-author__separator"></div></div><!--]--><!--]--><div class="tm-user-card tm-user-card tm-user-card_variant-article tm-article-author__user-card" data-async-called="true"><div class="tm-user-card__info-container"><div class="tm-user-card__header"><div class="tm-user-card__header-data"><a href="/ru/users/nerumb/" class="tm-user-card__userpic tm-user-card__userpic_size-40"><div class="tm-entity-image"><img alt="" class="tm-entity-image__pic" src="//habrastorage.org/getpro/habr/avatars/a97/bea/92d/a97bea92d70b5a05f5321c690e05331d.png"></div></a><div class="tm-user-card__meta"><div class="tm-counter-container tm-karma tm-karma" title=" 73 голоса "><div class="tm-counter-container__header"><!--[--><div class="karma-display positive" data-v-7635202e>57</div><!----><!--]--></div><div class="tm-counter-container__footer"><!--[--><div class="tm-karma__text">Карма</div><!--teleport start--><!--teleport end--><!--]--></div></div><div class="tm-counter-container" title="Рейтинг пользователя"><div class="tm-counter-container__header"><!--[--><!--[--><!--]--><div class="tm-votes-lever tm-votes-lever tm-votes-lever_appearance-rating"><!----><div class="tm-votes-lever__score tm-votes-lever__score_appearance-rating tm-votes-lever__score"><!--[--><span><span class="tm-votes-lever__score-counter tm-votes-lever__score-counter_rating tm-votes-lever__score-counter" data-test-id="votes-score-counter">0</span></span><!--]--></div><!----></div><!--]--></div><div class="tm-counter-container__footer"><!--[--><span class="tm-rating__text tm-rating__text">Рейтинг</span><!--]--></div></div></div></div></div><div class="tm-user-card__info tm-user-card__info_variant-article tm-user-card__info"><div class="tm-user-card__title tm-user-card__title_variant-article tm-user-card__title"><span class="tm-user-card__name tm-user-card__name_variant-article tm-user-card__name">Nerumb</span><a href="/ru/users/nerumb/" class="tm-user-card__nickname tm-user-card__nickname tm-user-card__nickname_variant-article"> @nerumb</a><!----></div><p class="tm-user-card__short-info tm-user-card__short-info_variant-article tm-user-card__short-info" data-test-id="user-card-speciality">Разработчик</p></div></div><!----><div class="tm-user-card__buttons tm-user-card__buttons_variant-article tm-user-card__buttons"><!----><div class="tm-user-card__button"><div class="tm-button-follow tm-user-card__button-follow"><!----><button class="tm-button-follow__button tm-button-follow__button_big" data-test-id="follow-button" type="button">Подписаться</button></div></div><!----><div class="tm-user-card__button tm-user-card__button_write" data-test-id="user-card-conversations"><svg class="tm-svg-img tm-user-card__button-icon" height="16" width="16"><title>Отправить сообщение</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#mail"></use></svg></div><!----></div><!----></div><div class="tm-article-author__user-contacts" data-test-id="author-contacts"><!----><!----><!----></div></div><!--]--></div><!--]--><!----></section><!----><!--[--><div class="banner-wrapper leaderboard tm-company-article__banner" style="--467224fc:200px;--58ff5eba:auto;" data-v-ad758baa><!--[--><div class="placeholder-wrapper placeholder" data-v-ad758baa><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><div class="adfox-banner-placeholder leaderboard" data-v-12f7bcca><div class="image loads" data-v-12f7bcca></div><div class="lines" data-v-12f7bcca><div class="line loads" data-v-12f7bcca></div><div class="line loads" data-v-12f7bcca></div><div class="line loads" data-v-12f7bcca></div></div></div><!----></div><div id="adfox_164725660339535756" class="tm-adfox-banner" data-v-ad758baa></div><!--]--></div><!----><!--]--><!--]--><div class="tm-article-blocks__comments"><div id="publication-comments" class="tm-article-page-comments"><div><!--[--><div class="tm-article-comments-counter-link tm-article-comments-counter-button"><a href="/ru/companies/inforion/articles/330064/comments/" class="tm-article-comments-counter-link__link tm-article-comments-counter-link__link_button-style" data-test-id="counter-comments"><!--[--><svg class="tm-svg-img tm-article-comments-counter-link__icon tm-article-comments-counter-link__icon_contrasted" height="24" width="24"><title>Комментарии</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-comments"></use></svg><span class="tm-article-comments-counter-link__value tm-article-comments-counter-link__value_contrasted"> Комментарии 5 </span><!--]--></a><!----></div><!--]--></div></div></div><!--[--><!--[--><!--]--><section class="tm-block tm-block tm-block_spacing-bottom"><header class="tm-block__header tm-block__header tm-block__header_variant-borderless"><div class="tm-block__header-container"><h2 class="tm-block__title tm-block__title tm-block__title_variant-large">Публикации</h2><!--[--><!--]--></div><!----></header><!--[--><div class="tm-block__body tm-block__body tm-block__body_variant-condensed-slim"><!--[--><!--[--><div class="tm-tabs tm-tabs"><div class=""><!--[--><span class="tm-tabs__tab-item"><button class="tm-tabs__tab-link tm-tabs__tab-link_active tm-tabs__tab-link_slim tm-tabs__tab-link">Лучшие за сутки</button></span><span class="tm-tabs__tab-item"><button class="tm-tabs__tab-link tm-tabs__tab-link_slim tm-tabs__tab-link">Похожие</button></span><!--]--></div><!----></div><div class="similar-and-daily__tab-view"><div class="placeholder-wrapper"><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><div class="tm-placeholder-article-cards"><!--[--><div class="tm-placeholder-article-card"><div class="tm-placeholder__user"><div class="tm-placeholder__user-pic loads"></div><div class="tm-placeholder__user-date loads"></div></div><div class="tm-placeholder-article-card__title"><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div></div><div class="tm-placeholder-article-card__icons tm-placeholder__counters"><!--[--><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><!--]--></div></div><div class="tm-placeholder-article-card"><div class="tm-placeholder__user"><div class="tm-placeholder__user-pic loads"></div><div class="tm-placeholder__user-date loads"></div></div><div class="tm-placeholder-article-card__title"><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div></div><div class="tm-placeholder-article-card__icons tm-placeholder__counters"><!--[--><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><!--]--></div></div><div class="tm-placeholder-article-card"><div class="tm-placeholder__user"><div class="tm-placeholder__user-pic loads"></div><div class="tm-placeholder__user-date loads"></div></div><div class="tm-placeholder-article-card__title"><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div></div><div class="tm-placeholder-article-card__icons tm-placeholder__counters"><!--[--><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><!--]--></div></div><div class="tm-placeholder-article-card"><div class="tm-placeholder__user"><div class="tm-placeholder__user-pic loads"></div><div class="tm-placeholder__user-date loads"></div></div><div class="tm-placeholder-article-card__title"><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div></div><div class="tm-placeholder-article-card__icons tm-placeholder__counters"><!--[--><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><!--]--></div></div><div class="tm-placeholder-article-card"><div class="tm-placeholder__user"><div class="tm-placeholder__user-pic loads"></div><div class="tm-placeholder__user-date loads"></div></div><div class="tm-placeholder-article-card__title"><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div></div><div class="tm-placeholder-article-card__icons tm-placeholder__counters"><!--[--><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><!--]--></div></div><!--]--></div><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----></div><!----></div><!--]--><!--]--></div><!--]--><!----></section><!--[--><!--[--><section class="tm-block tm-block tm-block_spacing-around tm-stories-block" data-navigatable tabindex="0" data-async-called="true"><header class="tm-block__header tm-block__header"><div class="tm-block__header-container"><h2 class="tm-block__title tm-block__title">Истории</h2><!--[--><!--]--></div><!----></header><!--[--><div class="tm-block__body tm-block__body tm-block__body_variant-equal"><!--[--><div class="tm-stories-empty"><!--[--><div class="tm-stories-card-empty"><div class="tm-stories-card-empty__image"></div><div class="tm-stories-card-empty__title"><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div></div></div><div class="tm-stories-card-empty"><div class="tm-stories-card-empty__image"></div><div class="tm-stories-card-empty__title"><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div></div></div><div class="tm-stories-card-empty"><div class="tm-stories-card-empty__image"></div><div class="tm-stories-card-empty__title"><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div></div></div><div class="tm-stories-card-empty"><div class="tm-stories-card-empty__image"></div><div class="tm-stories-card-empty__title"><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div></div></div><div class="tm-stories-card-empty"><div class="tm-stories-card-empty__image"></div><div class="tm-stories-card-empty__title"><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div></div></div><div class="tm-stories-card-empty"><div class="tm-stories-card-empty__image"></div><div class="tm-stories-card-empty__title"><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div></div></div><!--]--></div><!----><!--]--></div><!--]--><!----></section><div class="placeholder-wrapper"><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><div class="tm-placeholder-inset tm-placeholder-vacancies"><div class="tm-placeholder-inset__header"><div class="tm-placeholder__line tm-placeholder__line_inset-header loads"></div></div><div class="tm-placeholder-inset__body"><ul class="tm-placeholder-list"><!--[--><li class="tm-placeholder-list__item tm-placeholder-list__item_inset"><div class="tm-placeholder-list__title-container"><div class="tm-placeholder__line tm-placeholder__line_item-title loads"></div></div><div class="tm-project-block-items__properties"><!--[--><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><!--]--></div></li><li class="tm-placeholder-list__item tm-placeholder-list__item_inset"><div class="tm-placeholder-list__title-container"><div class="tm-placeholder__line tm-placeholder__line_item-title loads"></div></div><div class="tm-project-block-items__properties"><!--[--><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><!--]--></div></li><li class="tm-placeholder-list__item tm-placeholder-list__item_inset"><div class="tm-placeholder-list__title-container"><div class="tm-placeholder__line tm-placeholder__line_item-title loads"></div></div><div class="tm-project-block-items__properties"><!--[--><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><!--]--></div></li><li class="tm-placeholder-list__item tm-placeholder-list__item_inset"><div class="tm-placeholder-list__title-container"><div class="tm-placeholder__line tm-placeholder__line_item-title loads"></div></div><div class="tm-project-block-items__properties"><!--[--><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><!--]--></div></li><li class="tm-placeholder-list__item tm-placeholder-list__item_inset"><div class="tm-placeholder-list__title-container"><div class="tm-placeholder__line tm-placeholder__line_item-title loads"></div></div><div class="tm-project-block-items__properties"><!--[--><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><!--]--></div></li><!--]--></ul></div><div class="tm-placeholder-inset__footer"><div class="tm-placeholder__line tm-placeholder__line_inset-footer loads"></div></div></div><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----></div><!--]--><!--]--><!----><!--[--><div><div class="placeholder-wrapper"><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><div class="tm-placeholder-promo"><div class="tm-placeholder-promo__header"><div class="tm-placeholder__line tm-placeholder__line_promo-title"></div></div><div class="tm-placeholder-promo__body"><div class="tm-placeholder-promo__posts"><div class="tm-placeholder-promo__post"><div class="tm-placeholder-promo__image"></div><div class="tm-placeholder__line tm-placeholder__line_post-title"></div></div><div class="tm-placeholder-promo__post"><div class="tm-placeholder-promo__image"></div><div class="tm-placeholder__line tm-placeholder__line_post-title"></div></div><div class="tm-placeholder-promo__post"><div class="tm-placeholder-promo__image"></div><div class="tm-placeholder__line tm-placeholder__line_post-title"></div></div></div><div class="tm-placeholder-promo__dots"><div class="tm-placeholder-promo__dot"></div><div class="tm-placeholder-promo__dot"></div><div class="tm-placeholder-promo__dot"></div></div></div></div><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----></div></div><!--]--><!--]--></div><!--]--><!--]--></div></div><!--]--><!--]--></div></div><div class="tm-page__sidebar"><!--[--><!----><!--]--></div></div><!----><!--]--></div></div></main><!----></div><!----><div class="tm-footer"><div class="tm-page-width"><!--[--><div class="tm-footer__container"><div class="tm-footer__title"><a class="tm-svg-icon__wrapper tm-footer__title-link" href="/ru/"><svg class="tm-svg-img tm-svg-icon" height="16" width="16"><title>Хабр</title><use xlink:href="/img/habr-logo-ru.svg#logo"></use></svg></a></div><div class="tm-footer__social"><!--[--><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://www.facebook.com/habrahabr.ru" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="36" width="36"><title>Facebook</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-facebook"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://twitter.com/habr_com" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="36" width="36"><title>Twitter</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-twitter"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://vk.com/habr" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="36" width="36"><title>VK</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-vk"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://telegram.me/habr_com" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="36" width="36"><title>Telegram</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-telegram"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://www.youtube.com/channel/UCd_sTwKqVrweTt4oAKY5y4w" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="36" width="36"><title>Youtube</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-youtube"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://dzen.ru/habr" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="36" width="36"><title>Яндекс Дзен</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-dzen"></use></svg></a><!--]--></div><!--teleport start--><!--teleport end--><button class="tm-footer__link"><svg class="tm-svg-img tm-footer__icon" height="16" width="16"><title>Язык</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#lang"></use></svg> Настройка языка</button><a href="/ru/feedback/" class="tm-footer__link">Техническая поддержка</a><div class="tm-footer-copyright"><span class="tm-copyright"><span class="tm-copyright__years">© 2006–2025, </span><span class="tm-copyright__name"><a class="tm-copyright__link" href="https://company.habr.com/" rel="noopener" target="_blank">Habr</a></span></span></div></div><!--]--></div></div><!----><!--]--></div><!----></div><script>window.__INITIAL_STATE__={"adblock":{"hasAcceptableAdsFilter":false,"hasAdblock":false},"articlesList":{"articlesList":{"330064":{"id":"330064","timePublished":"2017-06-02T10:10:06+00:00","isCorporative":true,"lang":"ru","titleHtml":"Kotlin, компиляция в байткод и производительность (часть 2)","leadData":{"textHtml":"\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fweb\u002F3af\u002Fe51\u002Ff5a\u002F3afe51f5a54a4ce583d5665dfb4d06c3.png\"\u002F\u003E\u003Cbr\u002F\u003E\r\n\u003Cbr\u002F\u003E\r\nЭто продолжение публикации. Первую часть можно посмотреть \u003Ca href=\"https:\u002F\u002Fhabrahabr.ru\u002Fcompany\u002Finforion\u002Fblog\u002F330060\u002F\"\u003Eтут\u003C\u002Fa\u003E \u003Cbr\u002F\u003E\r\n\u003Cbr\u002F\u003E\r\n\u003Ch2\u003EСодержание:\u003C\u002Fh2\u003E\u003Cbr\u002F\u003E\r\n\u003Ca href=\"https:\u002F\u002Fhabrahabr.ru\u002Fcompany\u002Finforion\u002Fblog\u002F330064\u002F#P1\"\u003EЦиклы\u003C\u002Fa\u003E\u003Cbr\u002F\u003E\r\n\u003Ca href=\"https:\u002F\u002Fhabrahabr.ru\u002Fcompany\u002Finforion\u002Fblog\u002F330064\u002F#P2\"\u003EWhen\u003C\u002Fa\u003E\u003Cbr\u002F\u003E\r\n\u003Ca href=\"https:\u002F\u002Fhabrahabr.ru\u002Fcompany\u002Finforion\u002Fblog\u002F330064\u002F#P3\"\u003EДелегаты\u003C\u002Fa\u003E\u003Cbr\u002F\u003E\r\n\u003Ca href=\"https:\u002F\u002Fhabrahabr.ru\u002Fcompany\u002Finforion\u002Fblog\u002F330064\u002F#P4\"\u003EObject и companion object\u003C\u002Fa\u003E\u003Cbr\u002F\u003E\r\n\u003Ca href=\"https:\u002F\u002Fhabrahabr.ru\u002Fcompany\u002Finforion\u002Fblog\u002F330064\u002F#P5\"\u003Elateinit свойства\u003C\u002Fa\u003E\u003Cbr\u002F\u003E\r\n\u003Ca href=\"https:\u002F\u002Fhabrahabr.ru\u002Fcompany\u002Finforion\u002Fblog\u002F330064\u002F#P6\"\u003Ecoroutines\u003C\u002Fa\u003E\u003Cbr\u002F\u003E\r\n\u003Ca href=\"https:\u002F\u002Fhabrahabr.ru\u002Fcompany\u002Finforion\u002Fblog\u002F330064\u002F#P7\"\u003EВыводы\u003C\u002Fa\u003E\u003Cbr\u002F\u003E\r\n","imageUrl":null,"buttonTextHtml":"Читать дальше &rarr;","image":null},"editorVersion":"1.0","postType":"article","postLabels":[],"author":{"id":"425732","alias":"nerumb","fullname":"Nerumb","avatarUrl":"\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Favatars\u002Fa97\u002Fbea\u002F92d\u002Fa97bea92d70b5a05f5321c690e05331d.png","speciality":"Разработчик","scoreStats":{"score":57,"votesCount":73},"rating":0,"relatedData":null,"contacts":[],"authorContacts":[],"paymentDetails":{"paymentYandexMoney":null,"paymentPayPalMe":null,"paymentWebmoney":null},"donationsMethod":null,"isInBlacklist":null,"careerProfile":null},"statistics":{"commentsCount":5,"favoritesCount":110,"readingCount":25945,"score":10,"votesCount":12,"votesCountPlus":11,"votesCountMinus":1},"hubs":[{"id":"21092","alias":"inforion","type":"corporative","title":"Блог компании ИНФОРИОН","titleHtml":"Блог компании ИНФОРИОН","isProfiled":false,"relatedData":null},{"id":"375","alias":"java","type":"collective","title":"Java","titleHtml":"Java","isProfiled":true,"relatedData":null},{"id":"19441","alias":"kotlin","type":"collective","title":"Kotlin","titleHtml":"Kotlin","isProfiled":true,"relatedData":null},{"id":"17188","alias":"compilers","type":"collective","title":"Компиляторы","titleHtml":"Компиляторы","isProfiled":true,"relatedData":null},{"id":"359","alias":"programming","type":"collective","title":"Программирование","titleHtml":"Программирование","isProfiled":true,"relatedData":null}],"flows":[{"id":"1","alias":"develop","title":"Разработка","titleHtml":"Разработка"}],"relatedData":{"vote":null,"unreadCommentsCount":0,"bookmarked":false,"canComment":false,"canEdit":false,"canViewVotes":false,"votePlus":{"canVote":false,"isChargeEnough":false,"isKarmaEnough":false,"isVotingOver":true,"isPublicationLimitEnough":false},"voteMinus":{"canVote":false,"isChargeEnough":false,"isKarmaEnough":false,"isVotingOver":true,"isPublicationLimitEnough":false},"canModerateComments":false,"trackerSubscribed":false,"emailSubscribed":false},"textHtml":"\u003Cdiv xmlns=\"http:\u002F\u002Fwww.w3.org\u002F1999\u002Fxhtml\"\u003E\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw1560\u002Fweb\u002F3af\u002Fe51\u002Ff5a\u002F3afe51f5a54a4ce583d5665dfb4d06c3.png\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fweb\u002F3af\u002Fe51\u002Ff5a\u002F3afe51f5a54a4ce583d5665dfb4d06c3.png\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nЭто продолжение публикации. Первую часть можно посмотреть \u003Ca href=\"https:\u002F\u002Fhabrahabr.ru\u002Fcompany\u002Finforion\u002Fblog\u002F330060\u002F\"\u003Eтут\u003C\u002Fa\u003E \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Ch2\u003EСодержание:\u003C\u002Fh2\u003E\u003Cbr\u002F\u003E\n\u003Ca href=\"https:\u002F\u002Fhabrahabr.ru\u002Fcompany\u002Finforion\u002Fblog\u002F330064\u002F#P1\"\u003EЦиклы\u003C\u002Fa\u003E\u003Cbr\u002F\u003E\n\u003Ca href=\"https:\u002F\u002Fhabrahabr.ru\u002Fcompany\u002Finforion\u002Fblog\u002F330064\u002F#P2\"\u003EWhen\u003C\u002Fa\u003E\u003Cbr\u002F\u003E\n\u003Ca href=\"https:\u002F\u002Fhabrahabr.ru\u002Fcompany\u002Finforion\u002Fblog\u002F330064\u002F#P3\"\u003EДелегаты\u003C\u002Fa\u003E\u003Cbr\u002F\u003E\n\u003Ca href=\"https:\u002F\u002Fhabrahabr.ru\u002Fcompany\u002Finforion\u002Fblog\u002F330064\u002F#P4\"\u003EObject и companion object\u003C\u002Fa\u003E\u003Cbr\u002F\u003E\n\u003Ca href=\"https:\u002F\u002Fhabrahabr.ru\u002Fcompany\u002Finforion\u002Fblog\u002F330064\u002F#P5\"\u003Elateinit свойства\u003C\u002Fa\u003E\u003Cbr\u002F\u003E\n\u003Ca href=\"https:\u002F\u002Fhabrahabr.ru\u002Fcompany\u002Finforion\u002Fblog\u002F330064\u002F#P6\"\u003Ecoroutines\u003C\u002Fa\u003E\u003Cbr\u002F\u003E\n\u003Ca href=\"https:\u002F\u002Fhabrahabr.ru\u002Fcompany\u002Finforion\u002Fblog\u002F330064\u002F#P7\"\u003EВыводы\u003C\u002Fa\u003E\u003Cbr\u002F\u003E\n\u003Ca name=\"habracut\"\u003E\u003C\u002Fa\u003E\u003Cbr\u002F\u003E\n\u003Ch2\u003EЦиклы:\u003C\u002Fh2\u003E\u003Ca name=\"P1\"\u003E\u003C\u002Fa\u003E\u003Cbr\u002F\u003E\nВ языке Kotlin отсутствует классический for с тремя частями, как в Java. Кому-то это может показаться проблемой, но если подробнее посмотреть все случаи использования такого цикла, то можно увидеть, что по большей части он применяется как раз для перебора значений. На смену ему в Kotlin есть упрощенная конструкция.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode\u003E\u002F\u002FKotlin\nfun rangeLoop() {\n    for (i in 1..10) {\n        println(i)\n    }\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\n1..10 тут это диапазон по которому происходит итерация. Компилятор Kotlin достаточно умный, он понимает что мы собираемся в данном случае делать и поэтому убирает весь лишний оверхед. Код компилируется в обычный цикл while с переменной счетчика цикла. Никаких итераторов, никакого оверхеда, все достаточно компактно. \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode\u003E\u002F\u002FJava\npublic static final void rangeLoop() {\n      int i = 1;\n      byte var1 = 10;\n      if(i &lt;= var1) {\n         while(true) {\n            System.out.println(i);\n            if(i == var1) {\n               break;\n            }\n \n            ++i;\n         }\n      }\n \n }\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nПохожий цикл по массиву (который в Kotlin записывается в виде Array&lt;*&gt;), компилируется аналогичным образом в цикл for.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode\u003E\u002F\u002FKotlin\nfun arrayLoop(x: Array&lt;String&gt;) {\n    for (s in x) {\n        println(s)\n    }\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode class=\"java\"\u003E\u002F\u002FJava\npublic static final void arrayLoop(@NotNull String[] x) {\n      Intrinsics.checkParameterIsNotNull(x, \"x\");\n \n      for(int var2 = 0; var2 &lt; x.length; ++var2) {\n         String s = x[var2];\n         System.out.println(s);\n      }\n \n }\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nНемного другая ситуация возникает, когда происходит перебор элементов из списка:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode\u003E\u002F\u002FKotlin\nfun listLoop(x: List&lt;String&gt;) {\n    for (s in x) {\n        println(s)\n    }\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nВ этом случае приходится использовать итератор:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode class=\"java\"\u003E\u002F\u002FJava\npublic static final void listLoop(@NotNull List x) {\n      Intrinsics.checkParameterIsNotNull(x, \"x\");\n      Iterator var2 = x.iterator();\n \n      while(var2.hasNext()) {\n         String s = (String)var2.next();\n         System.out.println(s);\n      }\n \n }\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nТаким образом, в зависимости от того по каким элементам происходит перебор, компилятор Kotlin сам выбирает самый эффективный способ преобразовать цикл в байткод.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nНиже приведено сравнение производительности для циклов с аналогичными решениями в Java:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Ch4\u003EЦиклы\u003C\u002Fh4\u003E\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw1560\u002Fweb\u002F3a3\u002Fb67\u002Fb5b\u002F3a3b67b5bb2b43fd84f2fc6010a9ae06.png\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fweb\u002F3a3\u002Fb67\u002Fb5b\u002F3a3b67b5bb2b43fd84f2fc6010a9ae06.png\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nКак видно разница между Kotlin и Java минимальна. Байткод получается очень близким к тому что генерирует javac. По словам разработчиков они еще планируют улучшить это в следующих версиях Kotlin, чтобы результирующий байткод был максимально близок к тем паттернам, которые генерирует javac.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Ch2\u003EWhen\u003C\u002Fh2\u003E\u003Ca name=\"P2\"\u003E\u003C\u002Fa\u003E\u003Cbr\u002F\u003E\nWhen — это аналог switch из Java, только с большей функциональностью. Рассмотрим ниже несколько примеров и то, во что они компилируются:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode\u003E\u002FKotlin\nfun tableWhen(x: Int): String = when(x) {\n    0 -&gt; \"zero\"\n    1 -&gt; \"one\"\n    else -&gt; \"many\"\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nДля такого простого случая результирующий код компилируется в обычный switch, тут никакой магии не происходит: \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode class=\"java\"\u003E\u002F\u002FJava\npublic static final String tableWhen(int x) {\n      String var10000;\n      switch(x) {\n      case 0:\n         var10000 = \"zero\";\n         break;\n      case 1:\n         var10000 = \"one\";\n         break;\n      default:\n         var10000 = \"many\";\n      }\n \n      return var10000;\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nЕсли же немного изменить пример выше, и добавить константы:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode\u003E\u002F\u002FKotlin \nval ZERO = 1\nval ONE = 1\n \nfun constWhen(x: Int): String = when(x) {\n    ZERO -&gt; \"zero\"\n    ONE -&gt; \"one\"\n    else -&gt; \"many\"\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nТо код в этом случае уже компилируется в следующий вид:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode\u003E\u002F\u002FJava\npublic static final String constWhen(int x) {\n      return x == ZERO?\"zero\":(x == ONE?\"one\":\"many\");\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nЭто происходит потому, что на данный момент компилятор Kotlin не понимает, что значения являются константами, и вместо преобразования к switch, код преобразуется к набору сравнений. Поэтому вместо константного времени происходит переход к линейному (в зависимости от количества сравнений). По словам разработчиков языка, в будущем это может быть легко исправлено, но в текущей версии это пока так. \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nСуществует также возможность использовать модификатор const для констант, известных на момент компиляции.\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode\u003E\u002F\u002FKotlin (файл When2.kt)\nconst val ZERO = 1\nconst val ONE = 1\n \nfun constWhen(x: Int): String = when(x) {\n    ZERO -&gt; \"zero\"\n    ONE -&gt; \"one\"\n    else -&gt; \"many\"\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nТогда в этом случае компилятор уже правильно оптимизирует when:\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode class=\"java\"\u003Epublic final class When2Kt {\n   public static final int ZERO = 1;\n   public static final int ONE = 2;\n\n   @NotNull\n   public static final String constWhen(int x) {\n      String var10000;\n      switch(x) {\n      case 1:\n         var10000 = \"zero\";\n         break;\n      case 2:\n         var10000 = \"one\";\n         break;\n      default:\n         var10000 = \"many\";\n      }\n\n      return var10000;\n   }\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nЕсли же заменить константы на Enum:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode\u003E\u002F\u002FKotlin (файл When3.kt)\nenum class NumberValue {\n    ZERO, ONE, MANY\n}\n \nfun enumWhen(x: NumberValue): String = when(x) {\n    NumberValue.ZERO -&gt; \"zero\"\n    NumberValue.ONE -&gt; \"one\"\n    NumberValue.MANY -&gt; \"many\"\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nТо код, также как в первом случае, будет компилироваться в switch (практический такой же как в случае перебора enum в Java). \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode class=\"java\"\u003E\u002F\u002FJava\npublic final class When3Kt$WhenMappings {\n   \u002F\u002F $FF: synthetic field\n   public static final int[] $EnumSwitchMapping$0 = new int[NumberValue.values().length];\n \n   static {\n      $EnumSwitchMapping$0[NumberValue.ZERO.ordinal()] = 1;\n      $EnumSwitchMapping$0[NumberValue.ONE.ordinal()] = 2;\n      $EnumSwitchMapping$0[NumberValue.MANY.ordinal()] = 3;\n   }\n}\n\n\npublic static final String enumWhen(@NotNull NumberValue x) {\n      Intrinsics.checkParameterIsNotNull(x, \"x\");\n      String var10000;\n      switch(When3Kt$WhenMappings.$EnumSwitchMapping$0[x.ordinal()]) {\n      case 1:\n         var10000 = \"zero\";\n         break;\n      case 2:\n         var10000 = \"one\";\n         break;\n      case 3:\n         var10000 = \"many\";\n         break;\n      default:\n         throw new NoWhenBranchMatchedException();\n      }\n \n      return var10000;\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nПо ordinal номеру элемента определяется номер ветки в switch, по которому далее и происходит выбор нужной ветви. \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nПосмотрим на сравнение производительности решений на Kotlin и Java: \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Ch4\u003EWhen\u003C\u002Fh4\u003E\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw1560\u002Fweb\u002F98c\u002F395\u002Fff6\u002F98c395ff6ef941069dab59860b1f1d1d.png\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fweb\u002F98c\u002F395\u002Fff6\u002F98c395ff6ef941069dab59860b1f1d1d.png\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nКак видно простой switch работает точно также. В случае, когда компилятор Kotlin не смог определить что переменные константы и перешел к сравнениям, Java работает чуть быстрее. И в ситуации, когда перебираем значения enum, также есть небольшая потеря на возню с определением ветви по значению ordinal. Но все эти недостатки будут исправлены в будущих версиях, и к тому же потеря в производительности не очень большая, а в критичных местах можно переписать код на другой вариант. Вполне разумная цена за удобство использования. \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Ch2\u003EДелегаты\u003C\u002Fh2\u003E\u003Ca name=\"P3\"\u003E\u003C\u002Fa\u003E\u003Cbr\u002F\u003E\nДелегирование — это хорошая альтернатива наследованию, и Kotlin поддерживает его прямо из коробки. Рассмотрим простой пример с делегированием класса:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode\u003E\u002F\u002FKotlin\npackage examples\n \ninterface Base {\n    fun print()\n}\n \nclass BaseImpl(val x: Int) : Base {\n    override fun print() { print(x) }\n}\n \nclass Derived(b: Base) : Base by b {\n    fun anotherMethod(): Unit {}\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nКласс Derived в конструкторе получает экземпляр класса, реализующий интерфейс Base, и в свою очередь делегирует реализацию всех методов интерфейса Base к передаваемому экземпляру. Декомпилированный код класса Derived будет выглядеть следующим образом:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode class=\"java\"\u003Epublic final class Derived implements Base {\n   private final Base $$delegate_0;\n \n   public Derived(@NotNull Base b) {\n      Intrinsics.checkParameterIsNotNull(b, \"b\");\n      super();\n      this.$$delegate_0 = b;\n   }\n \n   public void print() {\n      this.$$delegate_0.print();\n   }\n\n   public final void anotherMethod() {\n   }\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nВ конструктор класса передается экземпляр класса, который запоминается в неизменяемом внутреннем поле. Также переопределяется метод print интерфейса Base, в котором просто происходит вызов метода из делегата. Все достаточно просто. \u003Cbr\u002F\u003E\n \u003Cbr\u002F\u003E\nСуществует также возможность делегировать не только реализацию всего класса, но и отдельных его свойств (а с версии 1.1 еще возможно делегировать инициализацию в локальных переменных).\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nКод на Kotlin:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode\u003E\u002F\u002FKotlin\nclass DeleteExample {\n    val name: String by Delegate()\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nКомпилируется в код:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode class=\"java\"\u003Epublic final class DeleteExample {\n   @NotNull\n   private final Delegate name$delegate = new Delegate();\n \n  static final KProperty[] $$delegatedProperties = new KProperty[]{(KProperty)Reflection.property1(new PropertyReference1Impl(Reflection.getOrCreateKotlinClass(DeleteExample.class), \"name\", \"getName()Ljava\u002Flang\u002FString;\"))};\n \n   @NotNull\n   public final String getName() {\n      return this.name$delegate.getValue(this, $$delegatedProperties[0]);\n   }\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nПри инициализации класса DeleteExample создается экземпляр класса Delegate, сохраняемый в поле name$delegate. И далее вызов функции getName переадресовывается к вызову функции getValue из name$delegate. \u003Cbr\u002F\u003E\n \u003Cbr\u002F\u003E\nВ Kotlin есть уже несколько стандартных делегатов:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n — lazy, для ленивых вычислений значения поля.\u003Cbr\u002F\u003E\n — observable, который позволяет получать уведомления обо всех изменения значения поля\u003Cbr\u002F\u003E\n — map, используемый для инициализации значений поля из значений Map. \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Ch2\u003EObject и companion object\u003C\u002Fh2\u003E\u003Ca name=\"P4\"\u003E\u003C\u002Fa\u003E\u003Cbr\u002F\u003E\nВ Kotlin нет модификатора static для методов и полей. Вместо них, по большей части, рекомендуется использовать функции на уровне файла. Если же нужно объявить функции, которые можно вызывать без экземпляра класса, то для этого есть object и companion object. Рассмотрим на примерах как они выглядят в байткоде:\u003Cbr\u002F\u003E\n \u003Cbr\u002F\u003E\nПростое объявление object с одним методом выглядит следующим образом:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode\u003E\u002F\u002FKotlin\nobject ObjectExample {\n    fun objectFun(): Int {\n        return 1\n    }\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nВ коде дальше можно обращаться к методу objectFun без создания экземпляра ObjectExample. Код компилируется в практически каноничный синглтон:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode class=\"java\"\u003Epublic final class ObjectExample {\n   public static final ObjectExample INSTANCE;\n \n   public final int objectFun() {\n      return 1;\n   }\n \n   private ObjectExample() {\n      INSTANCE = (ObjectExample)this;\n   }\n \n   static {\n      new ObjectExample();\n   }\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nИ место вызова:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode\u003E\u002F\u002FKotlin\nval value = ObjectExample.objectFun()\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nКомпилируется к вызову INSTANCE:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode\u003E\u002F\u002FJava\nint value = ObjectExample.INSTANCE.objectFun();\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\ncompanion object используется для создания аналогичных методов только уже в классе, для которого предполагается создание экземпляров. \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode\u003E\u002F\u002FKotlin\nclass ClassWithCompanion {\n    val name: String = \"Kurt\"\n    \n    companion object {\n        fun companionFun(): Int = 5\n    }\n}\n\n\u002F\u002Fmethod call\nClassWithCompanion.companionFun()\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nОбращение к методу companionFun также не требует создания экземпляра класса, и в Kotlin будет выглядеть как простое обращение к статическому методу. Но на самом деле происходит обращение к компаньону класса. Посмотрим декомпилированный код:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode class=\"java\"\u003E\u002F\u002FJava\npublic final class ClassWithCompanion {\n   @NotNull\n   private final String name = \"Kurt\";\n   public static final ClassWithCompanion.Companion Companion = new ClassWithCompanion.Companion((DefaultConstructorMarker)null);\n \n   @NotNull\n   public final String getName() {\n      return this.name;\n   }\n \n   public static final class Companion {\n      public final int companionFun() {\n         return 5;\n      }\n \n      private Companion() {\n      }\n \n      public Companion(DefaultConstructorMarker $constructor_marker) {\n         this();\n      }\n   }\n}\n\n\u002F\u002Fвызов функции\nClassWithCompanion.Companion.companionFun();\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nКомпилятор Kotlin упрощает вызовы, но из Java, правда, выглядит уже не так красиво. К счастью, есть возможность объявить методы по настоящему статическими. Для этого существует аннотация @JvmStatic. Ее можно добавить как к методам object, так и к методам companion object. Рассмотрим на примере object:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode\u003E\u002F\u002FKotlin\nobject ObjectWithStatic {\n    @JvmStatic\n    fun staticFun(): Int {\n        return 5\n    }\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nВ этом случае метод staticFun будет действительно объявлен статическим:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode class=\"java\"\u003Epublic final class ObjectWithStatic {\n   public static final ObjectWithStatic INSTANCE;\n \n   @JvmStatic\n   public static final int staticFun() {\n      return 5;\n   }\n \n   private ObjectWithStatic() {\n      INSTANCE = (ObjectWithStatic)this;\n   }\n \n   static {\n      new ObjectWithStatic();\n   }\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nДля методов из companion object тоже можно добавить аннотацию @JvmStatic:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode\u003Eclass ClassWithCompanionStatic {\n    val name: String = \"Kurt\"\n\n    companion object {\n        @JvmStatic\n        fun companionFun(): Int = 5\n    }\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nДля такого кода будет также создан статичный метод companionFun. Но сам метод все равно будет вызывать метод из компаньона:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode class=\"java\"\u003Epublic final class ClassWithCompanionStatic {\n   @NotNull\n   private final String name = \"Kurt\";\n   public static final ClassWithCompanionStatic.Companion Companion = new ClassWithCompanionStatic.Companion((DefaultConstructorMarker)null);\n\n   @NotNull\n   public final String getName() {\n      return this.name;\n   }\n\n   @JvmStatic\n   public static final int companionFun() {\n      return Companion.companionFun();\n   }\n\n   public static final class Companion {\n      @JvmStatic\n      public final int companionFun() {\n         return 5;\n      }\n\n      private Companion() {\n      }\n\n      \u002F\u002F $FF: synthetic method\n      public Companion(DefaultConstructorMarker $constructor_marker) {\n         this();\n      }\n   }\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nКак показано выше, Kotlin предоставляет различные возможности для объявления как статических методов так и методов компаньонов. Вызов статических методов чуть быстрее, поэтому в местах, где важна производительность, все же лучше ставить аннотации @JvmStatic на методы (но все равно не стоит рассчитывать на большой выигрыш в быстродействии)\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Ch2\u003Elateinit свойства\u003C\u002Fh2\u003E\u003Ca name=\"P5\"\u003E\u003C\u002Fa\u003E\u003Cbr\u002F\u003E\nИногда возникает ситуация, когда нужно объявить notnull свойство в классе, значение для которого мы не можем сразу указать. Но при инициализации notnull поля мы обязаны присвоить ему значение по умолчанию, либо сделать свойство Nullable и записать в него null. Чтобы не переходить к nullable, в Kotlin существует специальный модификатор lateinit, который говорит компилятору Kotlin о том, что мы обязуемся сами позднее инициализировать свойство.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode\u003E\u002F\u002FKotlin\nclass LateinitExample {\n    lateinit var lateinitValue: String\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nЕсли же мы попробуем обратиться к свойству без инициализации, то будет брошено исключение UninitializedPropertyAccessException. Подобная функциональность работает достаточно просто:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode class=\"java\"\u003E\u002F\u002FJava\npublic final class LateinitExample {\n   @NotNull\n   public String lateinitValue;\n \n   @NotNull\n   public final String getLateinitValue() {\n      String var10000 = this.lateinitValue;\n      if(this.lateinitValue == null) {\n         Intrinsics.throwUninitializedPropertyAccessException(\"lateinitValue\");\n      }\n \n      return var10000;\n   }\n \n   public final void setLateinitValue(@NotNull String var1) {\n      Intrinsics.checkParameterIsNotNull(var1, \"&lt;set-?&gt;\");\n      this.lateinitValue = var1;\n   }\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nВ getter вставляется дополнительная проверка значения свойства, и если в нем хранится null, то кидается исключение. Кстати именно из-за этого в Kotlin нельзя сделать lateinit свойство с типом Int, Long и других типов, которые соответствуют примитивным типам Java.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Ch2\u003Ecoroutines\u003C\u002Fh2\u003E\u003Ca name=\"P6\"\u003E\u003C\u002Fa\u003E\u003Cbr\u002F\u003E\nВ версии Kotlin 1.1 появилась новая функциональность, называемая корутины (coroutines). С ее помощью можно легко писать асинхронный код в синхронном виде. Помимо основной библиотеки (kotlinx-coroutines-core) для поддержки прерываний, есть еще и большой набор библиотек с различными расширениями:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nkotlinx-coroutines-jdk8 — дополнительная библиотека для JDK8 \u003Cbr\u002F\u003E\nkotlinx-coroutines-nio — расширения для асинхронного IO из JDK7+.\u003Cbr\u002F\u003E\n \u003Cbr\u002F\u003E\nkotlinx-coroutines-reactive — утилиты для реактивных стримов\u003Cbr\u002F\u003E\nkotlinx-coroutines-reactor — утилиты для Reactor\u003Cbr\u002F\u003E\nkotlinx-coroutines-rx1 — утилиты для RxJava 1.x\u003Cbr\u002F\u003E\nkotlinx-coroutines-rx2 — утилиты для RxJava 2.x\u003Cbr\u002F\u003E\n \u003Cbr\u002F\u003E\nkotlinx-coroutines-android — UI контекст для Android.\u003Cbr\u002F\u003E\nkotlinx-coroutines-javafx — JavaFx контекст для JavaFX UI приложений.\u003Cbr\u002F\u003E\nkotlinx-coroutines-swing — Swing контекст для Swing UI приложений.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cb\u003EПримечание: Функциональность пока находится в экспериментальной стадии, поэтому все сказанное ниже еще может измениться. \u003C\u002Fb\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nДля того, чтобы обозначить, что функция может быть прервана и использована в контексте прерывания, используется модификатор suspend\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode\u003E\u002F\u002FKotlin\nsuspend fun asyncFun(x: Int): Int {\n    return x * 3\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nДекомпилированный код выглядит следующим образом:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode\u003E\u002F\u002FJava\npublic static final Object asyncFun(int x, @NotNull Continuation $continuation) {\n      Intrinsics.checkParameterIsNotNull($continuation, \"$continuation\");\n      return Integer.valueOf(x * 3);\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nПолучается практически исходная функция, за исключением того, что еще передается один дополнительный параметр, реализующий интерфейс Continuation.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode\u003Einterface Continuation&lt;in T&gt; {\n   val context: CoroutineContext\n   fun resume(value: T)\n   fun resumeWithException(exception: Throwable)\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nВ нем хранится контекст выполнения, определена функция возвращения результата и функция возвращения исключения, в случае ошибки. \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nКорутины компилируются в конечный автомат (state machine). Рассмотрим на примере:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode\u003Eval a = a()\nval y = foo(a).await() \u002F\u002F точка прерывания #1\nb()\nval z = bar(a, y).await() \u002F\u002F точка прерывания #2\nc(z)\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nФункции foo и bar возвращают CompletableFuture, на которых вызывается suspend функция await. Декомпилировать в Java такой код не получится (по большей части из-за goto), поэтому рассмотрим его в псевдокоде:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode\u003Eclass &lt;anonymous_for_state_machine&gt; extends CoroutineImpl&lt;...&gt; implements Continuation&lt;Object&gt; {\n    \u002F\u002F текущее состояние машины состояний\n    int label = 0\n    \n    \u002F\u002F локальные переменные корутин\n    A a = null\n    Y y = null\n    \n    void resume(Object data) {\n        if (label == 0) goto L0\n        if (label == 1) goto L1\n        if (label == 2) goto L2\n        else throw IllegalStateException()\n        \n      L0:\n        a = a()\n        label = 1\n        data = foo(a).await(this) \u002F\u002F 'this' передается как continuation \n        if (data == COROUTINE_SUSPENDED) return \u002F\u002F возвращение, если await прервал выполнение\n      L1:\n        \u002F\u002F внешний код возвращает выполнение корутины, передавая результат как data\n        y = (Y) data\n        b()\n        label = 2\n        data = bar(a, y).await(this) \u002F\u002F 'this' передается как continuation\n        if (data == COROUTINE_SUSPENDED) return \u002F\u002F возвращение, если await прервал выполнение\n      L2:\n        \u002F\u002F внешний код возвращает выполнение корутины передавая результат как data \n        Z z = (Z) data\n        c(z)\n        label = -1 \u002F\u002F Не допускается больше никаких шагов\n        return\n    }          \n}    \n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nКак видно, получаются 3 состояния: L0, L1, L2. Выполнение начинается в состоянии L0, далее из которого происходит переключение в состояние L1 и после в L2. В конце происходит переключение состояния в -1 как индикация того, что больше никаких шагов не допускается. \u003Cbr\u002F\u003E\n \u003Cbr\u002F\u003E\nСами корутины могут выполняться в различных потоках, есть удобный механизм для управления этим при помощи указания пула в контексте запуска корутины. Можно посмотреть подробный \u003Ca href=\"https:\u002F\u002Fgithub.com\u002FKotlin\u002Fkotlinx.coroutines\u002Fblob\u002Fmaster\u002Fcoroutines-guide.md\"\u003Eгайд\u003C\u002Fa\u003E с большим количеством примеров и описанием их использования. \u003Cbr\u002F\u003E\n \u003Cbr\u002F\u003E\nВсе исходные коды на Kotlin доступны в \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fevgzakharov\u002Fkotlin_bytecode_examples\"\u003Egithub\u003C\u002Fa\u003E. Можно открыть их у себя и поэкспериментировать с кодом, параллельно просматривая, в какой итоговый байткод компилируются исходники. \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Ch2\u003EВыводы\u003C\u002Fh2\u003E\u003Ca name=\"P7\"\u003E\u003C\u002Fa\u003E\u003Cbr\u002F\u003E\nПроизводительность приложений на Kotlin будет не сильно хуже, чем на Java, а с использованием модификатора inline может даже оказаться лучше. Компилятор во всех местах старается генерировать наиболее оптимизированный байткод. Поэтому не стоит бояться, что при переходе на Kotlin вы получите большое ухудшение производительности. А в особо критичных местах, зная во что компилируется Kotlin, всегда можно переписать код на более подходящий вариант. Небольшая плата за то, что язык позволяет реализовывать сложные конструкции в достаточно лаконичном и простом виде. \u003Cbr\u002F\u003E\n \u003Cbr\u002F\u003E\nСпасибо за внимание! Надеюсь вам понравилась статья. Прошу всех тех, кто заметил какие-либо ошибки или неточности написать мне об этом в личном сообщении.\u003C\u002Fdiv\u003E","tags":[{"titleHtml":"java"},{"titleHtml":"kotlin"},{"titleHtml":"разработка"},{"titleHtml":"программирование"},{"titleHtml":"байткод"}],"metadata":{"stylesUrls":[],"scriptUrls":[],"shareImageUrl":"https:\u002F\u002Fhabr.com\u002Fshare\u002Fpublication\u002F330064\u002F4719dc532575c3ca3880bf6ab8268a81\u002F","shareImageWidth":1200,"shareImageHeight":630,"vkShareImageUrl":"https:\u002F\u002Fhabr.com\u002Fshare\u002Fpublication\u002F330064\u002F4719dc532575c3ca3880bf6ab8268a81\u002F?format=vk","schemaJsonLd":"{\"@context\":\"http:\\\u002F\\\u002Fschema.org\",\"@type\":\"Article\",\"mainEntityOfPage\":{\"@type\":\"WebPage\",\"@id\":\"https:\\\u002F\\\u002Fhabr.com\\\u002Fru\\\u002Fcompanies\\\u002Finforion\\\u002Farticles\\\u002F330064\\\u002F\"},\"headline\":\"Kotlin, компиляция в байткод и производительность (часть 2)\",\"datePublished\":\"2017-06-02T13:10:06+03:00\",\"dateModified\":\"2017-06-02T16:45:11+03:00\",\"author\":{\"@type\":\"Person\",\"name\":\"Nerumb\"},\"publisher\":{\"@type\":\"Organization\",\"name\":\"Habr\",\"logo\":{\"@type\":\"ImageObject\",\"url\":\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fwebt\\\u002Fa_\\\u002Flk\\\u002F9m\\\u002Fa_lk9mjkccjox-zccjrpfolmkmq.png\"}},\"description\":\"Это продолжение публикации. Первую часть можно посмотреть тут   Содержание: Циклы When Делегаты Object и companion object lateinit свойства coroutines Выводы...\",\"url\":\"https:\\\u002F\\\u002Fhabr.com\\\u002Fru\\\u002Fcompanies\\\u002Finforion\\\u002Farticles\\\u002F330064\\\u002F#post-content-body\",\"about\":[\"c_inforion\",\"h_java\",\"h_kotlin\",\"h_compilers\",\"h_programming\",\"f_develop\"],\"image\":[\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fweb\\\u002F3af\\\u002Fe51\\\u002Ff5a\\\u002F3afe51f5a54a4ce583d5665dfb4d06c3.png\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fweb\\\u002F3a3\\\u002Fb67\\\u002Fb5b\\\u002F3a3b67b5bb2b43fd84f2fc6010a9ae06.png\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fweb\\\u002F98c\\\u002F395\\\u002Fff6\\\u002F98c395ff6ef941069dab59860b1f1d1d.png\"]}","metaDescription":"Это продолжение публикации. Первую часть можно посмотреть тут Содержание: Циклы When Делегаты Object и companion object lateinit свойства coroutines Выводы Циклы: В языке Kotlin отсутствует...","mainImageUrl":null,"amp":false,"customTrackerLinks":[]},"polls":[],"commentsEnabled":{"status":true,"reason":null},"rulesRemindEnabled":false,"votesEnabled":true,"status":"published","plannedPublishTime":null,"checked":null,"hasPinnedComments":false,"format":null,"banner":null,"multiwidget":null,"multiwidgetUuid":null,"readingTime":11,"complexity":null,"isEditorial":false,"allowedFeatures":{"isTestTargetAllow":false}}},"articlesIds":{},"isLoading":false,"pagesCount":{},"route":{},"reasonsList":null,"postReasonsList":null,"view":"list","lastVisitedRoute":{},"ssrCommentsArticleIds":[""],"viewedPosts":[],"myFeedFilter":{"complexity":"all","score":"all","types":["articles","posts","news"]},"myFeedIsApplyFilters":false,"myFeedIsForce":false,"karma":{"userReasonsList":null}},"authorContribution":{"authors":{}},"betaTest":{"currentAnnouncement":null,"announcements":{},"announcementCards":null,"announcementComments":{},"announcementCommentThreads":{},"announcementCommentingStatuses":{},"archivedList":[]},"authorStatistics":{"articleRefs":{},"articleIds":{},"pagesCount":{},"route":{},"viewsCount":[],"maxStatsCount":{}},"career":{"seoLandings":[],"hubs":""},"comments":{"articleComments":{},"articlePinnedComments":{},"searchCommentsResults":null,"pagesCount":null,"commentAccess":{},"scrollParents":{},"pageArticleComments":{"lastViewedComment":0,"postId":null,"lastCommentTimestamp":"","moderated":[],"moderatedIds":[],"commentRoute":"","idempotenceKey":""}},"companies":{"companyRefs":{"inforion":{"alias":"inforion","imageUrl":"\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fcompany\u002F2a6\u002F232\u002F764\u002F2a6232764dc34e33fdd04538388a295b.jpg","titleHtml":"ИНФОРИОН","descriptionHtml":"Решения ИТ-инфраструктуры и защита информации","relatedData":null,"statistics":{"subscribersCount":81,"rating":0,"invest":null,"postsCount":17,"threadsCount":0,"newsCount":0,"vacanciesCount":0,"employeesCount":4,"careerRating":null},"foundationDate":{"year":"2006","month":"02","day":"17"},"location":{"city":{"id":"447159","title":"Москва"},"region":{"id":"1885","title":"Москва и Московская обл."},"country":{"id":"168","title":"Россия"}},"siteUrl":"https:\u002F\u002Finforion.ru\u002F","staffNumber":"51–100 человек","registrationDate":"2017-05-12T07:55:05+00:00","representativeUser":null,"contacts":[{"title":"Сайт","url":"https:\u002F\u002Finforion.ru\u002F","siteTitle":"ИНФОРИОН - IT-Компания - Российский системный интегратор","favicon":"https:\u002F\u002Fstatic.tildacdn.com\u002Ftild3061-3730-4236-a333-623332303239\u002F_inforion.ico"},{"title":"Github","url":"https:\u002F\u002Fgithub.com\u002Finforion","siteTitle":"INFORION, LLC · GitHub","favicon":"https:\u002F\u002Fgithub.githubassets.com\u002Ffavicons\u002Ffavicon.svg"}],"settings":{"analyticsSettings":[],"branding":null,"status":"expired","isStartup":false,"hasActivePolls":false,"shouldShowHabrAds":true},"metadata":{"titleHtml":"ИНФОРИОН, Москва - Решения ИТ-инфраструктуры и защита информации с 17 февраля 2006 г.","title":"ИНФОРИОН, Москва - Решения ИТ-инфраструктуры и защита информации с 17 февраля 2006 г.","keywords":["kotlin","ida pro","java","программирование","реверс-инжиниринг","scala","python","arm","kopycat","никто не читает теги","разработка","байткод","коллекции","smartrhino-2018"],"descriptionHtml":"17 статей от авторов компании ИНФОРИОН","description":"17 статей от авторов компании ИНФОРИОН"},"aDeskSettings":null,"careerAlias":null,"schoolAlias":null}},"companyIds":{},"companyTopIds":{},"pagesCount":{},"companyProfiles":{},"companiesCategories":[],"companiesCategoriesTotalCount":0,"companiesWidgets":{},"companiesWorkers":{},"companiesFans":{},"multiwidgets":{},"route":{},"isLoading":false,"companyWorkersLoading":false,"companyFansLoading":false,"multiwidgetLoading":false,"vacancies":{},"companiesGalleries":{},"companiesBanners":{},"companiesLandingVacancies":{},"companiesTechnologies":{},"workplaceInfo":null},"companyAdmin":{"companyInfo":null,"companyInfoLoading":false,"faqArticles":null,"brandingPreviewImageUrl":null,"jivoStatus":0,"adminNotifications":null,"availableInvitesCount":{}},"companyAdd":{"currentStep":"","stepsData":{},"uncompletedSteps":[],"isStepLoading":true,"isStepCommitting":false,"isInitialized":false,"agreementContent":""},"companiesContribution":{"hubs":{},"flows":{},"companyRefs":{}},"companyHubsContribution":{"contributionRefs":{"hubRefs":{},"hubIds":{}}},"conversation":{"messages":[],"respondent":null,"isLoadMore":false},"conversations":{"conversations":[],"pagesCount":0},"docs":{"menu":{},"articles":{},"mainMenu":[],"loading":{"main":false,"dropdown":false,"article":false}},"feature":{"isProbablyVisible":true},"fixedBanner":{"isArticleStickyPanelVisible":false,"isArticleStickyPanelAtTheBottom":false,"isFixedBannerVisible":false,"isStickyPanelIconsHidden":false},"flows":{"flows":[{"id":"1","alias":"develop","title":"Разработка","titleHtml":"Разработка","route":{"name":"FLOW_PAGE","params":{"flowName":"develop"}}},{"id":"6","alias":"admin","title":"Администрирование","titleHtml":"Администрирование","route":{"name":"FLOW_PAGE","params":{"flowName":"admin"}}},{"id":"2","alias":"design","title":"Дизайн","titleHtml":"Дизайн","route":{"name":"FLOW_PAGE","params":{"flowName":"design"}}},{"id":"3","alias":"management","title":"Менеджмент","titleHtml":"Менеджмент","route":{"name":"FLOW_PAGE","params":{"flowName":"management"}}},{"id":"4","alias":"marketing","title":"Маркетинг","titleHtml":"Маркетинг","route":{"name":"FLOW_PAGE","params":{"flowName":"marketing"}}},{"id":"7","alias":"popsci","title":"Научпоп","titleHtml":"Научпоп","route":{"name":"FLOW_PAGE","params":{"flowName":"popsci"}}}],"updates":{}},"global":{"isPwa":false,"device":"mobile","isHabrCom":true,"requestId":"bd778c4fc55ffba964fba1ebcc7cc2ed"},"hubs":{"hubRefs":{},"hubIds":{},"pagesCount":{},"isLoading":false,"route":{}},"hubsBlock":{"hubRefs":{},"hubIds":{}},"i18n":{"fl":"ru","hl":"ru"},"info":{"welcomePage":{},"isLoading":true},"location":{"urlStruct":{"protocol":null,"slashes":null,"auth":null,"host":null,"port":null,"hostname":null,"hash":null,"query":{},"pathname":"\u002Fru\u002Fcompanies\u002Finforion\u002Farticles\u002F330064\u002F","path":"\u002Fru\u002Fcompanies\u002Finforion\u002Farticles\u002F330064\u002F","href":"\u002Fru\u002Fcompanies\u002Finforion\u002Farticles\u002F330064\u002F"}},"me":{"user":null,"uuid":null,"ppgDemanded":false,"karmaResetInfo":{"canReincarnate":null,"wasReincarnated":null,"currentScore":null},"notes":null,"userUpdates":{"feeds":{"newPostsCount":null,"newThreadsCount":null,"newNewsCount":null,"newCount":null},"conversationUnreadCount":0}},"mostReadingList":{"mostReadingListIds":[],"mostReadingListRefs":null,"promoPost":null},"onboarding":{"currentStep":null,"stepsData":{},"stepsErrors":{},"completedSteps":[],"isStepCommitting":false,"isCommitDisabled":true},"ppa":{"articles":{},"card":null,"transactions":null,"totalTransactions":null,"isAccessible":null},"projectsBlocks":{"activeBlocks":{"vacancies":"project-block-company-article"}},"promoData":{"isLoading":false,"hasLoaded":false,"featurer":null,"megaposts":null,"promoLinks":null,"promoPosts":null,"sticker":null},"publicationStatistics":{"statsInfo":{},"statsFunnels":{},"statsGraph":{},"defaultSuggest":{},"suggest":{},"timeTracker":{},"isTrackingActivity":false,"isUserActive":true,"otherPublicationStats":{}},"pullRefresh":{"shouldRefresh":false},"sandbox":{"articleIds":[],"articleRefs":{},"pagesCount":null,"route":{},"lastVisitedRoute":{},"isLoading":false},"search":{"searchQueryError":null},"settingsOther":{"inputs":{"uiLang":{"errors":[],"ref":null,"value":""},"articlesLangEnglish":{"errors":[],"ref":null,"value":false},"articlesLangRussian":{"errors":[],"ref":null,"value":false},"agreement":{"errors":[],"ref":null,"value":false},"email":{"errors":[],"ref":null,"value":true},"digest":{"errors":[],"ref":null,"value":true}}},"similarList":{"similarListIds":[],"similarListRefs":null},"ssr":{"error":null,"isDataLoaded":true,"isDataLoading":false,"isHydrationFailed":false,"isServer":false},"stories":{"stories":[{"id":"story-998","author":{"logo":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F91a\u002F166\u002F49f\u002F91a16649f9ef89302a5a56cfa22a451d.png","title":"Яндекс Практикум","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up"},"title":"Как расти на работе?","lang":"ru","startTime":"2025-03-18T18:45:00+03:00","finishTime":"2025-03-31T19:00:00+03:00","slides":[{"id":"story-998_1","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fbf4\u002F911\u002F7e6\u002Fbf49117e637ff2099b3944f8803cd7a3.png","button":null},{"id":"story-998_2","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F3e3\u002Fc84\u002Fe83\u002F3e3c84e8330ea1ddf72e9d310457ed2f.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_3","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F84b\u002F533\u002F3c3\u002F84b5333c3e77e8dac62a8b50d042acb9.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_4","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F257\u002Feb0\u002F2be\u002F257eb02bea1777e13f3e647cae6e06cd.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_5","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F858\u002F086\u002F0ed\u002F8580860ed3497c043c04f9a42054d74f.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_6","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fcdf\u002F32f\u002F387\u002Fcdf32f38777f046c063b5182f4125e14.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_7","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fd48\u002Ff2d\u002F0e2\u002Fd48f2d0e2ecd7d746d738191bb913d8f.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_8","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fb38\u002Ffd7\u002Fee0\u002Fb38fd7ee04848bf3b058be7403438bd1.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_9","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F79e\u002Feaa\u002F9d8\u002F79eeaa9d8af5a288ad42bd9d63b5793a.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_10","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fcdc\u002F17e\u002F385\u002Fcdc17e38582dc67838b9abfb200d982e.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}}]},{"id":"story-996","author":{"logo":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fe63\u002F36d\u002Fa24\u002Fe6336da24460ab6b9fbc347d03eb263a.png","title":"Хабр","link":null},"title":"Здоровье айтишника","lang":"ru","startTime":"2025-03-17T10:22:00+03:00","finishTime":"2025-04-13T10:22:00+03:00","slides":[{"id":"story-996_1","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fb7c\u002F6de\u002F8ea\u002Fb7c6de8ea6789dbc30f071716172b6dd.jpg","button":null},{"id":"story-996_2","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F2e7\u002F88a\u002F0fe\u002F2e788a0fe61729ca8b23eb59069c844f.jpg","button":{"title":"Личный опыт","link":"https:\u002F\u002Fu.habr.com\u002Fzd-1","colorType":"light"}},{"id":"story-996_3","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fb93\u002F6f4\u002F256\u002Fb936f425653b84fa60ab00d09f78c543.jpg","button":{"title":"Как это было","link":"https:\u002F\u002Fu.habr.com\u002Fzd-2","colorType":"light"}},{"id":"story-996_4","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fc10\u002Fd14\u002Ff5a\u002Fc10d14f5a4859fe10baecbcc2bcb8828.jpg","button":{"title":"Шея в фокусе","link":"https:\u002F\u002Fu.habr.com\u002Fzd-3","colorType":"dark"}},{"id":"story-996_5","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F535\u002Fe1b\u002F77a\u002F535e1b77a9eb896262ad73321f2ad99f.jpg","button":{"title":"Фотоинструкция","link":"https:\u002F\u002Fu.habr.com\u002Fzd-4","colorType":"light"}},{"id":"story-996_6","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F569\u002Fc39\u002F49f\u002F569c3949f5b330ea85d4a1864f481c3d.jpg","button":{"title":"Сидите (не)правильно","link":"https:\u002F\u002Fu.habr.com\u002Fzd-5","colorType":"dark"}},{"id":"story-996_7","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F1f2\u002F1de\u002Fdbf\u002F1f21dedbf2902bc4061a75b839b63595.jpg","button":{"title":"Журнал изменений","link":"https:\u002F\u002Fu.habr.com\u002Fzd-6","colorType":"dark"}},{"id":"story-996_8","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F95a\u002F164\u002F21b\u002F95a16421badc3a9f1135309ab0c42c41.jpg","button":{"title":"Альтернатива","link":"https:\u002F\u002Fu.habr.com\u002Fzd-7","colorType":"light"}},{"id":"story-996_9","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F624\u002F027\u002F54d\u002F62402754d311798af44bcfe7f9abfedc.jpg","button":{"title":"Хроника поисков","link":"https:\u002F\u002Fu.habr.com\u002Fzd-8","colorType":"dark"}}]},{"id":"story-992","author":{"logo":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F3fe\u002F2fc\u002Fb05\u002F3fe2fcb05df852d7e1e00d44e54e39ae.png","title":"Сезоны Хабра","link":"https:\u002F\u002Fu.habr.com\u002Ffnstories"},"title":"Угадайте будущее в новом сезоне","lang":"ru","startTime":"2025-03-12T19:15:00+03:00","finishTime":"2025-03-31T23:56:00+03:00","slides":[{"id":"story-992_1","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fc56\u002Faf5\u002Fc43\u002Fc56af5c4377f7f7b94f7b6ad20fc92c3.png","button":{"title":"А что за сезон?","link":"https:\u002F\u002Fu.habr.com\u002Ffnstories","colorType":"light"}},{"id":"story-992_2","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F8fa\u002Fde7\u002F65d\u002F8fade765d99207f31c597283ae6ce912.png","button":{"title":"Какие темы нужны","link":"https:\u002F\u002Fu.habr.com\u002Ffnstories","colorType":"dark"}},{"id":"story-992_3","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F23e\u002F7b9\u002Fb24\u002F23e7b9b24cb056d1a42e8d31ccea16ce.png","button":{"title":"Сезон будущего ИИ","link":"https:\u002F\u002Fu.habr.com\u002Ffnstories","colorType":"dark"}},{"id":"story-992_4","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F27b\u002Fbfc\u002Fa18\u002F27bbfca18e656ee0122b5cb8eb2cb502.png","button":{"title":"Все правила сезона","link":"https:\u002F\u002Fu.habr.com\u002Ffnstories","colorType":"dark"}},{"id":"story-992_5","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F1e0\u002F6c6\u002Ff33\u002F1e06c6f33e703bbd2b2ae3baee3376fd.png","button":{"title":"Как участвовать","link":"https:\u002F\u002Fu.habr.com\u002Ffnstories","colorType":"dark"}}]},{"id":"story-990","author":{"logo":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F282\u002Fe80\u002Fbf1\u002F282e80bf1b73484126ed53c6f3e42692.png","title":"Aeza","link":"https:\u002F\u002Fu.habr.com\u002FI72qi"},"title":"С праздником весны!","lang":"ru","startTime":"2025-03-09T10:15:00+03:00","finishTime":"2025-03-30T23:59:00+03:00","slides":[{"id":"story-990_1","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F064\u002F9dd\u002Ff59\u002F0649ddf5949cae6c9342fb62034a36ac.png","button":null},{"id":"story-990_2","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F05f\u002F96b\u002F25e\u002F05f96b25e910c32256ee0b1916f21380.png","button":{"title":"Семейная история","link":"https:\u002F\u002Fu.habr.com\u002Fey2bY","colorType":"light"}},{"id":"story-990_3","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fcd1\u002Ff5d\u002F921\u002Fcd1f5d921bb9489ac11727272660bdb6.png","button":{"title":"Движущиеся картинки","link":"https:\u002F\u002Fu.habr.com\u002FWLKXU","colorType":"light"}},{"id":"story-990_4","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fb55\u002Fd45\u002Fec5\u002Fb55d45ec50e53275c60d16ea886a0672.png","button":{"title":"Личный опыт","link":"https:\u002F\u002Fu.habr.com\u002FSxrki","colorType":"light"}},{"id":"story-990_5","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Ffa7\u002F1ce\u002Ffca\u002Ffa71cefca5ed0a3fe8b50bd703b3605f.png","button":{"title":"Алгоритм","link":"https:\u002F\u002Fu.habr.com\u002Ftbz2p","colorType":"light"}},{"id":"story-990_6","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F435\u002F89d\u002Ff90\u002F43589df9018846cc6a8eed986226b252.png","button":{"title":"Выбрать сценарий","link":"https:\u002F\u002Fu.habr.com\u002F0RCPk","colorType":"light"}},{"id":"story-990_7","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F514\u002F5f8\u002F619\u002F5145f86194ad48dad48a846b42af0f93.png","button":{"title":"Jiraзамещение","link":"https:\u002F\u002Fu.habr.com\u002FEwhYq","colorType":"light"}},{"id":"story-990_8","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F439\u002Fa83\u002Fae7\u002F439a83ae78f7ef711e3b9bbed1ec26c5.png","button":{"title":"8 вещей","link":"https:\u002F\u002Fu.habr.com\u002FVTv2r","colorType":"light"}},{"id":"story-990_9","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F02d\u002F783\u002F2f7\u002F02d7832f7b1c95d88bff9f34209e204a.png","button":{"title":"Интерфейсы","link":"https:\u002F\u002Fu.habr.com\u002FUFOMZ","colorType":"light"}},{"id":"story-990_10","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F0cb\u002Ff7f\u002F0d9\u002F0cbf7f0d905d486ce4ff82bc939b21d5.png","button":{"title":"Стикеры ваши","link":"https:\u002F\u002Fu.habr.com\u002FoA1K7","colorType":"light"}}]},{"id":"story-984","author":{"logo":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F648\u002F61b\u002F9ae\u002F64861b9aecb7c474cd94063f98045541.png","title":"Хабр","link":null},"title":"Всегда котов!","lang":"ru","startTime":"2025-03-01T00:01:09+03:00","finishTime":"2025-03-23T16:21:00+03:00","slides":[{"id":"story-984_1","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fc06\u002Fc21\u002F93f\u002Fc06c2193ff34362ac2af782cf2571f55.png","button":null},{"id":"story-984_2","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fb68\u002F15f\u002F763\u002Fb6815f7630b9c015b1e67efb5bdf12d4.jpg","button":{"title":"Сделать purrrr","link":"https:\u002F\u002Fu.habr.com\u002Fj4DN1","colorType":"light"}},{"id":"story-984_3","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F550\u002F76e\u002Fd7a\u002F55076ed7a0954e243f944fc2f330623a.png","button":{"title":"Тыгыдык","link":"https:\u002F\u002Fu.habr.com\u002Fya360_kotov","colorType":"dark"}},{"id":"story-984_4","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F2fb\u002F23b\u002F06c\u002F2fb23b06cf294c2050104b2aef589788.jpg","button":{"title":"Исследование","link":"https:\u002F\u002Fu.habr.com\u002FbO3r0","colorType":"light"}},{"id":"story-984_5","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Ff50\u002F50f\u002F0ae\u002Ff5050f0aeea1335c4f0544c1863f8342.jpg","button":{"title":"Детали проекта","link":"https:\u002F\u002Fu.habr.com\u002FQJmhe","colorType":"light"}},{"id":"story-984_6","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F825\u002F3dd\u002F5f5\u002F8253dd5f5c19dd061578f1d09310a45f.jpg","button":{"title":"Эксперименты","link":"https:\u002F\u002Fu.habr.com\u002FVaOdo","colorType":"light"}},{"id":"story-984_7","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F3fb\u002Fc92\u002F0f9\u002F3fbc920f9ea81eca2c1c027ff77fc659.jpg","button":{"title":"Это не мем","link":"https:\u002F\u002Fu.habr.com\u002F0Wb3p","colorType":"light"}},{"id":"story-984_8","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F2b4\u002F794\u002Fc33\u002F2b4794c33844e60aad9468018fd132cd.jpg","button":{"title":"В засаде","link":"https:\u002F\u002Fu.habr.com\u002FnasCD","colorType":"dark"}}]}]},"technotext":{"years":[],"technotextDocForNominees":null,"technotextDocForWinners":null,"technotextInfo":{},"technotextInfoLoading":false,"technotextWinners":{},"technotextWinnersLoading":false},"userHubsContribution":{"contributionRefs":{"hubRefs":{},"hubIds":{}}},"userInvites":{"availableInvites":0,"usedInvitesIds":[],"usedInvitesRefs":{},"usedInvitesPagesCount":0,"unusedInvitesIds":[],"unusedInvitesRefs":{},"unusedInvitesPagesCount":0},"userVotes":{"karmaVotesList":[],"karmaVotesPagesCount":null,"karmaVotesListLoading":false,"commentsVotesList":[],"commentsVotesPagesCount":null,"commentsVotesListLoading":false,"postsVotesList":[],"postsVotesPagesCount":null,"postsVotesListLoading":false,"userVotesList":[],"userVotesPagesCount":null,"userVotesListLoading":false},"users":{"authorRefs":{},"authorIds":{},"pagesCount":{},"authorProfiles":{"nerumb":{"alias":"nerumb","badgets":[{"title":"Захабренный","description":"Пользователь с кармой \u003E0","url":null,"isRemovable":false},{"title":"Старожил","description":"Пользователь, зарегистрированный более 3-х лет назад, с кармой больше 50","url":null,"isRemovable":false}],"aboutHtml":"","contacts":[],"invitedBy":{"issuerLogin":"Shoohurt","timeCreated":"2016-01-13T07:47:50+00:00"},"careerProfile":null,"companies":{"pagesCount":1,"companyIds":["alfa","funcorp","inforion","spring_aio"],"companyRefs":{"alfa":{"id":"1721","alias":"alfa","titleHtml":"Альфа-Банк","descriptionHtml":"Лучший мобильный банк по версии Markswebb","imageUrl":"\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fcompany\u002F623\u002F4a7\u002F52a\u002F6234a752af61e1eb6b220f90db54aadc.png","relatedData":null,"statistics":{"subscribersCount":57340,"rating":467.74,"invest":null},"commonHubs":[]},"funcorp":{"id":"2198","alias":"funcorp","titleHtml":"FUNCORP","descriptionHtml":"Разработка развлекательных сервисов","imageUrl":"\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fcompany\u002Ff21\u002F9f1\u002F718\u002Ff219f1718c640f7b145969eeaad26e7b.jpg","relatedData":null,"statistics":{"subscribersCount":36153,"rating":0,"invest":null},"commonHubs":[]},"inforion":{"id":"4796","alias":"inforion","titleHtml":"ИНФОРИОН","descriptionHtml":"Решения ИТ-инфраструктуры и защита информации","imageUrl":"\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fcompany\u002F2a6\u002F232\u002F764\u002F2a6232764dc34e33fdd04538388a295b.jpg","relatedData":null,"statistics":{"subscribersCount":81,"rating":0,"invest":null},"commonHubs":[]},"spring_aio":{"id":"8553","alias":"spring_aio","titleHtml":"Spring АйО","descriptionHtml":null,"imageUrl":"\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fcompany\u002F8f1\u002F91a\u002F458\u002F8f191a4584b8fab12d15af23e447a1d5.png","relatedData":null,"statistics":{"subscribersCount":407,"rating":78.11,"invest":null},"commonHubs":[]}}}}},"userHubs":{},"userInvitations":{},"authorFollowers":{},"authorFollowed":{},"userSpecialization":{},"karmaStats":[],"statistics":null,"isLoading":false,"authorFollowersLoading":false,"authorFollowedLoading":false,"userHubsLoading":false,"userInvitationsLoading":false,"route":{}},"viewport":{"prevScrollY":{},"scrollY":0,"width":0},"tracker":{"notificationsLoading":false,"notificationsList":[],"notificationsPageCount":0,"pendingMarkNotificationsRead":[],"publicationsLoading":true,"publicationsList":[],"publicationsPageCount":0,"pendingDeletePublications":false,"pendingMarkPublicationsRead":false},"events":{"eventRefs":{},"eventIds":[],"pagesCount":0,"categories":[],"cities":[],"actualEvents":null,"currentEvent":null,"eventsFilter":{"city":"all","timeStarted":null,"timeEnded":null}},"wysiwyg":{"WYSIWYGRulesRefs":null}};(function(){var s;(s=document.currentScript||document.scripts[document.scripts.length-1]).parentNode.removeChild(s);}());</script><script src="https://assets.habr.com/habr-web/js/chunk-vendors.3b11d41f.js" defer></script><script src="https://assets.habr.com/habr-web/js/app.7a97ea6d.js" defer></script></div>
    <div id="overlays"><!----><!--teleport anchor--><!----><!--teleport anchor--><!----><!--teleport anchor--><!----><!--teleport anchor--><!----><!--teleport anchor--><!----><!--teleport anchor--></div>
    
    
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-S28W1WC23F"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());
    </script>
  
  <script type="text/javascript" >
    (function(m,e,t,r,i,k,a){m[i]=m[i]||function(){(m[i].a=m[i].a||[]).push(arguments)};
    m[i].l=1*new Date();k=e.createElement(t),a=e.getElementsByTagName(t)[0],k.async=1,k.src=r,a.parentNode.insertBefore(k,a)})
    (window, document, "script", "https://mc.yandex.ru/metrika/tag.js", "ym");

  </script>
    <script type="text/javascript">
      window.addEventListener('load', function () {
        setTimeout(() => {
          const img = new Image();
          img.src = 'https://vk.com/rtrg?p=VK-RTRG-421343-57vKE';
        }, 0);
      });
    </script>
  
    </body>

    </html>
