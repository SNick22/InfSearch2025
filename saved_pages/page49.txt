<!DOCTYPE html>
<html lang="ru">

  <head>
    <title>Kotlin&#x2F;Golang работа в двух языках &#x2F; Хабр</title>
<meta property="fb:app_id" content="444736788986613">
<meta property="fb:pages" content="472597926099084">
<meta name="twitter:card" content="summary_large_image">
<meta name="twitter:site" content="@habr_com">
<meta property="og:site_name" content="Хабр">
<link href="https://habr.com/ru/rss/post/714050/?fl=ru" type="application/rss+xml" title rel="alternate" name="rss">
<link href="https://habr.com/ru/articles/714050/" rel="canonical" data-hid="e3fa780">
<link rel="image_src" href="https://habr.com/share/publication/714050/35ae2cd4bce406518f858f03ab3a3725/" data-hid="2a79c45">
<link rel="amphtml" href="https://habr.com/ru/amp/publications/714050/">
<meta property="og:title" content="Kotlin/Golang работа в двух языках">
<meta name="twitter:title" content="Kotlin/Golang работа в двух языках">
<meta name="aiturec:title" content="Kotlin/Golang работа в двух языках">
<meta name="description" content="Сразу дисклеймер, статья больше про Golang, но мой &quot;родной&quot; и основной на протяжении уже 6 лет - Kotlin - буду рад если будут замечания по Golang части в комментариях Немного о себе - системный...">
<meta itemprop="description" content="Сразу дисклеймер, статья больше про Golang, но мой &quot;родной&quot; и основной на протяжении уже 6 лет - Kotlin - буду рад если будут замечания по Golang части в комментариях Немного о себе - системный...">
<meta property="og:description" content="Сразу дисклеймер, статья больше про Golang, но мой &quot;родной&quot; и основной на протяжении уже 6 лет - Kotlin - буду рад если будут замечания по Golang части в комментариях Немного о себе - системный...">
<meta name="twitter:description" content="Сразу дисклеймер, статья больше про Golang, но мой &quot;родной&quot; и основной на протяжении уже 6 лет - Kotlin - буду рад если будут замечания по Golang части в комментариях Немного о себе - системный...">
<meta property="aiturec:description" content="Сразу дисклеймер, статья больше про Golang, но мой &quot;родной&quot; и основной на протяжении уже 6 лет - Kotlin - буду рад если будут замечания по Golang части в комментариях Немного о себе - системный...">
<meta itemprop="image" content="https://habr.com/share/publication/714050/35ae2cd4bce406518f858f03ab3a3725/">
<meta property="og:image" content="https://habr.com/share/publication/714050/35ae2cd4bce406518f858f03ab3a3725/">
<meta property="og:image:width" content="1200">
<meta property="og:image:height" content="630">
<meta property="aiturec:image" content="https://habr.com/share/publication/714050/35ae2cd4bce406518f858f03ab3a3725/">
<meta name="twitter:image" content="https://habr.com/share/publication/714050/35ae2cd4bce406518f858f03ab3a3725/">
<meta property="vk:image" content="https://habr.com/share/publication/714050/35ae2cd4bce406518f858f03ab3a3725/?format=vk">
<meta property="vk:image" content="https://habr.com/share/publication/714050/35ae2cd4bce406518f858f03ab3a3725/?format=vk?format=vk">
<meta property="aiturec:item_id" content="714050">
<meta property="aiturec:datetime" content="2023-01-31T18:56:01.000Z">
<meta content="https://habr.com/ru/articles/714050/" property="og:url">
<meta property="og:type" content="article">
<meta property="og:locale" content="ru_RU">
<meta property="og:image:width" content="1200">
<meta property="og:image:height" content="630">
<meta name="keywords" content="kotlin, golang, портирование, ооп, ооп/фп">
<script type="application/ld+json" data-hid="1e0f0a2">{"@context":"http:\/\/schema.org","@type":"Article","mainEntityOfPage":{"@type":"WebPage","@id":"https:\/\/habr.com\/ru\/articles\/714050\/"},"headline":"Kotlin\/Golang работа в двух языках","datePublished":"2023-01-31T21:56:01+03:00","dateModified":"2023-01-31T21:56:01+03:00","author":{"@type":"Person","name":"comdivuz"},"publisher":{"@type":"Organization","name":"Habr","logo":{"@type":"ImageObject","url":"https:\/\/habrastorage.org\/webt\/a_\/lk\/9m\/a_lk9mjkccjox-zccjrpfolmkmq.png"}},"description":"Сразу дисклеймер, статья больше про Golang, но мой &quot;родной&quot; и основной на протяжении уже 6 лет - Kotlin - буду рад если будут замечания по Golang части в коммент...","url":"https:\/\/habr.com\/ru\/articles\/714050\/#post-content-body","about":["h_go","h_kotlin","f_develop"],"image":["https:\/\/habr.com\/share\/publication\/714050\/35ae2cd4bce406518f858f03ab3a3725\/"]}</script>
    <meta charset="UTF-8">
    <meta name="viewport"
      content="width=device-width,initial-scale=1.0,viewport-fit=cover,maximum-scale=1,user-scalable=0">
    <meta name="referrer" content="unsafe-url">
    <style>
      /* cyrillic-ext */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 400;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9E4kDNxMZdWfMOD5VvmojLazX3dGTP.woff2) format('woff2');
        unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;
      }

      /* cyrillic */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 400;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9E4kDNxMZdWfMOD5Vvk4jLazX3dGTP.woff2) format('woff2');
        unicode-range: U+0301, U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;
      }

      /* latin-ext */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 400;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9E4kDNxMZdWfMOD5VvmYjLazX3dGTP.woff2) format('woff2');
        unicode-range: U+0100-02AF, U+0304, U+0308, U+0329, U+1E00-1E9F, U+1EF2-1EFF, U+2020, U+20A0-20AB, U+20AD-20C0, U+2113, U+2C60-2C7F, U+A720-A7FF;
      }

      /* latin */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 400;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9E4kDNxMZdWfMOD5Vvl4jLazX3dA.woff2) format('woff2');
        unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+0304, U+0308, U+0329, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
      }

      /* cyrillic-ext */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 500;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnZKveSxf6Xl7Gl3LX.woff2) format('woff2');
        unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;
      }

      /* cyrillic */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 500;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnZKveQhf6Xl7Gl3LX.woff2) format('woff2');
        unicode-range: U+0301, U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;
      }

      /* latin-ext */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 500;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnZKveSBf6Xl7Gl3LX.woff2) format('woff2');
        unicode-range: U+0100-02AF, U+0304, U+0308, U+0329, U+1E00-1E9F, U+1EF2-1EFF, U+2020, U+20A0-20AB, U+20AD-20C0, U+2113, U+2C60-2C7F, U+A720-A7FF;
      }

      /* latin */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 500;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnZKveRhf6Xl7Glw.woff2) format('woff2');
        unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+0304, U+0308, U+0329, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
      }

      /* cyrillic-ext */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 700;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnLK3eSxf6Xl7Gl3LX.woff2) format('woff2');
        unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;
      }

      /* cyrillic */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 700;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnLK3eQhf6Xl7Gl3LX.woff2) format('woff2');
        unicode-range: U+0301, U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;
      }

      /* latin-ext */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 700;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnLK3eSBf6Xl7Gl3LX.woff2) format('woff2');
        unicode-range: U+0100-02AF, U+0304, U+0308, U+0329, U+1E00-1E9F, U+1EF2-1EFF, U+2020, U+20A0-20AB, U+20AD-20C0, U+2113, U+2C60-2C7F, U+A720-A7FF;
      }

      /* latin */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 700;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnLK3eRhf6Xl7Glw.woff2) format('woff2');
        unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+0304, U+0308, U+0329, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
      }
    </style>
    <link rel="preload" href="https://assets.habr.com/habr-web/css/theme/light-v1.css" as="style" media="(prefers-color-scheme: light)" /><link rel="preload" href="https://assets.habr.com/habr-web/css/theme/dark-v1.css" as="style" media="(prefers-color-scheme: dark)" /><link id="light-colors" rel="stylesheet" href="https://assets.habr.com/habr-web/css/theme/light-v1.css" media="(prefers-color-scheme: light)" /><link id="dark-colors" rel="stylesheet" href="https://assets.habr.com/habr-web/css/theme/dark-v1.css" media="(prefers-color-scheme: dark)" />
    <script>window.i18nFetch = new Promise((res, rej) => {
          const xhr = new XMLHttpRequest();
          xhr.open('GET', '/js/i18n/ru-compiled.35b2fec11bb79a62419ab67779c2dd82.json');
          xhr.responseType = 'json';
          xhr.onload = function(e) {
            if (this.status === 200) {
              res({ru: xhr.response});
            } else {
              rej(e);
            }
          };
          xhr.send();
        });</script>
    <style>
      .grecaptcha-badge {
        visibility: hidden;
      }
    </style>
    <meta name="habr-version" content="2.233.0">
    
    <meta name="apple-mobile-web-app-status-bar-style" content="#303b44">
    <meta name="msapplication-TileColor" content="#629FBC">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="mobile-web-app-capable" content="yes">
    <link rel="shortcut icon" type="image/png" sizes="16x16" href="https://assets.habr.com/habr-web/img/favicons/favicon-16.png">
    <link rel="shortcut icon" type="image/png" sizes="32x32" href="https://assets.habr.com/habr-web/img/favicons/favicon-32.png">
    <link rel="apple-touch-icon" type="image/png" sizes="76x76" href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-76.png">
    <link rel="apple-touch-icon" type="image/png" sizes="120x120" href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-120.png">
    <link rel="apple-touch-icon" type="image/png" sizes="152x152" href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-152.png">
    <link rel="apple-touch-icon" type="image/png" sizes="180x180" href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-180.png">
    <link rel="apple-touch-icon" type="image/png" sizes="256x256" href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-256.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 320px) and (device-height: 568px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1136x640.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 375px) and (device-height: 812px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2436x1125.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1792x828.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_828x1792.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 375px) and (device-height: 667px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1334x750.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1242x2668.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 414px) and (device-height: 736px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2208x1242.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 375px) and (device-height: 812px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1125x2436.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 414px) and (device-height: 736px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1242x2208.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 1024px) and (device-height: 1366px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2732x2048.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2688x1242.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 834px) and (device-height: 1112px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2224x1668.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 375px) and (device-height: 667px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_750x1334.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 1024px) and (device-height: 1366px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2048x2732.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 834px) and (device-height: 1194px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2388x1668.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 834px) and (device-height: 1112px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1668x2224.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 320px) and (device-height: 568px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_640x1136.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 834px) and (device-height: 1194px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1668x2388.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 768px) and (device-height: 1024px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2048x1536.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 768px) and (device-height: 1024px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1536x2048.png">
    <link rel="mask-icon" color="#77a2b6" href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-120.svg">
    <link crossorigin="use-credentials" href="/manifest.webmanifest" rel="manifest">
    <script async src="https://unpkg.com/pwacompat" crossorigin="anonymous"></script>
    <script>window.yaContextCb = window.yaContextCb || []</script>
    <script src="https://yandex.ru/ads/system/context.js" async></script>
  <link rel="preload" href="https://assets.habr.com/habr-web/css/chunk-vendors.04465f7c.css" as="style"><link rel="preload" href="https://assets.habr.com/habr-web/js/chunk-vendors.3b11d41f.js" as="script"><link rel="preload" href="https://assets.habr.com/habr-web/css/app.20959a76.css" as="style"><link rel="preload" href="https://assets.habr.com/habr-web/js/app.7a97ea6d.js" as="script"><link rel="stylesheet" href="https://assets.habr.com/habr-web/css/chunk-vendors.04465f7c.css"><link rel="stylesheet" href="https://assets.habr.com/habr-web/css/app.20959a76.css"></head>
  <body>
    
    <div id="mount"><div id="app" data-async-called="true"><div class="tm-layout__wrapper"><!--[--><!----><div></div><div class="tm-feature tm-feature"><!----></div><header class="tm-header" data-test-id="header"><div class="tm-page-width"><!--[--><div class="tm-header__container"><div class="tm-header__burger-nav" data-test-id="burger-nav"><button class="tm-header__button tm-header__button_burger" type="button"><svg class="tm-svg-img tm-header__icon tm-header__icon-burger" height="16" width="16"><title>Меню</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#header-burger"></use></svg></button></div><span class="tm-header__logo-wrap"><a class="tm-header__logo tm-header__logo_hl-ru tm-header__logo" href="/ru/"><svg class="tm-svg-img tm-header__icon" height="16" width="16"><title>Хабр</title><use xlink:href="/img/habr-logo-ru.svg#logo"></use></svg></a><span style="display:none;" class="tm-header__beta-sign">β</span></span><!----><div class="tm-header-user-menu tm-header_user-menu"><a href="/ru/search/" class="tm-header-user-menu__item tm-header-user-menu__search" data-test-id="search-button"><svg class="tm-svg-img tm-header-user-menu__icon tm-header-user-menu__icon_search" height="24" width="24"><title>Поиск</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#search"></use></svg></a><!----><!----><div class="tm-header-user-menu__item tm-header-user-menu__write"><div><svg class="tm-svg-img tm-header-user-menu__icon tm-header-user-menu__icon_write" height="24" width="24"><title>Написать публикацию</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#write"></use></svg></div><!----></div><!--[--><div class="tm-header-user-menu__item"><button class="tm-header-user-menu__toggle" data-test-id="user-menu-settings"><svg class="tm-svg-img tm-header-user-menu__icon" height="24" width="24"><title>Настройки</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#page-settings"></use></svg></button></div><a href="https://habr.com/kek/v1/auth/habrahabr/?back=/ru/articles/714050/&amp;hl=ru" rel="nofollow" class="tm-header-user-menu__item"><!--[--><button class="btn btn_solid btn_small tm-header-user-menu__login" type="button"><!--[-->Войти<!--]--></button><!--]--></a><!--]--><!----><!--teleport start--><!--teleport end--><!----></div></div><!--]--></div></header><div class="tm-layout"><div class="tm-page-progress-bar"></div><!----><!----><div class="tm-page-width"><!--[--><!--]--></div><main class="tm-layout__container"><div class="tm-page" hl="ru" data-async-called="true" style="--0c809c5a:16px;--a086013e:100%;--7c457026:0;"><div class="tm-page-width"><!--[--><!----><div class="tm-page__wrapper"><div class="tm-page__main_has-sidebar tm-page__main"><div class="pull-down"><!----><div class="pull-down__header" style="height:0px;"><div class="pull-down__content" style="bottom:10px;"><svg class="tm-svg-img pull-down__icon pull-down__arrow" height="24" width="24"><title>Обновить</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#pull-arrow"></use></svg></div></div><!--[--><!--[--><div class="banner-wrapper narrow" style="--467224fc:100px;--58ff5eba:auto;" data-v-ad758baa><!--[--><div class="placeholder-wrapper placeholder" data-v-ad758baa><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><div class="adfox-banner-placeholder narrow" data-v-12f7bcca><div class="image loads" data-v-12f7bcca></div><div class="lines" data-v-12f7bcca><div class="line loads" data-v-12f7bcca></div><div class="line loads" data-v-12f7bcca></div><div class="line loads" data-v-12f7bcca></div></div></div><!----></div><div id="adfox_169815559787254866" class="tm-adfox-banner" data-v-ad758baa></div><!--]--></div><div class="tm-article-presenter"><!--[--><!--]--><div class="tm-article-presenter__body" data-test-id="article-body"><div class="tm-misprint-area"><div class="tm-misprint-area__wrapper"><!--[--><article class="tm-article-presenter__content tm-article-presenter__content_narrow"><!--[--><div class="tm-article-presenter__header"><!--[--><!--]--><div class="tm-article-snippet tm-article-snippet tm-article-presenter__snippet"><!--[--><!--]--><div class="tm-article-snippet__meta-container"><div class="tm-article-snippet__meta"><span class="tm-user-info tm-article-snippet__author"><a href="/ru/users/comdivuz/" class="tm-user-info__userpic" data-test-id="user-info-pic" title="comdivuz"><div class="tm-entity-image"><!--[--><img alt="" class="tm-entity-image__pic" height="32" src="https://assets.habr.com/habr-web/img/avatars/082.png" width="32"><!--]--></div></a><span class="tm-user-info__user tm-user-info__user_appearance-default" data-test-id="user-info-description"><a href="/ru/users/comdivuz/" class="tm-user-info__username">comdivuz <!----></a><!--[--><span class="tm-article-datetime-published"><time datetime="2023-01-31T18:56:01.000Z" title="2023-01-31, 21:56">31  янв  2023 в 21:56</time></span><!--]--></span></span></div><!----></div><h1 class="tm-title tm-title_h1" lang="ru" data-test-id="articleTitle"><span>Kotlin/Golang работа в двух языках</span></h1><div class="tm-article-snippet__stats" data-test-id="articleStats"><!----><div class="tm-article-reading-time"><span class="tm-svg-icon__wrapper tm-article-reading-time__icon"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Время на прочтение</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#clock"></use></svg></span><span class="tm-article-reading-time__label">17 мин</span></div><span class="tm-icon-counter tm-data-icons__item"><svg class="tm-svg-img tm-icon-counter__icon" height="24" width="24"><title>Количество просмотров</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-views"></use></svg><span class="tm-icon-counter__value" title="11513">12K</span></span></div><div class="tm-publication-hubs__container" data-test-id="articleHubsList"><div class="tm-publication-hubs"><!--[--><span class="tm-publication-hub__link-container"><a href="/ru/hubs/go/" class="tm-publication-hub__link"><!--[--><span>Go</span><span class="tm-article-snippet__profiled-hub" title="Профильный хаб">*</span><!--]--></a></span><span class="tm-publication-hub__link-container"><a href="/ru/hubs/kotlin/" class="tm-publication-hub__link"><!--[--><span>Kotlin</span><span class="tm-article-snippet__profiled-hub" title="Профильный хаб">*</span><!--]--></a></span><!--]--></div></div><div class="tm-article-labels" data-test-id="articleLabels"><div class="tm-article-labels__container"><!----><!--[--><div class="tm-publication-label tm-publication-label_variant-sandbox"><a href="/ru/sandbox/" class="">Из песочницы</a></div><div class="tm-publication-label tm-publication-label_variant-recovery"><span>Recovery Mode</span></div><!--]--></div></div><!----><!----></div></div><!--[--><!----><div class="tm-article-body" data-gallery-root lang="ru"><div><!--[--><!--]--></div><div id="post-content-body"><div><div class="article-formatted-body article-formatted-body article-formatted-body_version-2"><div xmlns="http://www.w3.org/1999/xhtml"><blockquote><p>Сразу дисклеймер, статья больше про Golang, но мой "родной" и основной на протяжении уже 6 лет - Kotlin - буду рад если будут замечания по Golang части в комментариях</p></blockquote><p><em>Немного о себе - системный архитектор компании SpectrumData, тут вроде как по канонам хабра ни рекламы ничего давать нельзя, но есть канал по программированию у нас - можете найти - может что есть интересного. В архитекторах я оказался из разработчиков, стаж более 20 лет на разных платформах и задачах. Сейчас тоже стараюсь и сам писать и есть команды разработчиков в подчинении.</em></p><p>Никогда не писал на хабре. Обычно если какой-то материал появлялся, то для внутренних нужд или лучше смотрится в ролике. Но тут материала подкопилось текстового. Решил написать статью. Может кому-то будет интересно.</p><p>Так уж получилось, что у нас в компании используются разные стеки и языки. И в частности у нас есть большое подразделение, основным стеком которого является <strong>JVM с Kotlin</strong> в качестве языка разработки (вместо ванильной Java, на бэкенде). Но при этом этому же отделу регулярно приходится использовать в работе <strong>GoLang</strong>. В частности бывают кейсы:</p><ul><li><p>портирования кода (в обе стороны)</p></li><li><p>реализации каких-то компонентов сразу на 2-х языках (в основном это внутренние SDK)</p></li></ul><p><em>Сразу скажу - почему эта задача вообще в целом для нас легкая и подъемная - наши бэкенды на Kotlin строятся на микрофреймворках типа Ktor, а не на Spring или не дай бог JavaEE, соответственно тяжелых вопросов соответствия каких-то лютых Enterprise монструозных JAR каким-то решениям в Golang не стоит.</em></p><blockquote><p>Естественно, что мы сейчас говорим про языки и соответствие КОНСТРУКЦИЙ , а не про библиотеки или фреймворки.  </p></blockquote><p>Ну и некоторых ставит поначалу в ступор, что Kotlin/JVM это "про классы" и "не натив", а Golang это вроде как "процедурный стиль" и "натив".</p><p>На деле практически все довольно органично воспроизводится. В этой статье приведу некоторые примеры взаимозаменяемых конструкций и хаков. Материал в основном для тех кто пишет на Kotlin и для кого Golang - второй язык.</p><p>Сразу оговорюсь, что при переносе можно выделить несколько ситуаций, под одну гребенку все невозможно завести.</p><p>Простые:</p><ol><li><p>перенос один в один или очень близко в той же структуре кода (без учета непосредственно синтаксиса языка) с сохранением канона (каноничного стиля кода GoLang) - <strong>да почти все</strong></p></li><li><p>перенос один в один или через хаки, но без сохранения канона - код и API в итоге очень похоже на Kotlin, но при этом код не каноничен для GoLang - <strong>например статические методы, синглтоны, компаньоны</strong></p></li><li><p>нельзя перенести один в один, но есть канонические легко осваиваемые паттерны которые "по духу" и смыслу аналогичны Kotlin - <strong>как ни странно - почти все ООП воспроизводится без особых потерь на структурах без классов</strong></p></li></ol><p>Тяжелые:</p><ol><li><p>требуют пересмотра парадигмы языка и переноса не в лоб, требуют хорошего понимания концепций обоих языков - <strong>например соответствие пакетов в JVM и распределения кода и пакетов в Golang, любые переносы решений с большим использование корутин (они обманчиво похожи на горутины, но требуют иного планирования)</strong></p></li><li><p>можно перенести только хаками, при этом код на выходе плохой, не каноничный и при этом не до конца полный по смыслу и духу - <strong>это попытки полностью реализовать перечисления как классы, тотальную иммутабельность и защиту от NPE, решения сильно завязанные на рефлексию и т.п.</strong></p></li><li><p>вообще нельзя сделать идентичным - <strong>не так много таких вещей, но по факту это все, что сильно завязано на генериках в JVM понимании и сахарная функциональщина типа DSL</strong></p></li></ol><h2>List&lt;T&gt;.filter vs List&lt;T&gt;.map</h2><p>Начнем с примера в котором сразу будут показаны некоторые типовые переносы и один невозможный перенос.</p><p>Итак мы хотим перенести в Go функциональную обработку коллекций (а там этого явно не хватает, понятно есть какие-то внешние пакеты, но допустим хотим свое)</p><pre><code class="kotlin">fun &lt;T&gt; List&lt;T&gt;.filter(condition : (T)-&gt;Boolean): List&lt;T&gt; {
    return buildList {
      for (item in this) {
        if (condition(item)){
          add(item)
        }
      }
    }
}
fun &lt;T,R&gt; List&lt;T&gt;.map(mapper : (T)-&gt;R): List&lt;R&gt; {
    return buildList {
      for (item in this) {
          add(mapper(item))
      }
    }
}
</code></pre><p>И вот мы начинаем воспроизводить</p><p>Во-первых мы хотим это исполнить именно как метод, а не как функцию, чтобы их делать в цепь <code>l.Filter().Filter().Map().First()</code>, а не вкладывать <code>First( Map( Filter ( Filter(l)))</code> </p><p>Пробуем решить в лоб (не получится)</p><pre><code class="go">// пробуем навесить метод прямо на срез
func (s []any) Filter(condition func(item any) bool) []any
</code></pre><p>Сразу куча проблем - во-первых так нельзя - навешивать функции на чужие типы, во-вторых у нас резко теряется информация о типе!</p><pre><code class="go">// пробуем сделать generic-метод
func (s []T) Filter[T any](condition func(item T) bool) []any</code></pre><p>а так тем более нельзя - <strong>потому что вообще нет GENERIC методов в Golang, не завезли, функции есть, а методов - нет!</strong></p><p>Но тут на помощь приходит то, что по своей природе Golang - это в своей основе C, где нет аьясов типа, а есть создание типа на основе данного. Вот так можно:</p><pre><code class="go">type List[T any] []T
func (l List[T]) Filter(condition func(item T) bool) List[T]</code></pre><blockquote><p>Итак - первое, что уже можно выучить - нельзя навесить "расширение" на  уже кем-то в другом пакете написанную структуру, но можно сделать тип в своем пакете, эквивалентный целевому и сделать метод уже у него!</p></blockquote><p>но так просто это использовать не получится, потребуется:</p><pre><code class="go">// так не получится ([]int{1,2,3}).Filter(func(item int) bool {return item &gt; 1})
// а вот так да:
List[int]([]int{1,2,3}).Filter(func(item int) bool {return item &gt; 1})</code></pre><p>не красивый повтор параметра типа..., немного усовершенствуем:</p><pre><code class="go">// сделали а-ля приватную структуру, которую снаружи в явном виде создать нелья
// но в отличие от Kotlin можно ВОЗВРАЩАТЬ
type _ListType[T any] []T
// навесили на нее наш метод
func (l _ListType[T]) Filter(condition func(item T) bool) _ListType[T] {...}
// сделали "конструктор"
func List[T](l []T) _ListType[T] { return _ListType[T](l) }

// теперь сработает автовывод типа
mylist := List([]int{1,2,3}).Filter(...) // _ListType[int]</code></pre><p>Заодно приведем вариант реализации этого <code>Filter</code>, вдруг она кому-то не очевидна</p><pre><code class="go">func (l _ListType[T]) Filter(condition func(item T) bool) _ListType[T] {
    var result []T
    for _, item := range l { // _ListType[T] все еще []T
        if condition(item) {
            result = append(result, item)
        }
    }
    return result  // автоматический апкаст до _ListType[T] автоматически
}</code></pre><p><strong>Окрыленные своим успехом, мы без проблем реализуем такие методы как Take, TakeLast, Drop, DropLast , First, FirstOrDefault...</strong></p><p>Кстати а как сделать <strong>FirstOrDefault</strong>()?</p><p>И тут как это ни странно в Java/Kotlin, при всем богатстве рефлексии - это сложно, так как не очень понятно как именно в общем случае (не в частном, а общем) получить дефолтный экземпляр некоего типа T !!! Вот, что примерно бы было в Kotlin:</p><pre><code class="kotlin">fun &lt;T: Any&gt; List&lt;T&gt;.firstOrDefault(): T {
    if (this.size &gt; 0) return this[0] // тут все просто, а вот дальше...
    // все, приплыли
}
// немного переделаем
fun &lt;T: Any&gt; List&lt;T&gt;.firstOrDefault(clazz : KClass&lt;T&gt; ): T {
    if (this.size &gt; 0) return this[0] // тут все просто, а вот дальше...
    return clazz.createInstance() 
    // ну и мы понимаем, что это ни разу не общее решение и с кучей типов 
    // это не сработает как надо !!!
}
// добавим сахара
inline fun &lt;reified T:Any&gt; List&lt;T&gt;.firstOrDefault(): T = 
    this.firstOrDefault(T::class)</code></pre><p>В Golang это решается проще и можно запомнить идиому:</p><pre><code class="go">func (l _ListType[T]) FirstOrDefault() T {
    if len(l) &gt; 0 { return l[0] }
    var def T // просто определяем переменную! 
    // и так как в GO все переменные инициализируются дефолтным значением,
    // например 0, "", nil, пустая структура - то все, вуаля - можно возвращать
    return def
}</code></pre><p>Зато сложнее получить в общем случае поведение DefaultOrNil(), которое в Kotlin несколько проще достигается... ну это уже совсем нюансы</p><blockquote><p>Итак - второй "хак" - в Golang легко получить дефолт любого типа ,</p><p>просто определив переменную этого типа</p></blockquote><p>И вот мы очень все еще окрылены нашим успехом переноса <strong>функциональщины</strong>, частично <strong>генериков</strong> и <strong>расширений</strong> и все идет как надо....</p><p>Более того все переносы они даже и канонов каких-то особых не нарушают и читаются легко.</p><p><strong>Но тут мы резко и без предупреждения споткнемся о такой простой метод как </strong><code>List.map,</code><strong> напомню его код:</strong></p><pre><code class="kotlin">fun &lt;T,R&gt; List&lt;T&gt;.map(mapper : (T)-&gt;R): List&lt;R&gt; {
    return buildList {
      for (item in this) {
          add(mapper(item))
      }
    }
}</code></pre><p>Пытаемся в лоб:</p><pre><code class="go">func (l _ListType[T]) Map[R any] (mapper func(src T) R) _ListType[R] {
    var result []R
    for _, item := range l {
      result = append(result, mapper(item))
    }
    return result
}</code></pre><p>И тут мы упремся в короткое и лаконичное сообщение компилятора Golang:</p><p><code>syntax error: method must have no type parameters</code></p><p>О как! Обычные <strong>функции </strong>могут иметь тип-параметры , <strong>а методы (у которых есть ресивер) - нет!</strong> И более того нет никаких признаков, что их в ближайшее время завезут(!!!).</p><p>И вот тут мы напарываемся на первую преграду действительно серьезную:</p><blockquote><p>Шаблоны (генерики) в Golang намного слабее и не идут ни в какое сравнение по мощности и выразительности ни с Java/Kotlin ни тем более с Rust или с теми же шаблонами C++. <strong>Если ваше решение сильно завязано на генерики и они есть как у классов, так и у методов или расширений - скорее всего это та грань и та черта проекта, которая будет практически невозможно перенести на Golang без потерь в эргономике или семантике!!!</strong></p></blockquote><p>И получается,  что в рамках нашей задумки вполне можно реализовать методы, которые не требуют второго генерика и не получится нормально тех, которые требуют (Map, Zip, частично Fold, Reduce).</p><p>Соответственно мы можем реализовать Map , Fold, Reduce только в варианте с тем же типом, <strong>но не в обобщенной форме, то есть на вход List&lt;T&gt; и на выход List&lt;T&gt; или T, но не List&lt;R&gt;, R</strong>:</p><pre><code class="go">func (l _ListType[T]) Map (mapper func(item T) T) _ListType[T] {
    var result []T
    for _, item := range l {
        result = append(result, mapper(item))
    }
    return result
}</code></pre><p>В таком виде естественно будет работать - но очевидно что это не тот <code>Map</code> о котором мы джва года уже мечтали...</p><p>Соответственно какие выводы можно сделать:</p><ul><li><p>в целом нет сложности в переносе "функциональщины", "ламбд" и расширений, со своими нюансами, плюсами и минусами - но примерно понятно и комфортно</p></li><li><p>но если решение все построено на шаблонах, на косвенной типизации - то в Golang надо будет переработать саму модель использования этого кода или пойти на уйму компромиссов</p></li></ul><p>И кстати частный случай компромисса, достаточно простой, в Kotlin мы имеем перегрузку методов по сигнатуре на одно и то же имя (как это было еще заведено в Pascal):</p><pre><code class="kotlin">fun myFun(s: String) {...}
fun myFun(i: Int) {...}
...</code></pre><p>В golang так нельзя, потребуется </p><pre><code class="go">func MyFunS(s string) {}
func MyFunI(i int) {}</code></pre><p>как это было бы еще в C, но при этом конечно имена функций будут разными и содержать тип параметра в том или ином виде</p><p>или же можно воспользоваться тем, что в Golang можно использовать несколько иную модель ограничений генериков, и если у нас фиксированный список поддерживаемых перегрузок (замкнутый), то можно:</p><pre><code class="go">func MyFun[T string|int] MyFun() {}</code></pre><p>но тогда внутри придется делать switch по типу, в общем не факт, что это так уж хорошо</p><h2>Свойства, конструкторы, инициализация</h2><p>Тут на самом деле все переносится более менее легко, как ни странно.</p><p>Возьмем какой-то такой код на Kotlin, несколько синтетический, но полный всяких фич, которые кажутся не поддерживаемыми на Golang</p><pre><code class="kotlin">// интерфейс со свойством, в go нет свойств
interface IMyInterface { 
  val x : Int 
  // в go нет никаких компаньонов или статических методов 
  // для интерфейсов, вообще статических нет методов
  companion object {
    fun createDefault() : IMyInterface = MyDefaultImpl()
  }
} 
// явная типизация интерфейсом, а не утиная, в go нельзя явно указать
// что структура держит интерфейс!

// у параметров не бывает дефолтов
private class MyDefaultImpl (i: Int = 10) : IMyInterface { 
  // в структуре нельзя прямо прописать связанность полей
  private val d: Double = i.toDouble()
  // нет аналога init в golang
  init {
    require(d &gt; -1.0) {"d должно быть больше -1.0"}
  }
  // ну какие в golang свойства и lazy
  override val x by lazy { return (d * 2.13).toInt() }
}
</code></pre><p>Как ни странно - практически все из этого на Golang выполнимо практически без пересмотра семантики и даже без особых изменений в API</p><pre><code class="go">package my
// или GetX() - ну да, свойств нет, но getter никто не отменял!
type IMyInterface interface {
  X() int 
  // тему "статических" методов и компаньонов оставим на конец
}
// все что не на большие буквы - private, точнее package private
type _MyDefaultImpl struct {
  d float64 // поле которое при создании заполняется
  x int     // кэшированный lazy результат
  lazy_x bool // признак, что lazy уже вызывался
}

// определим дефолт, его будем потом уже при вызове использовать
const _DEFAULT_I = 10
// приватный конструктор ну и раз в kotlin по ссылке все,
// то и тут вренем по ссылке
func newMyDefaultImpl(i int) *_MyDefaultImpl {
  // и сейчас некоторый аналог init
  d:=float64(i)
  // некоторое воспроизведение require
  if d &lt; 1.0 {
    panic("d должно быть больше -1.0")
  }
  // собственно вернули структуру
  return &amp;_MyDefaultImpl{d: d}
}
// ну и реализуем интерфейс
func (d *_MyDefaultImpl) X() int {
  // собственно lazy getter и можно в принципе и по синхронизации
  // порешать через mutex, в данном примере особой нужды делать это не видел
  if !d.lazy_x {
    d.x = int(d * 2.13)
    d.lazy_x = true
  }
  return d.x
}


// тему статического факторизующего метода, можно сделать канонично для GO
func IMyInterface_CreateDefault() IMyInterface {
  // или я видел имена CreateDefaultIMyInterface, что более в каноне
  return newMyDefaultImpl(_DEFAULT_I) // вот собственно наш дефолт
}

/////////////////////////////////////////////////////////////////
// НА ПРАВАХ ХАКА - как все же заставить golang 
// иметь "компаньоны"

// а можно даже исполнить синтаксически схоже c Kotlin
// можно будет вызывать именно как IMyInterface_().createDefault()
// напомню, что это `package private` - все что не с больших букв
type _myInterfaceCompanion struct {} // пустая структура как псевдо тип
func (_ _myInterfaceCompanion) CreateDefault() IMyInterface {
  return newMyDefaultImpl(10) // вот собственно наш дефолт
}
func IMyInterface_() _myInterfaceCompanion { return _myInterfaceCompanion{}}
// все, теперь снаружи можно так my:= IMyInterface_().CreateDefault()
///////////////////////////////////////////////////////////////

// а вот это НЕ УТИНАЯ типизация - явное требование компилятору
// еще при сборке проверить, что *_MyDefaultImpl поддерживает IMyInterface
var _ IMyInterface = &amp;_MyDefaultImpl{}</code></pre><p>Теперь в клиентском коде мы получаем поведение, подобное Kotlin классу</p><p>В kotlin:</p><pre><code class="kotlin">import my
val x : IMyInterface = IMyInterface.createDefault()</code></pre><pre><code class="kotlin">import "my"

var x my.IMyInterface = my.IMyInterface_().CreateDefault()
//или  var x my.IMyInterface = my.IMyInterface_CreateDefault()
</code></pre><p>Более того, можно довести совсем до Kotlin-стайла, что правда резко расходится с каноном:</p><pre><code class="go">...
type _myInterfaceCompanion struct {} // пустая структура как псевдо тип
func (_ _myInterfaceCompanion) CreateDefault() IMyInterface {
  return newMyDefaultImpl(10) // вот собственно наш дефолт
}
// полный антипаттерн - глобальная переменная! 
// но синтаксически можно
var IMyInterface_  _myInterfaceCompanion = _myInterfaceCompanion{}</code></pre><p>Ну и тогда вообще до смешения</p><pre><code class="go">// именно так, с точкой, по аналогии с импортами Java чтобы было поведение
import . "my" 
// все отличие от Kotlin только что подчеркивание вставили, иначе
// коллизия имен
var x IMyInterface = IMyInterface_.CreateDefault()</code></pre><p>Итак резюмирую:</p><blockquote><p>Все что связано со свойствами, конструкторами, компаньонами, статическими методами, инициализацией, фабричными методами, ленивыми свойствами - без особых сложностей переносится и можно сделать в итоге и более канонично но менее похоже на Kotlin (по внешнему API), а можно менее канонично, но почти один в один по внешнему виду</p></blockquote><h2>Обработка ошибок</h2><p>Тот случай, когда лучше не пытаться переносить подход Java/Kotlin в Golang и от этого все выиграют.</p><p>Может когда-то напишу про это, но я точно из лагеря тех, кто считает, что с появлением исключений и особенно их структурированной обработки (try/catch) и особенно с finally блоком в этой структурной обработке - <strong>эволюция пошла не туда. </strong>И меня нисколько не удивляет, что в новых языках типа <strong>Golang </strong>или <strong>Rust, </strong>есть паники, есть ошибки, паники могут тоже развертывать стек и так или иначе перехватывать (<strong>recovery </strong>в golang и <strong>catchUnwinded</strong> в Rust) - тем не менее там нет и близко try/catch/finally</p><p>Соответственно при переносах обработки ошибок можно действовать так</p><p><strong>Перенос throw</strong></p><p>Тут 2 ситуации - определитесь - это действительно "исключение", которое сигнализирует, что программа загнала себя в ситуацию, с которой не может справиться и может проще ее завершить чем продолжать работу. В этом случае эквивалентом будет <strong>panic</strong></p><pre><code class="kotlin">fun myFun() {
    if (callSomething() == null) {
       throw Exception("все у нас вообще null, такого не может быть!")      
    }
}
fun main() {
    myFun() // никакой обработки try/catch
}</code></pre><pre><code class="go">funс MyFun() {
    if (СallSomething() == nil) {
       panic("все у нас вообще nil, такого не может быть!")      
    }
}
funс main() {
    MyFun() // никакой обработки try/catch
}</code></pre><p>Но бывает и другая ситуация, когда исключение это по сути "сигнал", который следует обработать. Тогда в терминах, непривичных джавистам - это не "исключение" и не "паника", а "ошибка". То есть четко различаются <strong>паники -</strong> нечто, что скорее всего не обработать и реальный сбой, - приводит скорее всего к завершению приложения и <strong>ошибки - </strong>некие сигналы о каких-то сбоях и проблемах, которые можно <strong>как обработать</strong>, так и <strong>проигнорировать </strong> и за это уже отвечает вызывающий код</p><pre><code class="kotlin">fun myFun() {
    if (callSomething() == null) {
       throw Exception("все у нас вообще null, такого не может быть!")      
    }
}
fun main() {
   try{
    myFun()
   }catch(e: Throwable) { // тут у нас реакция с легким сайдэффектом и игнором
     println(e.Message)
   } 
}</code></pre><p>то лучше использовать внятное</p><pre><code class="go">func MyFun() error {
  if (CallSomething() == null) {
       return fmt.Errorf("все у нас вообще null, такого не может быть!")      
    }
  return nil
}

func main() {
   err := MyFun()
   if err != nil {
     fmt.Println(e.Error())
   }
}</code></pre><blockquote><p>Главный совет. Обработка ошибок - это то, что в Java/Kotlin/C++ и еще много где исполнено на "исключениях" и их структурной обработке. Эта история собирает все больше критики и от нее все чаще отказываются (в новых языках). Golang не пригоден работать в модели и делать <strong>panic (a-ka throw) </strong> чтобы потом делать <strong>recover (a-ka catch) </strong>и где надо и не надо писать <strong>defer (a-ka finally)</strong> - это будет самый плохой пример попытки натянуть ежа на уже, хуже чем с приведенными выше "компаньонами". </p><p>Мало того, что если вы переносите в Golang - лучше чуть поработать и сделать в его модели. Если вы наоборот ИЗ Golang переносите в Kotlin лучше СОХРАНИТЬ эту модель обработки - благо в Kotlin из коробки есть Result&lt;T&gt; и в целом нет проблемы сделать обработку ошибок и без выбрасывания исключений.</p></blockquote><h2>Что лучше не пытаться переносить а лучше упростить</h2><p>Как мы увидели выше - Golang в принципе позволяет работать близко к ООП, да и вообще не требует такой массы компромиссов c Java/Kotlin как например порты на С. Но есть вещи, которые идеологически отличают Golang и Kotlin - причем настолько, что при переносе из Kotlin в Golang мы практически гарантировано будем исключать некоторые вещи, как не поддерживаемые, а при переносе из Golang в Koltin наоброт переписывать или добавлять.</p><p>Главное что отличает Golang от Kotlin, прямо в их манифестах:</p><ul><li><p><strong>Kotlin</strong> - это про <strong>всеядность</strong> и <strong>сахар</strong> (нет единого стиля, расширения, делегаты, перегрузка операторов, инфикс функции, DSL, tail function arg, компаньоны, объекты, смарткасты, условия как выражения, no-return, ....) </p></li><li><p><strong>Golang</strong> - это про <strong>унификацию</strong> и <strong>простоту</strong> (один формат, один вариант инструкции, решения в лоб, про все)</p></li></ul><p>По факту это языки с диаметрально разной идеологией!</p><p>Соответственно из Kotlin в golang не переносятся вещи, которые заведомо сделаны для сахара и хитрых решений. И если обобщить - то это все, что связано с DSL и всякими "котлинскими штучками"</p><ul><li><p>не будет никакого <strong>tailrec</strong> - если надо рубите "хвосты" сами</p></li><li><p>никакой перегрузки операторов - заменяйте просто функциями</p></li><li><p>никаких "псевдоблоков" новых в языке за счет функций последним параметров </p></li><li><p>никаких инфиксов</p></li><li><p>более менее можно играть в "делегаты" - lazy например был выше показан - но язык Вас в этом не поддержит, скорее всего вы не будете делегировать ради делегирования, а сделаете более в лоб (благо композиция как паттерн в golang как раз на высоте)</p></li></ul><p><strong>Рефлексия...</strong></p><p>Чем меньше рефлексии тем лучше. Всюду. Точка. <br/>P.S. Особенно в голанге</p><p>Если все решение у вас в Kotlin опирается на рефлексию, с учетом полиморфизма, с анализом метаданных свойств, методов и прочего - скорее всего вы это никак не перенесете. И в целом в go рефлексия это примитивные апкасты до интерфейса и не более того (точнее там есть еще всякий typeOf и прочее), но будем честны - рефлексия в Java и в Kotlin особенно - на порядок просто сложнее и многофункциональнее. </p><p>Если допустим вы пытаетесь (а у нас такая история есть) портировать какие-то валидаторы, расширенные сериализаторы, какие-то ORM-подобные штуки, которые как правило сильно опираются на аннотации, на рефлексию, - то скорее всего это обречено на провал.</p><p>В golang тоже есть свои аннотации (не объекты, а такие скорее строки структурированные), есть немного рефлексии - но ее Вам скорее не хватит. </p><p>Скорее всего придется все планировать с нуля или вообще альтернативно к вопросу подойти - упростить логику или на кодогенерации построить или еще как-то</p><h2>Корутины vs Горутины</h2><p>Тут отдельный разговор и не на один час и наверное тут, в этой статье я не буду сильно останавливаться, так как у нас речь больше шла про синтаксис, а не про рантаймы.</p><p>В целом имея уже некоторый опыт переноса я бы свел к двум вещам</p><ul><li><p>В <strong>Golang</strong> горутины - это очень просто, на два щелчка, более менее понятно как оркестрировать, но при  этом все как по рельсам - ни вправо ни влево и без возможности влиять на то как это все работает</p></li><li><p>В <strong>Kotlin</strong> корутины - с одной стороны часть языка (<strong>suspend</strong>) но это именно "приостановка" и асинхронщина в чистом своем виде, а корутины - это отдельная библиотека, надостройка, которая уже занимается парарлеллизмом и там собственно оркестрацией как таковой. В итоге все сложнее, многословнее, зато можно кучу всяких финтов делать</p></li></ul><p>Так вот </p><ul><li><p>Golang относительно легко переносится в Kotlin, только в Kotlin больше кода обвязки возникает</p></li><li><p>Из Kotlin же в Golang переносится только с серьезным упрощением и перепланированием</p></li></ul><p>То есть если у вас просто <code>GlobalScope.launch {... }</code>  и в лучшем случае потом <code>join</code>  , то скорее всего вы просто это перепишите на <code>go func() {...}()</code> и там <code>WaitGroup</code></p><p>Но если у вас собственные пулы потоков, связанные скоупы, донастроенные диспетчеры, ConflateChannel и тому подобное... то простите - простым и в лоб Ваш порт быть не может.</p><p>В таком случае точно придется пойти на какие-то упрощения, компромиссы и перепланирование.</p><h2>Ссылки, значения, копии</h2><p>Есть несколько концепций, которые Kotlin-истам, джавистам даются почему-то обычно со скрипом.</p><p>Первая - это передача по ссылке и по значению, а также связанные вещи - разыменование, копирование, почему интерфейс в голанге это и не ссылка и не значение и прочее. Естественно это то, что надо просто <strong>знать </strong>и <strong>понимать.</strong></p><p>Естественно, что для тех кто пишет на C/C++/Rust нет никакой сложности в том, чтобы понять что такое &amp; и * и что такое передача по значению по указателю или по ссылке (и кстати в чем отличия указателей и ссылок)</p><p>Но для тех, кто привык что все по ссылке (или вообще об этом не задумаывается), а это в обещм и целом Java, Kotlin, C# (в общем случае), JavaScript, Python  при начале работы на Go лучше к чему приучиться:</p><ul><li><p>все, что связано со структурами по умолчанию делайте на <strong>ссылках</strong></p></li><li><p>переводите на передачу по значению и на использование значений - только если четко понимаете зачем, почему</p></li></ul><blockquote><p>Любой гофер опытный будет плеваться от этого совета, потому что "так в нативе не принято". Ты обычно итак понимаешь в каких контекстах тебе нужно что и соответственно это и применяешь. И прогоняешь через профайлер. <strong>Но для использования как второго языка и для большего сходства именно такой совет</strong></p></blockquote><p>То есть вот так лучше не делать (если не уверены)</p><pre><code class="go">
type Foo stuct {
   X int
}
type Bar struct {
    F Foo
    Y int
}
func NewFoo () Foo {...}
func (b Bar) Do(f Foo) {...}
</code></pre><p>если вы не понимаете что при этом делается и когда - то рано или поздно напоретесь, что получаете неожиданное поведение из-за того что всюду сплошные копии и каких-то общих объектов нет. А джавистам привычнее как раз работать с общими объектами. Поэтому лучше</p><pre><code class="go">type Foo stuct {
   X int
}
type Bar struct {
    F *Foo
    Y int
}
func NewFoo () *Foo {...}
func (b *Bar) Do(f *Foo) {...}</code></pre><p>да, скорее всего в каких-то случаях это будет менее эффктивно из-за аллокаций и смотрится может как-то неприятно - много &amp; и *. <strong>Но зато оно ведет себя так как этого обычно ожидают от экземпляров джависты.</strong></p><p>При этом сделать копию в golang <strong>ВООБЩЕ НЕ ПРОБЛЕМА</strong></p><pre><code class="go">func I_Will_Return_Copy(foo *Foo) *Foo {
     var cpy Foo = *foo // вот и все снятие копии
     return &amp;cpy // вернули от нее ссылку
}</code></pre><p>собственно никаких data class и не надо для go для copy, так как нет "классов", а структуры - это то, что спокойно копируется по памяти "из коробки"</p><h2>Утиная типизация (интерфейсы)</h2><p>Вторая многим непонятная концепция - утиная типизация при имплементации интерфейсов.</p><p>Ну тут не только джависты, но и почти все немного поначалу недоумевают... Такой концепции интерфейсов как в Golang почти нигде нет, только вот в  Python и Golang. Но когда речь идет про Python - то там все легко это воспринимают "динамический же язык, что с него взять, понятно все там как-то налету кастуется" и в языке со строгой типизацией это тяжело воспринимается.</p><p>Кто не знает "утиная" это следующее: <strong>утка не знает, что она "утка", она вообще ничего может не знать ни о чем, но она при этом КРЯКАЕТ (func (u *Me) Kryack()), и ПЛАВАЕТ (func (u *Me) Swim()) - поэтому для орнитолога (вызывающая сторона) она УТКА (type IDuck interface { Kryack() ; Swim() }) - независимо от знаний утки. То есть нечто имеет интерфейс "утка" не потому что в ней это определено, а потому что кто-то решил что она соответствует... как -то так</strong></p><p>Вот собственно и вся концепция. Владелец интерфейса - его клиент. Он определяет там, что должен уметь тип. Если какой-то тип соответствует - значит он реализует интерфейс. Сам тип при этом может ничего про существование интерфейса не знать.</p><p>Свежо, методично, модно, молодежно... но непривычно.</p><p>Для разработчиков на Java, особенно на Java EE или Spring мир выглядит совсем не так, а наоборот:</p><ul><li><p>все нужные интерфейсы за тебя давно написаны - смотри Spring Reference (с) Bloody Enterprise</p></li><li><p>твоя задача их строго выполнить (c) Bloody Enterprise</p></li></ul><p>Соответственно вся эта утиная история вообще кажется дикой на первый взгляд.</p><p>И для начала введу вас обратно в зону комфорта, напомню, что на Go можно и не по-утиному а вполне и по-спринговому:</p><pre><code class="go">//   /enterprise/core/ifaces.go
package ifaces
type IRepository interface { 
  GetAll() []any
}
type IRefreshable interface {
  IsObsolete() bool
}
---------------------------------------------
//  /myplugin/plugins.go
package plugins
import "enterprise/core/ifaces"

// это наш компонент
type MyRefreshableRepositoryImpl struct {}
// вот вполне пока утиная реализация - мы тут нигде не упоминаем 
// интерфейсы и не можем быть уверены что все что хотели реализовали
func (r *MyRefreshableRepositoryImpl) GetAll() []any {...}
func (r *MyRefreshableRepositoryImpl) IsObsolete() bool {...}

// а вот это по сути "указание" компилятору провести 
// на этапе компиляции, что мы соответствуем нужным интерфейсам
// получается что-то вроде class MyRefreshableRepositoryImpl: IRepository, IRefreshable
var _ ifaces.IRepository = &amp;MyRefreshableRepositoryImpl{}
var _ ifaces.IRefreshable = &amp;MyRefreshableRepositoryImpl{}
</code></pre><p>думаю, что любого джависта это уже должно устроить, хотя это немного как хак выглядит.</p><p>От себя - в целом утиная типизация - это то, что раскрывается постепенно, в какой-то момент в каком-то модуле вы можете понять, что вот тут вот как раз она и пригодилась и в ситуации без нее - все было бы хуже. Так что в целом утиная типизация - концепция хотя и экзотическая несколько на общем фоне - но не особо напрягающая, а иногда выручающая.</p><h2></h2><h2>Тесты</h2><p>Тут все просто. Если вы используете в своем решении на Kotlin стандартные тестовые фреймворки с базой на JUnit, - Kotest, Kotlintest, то скорее всего никаких сложностей переносить на Golang тесты у вас не будет.</p><p>Обратное тоже верно - тесты на <code>testing</code> переносятся без проблем в целевые фреймворки на JVM</p><p>Что нужно наверное учесть</p><ol><li><p>Практически всегда надо затаскивать в проект библиотеку <a href="https://pkg.go.dev/github.com/stretchr/testify/assert" rel="noopener noreferrer nofollow">https://pkg.go.dev/github.com/stretchr/testify/assert</a> - это из тех пакетов, которым место в стандартном наборе пакетов, но исторически живет где-то отдельно</p></li><li><p>Многие не смотрят что там внутри <code>testing.T</code> и очень обедняют свои тесты при переносе, а вообще-то в этой структуре есть метод Run который позволяет стартовать дочерние тест - соответственно  вы можете спокойно обеспечить себе дизайн с пре- и пост- перехватчиками, с иерархией тестов, с порождением тестов или табличными тестами - все это <strong>ИЗ КОРОБКИ</strong></p></li><li><p>Многие не знают, что кроме тестов в Golang встроены и бенчмарки - поэтому если у вас использовались какие-то бенчмарки под JVM в тестах или какая-то кустарщина - в принципе тоже легко переносится</p></li></ol><h2>Заключение</h2><p>Ну вот такая вышла статейка на нашу местную злобу дня. </p><p>Уверен, что многое еще чего можно написать на эту тему, но подкопилась пока именно такая подборка замечаний, зато по горячим так сказать следам....</p><p>Надеюсь, что кому-то еще это может оказаться полезным. Также надеюсь на конструктивную критику и замечания от неравнодушных</p></div></div></div><!----><!----></div><!----><!----></div><!--]--><!----><div class="tm-article-presenter__meta" data-test-id="article-meta-links"><div class="tm-separated-list tm-article-presenter__meta-list"><span class="tm-separated-list__title">Теги:</span><ul class="tm-separated-list__list"><!--[--><li class="tm-separated-list__item"><!--[--><a href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[kotlin]" class="tm-tags-list__link"><span>kotlin</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[golang]" class="tm-tags-list__link"><span>golang</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[%D0%BF%D0%BE%D1%80%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5]" class="tm-tags-list__link"><span>портирование</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[%D0%BE%D0%BE%D0%BF]" class="tm-tags-list__link"><span>ооп</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[%D0%BE%D0%BE%D0%BF/%D1%84%D0%BF]" class="tm-tags-list__link"><span>ооп/фп</span></a><!--]--></li><!--]--><!----></ul></div><div class="tm-separated-list tm-article-presenter__meta-list"><span class="tm-separated-list__title">Хабы:</span><ul class="tm-separated-list__list"><!--[--><li class="tm-separated-list__item"><!--[--><a href="/ru/hubs/go/" class="tm-hubs-list__link"><!--[--><span>Go</span><!--]--></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a href="/ru/hubs/kotlin/" class="tm-hubs-list__link"><!--[--><span>Kotlin</span><!--]--></a><!--]--></li><!--]--><!----></ul></div></div><!----><!--]--></article><!--]--></div><!----></div><div style="" class="tm-article-sticky-panel" data-test-id="article-sticky-panel"><div class="tm-data-icons tm-data-icons tm-data-icons_space-big tm-article-sticky-panel__icons" data-test-id="article-stats-icons"><div class="tm-article-rating tm-data-icons__item"><div class="tm-votes-meter tm-article-rating__votes-switcher"><svg class="tm-svg-img tm-votes-meter__icon tm-votes-meter__icon tm-votes-meter__icon_appearance-article" height="24" width="24"><title>Всего голосов 15: ↑13 и ↓2</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-rating"></use></svg><span class="tm-votes-meter__value tm-votes-meter__value_positive tm-votes-meter__value_appearance-article tm-votes-meter__value_rating tm-votes-meter__value" data-test-id="votes-meter-value" title="Всего голосов 15: ↑13 и ↓2">+14</span></div><!--teleport start--><!--teleport end--><!----></div><!----><!----><button class="bookmarks-button tm-data-icons__item" title="Добавить в закладки" type="button"><span class="tm-svg-icon__wrapper bookmarks-button__icon"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Добавить в закладки</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-favorite"></use></svg></span><span class="bookmarks-button__counter" title="Количество пользователей, добавивших публикацию в закладки">48</span></button><div class="tm-sharing tm-data-icons__item" title="Поделиться"><button class="tm-sharing__button" type="button"><svg viewbox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" class="tm-sharing__icon"><path fill="currentColor" d="M13.8 13.8V18l7.2-6.6L13.8 5v3.9C5 8.9 3 18.6 3 18.6c2.5-4.4 6-4.8 10.8-4.8z"></path></svg></button><!--teleport start--><!--teleport end--></div><div class="tm-article-comments-counter-link tm-data-icons__item" title="Читать комментарии"><a href="/ru/articles/714050/comments/" class="tm-article-comments-counter-link__link" data-test-id="counter-comments"><!--[--><svg class="tm-svg-img tm-article-comments-counter-link__icon" height="24" width="24"><title>Комментарии</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-comments"></use></svg><span class="tm-article-comments-counter-link__value">12</span><!--]--></a><!----></div><!--[--><!--[--><!--[--><!----><!--]--><!--]--><!--]--><!--teleport start--><!--teleport end--><!----></div></div></div><!--[--><!--]--><div class="tm-article-presenter__footer"><!--[--><!--[--><div class="tm-article-blocks"><!----><!--[--><section class="tm-block tm-block tm-block_spacing-bottom"><!----><!--[--><div class="tm-block__body tm-block__body tm-block__body_variant-balanced"><!--[--><div class="tm-article-author" data-test-id="article-author-info" data-async-called="true"><!--[--><!--]--><div class="tm-user-card tm-user-card tm-user-card_variant-article tm-article-author__user-card" data-async-called="true"><div class="tm-user-card__info-container"><div class="tm-user-card__header"><div class="tm-user-card__header-data"><a href="/ru/users/comdivuz/" class="tm-user-card__userpic tm-user-card__userpic_size-40"><div class="tm-entity-image"><!--[--><img alt="" class="tm-entity-image__pic" src="https://assets.habr.com/habr-web/img/avatars/082.png"><!--]--></div></a><div class="tm-user-card__meta"><div class="tm-counter-container tm-karma tm-karma" title=" 31 голос "><div class="tm-counter-container__header"><!--[--><div class="karma-display negative" data-v-7635202e>-5</div><!----><!--]--></div><div class="tm-counter-container__footer"><!--[--><div class="tm-karma__text">Карма</div><!--teleport start--><!--teleport end--><!--]--></div></div><div class="tm-counter-container" title="Рейтинг пользователя"><div class="tm-counter-container__header"><!--[--><!--[--><!--]--><div class="tm-votes-lever tm-votes-lever tm-votes-lever_appearance-rating"><!----><div class="tm-votes-lever__score tm-votes-lever__score_appearance-rating tm-votes-lever__score"><!--[--><span><span class="tm-votes-lever__score-counter tm-votes-lever__score-counter_rating tm-votes-lever__score-counter" data-test-id="votes-score-counter">0</span></span><!--]--></div><!----></div><!--]--></div><div class="tm-counter-container__footer"><!--[--><span class="tm-rating__text tm-rating__text">Рейтинг</span><!--]--></div></div></div></div></div><div class="tm-user-card__info tm-user-card__info_variant-article tm-user-card__info"><div class="tm-user-card__title tm-user-card__title_variant-article tm-user-card__title"><!----><a href="/ru/users/comdivuz/" class="tm-user-card__nickname tm-user-card__nickname tm-user-card__nickname_variant-article"> @comdivuz</a><!----></div><p class="tm-user-card__short-info tm-user-card__short-info_variant-article tm-user-card__short-info" data-test-id="user-card-speciality">Пользователь</p></div></div><!----><div class="tm-user-card__buttons tm-user-card__buttons_variant-article tm-user-card__buttons"><!----><div class="tm-user-card__button"><div class="tm-button-follow tm-user-card__button-follow"><!----><button class="tm-button-follow__button tm-button-follow__button_big" data-test-id="follow-button" type="button">Подписаться</button></div></div><!----><div class="tm-user-card__button tm-user-card__button_write" data-test-id="user-card-conversations"><svg class="tm-svg-img tm-user-card__button-icon" height="16" width="16"><title>Отправить сообщение</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#mail"></use></svg></div><!----></div><!----></div><div class="tm-article-author__user-contacts" data-test-id="author-contacts"><!----><!----><!----></div></div><!--]--></div><!--]--><!----></section><!----><!--[--><div class="banner-wrapper leaderboard tm-page-article__banner" style="--467224fc:200px;--58ff5eba:auto;" data-v-ad758baa><!--[--><div class="placeholder-wrapper placeholder" data-v-ad758baa><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><div class="adfox-banner-placeholder leaderboard" data-v-12f7bcca><div class="image loads" data-v-12f7bcca></div><div class="lines" data-v-12f7bcca><div class="line loads" data-v-12f7bcca></div><div class="line loads" data-v-12f7bcca></div><div class="line loads" data-v-12f7bcca></div></div></div><!----></div><div id="adfox_164725660339535756" class="tm-adfox-banner" data-v-ad758baa></div><!--]--></div><!--]--><!--]--><div class="tm-article-blocks__comments"><div id="publication-comments" class="tm-article-page-comments"><div><!--[--><div class="tm-article-comments-counter-link tm-article-comments-counter-button"><a href="/ru/articles/714050/comments/" class="tm-article-comments-counter-link__link tm-article-comments-counter-link__link_button-style" data-test-id="counter-comments"><!--[--><svg class="tm-svg-img tm-article-comments-counter-link__icon tm-article-comments-counter-link__icon_contrasted" height="24" width="24"><title>Комментарии</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-comments"></use></svg><span class="tm-article-comments-counter-link__value tm-article-comments-counter-link__value_contrasted"> Комментарии 12 </span><!--]--></a><!----></div><!--]--></div></div></div><!--[--><!--[--><!--]--><section class="tm-block tm-block tm-block_spacing-bottom"><header class="tm-block__header tm-block__header tm-block__header_variant-borderless"><div class="tm-block__header-container"><h2 class="tm-block__title tm-block__title tm-block__title_variant-large">Публикации</h2><!--[--><!--]--></div><!----></header><!--[--><div class="tm-block__body tm-block__body tm-block__body_variant-condensed-slim"><!--[--><!--[--><div class="tm-tabs tm-tabs"><div class=""><!--[--><span class="tm-tabs__tab-item"><button class="tm-tabs__tab-link tm-tabs__tab-link_active tm-tabs__tab-link_slim tm-tabs__tab-link">Лучшие за сутки</button></span><span class="tm-tabs__tab-item"><button class="tm-tabs__tab-link tm-tabs__tab-link_slim tm-tabs__tab-link">Похожие</button></span><!--]--></div><!----></div><div class="similar-and-daily__tab-view"><div class="daily-articles-list"><ul class="tm-article-card-list"><!--[--><!--]--><div class="tm-bordered-card"><!----><!--[--><!--]--></div></ul><div class="daily-articles-block__button-container"><button class="btn btn_transparent btn_small tm-button tm-button_color-horizon" type="button"><!--[--><!--[-->Показать лучшие за всё время<!--]--><!--]--></button></div></div><!----></div><!--]--><!--]--></div><!--]--><!----></section><!--[--><section class="tm-block tm-block tm-block_spacing-around tm-stories-block" data-navigatable tabindex="0" data-async-called="true"><header class="tm-block__header tm-block__header"><div class="tm-block__header-container"><h2 class="tm-block__title tm-block__title">Истории</h2><!--[--><!--]--></div><!----></header><!--[--><div class="tm-block__body tm-block__body tm-block__body_variant-equal"><!--[--><div class="tm-stories-empty"><!--[--><div class="tm-stories-card-empty"><div class="tm-stories-card-empty__image"></div><div class="tm-stories-card-empty__title"><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div></div></div><div class="tm-stories-card-empty"><div class="tm-stories-card-empty__image"></div><div class="tm-stories-card-empty__title"><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div></div></div><div class="tm-stories-card-empty"><div class="tm-stories-card-empty__image"></div><div class="tm-stories-card-empty__title"><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div></div></div><div class="tm-stories-card-empty"><div class="tm-stories-card-empty__image"></div><div class="tm-stories-card-empty__title"><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div></div></div><div class="tm-stories-card-empty"><div class="tm-stories-card-empty__image"></div><div class="tm-stories-card-empty__title"><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div></div></div><div class="tm-stories-card-empty"><div class="tm-stories-card-empty__image"></div><div class="tm-stories-card-empty__title"><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div></div></div><!--]--></div><!----><!--]--></div><!--]--><!----></section><div class="placeholder-wrapper"><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><div class="tm-placeholder-inset tm-placeholder-questions"><div class="tm-placeholder-inset__header"><div class="tm-placeholder__line tm-placeholder__line_inset-header loads"></div></div><div class="tm-placeholder-inset__body"><ul class="tm-placeholder-list"><!--[--><li class="tm-placeholder-list__item tm-placeholder-list__item_inset"><div class="tm-placeholder__line tm-placeholder__line_item-title loads"></div><div class="tm-project-block-items__properties"><!--[--><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><!--]--></div></li><li class="tm-placeholder-list__item tm-placeholder-list__item_inset"><div class="tm-placeholder__line tm-placeholder__line_item-title loads"></div><div class="tm-project-block-items__properties"><!--[--><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><!--]--></div></li><li class="tm-placeholder-list__item tm-placeholder-list__item_inset"><div class="tm-placeholder__line tm-placeholder__line_item-title loads"></div><div class="tm-project-block-items__properties"><!--[--><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><!--]--></div></li><li class="tm-placeholder-list__item tm-placeholder-list__item_inset"><div class="tm-placeholder__line tm-placeholder__line_item-title loads"></div><div class="tm-project-block-items__properties"><!--[--><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><!--]--></div></li><li class="tm-placeholder-list__item tm-placeholder-list__item_inset"><div class="tm-placeholder__line tm-placeholder__line_item-title loads"></div><div class="tm-project-block-items__properties"><!--[--><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><!--]--></div></li><!--]--></ul></div><div class="tm-placeholder-inset__footer"><div class="tm-placeholder__line tm-placeholder__line_inset-footer loads"></div></div></div><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----></div><!--]--><!----><!--[--><div><div class="placeholder-wrapper"><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><div class="tm-placeholder-promo"><div class="tm-placeholder-promo__header"><div class="tm-placeholder__line tm-placeholder__line_promo-title"></div></div><div class="tm-placeholder-promo__body"><div class="tm-placeholder-promo__posts"><div class="tm-placeholder-promo__post"><div class="tm-placeholder-promo__image"></div><div class="tm-placeholder__line tm-placeholder__line_post-title"></div></div><div class="tm-placeholder-promo__post"><div class="tm-placeholder-promo__image"></div><div class="tm-placeholder__line tm-placeholder__line_post-title"></div></div><div class="tm-placeholder-promo__post"><div class="tm-placeholder-promo__image"></div><div class="tm-placeholder__line tm-placeholder__line_post-title"></div></div></div><div class="tm-placeholder-promo__dots"><div class="tm-placeholder-promo__dot"></div><div class="tm-placeholder-promo__dot"></div><div class="tm-placeholder-promo__dot"></div></div></div></div><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----></div></div><section class="tm-block tm-block tm-block_spacing-top" data-async-called="true"><header class="tm-block__header tm-block__header"><div class="tm-block__header-container"><h2 class="tm-block__title tm-block__title">Работа</h2><!--[--><!--]--></div><!----></header><!--[--><div class="tm-block__body tm-block__body"><!--[--><!--[--><div class="tm-vacancies-block__item"><a class="tm-vacancies-block__vacancy-title" href="https://career.habr.com/vacancies/go_razrabotchik" target="_blank">Go разработчик</a><div class="tm-vacancies-block__vacancies-count">81
    вакансия</div></div><!--]--><!--]--></div><!--]--><footer class="tm-block__footer"><!--[--><a class="tm-block-extralink" href="https://career.habr.com/catalog">Все вакансии</a><!--]--></footer></section><section class="tm-block tm-block tm-block_spacing-around tm-events-block" data-navigatable tabindex="0" data-async-called="true"><header class="tm-block__header tm-block__header tm-block__header_variant-borderless-large"><div class="tm-block__header-container"><h2 class="tm-block__title tm-block__title">Ближайшие события</h2><!--[--><!--]--></div><!----></header><!--[--><div class="tm-block__body tm-block__body tm-block__body_variant-equal"><!--[--><div class="swiper-container tm-events-widget" style="--swiper-space-between:22px;"><div class="swiper-wrapper"><!--[--><!--[--><div class="swiper-slide"><!--[--><section class="tm-block tm-block tm-block_spacing-none" id="588" tabindex="-1"><!----><!--[--><div class="tm-event-card tm-event-card_is-widget tm-event-card_responsive"><a href="/ru/events/588/" class=""><img alt class="tm-event-card__image" data-src="https://habrastorage.org/getpro/habr/upload_files/f79/1fc/79d/f791fc79d0d9fdda84397ed0c0717764.png" loading="lazy" src="https://habrastorage.org/r/w390/getpro/habr/upload_files/f79/1fc/79d/f791fc79d0d9fdda84397ed0c0717764.png" srcset="https://habrastorage.org/r/w390/getpro/habr/upload_files/f79/1fc/79d/f791fc79d0d9fdda84397ed0c0717764.png, https://habrastorage.org/getpro/habr/upload_files/f79/1fc/79d/f791fc79d0d9fdda84397ed0c0717764.png 2x"></a><!----><div class="tm-event-card__info"><div class="tm-event-card__date"><!----><div class="tm-event-card__day"><span>17  февраля   – 24  марта  </span></div></div><a href="/ru/events/588/" class="tm-event-card__title-link"><span>Конкурс «Снежный код» от Хекслета. Три гранта на бесплатное 10-месячное обучение</span></a><div class="tm-event-card__places"><div class="tm-event-card__places-list"><!--[--><span class="tm-event-card__places-item"><span>Онлайн</span><!----></span><!--]--></div></div></div><div class="tm-event-card__footer tm-event-card__footer_widget"><a href="/ru/events/#588" class="tm-event-card__link">Больше событий в календаре</a><div class="tm-event-card__categories"><!--[--><div class="event-category__label event-category__label_type-development"><span>Разработка</span></div><!--]--></div></div></div><!--]--><!----></section><!--]--></div><div class="swiper-slide"><!--[--><section class="tm-block tm-block tm-block_spacing-none" id="596" tabindex="-1"><!----><!--[--><div class="tm-event-card tm-event-card_is-widget tm-event-card_responsive"><a href="/ru/events/596/" class=""><img alt class="tm-event-card__image" data-src="https://habrastorage.org/getpro/habr/upload_files/b14/cd3/772/b14cd3772bc67698c8fbfd846e23824a.png" loading="lazy" src="https://habrastorage.org/r/w390/getpro/habr/upload_files/b14/cd3/772/b14cd3772bc67698c8fbfd846e23824a.png" srcset="https://habrastorage.org/r/w390/getpro/habr/upload_files/b14/cd3/772/b14cd3772bc67698c8fbfd846e23824a.png, https://habrastorage.org/getpro/habr/upload_files/b14/cd3/772/b14cd3772bc67698c8fbfd846e23824a.png 2x"></a><!----><div class="tm-event-card__info"><div class="tm-event-card__date"><!----><div class="tm-event-card__day"><span>20  марта  </span></div></div><a href="/ru/events/596/" class="tm-event-card__title-link"><span>Офлайн-конференция Хабр х K-team: как удерживать таланты в 2025 году</span></a><div class="tm-event-card__places"><div class="tm-event-card__places-list"><!--[--><span class="tm-event-card__places-item"><span>Москва</span><!----></span><!--]--></div></div></div><div class="tm-event-card__footer tm-event-card__footer_widget"><a href="/ru/events/#596" class="tm-event-card__link">Больше событий в календаре</a><div class="tm-event-card__categories"><!--[--><div class="event-category__label event-category__label_type-other"><span>Другое</span></div><!--]--></div></div></div><!--]--><!----></section><!--]--></div><div class="swiper-slide"><!--[--><section class="tm-block tm-block tm-block_spacing-none" id="604" tabindex="-1"><!----><!--[--><div class="tm-event-card tm-event-card_is-widget tm-event-card_responsive"><a href="/ru/events/604/" class=""><img alt class="tm-event-card__image" data-src="https://habrastorage.org/getpro/habr/upload_files/733/9ef/194/7339ef1945f3ee6906daf89db79829d4.png" loading="lazy" src="https://habrastorage.org/r/w390/getpro/habr/upload_files/733/9ef/194/7339ef1945f3ee6906daf89db79829d4.png" srcset="https://habrastorage.org/r/w390/getpro/habr/upload_files/733/9ef/194/7339ef1945f3ee6906daf89db79829d4.png, https://habrastorage.org/getpro/habr/upload_files/733/9ef/194/7339ef1945f3ee6906daf89db79829d4.png 2x"></a><!----><div class="tm-event-card__info"><div class="tm-event-card__date"><!----><div class="tm-event-card__day"><span>20  марта  </span></div></div><a href="/ru/events/604/" class="tm-event-card__title-link"><span>IX HappyWorkForum | Аутентичность и ментальное здоровье персонала</span></a><div class="tm-event-card__places"><div class="tm-event-card__places-list"><!--[--><span class="tm-event-card__places-item"><span>Москва</span><span class="tm-event-card__places-separator"> • </span></span><span class="tm-event-card__places-item"><span>Онлайн</span><!----></span><!--]--></div></div></div><div class="tm-event-card__footer tm-event-card__footer_widget"><a href="/ru/events/#604" class="tm-event-card__link">Больше событий в календаре</a><div class="tm-event-card__categories"><!--[--><div class="event-category__label event-category__label_type-other"><span>Другое</span></div><!--]--></div></div></div><!--]--><!----></section><!--]--></div><div class="swiper-slide"><!--[--><section class="tm-block tm-block tm-block_spacing-none" id="612" tabindex="-1"><!----><!--[--><div class="tm-event-card tm-event-card_is-widget tm-event-card_responsive"><a href="/ru/events/612/" class=""><img alt class="tm-event-card__image" data-src="https://habrastorage.org/getpro/habr/upload_files/38f/10d/f4c/38f10df4c7f9d7c5d4610fe426af0ab4.png" loading="lazy" src="https://habrastorage.org/r/w390/getpro/habr/upload_files/38f/10d/f4c/38f10df4c7f9d7c5d4610fe426af0ab4.png" srcset="https://habrastorage.org/r/w390/getpro/habr/upload_files/38f/10d/f4c/38f10df4c7f9d7c5d4610fe426af0ab4.png, https://habrastorage.org/getpro/habr/upload_files/38f/10d/f4c/38f10df4c7f9d7c5d4610fe426af0ab4.png 2x"></a><!----><div class="tm-event-card__info"><div class="tm-event-card__date"><!----><div class="tm-event-card__day"><span>20  марта  </span></div></div><a href="/ru/events/612/" class="tm-event-card__title-link"><span>Вебинар «Мастерская бюджета: как управлять затратами на облачные ресурсы»</span></a><div class="tm-event-card__places"><div class="tm-event-card__places-list"><!--[--><span class="tm-event-card__places-item"><span>Онлайн</span><!----></span><!--]--></div></div></div><div class="tm-event-card__footer tm-event-card__footer_widget"><a href="/ru/events/#612" class="tm-event-card__link">Больше событий в календаре</a><div class="tm-event-card__categories"><!--[--><div class="event-category__label event-category__label_type-development"><span>Разработка</span></div><div class="event-category__label event-category__label_type-admin"><span>Администрирование</span></div><!--]--></div></div></div><!--]--><!----></section><!--]--></div><div class="swiper-slide"><!--[--><section class="tm-block tm-block tm-block_spacing-none" id="616" tabindex="-1"><!----><!--[--><div class="tm-event-card tm-event-card_is-widget tm-event-card_responsive"><a href="/ru/events/616/" class=""><img alt class="tm-event-card__image" data-src="https://habrastorage.org/getpro/habr/upload_files/523/7fb/13a/5237fb13ad7fb6fb483c49691aaec836.png" loading="lazy" src="https://habrastorage.org/r/w390/getpro/habr/upload_files/523/7fb/13a/5237fb13ad7fb6fb483c49691aaec836.png" srcset="https://habrastorage.org/r/w390/getpro/habr/upload_files/523/7fb/13a/5237fb13ad7fb6fb483c49691aaec836.png, https://habrastorage.org/getpro/habr/upload_files/523/7fb/13a/5237fb13ad7fb6fb483c49691aaec836.png 2x"></a><!----><div class="tm-event-card__info"><div class="tm-event-card__date"><!----><div class="tm-event-card__day"><span>21  марта  </span></div></div><a href="/ru/events/616/" class="tm-event-card__title-link"><span>Бизнес-конференция «Digital Brand Day 2025: Орбита 2025»</span></a><div class="tm-event-card__places"><div class="tm-event-card__places-list"><!--[--><span class="tm-event-card__places-item"><span>Москва</span><!----></span><!--]--></div></div></div><div class="tm-event-card__footer tm-event-card__footer_widget"><a href="/ru/events/#616" class="tm-event-card__link">Больше событий в календаре</a><div class="tm-event-card__categories"><!--[--><div class="event-category__label event-category__label_type-marketing"><span>Маркетинг</span></div><div class="event-category__label event-category__label_type-other"><span>Другое</span></div><!--]--></div></div></div><!--]--><!----></section><!--]--></div><div class="swiper-slide"><!--[--><section class="tm-block tm-block tm-block_spacing-none" id="608" tabindex="-1"><!----><!--[--><div class="tm-event-card tm-event-card_is-widget tm-event-card_responsive"><a href="/ru/events/608/" class=""><img alt class="tm-event-card__image" data-src="https://habrastorage.org/getpro/habr/upload_files/8fd/e04/ddd/8fde04ddd9ba3f6bcd515aa6209f96b7.png" loading="lazy" src="https://habrastorage.org/r/w390/getpro/habr/upload_files/8fd/e04/ddd/8fde04ddd9ba3f6bcd515aa6209f96b7.png" srcset="https://habrastorage.org/r/w390/getpro/habr/upload_files/8fd/e04/ddd/8fde04ddd9ba3f6bcd515aa6209f96b7.png, https://habrastorage.org/getpro/habr/upload_files/8fd/e04/ddd/8fde04ddd9ba3f6bcd515aa6209f96b7.png 2x"></a><!----><div class="tm-event-card__info"><div class="tm-event-card__date"><!----><div class="tm-event-card__day"><span>27  марта  </span></div></div><a href="/ru/events/608/" class="tm-event-card__title-link"><span>Вебинар «Контент-маркетинг здорового человека: как привлечь внимание аудитории»</span></a><div class="tm-event-card__places"><div class="tm-event-card__places-list"><!--[--><span class="tm-event-card__places-item"><span>Онлайн</span><!----></span><!--]--></div></div></div><div class="tm-event-card__footer tm-event-card__footer_widget"><a href="/ru/events/#608" class="tm-event-card__link">Больше событий в календаре</a><div class="tm-event-card__categories"><!--[--><div class="event-category__label event-category__label_type-marketing"><span>Маркетинг</span></div><div class="event-category__label event-category__label_type-other"><span>Другое</span></div><!--]--></div></div></div><!--]--><!----></section><!--]--></div><div class="swiper-slide"><!--[--><section class="tm-block tm-block tm-block_spacing-none" id="606" tabindex="-1"><!----><!--[--><div class="tm-event-card tm-event-card_is-widget tm-event-card_responsive"><a href="/ru/events/606/" class=""><img alt class="tm-event-card__image" data-src="https://habrastorage.org/getpro/habr/upload_files/b99/62a/b24/b9962ab2439c6edc80f96d7f0a847c72.png" loading="lazy" src="https://habrastorage.org/r/w390/getpro/habr/upload_files/b99/62a/b24/b9962ab2439c6edc80f96d7f0a847c72.png" srcset="https://habrastorage.org/r/w390/getpro/habr/upload_files/b99/62a/b24/b9962ab2439c6edc80f96d7f0a847c72.png, https://habrastorage.org/getpro/habr/upload_files/b99/62a/b24/b9962ab2439c6edc80f96d7f0a847c72.png 2x"></a><!----><div class="tm-event-card__info"><div class="tm-event-card__date"><!----><div class="tm-event-card__day"><span>31  марта  </span></div></div><a href="/ru/events/606/" class="tm-event-card__title-link"><span>Серия вебинаров «DevOps Middle: AvitoTech vs ecom.tech»</span></a><div class="tm-event-card__places"><div class="tm-event-card__places-list"><!--[--><span class="tm-event-card__places-item"><span>Онлайн</span><!----></span><!--]--></div></div></div><div class="tm-event-card__footer tm-event-card__footer_widget"><a href="/ru/events/#606" class="tm-event-card__link">Больше событий в календаре</a><div class="tm-event-card__categories"><!--[--><div class="event-category__label event-category__label_type-development"><span>Разработка</span></div><div class="event-category__label event-category__label_type-admin"><span>Администрирование</span></div><!--]--></div></div></div><!--]--><!----></section><!--]--></div><div class="swiper-slide"><!--[--><section class="tm-block tm-block tm-block_spacing-none" id="618" tabindex="-1"><!----><!--[--><div class="tm-event-card tm-event-card_is-widget tm-event-card_responsive"><a href="/ru/events/618/" class=""><img alt class="tm-event-card__image" data-src="https://habrastorage.org/getpro/habr/upload_files/f76/0f9/a82/f760f9a827b851a5eeca4802c643a91d.png" loading="lazy" src="https://habrastorage.org/r/w390/getpro/habr/upload_files/f76/0f9/a82/f760f9a827b851a5eeca4802c643a91d.png" srcset="https://habrastorage.org/r/w390/getpro/habr/upload_files/f76/0f9/a82/f760f9a827b851a5eeca4802c643a91d.png, https://habrastorage.org/getpro/habr/upload_files/f76/0f9/a82/f760f9a827b851a5eeca4802c643a91d.png 2x"></a><!----><div class="tm-event-card__info"><div class="tm-event-card__date"><!----><div class="tm-event-card__day"><span>3  апреля  </span></div></div><a href="/ru/events/618/" class="tm-event-card__title-link"><span>Реалити для разработчиков: узнайте, как строится новое публичное облако MWS</span></a><div class="tm-event-card__places"><div class="tm-event-card__places-list"><!--[--><span class="tm-event-card__places-item"><span>Онлайн</span><!----></span><!--]--></div></div></div><div class="tm-event-card__footer tm-event-card__footer_widget"><a href="/ru/events/#618" class="tm-event-card__link">Больше событий в календаре</a><div class="tm-event-card__categories"><!--[--><div class="event-category__label event-category__label_type-development"><span>Разработка</span></div><!--]--></div></div></div><!--]--><!----></section><!--]--></div><div class="swiper-slide"><!--[--><section class="tm-block tm-block tm-block_spacing-none" id="620" tabindex="-1"><!----><!--[--><div class="tm-event-card tm-event-card_is-widget tm-event-card_responsive"><a href="/ru/events/620/" class=""><img alt class="tm-event-card__image" data-src="https://habrastorage.org/getpro/habr/upload_files/eba/c37/879/ebac378793b959ebce42f41713e7b67f.jpg" loading="lazy" src="https://habrastorage.org/r/w390/getpro/habr/upload_files/eba/c37/879/ebac378793b959ebce42f41713e7b67f.jpg" srcset="https://habrastorage.org/r/w390/getpro/habr/upload_files/eba/c37/879/ebac378793b959ebce42f41713e7b67f.jpg, https://habrastorage.org/getpro/habr/upload_files/eba/c37/879/ebac378793b959ebce42f41713e7b67f.jpg 2x"></a><!----><div class="tm-event-card__info"><div class="tm-event-card__date"><!----><div class="tm-event-card__day"><span>3  апреля  </span></div></div><a href="/ru/events/620/" class="tm-event-card__title-link"><span>Открытая встреча «System Analysis Meetup SberHealth»</span></a><div class="tm-event-card__places"><div class="tm-event-card__places-list"><!--[--><span class="tm-event-card__places-item"><span>Москва</span><span class="tm-event-card__places-separator"> • </span></span><span class="tm-event-card__places-item"><span>Онлайн</span><!----></span><!--]--></div></div></div><div class="tm-event-card__footer tm-event-card__footer_widget"><a href="/ru/events/#620" class="tm-event-card__link">Больше событий в календаре</a><div class="tm-event-card__categories"><!--[--><div class="event-category__label event-category__label_type-analytics"><span>Аналитика</span></div><!--]--></div></div></div><!--]--><!----></section><!--]--></div><div class="swiper-slide"><!--[--><section class="tm-block tm-block tm-block_spacing-none" id="590" tabindex="-1"><!----><!--[--><div class="tm-event-card tm-event-card_is-widget tm-event-card_responsive"><a href="/ru/events/590/" class=""><img alt class="tm-event-card__image" data-src="https://habrastorage.org/getpro/habr/upload_files/31b/e68/295/31be6829578e7934fbc944396eb330b1.png" loading="lazy" src="https://habrastorage.org/r/w390/getpro/habr/upload_files/31b/e68/295/31be6829578e7934fbc944396eb330b1.png" srcset="https://habrastorage.org/r/w390/getpro/habr/upload_files/31b/e68/295/31be6829578e7934fbc944396eb330b1.png, https://habrastorage.org/getpro/habr/upload_files/31b/e68/295/31be6829578e7934fbc944396eb330b1.png 2x"></a><!----><div class="tm-event-card__info"><div class="tm-event-card__date"><!----><div class="tm-event-card__day"><span>10  апреля  </span></div></div><a href="/ru/events/590/" class="tm-event-card__title-link"><span>«GoCloud 2025» — масштабная IT-конференция про облака и AI</span></a><div class="tm-event-card__places"><div class="tm-event-card__places-list"><!--[--><span class="tm-event-card__places-item"><span>Москва</span><span class="tm-event-card__places-separator"> • </span></span><span class="tm-event-card__places-item"><span>Онлайн</span><!----></span><!--]--></div></div></div><div class="tm-event-card__footer tm-event-card__footer_widget"><a href="/ru/events/#590" class="tm-event-card__link">Больше событий в календаре</a><div class="tm-event-card__categories"><!--[--><div class="event-category__label event-category__label_type-development"><span>Разработка</span></div><div class="event-category__label event-category__label_type-admin"><span>Администрирование</span></div><div class="event-category__label event-category__label_type-management"><span>Менеджмент</span></div><!--]--></div></div></div><!--]--><!----></section><!--]--></div><div class="swiper-slide"><!--[--><section class="tm-block tm-block tm-block_spacing-none" id="516" tabindex="-1"><!----><!--[--><div class="tm-event-card tm-event-card_is-widget tm-event-card_responsive"><a href="/ru/events/516/" class=""><img alt class="tm-event-card__image" data-src="https://habrastorage.org/getpro/habr/upload_files/0e9/3a8/3ec/0e93a83ecea09f806d1df907ddb036a4.jpg" loading="lazy" src="https://habrastorage.org/r/w390/getpro/habr/upload_files/0e9/3a8/3ec/0e93a83ecea09f806d1df907ddb036a4.jpg" srcset="https://habrastorage.org/r/w390/getpro/habr/upload_files/0e9/3a8/3ec/0e93a83ecea09f806d1df907ddb036a4.jpg, https://habrastorage.org/getpro/habr/upload_files/0e9/3a8/3ec/0e93a83ecea09f806d1df907ddb036a4.jpg 2x"></a><!----><div class="tm-event-card__info"><div class="tm-event-card__date"><!----><div class="tm-event-card__day"><span>25 – 26  апреля  </span></div></div><a href="/ru/events/516/" class="tm-event-card__title-link"><span>IT-конференция Merge Tatarstan 2025</span></a><div class="tm-event-card__places"><div class="tm-event-card__places-list"><!--[--><span class="tm-event-card__places-item"><span>Казань</span><!----></span><!--]--></div></div></div><div class="tm-event-card__footer tm-event-card__footer_widget"><a href="/ru/events/#516" class="tm-event-card__link">Больше событий в календаре</a><div class="tm-event-card__categories"><!--[--><div class="event-category__label event-category__label_type-development"><span>Разработка</span></div><div class="event-category__label event-category__label_type-marketing"><span>Маркетинг</span></div><div class="event-category__label event-category__label_type-other"><span>Другое</span></div><!--]--></div></div></div><!--]--><!----></section><!--]--></div><div class="swiper-slide"><!--[--><section class="tm-block tm-block tm-block_spacing-none" id="610" tabindex="-1"><!----><!--[--><div class="tm-event-card tm-event-card_is-widget tm-event-card_responsive"><a href="/ru/events/610/" class=""><img alt class="tm-event-card__image" data-src="https://habrastorage.org/getpro/habr/upload_files/652/12d/998/65212d998fb4939d9787bd9c726d2acb.png" loading="lazy" src="https://habrastorage.org/r/w390/getpro/habr/upload_files/652/12d/998/65212d998fb4939d9787bd9c726d2acb.png" srcset="https://habrastorage.org/r/w390/getpro/habr/upload_files/652/12d/998/65212d998fb4939d9787bd9c726d2acb.png, https://habrastorage.org/getpro/habr/upload_files/652/12d/998/65212d998fb4939d9787bd9c726d2acb.png 2x"></a><!----><div class="tm-event-card__info"><div class="tm-event-card__date"><!----><div class="tm-event-card__day"><span>20 – 22  июня  </span></div></div><a href="/ru/events/610/" class="tm-event-card__title-link"><span>Летняя айти-тусовка Summer Merge</span></a><div class="tm-event-card__places"><div class="tm-event-card__places-list"><!--[--><span class="tm-event-card__places-item"><span>Ульяновская область</span><!----></span><!--]--></div></div></div><div class="tm-event-card__footer tm-event-card__footer_widget"><a href="/ru/events/#610" class="tm-event-card__link">Больше событий в календаре</a><div class="tm-event-card__categories"><!--[--><div class="event-category__label event-category__label_type-development"><span>Разработка</span></div><div class="event-category__label event-category__label_type-other"><span>Другое</span></div><!--]--></div></div></div><!--]--><!----></section><!--]--></div><!--]--><!--]--></div><!----><!--[--><button class="swiper-button-prev"><span class="tm-svg-icon__wrapper swiper-button-icon"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Влево</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#arrow-back"></use></svg></span></button><button class="swiper-button-next"><span class="tm-svg-icon__wrapper swiper-button-icon"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Вправо</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#arrow-back"></use></svg></span></button><!--]--></div><!--]--></div><!--]--><!----></section><!--]--><!--]--></div><!--]--><!--]--></div></div><!--]--><!--]--></div></div><div class="tm-page__sidebar"><!--[--><!----><!--]--></div></div><!----><!--]--></div></div></main><!----></div><!----><div class="tm-footer"><div class="tm-page-width"><!--[--><div class="tm-footer__container"><div class="tm-footer__title"><a class="tm-svg-icon__wrapper tm-footer__title-link" href="/ru/"><svg class="tm-svg-img tm-svg-icon" height="16" width="16"><title>Хабр</title><use xlink:href="/img/habr-logo-ru.svg#logo"></use></svg></a></div><div class="tm-footer__social"><!--[--><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://www.facebook.com/habrahabr.ru" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="36" width="36"><title>Facebook</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-facebook"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://twitter.com/habr_com" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="36" width="36"><title>Twitter</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-twitter"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://vk.com/habr" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="36" width="36"><title>VK</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-vk"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://telegram.me/habr_com" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="36" width="36"><title>Telegram</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-telegram"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://www.youtube.com/channel/UCd_sTwKqVrweTt4oAKY5y4w" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="36" width="36"><title>Youtube</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-youtube"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://dzen.ru/habr" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="36" width="36"><title>Яндекс Дзен</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-dzen"></use></svg></a><!--]--></div><!--teleport start--><!--teleport end--><button class="tm-footer__link"><svg class="tm-svg-img tm-footer__icon" height="16" width="16"><title>Язык</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#lang"></use></svg> Настройка языка</button><a href="/ru/feedback/" class="tm-footer__link">Техническая поддержка</a><div class="tm-footer-copyright"><span class="tm-copyright"><span class="tm-copyright__years">© 2006–2025, </span><span class="tm-copyright__name"><a class="tm-copyright__link" href="https://company.habr.com/" rel="noopener" target="_blank">Habr</a></span></span></div></div><!--]--></div></div><!----><!--]--></div><!----></div><script>window.__INITIAL_STATE__={"adblock":{"hasAcceptableAdsFilter":false,"hasAdblock":false},"articlesList":{"articlesList":{"714050":{"id":"714050","timePublished":"2023-01-31T18:56:01+00:00","isCorporative":false,"lang":"ru","titleHtml":"Kotlin\u002FGolang работа в двух языках","leadData":{"textHtml":"\u003Cp\u003EТак уж получилось, что у нас в компании используются разные стеки и языки. И в частности у нас есть большое подразделение, основным стеком которого является \u003Cstrong\u003EJVM с Kotlin\u003C\u002Fstrong\u003E в качестве языка разработки (вместо ванильной Java, на бэкенде). Но при этом этому же отделу регулярно приходится использовать в работе \u003Cstrong\u003EGoLang\u003C\u002Fstrong\u003E. \u003C\u002Fp\u003E\u003Cp\u003EВ статье представлены несколько кейсов, связанных с сопровождением совместной кодобазы на двух языках и по соответствию некоторых конструкций между платформами...\u003C\u002Fp\u003E\u003Cp\u003E\u003C\u002Fp\u003E","imageUrl":null,"buttonTextHtml":"Читать далее","image":{"url":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F881\u002F3ad\u002Fed5\u002F8813aded5fc0b0b13268a8b9e99dea36.png","fit":"cover","positionY":35,"positionX":12}},"editorVersion":"2.0","postType":"article","postLabels":[{"type":"sandbox","typeOf":"system","title":"Из песочницы","data":{"url":null}},{"type":"recovery","typeOf":"system","title":"Recovery Mode","data":{"url":null}}],"author":{"id":"3390529","alias":"comdivuz","fullname":null,"avatarUrl":null,"speciality":null,"scoreStats":{"score":-5,"votesCount":31},"rating":0,"relatedData":null,"contacts":[],"authorContacts":[],"paymentDetails":{"paymentYandexMoney":null,"paymentPayPalMe":null,"paymentWebmoney":null},"donationsMethod":null,"isInBlacklist":null,"careerProfile":null},"statistics":{"commentsCount":12,"favoritesCount":48,"readingCount":11513,"score":14,"votesCount":15,"votesCountPlus":13,"votesCountMinus":2},"hubs":[{"id":"17748","alias":"go","type":"collective","title":"Go","titleHtml":"Go","isProfiled":true,"relatedData":null},{"id":"19441","alias":"kotlin","type":"collective","title":"Kotlin","titleHtml":"Kotlin","isProfiled":true,"relatedData":null}],"flows":[{"id":"1","alias":"develop","title":"Разработка","titleHtml":"Разработка"}],"relatedData":{"vote":null,"unreadCommentsCount":0,"bookmarked":false,"canComment":false,"canEdit":false,"canViewVotes":false,"votePlus":{"canVote":false,"isChargeEnough":false,"isKarmaEnough":false,"isVotingOver":true,"isPublicationLimitEnough":false},"voteMinus":{"canVote":false,"isChargeEnough":false,"isKarmaEnough":false,"isVotingOver":true,"isPublicationLimitEnough":false},"canModerateComments":false,"trackerSubscribed":false,"emailSubscribed":false},"textHtml":"\u003Cdiv xmlns=\"http:\u002F\u002Fwww.w3.org\u002F1999\u002Fxhtml\"\u003E\u003Cblockquote\u003E\u003Cp\u003EСразу дисклеймер, статья больше про Golang, но мой \"родной\" и основной на протяжении уже 6 лет - Kotlin - буду рад если будут замечания по Golang части в комментариях\u003C\u002Fp\u003E\u003C\u002Fblockquote\u003E\u003Cp\u003E\u003Cem\u003EНемного о себе - системный архитектор компании SpectrumData, тут вроде как по канонам хабра ни рекламы ничего давать нельзя, но есть канал по программированию у нас - можете найти - может что есть интересного. В архитекторах я оказался из разработчиков, стаж более 20 лет на разных платформах и задачах. Сейчас тоже стараюсь и сам писать и есть команды разработчиков в подчинении.\u003C\u002Fem\u003E\u003C\u002Fp\u003E\u003Cp\u003EНикогда не писал на хабре. Обычно если какой-то материал появлялся, то для внутренних нужд или лучше смотрится в ролике. Но тут материала подкопилось текстового. Решил написать статью. Может кому-то будет интересно.\u003C\u002Fp\u003E\u003Cp\u003EТак уж получилось, что у нас в компании используются разные стеки и языки. И в частности у нас есть большое подразделение, основным стеком которого является \u003Cstrong\u003EJVM с Kotlin\u003C\u002Fstrong\u003E в качестве языка разработки (вместо ванильной Java, на бэкенде). Но при этом этому же отделу регулярно приходится использовать в работе \u003Cstrong\u003EGoLang\u003C\u002Fstrong\u003E. В частности бывают кейсы:\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003Eпортирования кода (в обе стороны)\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003Eреализации каких-то компонентов сразу на 2-х языках (в основном это внутренние SDK)\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003E\u003Cem\u003EСразу скажу - почему эта задача вообще в целом для нас легкая и подъемная - наши бэкенды на Kotlin строятся на микрофреймворках типа Ktor, а не на Spring или не дай бог JavaEE, соответственно тяжелых вопросов соответствия каких-то лютых Enterprise монструозных JAR каким-то решениям в Golang не стоит.\u003C\u002Fem\u003E\u003C\u002Fp\u003E\u003Cblockquote\u003E\u003Cp\u003EЕстественно, что мы сейчас говорим про языки и соответствие КОНСТРУКЦИЙ , а не про библиотеки или фреймворки.  \u003C\u002Fp\u003E\u003C\u002Fblockquote\u003E\u003Cp\u003EНу и некоторых ставит поначалу в ступор, что Kotlin\u002FJVM это \"про классы\" и \"не натив\", а Golang это вроде как \"процедурный стиль\" и \"натив\".\u003C\u002Fp\u003E\u003Cp\u003EНа деле практически все довольно органично воспроизводится. В этой статье приведу некоторые примеры взаимозаменяемых конструкций и хаков. Материал в основном для тех кто пишет на Kotlin и для кого Golang - второй язык.\u003C\u002Fp\u003E\u003Cp\u003EСразу оговорюсь, что при переносе можно выделить несколько ситуаций, под одну гребенку все невозможно завести.\u003C\u002Fp\u003E\u003Cp\u003EПростые:\u003C\u002Fp\u003E\u003Col\u003E\u003Cli\u003E\u003Cp\u003Eперенос один в один или очень близко в той же структуре кода (без учета непосредственно синтаксиса языка) с сохранением канона (каноничного стиля кода GoLang) - \u003Cstrong\u003Eда почти все\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003Eперенос один в один или через хаки, но без сохранения канона - код и API в итоге очень похоже на Kotlin, но при этом код не каноничен для GoLang - \u003Cstrong\u003Eнапример статические методы, синглтоны, компаньоны\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003Eнельзя перенести один в один, но есть канонические легко осваиваемые паттерны которые \"по духу\" и смыслу аналогичны Kotlin - \u003Cstrong\u003Eкак ни странно - почти все ООП воспроизводится без особых потерь на структурах без классов\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Fol\u003E\u003Cp\u003EТяжелые:\u003C\u002Fp\u003E\u003Col\u003E\u003Cli\u003E\u003Cp\u003Eтребуют пересмотра парадигмы языка и переноса не в лоб, требуют хорошего понимания концепций обоих языков - \u003Cstrong\u003Eнапример соответствие пакетов в JVM и распределения кода и пакетов в Golang, любые переносы решений с большим использование корутин (они обманчиво похожи на горутины, но требуют иного планирования)\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003Eможно перенести только хаками, при этом код на выходе плохой, не каноничный и при этом не до конца полный по смыслу и духу - \u003Cstrong\u003Eэто попытки полностью реализовать перечисления как классы, тотальную иммутабельность и защиту от NPE, решения сильно завязанные на рефлексию и т.п.\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003Eвообще нельзя сделать идентичным - \u003Cstrong\u003Eне так много таких вещей, но по факту это все, что сильно завязано на генериках в JVM понимании и сахарная функциональщина типа DSL\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Fol\u003E\u003Ch2\u003EList&lt;T&gt;.filter vs List&lt;T&gt;.map\u003C\u002Fh2\u003E\u003Cp\u003EНачнем с примера в котором сразу будут показаны некоторые типовые переносы и один невозможный перенос.\u003C\u002Fp\u003E\u003Cp\u003EИтак мы хотим перенести в Go функциональную обработку коллекций (а там этого явно не хватает, понятно есть какие-то внешние пакеты, но допустим хотим свое)\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Efun &lt;T&gt; List&lt;T&gt;.filter(condition : (T)-&gt;Boolean): List&lt;T&gt; {\n    return buildList {\n      for (item in this) {\n        if (condition(item)){\n          add(item)\n        }\n      }\n    }\n}\nfun &lt;T,R&gt; List&lt;T&gt;.map(mapper : (T)-&gt;R): List&lt;R&gt; {\n    return buildList {\n      for (item in this) {\n          add(mapper(item))\n      }\n    }\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EИ вот мы начинаем воспроизводить\u003C\u002Fp\u003E\u003Cp\u003EВо-первых мы хотим это исполнить именно как метод, а не как функцию, чтобы их делать в цепь \u003Ccode\u003El.Filter().Filter().Map().First()\u003C\u002Fcode\u003E, а не вкладывать \u003Ccode\u003EFirst( Map( Filter ( Filter(l)))\u003C\u002Fcode\u003E \u003C\u002Fp\u003E\u003Cp\u003EПробуем решить в лоб (не получится)\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"go\"\u003E\u002F\u002F пробуем навесить метод прямо на срез\nfunc (s []any) Filter(condition func(item any) bool) []any\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EСразу куча проблем - во-первых так нельзя - навешивать функции на чужие типы, во-вторых у нас резко теряется информация о типе!\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"go\"\u003E\u002F\u002F пробуем сделать generic-метод\nfunc (s []T) Filter[T any](condition func(item T) bool) []any\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003Eа так тем более нельзя - \u003Cstrong\u003Eпотому что вообще нет GENERIC методов в Golang, не завезли, функции есть, а методов - нет!\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\u003Cp\u003EНо тут на помощь приходит то, что по своей природе Golang - это в своей основе C, где нет аьясов типа, а есть создание типа на основе данного. Вот так можно:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"go\"\u003Etype List[T any] []T\nfunc (l List[T]) Filter(condition func(item T) bool) List[T]\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cblockquote\u003E\u003Cp\u003EИтак - первое, что уже можно выучить - нельзя навесить \"расширение\" на  уже кем-то в другом пакете написанную структуру, но можно сделать тип в своем пакете, эквивалентный целевому и сделать метод уже у него!\u003C\u002Fp\u003E\u003C\u002Fblockquote\u003E\u003Cp\u003Eно так просто это использовать не получится, потребуется:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"go\"\u003E\u002F\u002F так не получится ([]int{1,2,3}).Filter(func(item int) bool {return item &gt; 1})\n\u002F\u002F а вот так да:\nList[int]([]int{1,2,3}).Filter(func(item int) bool {return item &gt; 1})\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003Eне красивый повтор параметра типа..., немного усовершенствуем:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"go\"\u003E\u002F\u002F сделали а-ля приватную структуру, которую снаружи в явном виде создать нелья\n\u002F\u002F но в отличие от Kotlin можно ВОЗВРАЩАТЬ\ntype _ListType[T any] []T\n\u002F\u002F навесили на нее наш метод\nfunc (l _ListType[T]) Filter(condition func(item T) bool) _ListType[T] {...}\n\u002F\u002F сделали \"конструктор\"\nfunc List[T](l []T) _ListType[T] { return _ListType[T](l) }\n\n\u002F\u002F теперь сработает автовывод типа\nmylist := List([]int{1,2,3}).Filter(...) \u002F\u002F _ListType[int]\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EЗаодно приведем вариант реализации этого \u003Ccode\u003EFilter\u003C\u002Fcode\u003E, вдруг она кому-то не очевидна\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"go\"\u003Efunc (l _ListType[T]) Filter(condition func(item T) bool) _ListType[T] {\n    var result []T\n    for _, item := range l { \u002F\u002F _ListType[T] все еще []T\n        if condition(item) {\n            result = append(result, item)\n        }\n    }\n    return result  \u002F\u002F автоматический апкаст до _ListType[T] автоматически\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E\u003Cstrong\u003EОкрыленные своим успехом, мы без проблем реализуем такие методы как Take, TakeLast, Drop, DropLast , First, FirstOrDefault...\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\u003Cp\u003EКстати а как сделать \u003Cstrong\u003EFirstOrDefault\u003C\u002Fstrong\u003E()?\u003C\u002Fp\u003E\u003Cp\u003EИ тут как это ни странно в Java\u002FKotlin, при всем богатстве рефлексии - это сложно, так как не очень понятно как именно в общем случае (не в частном, а общем) получить дефолтный экземпляр некоего типа T !!! Вот, что примерно бы было в Kotlin:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Efun &lt;T: Any&gt; List&lt;T&gt;.firstOrDefault(): T {\n    if (this.size &gt; 0) return this[0] \u002F\u002F тут все просто, а вот дальше...\n    \u002F\u002F все, приплыли\n}\n\u002F\u002F немного переделаем\nfun &lt;T: Any&gt; List&lt;T&gt;.firstOrDefault(clazz : KClass&lt;T&gt; ): T {\n    if (this.size &gt; 0) return this[0] \u002F\u002F тут все просто, а вот дальше...\n    return clazz.createInstance() \n    \u002F\u002F ну и мы понимаем, что это ни разу не общее решение и с кучей типов \n    \u002F\u002F это не сработает как надо !!!\n}\n\u002F\u002F добавим сахара\ninline fun &lt;reified T:Any&gt; List&lt;T&gt;.firstOrDefault(): T = \n    this.firstOrDefault(T::class)\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EВ Golang это решается проще и можно запомнить идиому:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"go\"\u003Efunc (l _ListType[T]) FirstOrDefault() T {\n    if len(l) &gt; 0 { return l[0] }\n    var def T \u002F\u002F просто определяем переменную! \n    \u002F\u002F и так как в GO все переменные инициализируются дефолтным значением,\n    \u002F\u002F например 0, \"\", nil, пустая структура - то все, вуаля - можно возвращать\n    return def\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EЗато сложнее получить в общем случае поведение DefaultOrNil(), которое в Kotlin несколько проще достигается... ну это уже совсем нюансы\u003C\u002Fp\u003E\u003Cblockquote\u003E\u003Cp\u003EИтак - второй \"хак\" - в Golang легко получить дефолт любого типа ,\u003C\u002Fp\u003E\u003Cp\u003Eпросто определив переменную этого типа\u003C\u002Fp\u003E\u003C\u002Fblockquote\u003E\u003Cp\u003EИ вот мы очень все еще окрылены нашим успехом переноса \u003Cstrong\u003Eфункциональщины\u003C\u002Fstrong\u003E, частично \u003Cstrong\u003Eгенериков\u003C\u002Fstrong\u003E и \u003Cstrong\u003Eрасширений\u003C\u002Fstrong\u003E и все идет как надо....\u003C\u002Fp\u003E\u003Cp\u003EБолее того все переносы они даже и канонов каких-то особых не нарушают и читаются легко.\u003C\u002Fp\u003E\u003Cp\u003E\u003Cstrong\u003EНо тут мы резко и без предупреждения споткнемся о такой простой метод как \u003C\u002Fstrong\u003E\u003Ccode\u003EList.map,\u003C\u002Fcode\u003E\u003Cstrong\u003E напомню его код:\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Efun &lt;T,R&gt; List&lt;T&gt;.map(mapper : (T)-&gt;R): List&lt;R&gt; {\n    return buildList {\n      for (item in this) {\n          add(mapper(item))\n      }\n    }\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EПытаемся в лоб:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"go\"\u003Efunc (l _ListType[T]) Map[R any] (mapper func(src T) R) _ListType[R] {\n    var result []R\n    for _, item := range l {\n      result = append(result, mapper(item))\n    }\n    return result\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EИ тут мы упремся в короткое и лаконичное сообщение компилятора Golang:\u003C\u002Fp\u003E\u003Cp\u003E\u003Ccode\u003Esyntax error: method must have no type parameters\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\u003Cp\u003EО как! Обычные \u003Cstrong\u003Eфункции \u003C\u002Fstrong\u003Eмогут иметь тип-параметры , \u003Cstrong\u003Eа методы (у которых есть ресивер) - нет!\u003C\u002Fstrong\u003E И более того нет никаких признаков, что их в ближайшее время завезут(!!!).\u003C\u002Fp\u003E\u003Cp\u003EИ вот тут мы напарываемся на первую преграду действительно серьезную:\u003C\u002Fp\u003E\u003Cblockquote\u003E\u003Cp\u003EШаблоны (генерики) в Golang намного слабее и не идут ни в какое сравнение по мощности и выразительности ни с Java\u002FKotlin ни тем более с Rust или с теми же шаблонами C++. \u003Cstrong\u003EЕсли ваше решение сильно завязано на генерики и они есть как у классов, так и у методов или расширений - скорее всего это та грань и та черта проекта, которая будет практически невозможно перенести на Golang без потерь в эргономике или семантике!!!\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\u003C\u002Fblockquote\u003E\u003Cp\u003EИ получается,  что в рамках нашей задумки вполне можно реализовать методы, которые не требуют второго генерика и не получится нормально тех, которые требуют (Map, Zip, частично Fold, Reduce).\u003C\u002Fp\u003E\u003Cp\u003EСоответственно мы можем реализовать Map , Fold, Reduce только в варианте с тем же типом, \u003Cstrong\u003Eно не в обобщенной форме, то есть на вход List&lt;T&gt; и на выход List&lt;T&gt; или T, но не List&lt;R&gt;, R\u003C\u002Fstrong\u003E:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"go\"\u003Efunc (l _ListType[T]) Map (mapper func(item T) T) _ListType[T] {\n    var result []T\n    for _, item := range l {\n        result = append(result, mapper(item))\n    }\n    return result\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EВ таком виде естественно будет работать - но очевидно что это не тот \u003Ccode\u003EMap\u003C\u002Fcode\u003E о котором мы джва года уже мечтали...\u003C\u002Fp\u003E\u003Cp\u003EСоответственно какие выводы можно сделать:\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003Eв целом нет сложности в переносе \"функциональщины\", \"ламбд\" и расширений, со своими нюансами, плюсами и минусами - но примерно понятно и комфортно\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003Eно если решение все построено на шаблонах, на косвенной типизации - то в Golang надо будет переработать саму модель использования этого кода или пойти на уйму компромиссов\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003EИ кстати частный случай компромисса, достаточно простой, в Kotlin мы имеем перегрузку методов по сигнатуре на одно и то же имя (как это было еще заведено в Pascal):\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Efun myFun(s: String) {...}\nfun myFun(i: Int) {...}\n...\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EВ golang так нельзя, потребуется \u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"go\"\u003Efunc MyFunS(s string) {}\nfunc MyFunI(i int) {}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003Eкак это было бы еще в C, но при этом конечно имена функций будут разными и содержать тип параметра в том или ином виде\u003C\u002Fp\u003E\u003Cp\u003Eили же можно воспользоваться тем, что в Golang можно использовать несколько иную модель ограничений генериков, и если у нас фиксированный список поддерживаемых перегрузок (замкнутый), то можно:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"go\"\u003Efunc MyFun[T string|int] MyFun() {}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003Eно тогда внутри придется делать switch по типу, в общем не факт, что это так уж хорошо\u003C\u002Fp\u003E\u003Ch2\u003EСвойства, конструкторы, инициализация\u003C\u002Fh2\u003E\u003Cp\u003EТут на самом деле все переносится более менее легко, как ни странно.\u003C\u002Fp\u003E\u003Cp\u003EВозьмем какой-то такой код на Kotlin, несколько синтетический, но полный всяких фич, которые кажутся не поддерживаемыми на Golang\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003E\u002F\u002F интерфейс со свойством, в go нет свойств\ninterface IMyInterface { \n  val x : Int \n  \u002F\u002F в go нет никаких компаньонов или статических методов \n  \u002F\u002F для интерфейсов, вообще статических нет методов\n  companion object {\n    fun createDefault() : IMyInterface = MyDefaultImpl()\n  }\n} \n\u002F\u002F явная типизация интерфейсом, а не утиная, в go нельзя явно указать\n\u002F\u002F что структура держит интерфейс!\n\n\u002F\u002F у параметров не бывает дефолтов\nprivate class MyDefaultImpl (i: Int = 10) : IMyInterface { \n  \u002F\u002F в структуре нельзя прямо прописать связанность полей\n  private val d: Double = i.toDouble()\n  \u002F\u002F нет аналога init в golang\n  init {\n    require(d &gt; -1.0) {\"d должно быть больше -1.0\"}\n  }\n  \u002F\u002F ну какие в golang свойства и lazy\n  override val x by lazy { return (d * 2.13).toInt() }\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EКак ни странно - практически все из этого на Golang выполнимо практически без пересмотра семантики и даже без особых изменений в API\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"go\"\u003Epackage my\n\u002F\u002F или GetX() - ну да, свойств нет, но getter никто не отменял!\ntype IMyInterface interface {\n  X() int \n  \u002F\u002F тему \"статических\" методов и компаньонов оставим на конец\n}\n\u002F\u002F все что не на большие буквы - private, точнее package private\ntype _MyDefaultImpl struct {\n  d float64 \u002F\u002F поле которое при создании заполняется\n  x int     \u002F\u002F кэшированный lazy результат\n  lazy_x bool \u002F\u002F признак, что lazy уже вызывался\n}\n\n\u002F\u002F определим дефолт, его будем потом уже при вызове использовать\nconst _DEFAULT_I = 10\n\u002F\u002F приватный конструктор ну и раз в kotlin по ссылке все,\n\u002F\u002F то и тут вренем по ссылке\nfunc newMyDefaultImpl(i int) *_MyDefaultImpl {\n  \u002F\u002F и сейчас некоторый аналог init\n  d:=float64(i)\n  \u002F\u002F некоторое воспроизведение require\n  if d &lt; 1.0 {\n    panic(\"d должно быть больше -1.0\")\n  }\n  \u002F\u002F собственно вернули структуру\n  return &amp;_MyDefaultImpl{d: d}\n}\n\u002F\u002F ну и реализуем интерфейс\nfunc (d *_MyDefaultImpl) X() int {\n  \u002F\u002F собственно lazy getter и можно в принципе и по синхронизации\n  \u002F\u002F порешать через mutex, в данном примере особой нужды делать это не видел\n  if !d.lazy_x {\n    d.x = int(d * 2.13)\n    d.lazy_x = true\n  }\n  return d.x\n}\n\n\n\u002F\u002F тему статического факторизующего метода, можно сделать канонично для GO\nfunc IMyInterface_CreateDefault() IMyInterface {\n  \u002F\u002F или я видел имена CreateDefaultIMyInterface, что более в каноне\n  return newMyDefaultImpl(_DEFAULT_I) \u002F\u002F вот собственно наш дефолт\n}\n\n\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\n\u002F\u002F НА ПРАВАХ ХАКА - как все же заставить golang \n\u002F\u002F иметь \"компаньоны\"\n\n\u002F\u002F а можно даже исполнить синтаксически схоже c Kotlin\n\u002F\u002F можно будет вызывать именно как IMyInterface_().createDefault()\n\u002F\u002F напомню, что это `package private` - все что не с больших букв\ntype _myInterfaceCompanion struct {} \u002F\u002F пустая структура как псевдо тип\nfunc (_ _myInterfaceCompanion) CreateDefault() IMyInterface {\n  return newMyDefaultImpl(10) \u002F\u002F вот собственно наш дефолт\n}\nfunc IMyInterface_() _myInterfaceCompanion { return _myInterfaceCompanion{}}\n\u002F\u002F все, теперь снаружи можно так my:= IMyInterface_().CreateDefault()\n\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\u002F\n\n\u002F\u002F а вот это НЕ УТИНАЯ типизация - явное требование компилятору\n\u002F\u002F еще при сборке проверить, что *_MyDefaultImpl поддерживает IMyInterface\nvar _ IMyInterface = &amp;_MyDefaultImpl{}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EТеперь в клиентском коде мы получаем поведение, подобное Kotlin классу\u003C\u002Fp\u003E\u003Cp\u003EВ kotlin:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Eimport my\nval x : IMyInterface = IMyInterface.createDefault()\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Eimport \"my\"\n\nvar x my.IMyInterface = my.IMyInterface_().CreateDefault()\n\u002F\u002Fили  var x my.IMyInterface = my.IMyInterface_CreateDefault()\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EБолее того, можно довести совсем до Kotlin-стайла, что правда резко расходится с каноном:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"go\"\u003E...\ntype _myInterfaceCompanion struct {} \u002F\u002F пустая структура как псевдо тип\nfunc (_ _myInterfaceCompanion) CreateDefault() IMyInterface {\n  return newMyDefaultImpl(10) \u002F\u002F вот собственно наш дефолт\n}\n\u002F\u002F полный антипаттерн - глобальная переменная! \n\u002F\u002F но синтаксически можно\nvar IMyInterface_  _myInterfaceCompanion = _myInterfaceCompanion{}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EНу и тогда вообще до смешения\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"go\"\u003E\u002F\u002F именно так, с точкой, по аналогии с импортами Java чтобы было поведение\nimport . \"my\" \n\u002F\u002F все отличие от Kotlin только что подчеркивание вставили, иначе\n\u002F\u002F коллизия имен\nvar x IMyInterface = IMyInterface_.CreateDefault()\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EИтак резюмирую:\u003C\u002Fp\u003E\u003Cblockquote\u003E\u003Cp\u003EВсе что связано со свойствами, конструкторами, компаньонами, статическими методами, инициализацией, фабричными методами, ленивыми свойствами - без особых сложностей переносится и можно сделать в итоге и более канонично но менее похоже на Kotlin (по внешнему API), а можно менее канонично, но почти один в один по внешнему виду\u003C\u002Fp\u003E\u003C\u002Fblockquote\u003E\u003Ch2\u003EОбработка ошибок\u003C\u002Fh2\u003E\u003Cp\u003EТот случай, когда лучше не пытаться переносить подход Java\u002FKotlin в Golang и от этого все выиграют.\u003C\u002Fp\u003E\u003Cp\u003EМожет когда-то напишу про это, но я точно из лагеря тех, кто считает, что с появлением исключений и особенно их структурированной обработки (try\u002Fcatch) и особенно с finally блоком в этой структурной обработке - \u003Cstrong\u003Eэволюция пошла не туда. \u003C\u002Fstrong\u003EИ меня нисколько не удивляет, что в новых языках типа \u003Cstrong\u003EGolang \u003C\u002Fstrong\u003Eили \u003Cstrong\u003ERust, \u003C\u002Fstrong\u003Eесть паники, есть ошибки, паники могут тоже развертывать стек и так или иначе перехватывать (\u003Cstrong\u003Erecovery \u003C\u002Fstrong\u003Eв golang и \u003Cstrong\u003EcatchUnwinded\u003C\u002Fstrong\u003E в Rust) - тем не менее там нет и близко try\u002Fcatch\u002Ffinally\u003C\u002Fp\u003E\u003Cp\u003EСоответственно при переносах обработки ошибок можно действовать так\u003C\u002Fp\u003E\u003Cp\u003E\u003Cstrong\u003EПеренос throw\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\u003Cp\u003EТут 2 ситуации - определитесь - это действительно \"исключение\", которое сигнализирует, что программа загнала себя в ситуацию, с которой не может справиться и может проще ее завершить чем продолжать работу. В этом случае эквивалентом будет \u003Cstrong\u003Epanic\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Efun myFun() {\n    if (callSomething() == null) {\n       throw Exception(\"все у нас вообще null, такого не может быть!\")      \n    }\n}\nfun main() {\n    myFun() \u002F\u002F никакой обработки try\u002Fcatch\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cpre\u003E\u003Ccode class=\"go\"\u003Efunс MyFun() {\n    if (СallSomething() == nil) {\n       panic(\"все у нас вообще nil, такого не может быть!\")      \n    }\n}\nfunс main() {\n    MyFun() \u002F\u002F никакой обработки try\u002Fcatch\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EНо бывает и другая ситуация, когда исключение это по сути \"сигнал\", который следует обработать. Тогда в терминах, непривичных джавистам - это не \"исключение\" и не \"паника\", а \"ошибка\". То есть четко различаются \u003Cstrong\u003Eпаники -\u003C\u002Fstrong\u003E нечто, что скорее всего не обработать и реальный сбой, - приводит скорее всего к завершению приложения и \u003Cstrong\u003Eошибки - \u003C\u002Fstrong\u003Eнекие сигналы о каких-то сбоях и проблемах, которые можно \u003Cstrong\u003Eкак обработать\u003C\u002Fstrong\u003E, так и \u003Cstrong\u003Eпроигнорировать \u003C\u002Fstrong\u003E и за это уже отвечает вызывающий код\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Efun myFun() {\n    if (callSomething() == null) {\n       throw Exception(\"все у нас вообще null, такого не может быть!\")      \n    }\n}\nfun main() {\n   try{\n    myFun()\n   }catch(e: Throwable) { \u002F\u002F тут у нас реакция с легким сайдэффектом и игнором\n     println(e.Message)\n   } \n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003Eто лучше использовать внятное\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"go\"\u003Efunc MyFun() error {\n  if (CallSomething() == null) {\n       return fmt.Errorf(\"все у нас вообще null, такого не может быть!\")      \n    }\n  return nil\n}\n\nfunc main() {\n   err := MyFun()\n   if err != nil {\n     fmt.Println(e.Error())\n   }\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cblockquote\u003E\u003Cp\u003EГлавный совет. Обработка ошибок - это то, что в Java\u002FKotlin\u002FC++ и еще много где исполнено на \"исключениях\" и их структурной обработке. Эта история собирает все больше критики и от нее все чаще отказываются (в новых языках). Golang не пригоден работать в модели и делать \u003Cstrong\u003Epanic (a-ka throw) \u003C\u002Fstrong\u003E чтобы потом делать \u003Cstrong\u003Erecover (a-ka catch) \u003C\u002Fstrong\u003Eи где надо и не надо писать \u003Cstrong\u003Edefer (a-ka finally)\u003C\u002Fstrong\u003E - это будет самый плохой пример попытки натянуть ежа на уже, хуже чем с приведенными выше \"компаньонами\". \u003C\u002Fp\u003E\u003Cp\u003EМало того, что если вы переносите в Golang - лучше чуть поработать и сделать в его модели. Если вы наоборот ИЗ Golang переносите в Kotlin лучше СОХРАНИТЬ эту модель обработки - благо в Kotlin из коробки есть Result&lt;T&gt; и в целом нет проблемы сделать обработку ошибок и без выбрасывания исключений.\u003C\u002Fp\u003E\u003C\u002Fblockquote\u003E\u003Ch2\u003EЧто лучше не пытаться переносить а лучше упростить\u003C\u002Fh2\u003E\u003Cp\u003EКак мы увидели выше - Golang в принципе позволяет работать близко к ООП, да и вообще не требует такой массы компромиссов c Java\u002FKotlin как например порты на С. Но есть вещи, которые идеологически отличают Golang и Kotlin - причем настолько, что при переносе из Kotlin в Golang мы практически гарантировано будем исключать некоторые вещи, как не поддерживаемые, а при переносе из Golang в Koltin наоброт переписывать или добавлять.\u003C\u002Fp\u003E\u003Cp\u003EГлавное что отличает Golang от Kotlin, прямо в их манифестах:\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003E\u003Cstrong\u003EKotlin\u003C\u002Fstrong\u003E - это про \u003Cstrong\u003Eвсеядность\u003C\u002Fstrong\u003E и \u003Cstrong\u003Eсахар\u003C\u002Fstrong\u003E (нет единого стиля, расширения, делегаты, перегрузка операторов, инфикс функции, DSL, tail function arg, компаньоны, объекты, смарткасты, условия как выражения, no-return, ....) \u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003E\u003Cstrong\u003EGolang\u003C\u002Fstrong\u003E - это про \u003Cstrong\u003Eунификацию\u003C\u002Fstrong\u003E и \u003Cstrong\u003Eпростоту\u003C\u002Fstrong\u003E (один формат, один вариант инструкции, решения в лоб, про все)\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003EПо факту это языки с диаметрально разной идеологией!\u003C\u002Fp\u003E\u003Cp\u003EСоответственно из Kotlin в golang не переносятся вещи, которые заведомо сделаны для сахара и хитрых решений. И если обобщить - то это все, что связано с DSL и всякими \"котлинскими штучками\"\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003Eне будет никакого \u003Cstrong\u003Etailrec\u003C\u002Fstrong\u003E - если надо рубите \"хвосты\" сами\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003Eникакой перегрузки операторов - заменяйте просто функциями\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003Eникаких \"псевдоблоков\" новых в языке за счет функций последним параметров \u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003Eникаких инфиксов\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003Eболее менее можно играть в \"делегаты\" - lazy например был выше показан - но язык Вас в этом не поддержит, скорее всего вы не будете делегировать ради делегирования, а сделаете более в лоб (благо композиция как паттерн в golang как раз на высоте)\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003E\u003Cstrong\u003EРефлексия...\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\u003Cp\u003EЧем меньше рефлексии тем лучше. Всюду. Точка. \u003Cbr\u002F\u003EP.S. Особенно в голанге\u003C\u002Fp\u003E\u003Cp\u003EЕсли все решение у вас в Kotlin опирается на рефлексию, с учетом полиморфизма, с анализом метаданных свойств, методов и прочего - скорее всего вы это никак не перенесете. И в целом в go рефлексия это примитивные апкасты до интерфейса и не более того (точнее там есть еще всякий typeOf и прочее), но будем честны - рефлексия в Java и в Kotlin особенно - на порядок просто сложнее и многофункциональнее. \u003C\u002Fp\u003E\u003Cp\u003EЕсли допустим вы пытаетесь (а у нас такая история есть) портировать какие-то валидаторы, расширенные сериализаторы, какие-то ORM-подобные штуки, которые как правило сильно опираются на аннотации, на рефлексию, - то скорее всего это обречено на провал.\u003C\u002Fp\u003E\u003Cp\u003EВ golang тоже есть свои аннотации (не объекты, а такие скорее строки структурированные), есть немного рефлексии - но ее Вам скорее не хватит. \u003C\u002Fp\u003E\u003Cp\u003EСкорее всего придется все планировать с нуля или вообще альтернативно к вопросу подойти - упростить логику или на кодогенерации построить или еще как-то\u003C\u002Fp\u003E\u003Ch2\u003EКорутины vs Горутины\u003C\u002Fh2\u003E\u003Cp\u003EТут отдельный разговор и не на один час и наверное тут, в этой статье я не буду сильно останавливаться, так как у нас речь больше шла про синтаксис, а не про рантаймы.\u003C\u002Fp\u003E\u003Cp\u003EВ целом имея уже некоторый опыт переноса я бы свел к двум вещам\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003EВ \u003Cstrong\u003EGolang\u003C\u002Fstrong\u003E горутины - это очень просто, на два щелчка, более менее понятно как оркестрировать, но при  этом все как по рельсам - ни вправо ни влево и без возможности влиять на то как это все работает\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EВ \u003Cstrong\u003EKotlin\u003C\u002Fstrong\u003E корутины - с одной стороны часть языка (\u003Cstrong\u003Esuspend\u003C\u002Fstrong\u003E) но это именно \"приостановка\" и асинхронщина в чистом своем виде, а корутины - это отдельная библиотека, надостройка, которая уже занимается парарлеллизмом и там собственно оркестрацией как таковой. В итоге все сложнее, многословнее, зато можно кучу всяких финтов делать\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003EТак вот \u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003EGolang относительно легко переносится в Kotlin, только в Kotlin больше кода обвязки возникает\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EИз Kotlin же в Golang переносится только с серьезным упрощением и перепланированием\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003EТо есть если у вас просто \u003Ccode\u003EGlobalScope.launch {... }\u003C\u002Fcode\u003E  и в лучшем случае потом \u003Ccode\u003Ejoin\u003C\u002Fcode\u003E  , то скорее всего вы просто это перепишите на \u003Ccode\u003Ego func() {...}()\u003C\u002Fcode\u003E и там \u003Ccode\u003EWaitGroup\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\u003Cp\u003EНо если у вас собственные пулы потоков, связанные скоупы, донастроенные диспетчеры, ConflateChannel и тому подобное... то простите - простым и в лоб Ваш порт быть не может.\u003C\u002Fp\u003E\u003Cp\u003EВ таком случае точно придется пойти на какие-то упрощения, компромиссы и перепланирование.\u003C\u002Fp\u003E\u003Ch2\u003EСсылки, значения, копии\u003C\u002Fh2\u003E\u003Cp\u003EЕсть несколько концепций, которые Kotlin-истам, джавистам даются почему-то обычно со скрипом.\u003C\u002Fp\u003E\u003Cp\u003EПервая - это передача по ссылке и по значению, а также связанные вещи - разыменование, копирование, почему интерфейс в голанге это и не ссылка и не значение и прочее. Естественно это то, что надо просто \u003Cstrong\u003Eзнать \u003C\u002Fstrong\u003Eи \u003Cstrong\u003Eпонимать.\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\u003Cp\u003EЕстественно, что для тех кто пишет на C\u002FC++\u002FRust нет никакой сложности в том, чтобы понять что такое &amp; и * и что такое передача по значению по указателю или по ссылке (и кстати в чем отличия указателей и ссылок)\u003C\u002Fp\u003E\u003Cp\u003EНо для тех, кто привык что все по ссылке (или вообще об этом не задумаывается), а это в обещм и целом Java, Kotlin, C# (в общем случае), JavaScript, Python  при начале работы на Go лучше к чему приучиться:\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003Eвсе, что связано со структурами по умолчанию делайте на \u003Cstrong\u003Eссылках\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003Eпереводите на передачу по значению и на использование значений - только если четко понимаете зачем, почему\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cblockquote\u003E\u003Cp\u003EЛюбой гофер опытный будет плеваться от этого совета, потому что \"так в нативе не принято\". Ты обычно итак понимаешь в каких контекстах тебе нужно что и соответственно это и применяешь. И прогоняешь через профайлер. \u003Cstrong\u003EНо для использования как второго языка и для большего сходства именно такой совет\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\u003C\u002Fblockquote\u003E\u003Cp\u003EТо есть вот так лучше не делать (если не уверены)\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"go\"\u003E\ntype Foo stuct {\n   X int\n}\ntype Bar struct {\n    F Foo\n    Y int\n}\nfunc NewFoo () Foo {...}\nfunc (b Bar) Do(f Foo) {...}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003Eесли вы не понимаете что при этом делается и когда - то рано или поздно напоретесь, что получаете неожиданное поведение из-за того что всюду сплошные копии и каких-то общих объектов нет. А джавистам привычнее как раз работать с общими объектами. Поэтому лучше\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"go\"\u003Etype Foo stuct {\n   X int\n}\ntype Bar struct {\n    F *Foo\n    Y int\n}\nfunc NewFoo () *Foo {...}\nfunc (b *Bar) Do(f *Foo) {...}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003Eда, скорее всего в каких-то случаях это будет менее эффктивно из-за аллокаций и смотрится может как-то неприятно - много &amp; и *. \u003Cstrong\u003EНо зато оно ведет себя так как этого обычно ожидают от экземпляров джависты.\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\u003Cp\u003EПри этом сделать копию в golang \u003Cstrong\u003EВООБЩЕ НЕ ПРОБЛЕМА\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"go\"\u003Efunc I_Will_Return_Copy(foo *Foo) *Foo {\n     var cpy Foo = *foo \u002F\u002F вот и все снятие копии\n     return &amp;cpy \u002F\u002F вернули от нее ссылку\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003Eсобственно никаких data class и не надо для go для copy, так как нет \"классов\", а структуры - это то, что спокойно копируется по памяти \"из коробки\"\u003C\u002Fp\u003E\u003Ch2\u003EУтиная типизация (интерфейсы)\u003C\u002Fh2\u003E\u003Cp\u003EВторая многим непонятная концепция - утиная типизация при имплементации интерфейсов.\u003C\u002Fp\u003E\u003Cp\u003EНу тут не только джависты, но и почти все немного поначалу недоумевают... Такой концепции интерфейсов как в Golang почти нигде нет, только вот в  Python и Golang. Но когда речь идет про Python - то там все легко это воспринимают \"динамический же язык, что с него взять, понятно все там как-то налету кастуется\" и в языке со строгой типизацией это тяжело воспринимается.\u003C\u002Fp\u003E\u003Cp\u003EКто не знает \"утиная\" это следующее: \u003Cstrong\u003Eутка не знает, что она \"утка\", она вообще ничего может не знать ни о чем, но она при этом КРЯКАЕТ (func (u *Me) Kryack()), и ПЛАВАЕТ (func (u *Me) Swim()) - поэтому для орнитолога (вызывающая сторона) она УТКА (type IDuck interface { Kryack() ; Swim() }) - независимо от знаний утки. То есть нечто имеет интерфейс \"утка\" не потому что в ней это определено, а потому что кто-то решил что она соответствует... как -то так\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\u003Cp\u003EВот собственно и вся концепция. Владелец интерфейса - его клиент. Он определяет там, что должен уметь тип. Если какой-то тип соответствует - значит он реализует интерфейс. Сам тип при этом может ничего про существование интерфейса не знать.\u003C\u002Fp\u003E\u003Cp\u003EСвежо, методично, модно, молодежно... но непривычно.\u003C\u002Fp\u003E\u003Cp\u003EДля разработчиков на Java, особенно на Java EE или Spring мир выглядит совсем не так, а наоборот:\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003Eвсе нужные интерфейсы за тебя давно написаны - смотри Spring Reference (с) Bloody Enterprise\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003Eтвоя задача их строго выполнить (c) Bloody Enterprise\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003EСоответственно вся эта утиная история вообще кажется дикой на первый взгляд.\u003C\u002Fp\u003E\u003Cp\u003EИ для начала введу вас обратно в зону комфорта, напомню, что на Go можно и не по-утиному а вполне и по-спринговому:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"go\"\u003E\u002F\u002F   \u002Fenterprise\u002Fcore\u002Fifaces.go\npackage ifaces\ntype IRepository interface { \n  GetAll() []any\n}\ntype IRefreshable interface {\n  IsObsolete() bool\n}\n---------------------------------------------\n\u002F\u002F  \u002Fmyplugin\u002Fplugins.go\npackage plugins\nimport \"enterprise\u002Fcore\u002Fifaces\"\n\n\u002F\u002F это наш компонент\ntype MyRefreshableRepositoryImpl struct {}\n\u002F\u002F вот вполне пока утиная реализация - мы тут нигде не упоминаем \n\u002F\u002F интерфейсы и не можем быть уверены что все что хотели реализовали\nfunc (r *MyRefreshableRepositoryImpl) GetAll() []any {...}\nfunc (r *MyRefreshableRepositoryImpl) IsObsolete() bool {...}\n\n\u002F\u002F а вот это по сути \"указание\" компилятору провести \n\u002F\u002F на этапе компиляции, что мы соответствуем нужным интерфейсам\n\u002F\u002F получается что-то вроде class MyRefreshableRepositoryImpl: IRepository, IRefreshable\nvar _ ifaces.IRepository = &amp;MyRefreshableRepositoryImpl{}\nvar _ ifaces.IRefreshable = &amp;MyRefreshableRepositoryImpl{}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003Eдумаю, что любого джависта это уже должно устроить, хотя это немного как хак выглядит.\u003C\u002Fp\u003E\u003Cp\u003EОт себя - в целом утиная типизация - это то, что раскрывается постепенно, в какой-то момент в каком-то модуле вы можете понять, что вот тут вот как раз она и пригодилась и в ситуации без нее - все было бы хуже. Так что в целом утиная типизация - концепция хотя и экзотическая несколько на общем фоне - но не особо напрягающая, а иногда выручающая.\u003C\u002Fp\u003E\u003Ch2\u003E\u003C\u002Fh2\u003E\u003Ch2\u003EТесты\u003C\u002Fh2\u003E\u003Cp\u003EТут все просто. Если вы используете в своем решении на Kotlin стандартные тестовые фреймворки с базой на JUnit, - Kotest, Kotlintest, то скорее всего никаких сложностей переносить на Golang тесты у вас не будет.\u003C\u002Fp\u003E\u003Cp\u003EОбратное тоже верно - тесты на \u003Ccode\u003Etesting\u003C\u002Fcode\u003E переносятся без проблем в целевые фреймворки на JVM\u003C\u002Fp\u003E\u003Cp\u003EЧто нужно наверное учесть\u003C\u002Fp\u003E\u003Col\u003E\u003Cli\u003E\u003Cp\u003EПрактически всегда надо затаскивать в проект библиотеку \u003Ca href=\"https:\u002F\u002Fpkg.go.dev\u002Fgithub.com\u002Fstretchr\u002Ftestify\u002Fassert\" rel=\"noopener noreferrer nofollow\"\u003Ehttps:\u002F\u002Fpkg.go.dev\u002Fgithub.com\u002Fstretchr\u002Ftestify\u002Fassert\u003C\u002Fa\u003E - это из тех пакетов, которым место в стандартном наборе пакетов, но исторически живет где-то отдельно\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EМногие не смотрят что там внутри \u003Ccode\u003Etesting.T\u003C\u002Fcode\u003E и очень обедняют свои тесты при переносе, а вообще-то в этой структуре есть метод Run который позволяет стартовать дочерние тест - соответственно  вы можете спокойно обеспечить себе дизайн с пре- и пост- перехватчиками, с иерархией тестов, с порождением тестов или табличными тестами - все это \u003Cstrong\u003EИЗ КОРОБКИ\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EМногие не знают, что кроме тестов в Golang встроены и бенчмарки - поэтому если у вас использовались какие-то бенчмарки под JVM в тестах или какая-то кустарщина - в принципе тоже легко переносится\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Fol\u003E\u003Ch2\u003EЗаключение\u003C\u002Fh2\u003E\u003Cp\u003EНу вот такая вышла статейка на нашу местную злобу дня. \u003C\u002Fp\u003E\u003Cp\u003EУверен, что многое еще чего можно написать на эту тему, но подкопилась пока именно такая подборка замечаний, зато по горячим так сказать следам....\u003C\u002Fp\u003E\u003Cp\u003EНадеюсь, что кому-то еще это может оказаться полезным. Также надеюсь на конструктивную критику и замечания от неравнодушных\u003C\u002Fp\u003E\u003C\u002Fdiv\u003E","tags":[{"titleHtml":"kotlin"},{"titleHtml":"golang"},{"titleHtml":"портирование"},{"titleHtml":"ооп"},{"titleHtml":"ооп\u002Fфп"}],"metadata":{"stylesUrls":[],"scriptUrls":[],"shareImageUrl":"https:\u002F\u002Fhabr.com\u002Fshare\u002Fpublication\u002F714050\u002F35ae2cd4bce406518f858f03ab3a3725\u002F","shareImageWidth":1200,"shareImageHeight":630,"vkShareImageUrl":"https:\u002F\u002Fhabr.com\u002Fshare\u002Fpublication\u002F714050\u002F35ae2cd4bce406518f858f03ab3a3725\u002F?format=vk","schemaJsonLd":"{\"@context\":\"http:\\\u002F\\\u002Fschema.org\",\"@type\":\"Article\",\"mainEntityOfPage\":{\"@type\":\"WebPage\",\"@id\":\"https:\\\u002F\\\u002Fhabr.com\\\u002Fru\\\u002Farticles\\\u002F714050\\\u002F\"},\"headline\":\"Kotlin\\\u002FGolang работа в двух языках\",\"datePublished\":\"2023-01-31T21:56:01+03:00\",\"dateModified\":\"2023-01-31T21:56:01+03:00\",\"author\":{\"@type\":\"Person\",\"name\":\"comdivuz\"},\"publisher\":{\"@type\":\"Organization\",\"name\":\"Habr\",\"logo\":{\"@type\":\"ImageObject\",\"url\":\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fwebt\\\u002Fa_\\\u002Flk\\\u002F9m\\\u002Fa_lk9mjkccjox-zccjrpfolmkmq.png\"}},\"description\":\"Сразу дисклеймер, статья больше про Golang, но мой &quot;родной&quot; и основной на протяжении уже 6 лет - Kotlin - буду рад если будут замечания по Golang части в коммент...\",\"url\":\"https:\\\u002F\\\u002Fhabr.com\\\u002Fru\\\u002Farticles\\\u002F714050\\\u002F#post-content-body\",\"about\":[\"h_go\",\"h_kotlin\",\"f_develop\"],\"image\":[\"https:\\\u002F\\\u002Fhabr.com\\\u002Fshare\\\u002Fpublication\\\u002F714050\\\u002F35ae2cd4bce406518f858f03ab3a3725\\\u002F\"]}","metaDescription":"Сразу дисклеймер, статья больше про Golang, но мой &quot;родной&quot; и основной на протяжении уже 6 лет - Kotlin - буду рад если будут замечания по Golang части в комментариях Немного о себе - системный...","mainImageUrl":null,"amp":true,"customTrackerLinks":[]},"polls":[],"commentsEnabled":{"status":true,"reason":null},"rulesRemindEnabled":false,"votesEnabled":true,"status":"published","plannedPublishTime":null,"checked":null,"hasPinnedComments":false,"format":null,"banner":null,"multiwidget":null,"multiwidgetUuid":null,"readingTime":17,"complexity":null,"isEditorial":false}},"articlesIds":{},"isLoading":false,"pagesCount":{},"route":{},"reasonsList":null,"postReasonsList":null,"view":"list","lastVisitedRoute":{},"ssrCommentsArticleIds":[""],"viewedPosts":[],"myFeedFilter":{"complexity":"all","score":"all","types":["articles","posts","news"]},"myFeedIsApplyFilters":false,"myFeedIsForce":false,"karma":{"userReasonsList":null}},"authorContribution":{"authors":{}},"betaTest":{"currentAnnouncement":null,"announcements":{},"announcementCards":null,"announcementComments":{},"announcementCommentThreads":{},"announcementCommentingStatuses":{},"archivedList":[]},"authorStatistics":{"articleRefs":{},"articleIds":{},"pagesCount":{},"route":{},"viewsCount":[],"maxStatsCount":{}},"career":{"seoLandings":[{"title":"Go разработчик","vacanciesCount":81,"itemUrl":"https:\u002F\u002Fcareer.habr.com\u002Fvacancies\u002Fgo_razrabotchik","itemHubs":["go"]}],"hubs":"go,kotlin"},"comments":{"articleComments":{},"articlePinnedComments":{},"searchCommentsResults":null,"pagesCount":null,"commentAccess":{},"scrollParents":{},"pageArticleComments":{"lastViewedComment":0,"postId":null,"lastCommentTimestamp":"","moderated":[],"moderatedIds":[],"commentRoute":"","idempotenceKey":""}},"companies":{"companyRefs":{},"companyIds":{},"companyTopIds":{},"pagesCount":{},"companyProfiles":{},"companiesCategories":[],"companiesCategoriesTotalCount":0,"companiesWidgets":{},"companiesWorkers":{},"companiesFans":{},"multiwidgets":{},"route":{},"isLoading":false,"companyWorkersLoading":false,"companyFansLoading":false,"multiwidgetLoading":false,"vacancies":{},"companiesGalleries":{},"companiesBanners":{},"companiesLandingVacancies":{},"companiesTechnologies":{},"workplaceInfo":null},"companyAdmin":{"companyInfo":null,"companyInfoLoading":false,"faqArticles":null,"brandingPreviewImageUrl":null,"jivoStatus":0,"adminNotifications":null,"availableInvitesCount":{}},"companyAdd":{"currentStep":"","stepsData":{},"uncompletedSteps":[],"isStepLoading":true,"isStepCommitting":false,"isInitialized":false,"agreementContent":""},"companiesContribution":{"hubs":{},"flows":{},"companyRefs":{}},"companyHubsContribution":{"contributionRefs":{"hubRefs":{},"hubIds":{}}},"conversation":{"messages":[],"respondent":null,"isLoadMore":false},"conversations":{"conversations":[],"pagesCount":0},"docs":{"menu":{},"articles":{},"mainMenu":[],"loading":{"main":false,"dropdown":false,"article":false}},"feature":{"isProbablyVisible":true},"fixedBanner":{"isArticleStickyPanelVisible":false,"isArticleStickyPanelAtTheBottom":false,"isFixedBannerVisible":false,"isStickyPanelIconsHidden":false},"flows":{"flows":[{"id":"1","alias":"develop","title":"Разработка","titleHtml":"Разработка","route":{"name":"FLOW_PAGE","params":{"flowName":"develop"}}},{"id":"6","alias":"admin","title":"Администрирование","titleHtml":"Администрирование","route":{"name":"FLOW_PAGE","params":{"flowName":"admin"}}},{"id":"2","alias":"design","title":"Дизайн","titleHtml":"Дизайн","route":{"name":"FLOW_PAGE","params":{"flowName":"design"}}},{"id":"3","alias":"management","title":"Менеджмент","titleHtml":"Менеджмент","route":{"name":"FLOW_PAGE","params":{"flowName":"management"}}},{"id":"4","alias":"marketing","title":"Маркетинг","titleHtml":"Маркетинг","route":{"name":"FLOW_PAGE","params":{"flowName":"marketing"}}},{"id":"7","alias":"popsci","title":"Научпоп","titleHtml":"Научпоп","route":{"name":"FLOW_PAGE","params":{"flowName":"popsci"}}}],"updates":{}},"global":{"isPwa":false,"device":"mobile","isHabrCom":true,"requestId":"0a2cde4bf4b4d232ea04aa550bb20e78"},"hubs":{"hubRefs":{},"hubIds":{},"pagesCount":{},"isLoading":false,"route":{}},"hubsBlock":{"hubRefs":{},"hubIds":{}},"i18n":{"fl":"ru","hl":"ru"},"info":{"welcomePage":{},"isLoading":true},"location":{"urlStruct":{"protocol":null,"slashes":null,"auth":null,"host":null,"port":null,"hostname":null,"hash":null,"query":{},"pathname":"\u002Fru\u002Farticles\u002F714050\u002F","path":"\u002Fru\u002Farticles\u002F714050\u002F","href":"\u002Fru\u002Farticles\u002F714050\u002F"}},"me":{"user":null,"uuid":null,"ppgDemanded":false,"karmaResetInfo":{"canReincarnate":null,"wasReincarnated":null,"currentScore":null},"notes":null,"userUpdates":{"feeds":{"newPostsCount":null,"newThreadsCount":null,"newNewsCount":null,"newCount":null},"conversationUnreadCount":0}},"mostReadingList":{"mostReadingListIds":[],"mostReadingListRefs":null,"promoPost":null},"onboarding":{"currentStep":null,"stepsData":{},"stepsErrors":{},"completedSteps":[],"isStepCommitting":false,"isCommitDisabled":true},"ppa":{"articles":{},"card":null,"transactions":null,"totalTransactions":null,"isAccessible":null},"projectsBlocks":{"activeBlocks":{"questions":"project-block-article"}},"promoData":{"isLoading":false,"hasLoaded":false,"featurer":null,"megaposts":null,"promoLinks":null,"promoPosts":null,"sticker":null},"publicationStatistics":{"statsInfo":{},"statsFunnels":{},"statsGraph":{},"defaultSuggest":{},"suggest":{},"timeTracker":{},"isTrackingActivity":false,"isUserActive":true,"otherPublicationStats":{}},"pullRefresh":{"shouldRefresh":false},"sandbox":{"articleIds":[],"articleRefs":{},"pagesCount":null,"route":{},"lastVisitedRoute":{},"isLoading":false},"search":{"searchQueryError":null},"settingsOther":{"inputs":{"uiLang":{"errors":[],"ref":null,"value":""},"articlesLangEnglish":{"errors":[],"ref":null,"value":false},"articlesLangRussian":{"errors":[],"ref":null,"value":false},"agreement":{"errors":[],"ref":null,"value":false},"email":{"errors":[],"ref":null,"value":true},"digest":{"errors":[],"ref":null,"value":true}}},"similarList":{"similarListIds":[],"similarListRefs":null},"ssr":{"error":null,"isDataLoaded":true,"isDataLoading":false,"isHydrationFailed":false,"isServer":false},"stories":{"stories":[{"id":"story-998","author":{"logo":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F91a\u002F166\u002F49f\u002F91a16649f9ef89302a5a56cfa22a451d.png","title":"Яндекс Практикум","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up"},"title":"Как расти на работе?","lang":"ru","startTime":"2025-03-18T18:45:00+03:00","finishTime":"2025-03-31T19:00:00+03:00","slides":[{"id":"story-998_1","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fbf4\u002F911\u002F7e6\u002Fbf49117e637ff2099b3944f8803cd7a3.png","button":null},{"id":"story-998_2","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F3e3\u002Fc84\u002Fe83\u002F3e3c84e8330ea1ddf72e9d310457ed2f.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_3","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F84b\u002F533\u002F3c3\u002F84b5333c3e77e8dac62a8b50d042acb9.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_4","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F257\u002Feb0\u002F2be\u002F257eb02bea1777e13f3e647cae6e06cd.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_5","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F858\u002F086\u002F0ed\u002F8580860ed3497c043c04f9a42054d74f.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_6","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fcdf\u002F32f\u002F387\u002Fcdf32f38777f046c063b5182f4125e14.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_7","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fd48\u002Ff2d\u002F0e2\u002Fd48f2d0e2ecd7d746d738191bb913d8f.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_8","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fb38\u002Ffd7\u002Fee0\u002Fb38fd7ee04848bf3b058be7403438bd1.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_9","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F79e\u002Feaa\u002F9d8\u002F79eeaa9d8af5a288ad42bd9d63b5793a.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_10","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fcdc\u002F17e\u002F385\u002Fcdc17e38582dc67838b9abfb200d982e.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}}]},{"id":"story-996","author":{"logo":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fe63\u002F36d\u002Fa24\u002Fe6336da24460ab6b9fbc347d03eb263a.png","title":"Хабр","link":null},"title":"Здоровье айтишника","lang":"ru","startTime":"2025-03-17T10:22:00+03:00","finishTime":"2025-04-13T10:22:00+03:00","slides":[{"id":"story-996_1","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fb7c\u002F6de\u002F8ea\u002Fb7c6de8ea6789dbc30f071716172b6dd.jpg","button":null},{"id":"story-996_2","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F2e7\u002F88a\u002F0fe\u002F2e788a0fe61729ca8b23eb59069c844f.jpg","button":{"title":"Личный опыт","link":"https:\u002F\u002Fu.habr.com\u002Fzd-1","colorType":"light"}},{"id":"story-996_3","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fb93\u002F6f4\u002F256\u002Fb936f425653b84fa60ab00d09f78c543.jpg","button":{"title":"Как это было","link":"https:\u002F\u002Fu.habr.com\u002Fzd-2","colorType":"light"}},{"id":"story-996_4","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fc10\u002Fd14\u002Ff5a\u002Fc10d14f5a4859fe10baecbcc2bcb8828.jpg","button":{"title":"Шея в фокусе","link":"https:\u002F\u002Fu.habr.com\u002Fzd-3","colorType":"dark"}},{"id":"story-996_5","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F535\u002Fe1b\u002F77a\u002F535e1b77a9eb896262ad73321f2ad99f.jpg","button":{"title":"Фотоинструкция","link":"https:\u002F\u002Fu.habr.com\u002Fzd-4","colorType":"light"}},{"id":"story-996_6","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F569\u002Fc39\u002F49f\u002F569c3949f5b330ea85d4a1864f481c3d.jpg","button":{"title":"Сидите (не)правильно","link":"https:\u002F\u002Fu.habr.com\u002Fzd-5","colorType":"dark"}},{"id":"story-996_7","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F1f2\u002F1de\u002Fdbf\u002F1f21dedbf2902bc4061a75b839b63595.jpg","button":{"title":"Журнал изменений","link":"https:\u002F\u002Fu.habr.com\u002Fzd-6","colorType":"dark"}},{"id":"story-996_8","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F95a\u002F164\u002F21b\u002F95a16421badc3a9f1135309ab0c42c41.jpg","button":{"title":"Альтернатива","link":"https:\u002F\u002Fu.habr.com\u002Fzd-7","colorType":"light"}},{"id":"story-996_9","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F624\u002F027\u002F54d\u002F62402754d311798af44bcfe7f9abfedc.jpg","button":{"title":"Хроника поисков","link":"https:\u002F\u002Fu.habr.com\u002Fzd-8","colorType":"dark"}}]},{"id":"story-992","author":{"logo":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F3fe\u002F2fc\u002Fb05\u002F3fe2fcb05df852d7e1e00d44e54e39ae.png","title":"Сезоны Хабра","link":"https:\u002F\u002Fu.habr.com\u002Ffnstories"},"title":"Угадайте будущее в новом сезоне","lang":"ru","startTime":"2025-03-12T19:15:00+03:00","finishTime":"2025-03-31T23:56:00+03:00","slides":[{"id":"story-992_1","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fc56\u002Faf5\u002Fc43\u002Fc56af5c4377f7f7b94f7b6ad20fc92c3.png","button":{"title":"А что за сезон?","link":"https:\u002F\u002Fu.habr.com\u002Ffnstories","colorType":"light"}},{"id":"story-992_2","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F8fa\u002Fde7\u002F65d\u002F8fade765d99207f31c597283ae6ce912.png","button":{"title":"Какие темы нужны","link":"https:\u002F\u002Fu.habr.com\u002Ffnstories","colorType":"dark"}},{"id":"story-992_3","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F23e\u002F7b9\u002Fb24\u002F23e7b9b24cb056d1a42e8d31ccea16ce.png","button":{"title":"Сезон будущего ИИ","link":"https:\u002F\u002Fu.habr.com\u002Ffnstories","colorType":"dark"}},{"id":"story-992_4","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F27b\u002Fbfc\u002Fa18\u002F27bbfca18e656ee0122b5cb8eb2cb502.png","button":{"title":"Все правила сезона","link":"https:\u002F\u002Fu.habr.com\u002Ffnstories","colorType":"dark"}},{"id":"story-992_5","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F1e0\u002F6c6\u002Ff33\u002F1e06c6f33e703bbd2b2ae3baee3376fd.png","button":{"title":"Как участвовать","link":"https:\u002F\u002Fu.habr.com\u002Ffnstories","colorType":"dark"}}]},{"id":"story-990","author":{"logo":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F282\u002Fe80\u002Fbf1\u002F282e80bf1b73484126ed53c6f3e42692.png","title":"Aeza","link":"https:\u002F\u002Fu.habr.com\u002FI72qi"},"title":"С праздником весны!","lang":"ru","startTime":"2025-03-09T10:15:00+03:00","finishTime":"2025-03-30T23:59:00+03:00","slides":[{"id":"story-990_1","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F064\u002F9dd\u002Ff59\u002F0649ddf5949cae6c9342fb62034a36ac.png","button":null},{"id":"story-990_2","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F05f\u002F96b\u002F25e\u002F05f96b25e910c32256ee0b1916f21380.png","button":{"title":"Семейная история","link":"https:\u002F\u002Fu.habr.com\u002Fey2bY","colorType":"light"}},{"id":"story-990_3","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fcd1\u002Ff5d\u002F921\u002Fcd1f5d921bb9489ac11727272660bdb6.png","button":{"title":"Движущиеся картинки","link":"https:\u002F\u002Fu.habr.com\u002FWLKXU","colorType":"light"}},{"id":"story-990_4","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fb55\u002Fd45\u002Fec5\u002Fb55d45ec50e53275c60d16ea886a0672.png","button":{"title":"Личный опыт","link":"https:\u002F\u002Fu.habr.com\u002FSxrki","colorType":"light"}},{"id":"story-990_5","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Ffa7\u002F1ce\u002Ffca\u002Ffa71cefca5ed0a3fe8b50bd703b3605f.png","button":{"title":"Алгоритм","link":"https:\u002F\u002Fu.habr.com\u002Ftbz2p","colorType":"light"}},{"id":"story-990_6","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F435\u002F89d\u002Ff90\u002F43589df9018846cc6a8eed986226b252.png","button":{"title":"Выбрать сценарий","link":"https:\u002F\u002Fu.habr.com\u002F0RCPk","colorType":"light"}},{"id":"story-990_7","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F514\u002F5f8\u002F619\u002F5145f86194ad48dad48a846b42af0f93.png","button":{"title":"Jiraзамещение","link":"https:\u002F\u002Fu.habr.com\u002FEwhYq","colorType":"light"}},{"id":"story-990_8","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F439\u002Fa83\u002Fae7\u002F439a83ae78f7ef711e3b9bbed1ec26c5.png","button":{"title":"8 вещей","link":"https:\u002F\u002Fu.habr.com\u002FVTv2r","colorType":"light"}},{"id":"story-990_9","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F02d\u002F783\u002F2f7\u002F02d7832f7b1c95d88bff9f34209e204a.png","button":{"title":"Интерфейсы","link":"https:\u002F\u002Fu.habr.com\u002FUFOMZ","colorType":"light"}},{"id":"story-990_10","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F0cb\u002Ff7f\u002F0d9\u002F0cbf7f0d905d486ce4ff82bc939b21d5.png","button":{"title":"Стикеры ваши","link":"https:\u002F\u002Fu.habr.com\u002FoA1K7","colorType":"light"}}]},{"id":"story-984","author":{"logo":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F648\u002F61b\u002F9ae\u002F64861b9aecb7c474cd94063f98045541.png","title":"Хабр","link":null},"title":"Всегда котов!","lang":"ru","startTime":"2025-03-01T00:01:09+03:00","finishTime":"2025-03-23T16:21:00+03:00","slides":[{"id":"story-984_1","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fc06\u002Fc21\u002F93f\u002Fc06c2193ff34362ac2af782cf2571f55.png","button":null},{"id":"story-984_2","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fb68\u002F15f\u002F763\u002Fb6815f7630b9c015b1e67efb5bdf12d4.jpg","button":{"title":"Сделать purrrr","link":"https:\u002F\u002Fu.habr.com\u002Fj4DN1","colorType":"light"}},{"id":"story-984_3","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F550\u002F76e\u002Fd7a\u002F55076ed7a0954e243f944fc2f330623a.png","button":{"title":"Тыгыдык","link":"https:\u002F\u002Fu.habr.com\u002Fya360_kotov","colorType":"dark"}},{"id":"story-984_4","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F2fb\u002F23b\u002F06c\u002F2fb23b06cf294c2050104b2aef589788.jpg","button":{"title":"Исследование","link":"https:\u002F\u002Fu.habr.com\u002FbO3r0","colorType":"light"}},{"id":"story-984_5","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Ff50\u002F50f\u002F0ae\u002Ff5050f0aeea1335c4f0544c1863f8342.jpg","button":{"title":"Детали проекта","link":"https:\u002F\u002Fu.habr.com\u002FQJmhe","colorType":"light"}},{"id":"story-984_6","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F825\u002F3dd\u002F5f5\u002F8253dd5f5c19dd061578f1d09310a45f.jpg","button":{"title":"Эксперименты","link":"https:\u002F\u002Fu.habr.com\u002FVaOdo","colorType":"light"}},{"id":"story-984_7","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F3fb\u002Fc92\u002F0f9\u002F3fbc920f9ea81eca2c1c027ff77fc659.jpg","button":{"title":"Это не мем","link":"https:\u002F\u002Fu.habr.com\u002F0Wb3p","colorType":"light"}},{"id":"story-984_8","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F2b4\u002F794\u002Fc33\u002F2b4794c33844e60aad9468018fd132cd.jpg","button":{"title":"В засаде","link":"https:\u002F\u002Fu.habr.com\u002FnasCD","colorType":"dark"}}]}]},"technotext":{"years":[],"technotextDocForNominees":null,"technotextDocForWinners":null,"technotextInfo":{},"technotextInfoLoading":false,"technotextWinners":{},"technotextWinnersLoading":false},"userHubsContribution":{"contributionRefs":{"hubRefs":{},"hubIds":{}}},"userInvites":{"availableInvites":0,"usedInvitesIds":[],"usedInvitesRefs":{},"usedInvitesPagesCount":0,"unusedInvitesIds":[],"unusedInvitesRefs":{},"unusedInvitesPagesCount":0},"userVotes":{"karmaVotesList":[],"karmaVotesPagesCount":null,"karmaVotesListLoading":false,"commentsVotesList":[],"commentsVotesPagesCount":null,"commentsVotesListLoading":false,"postsVotesList":[],"postsVotesPagesCount":null,"postsVotesListLoading":false,"userVotesList":[],"userVotesPagesCount":null,"userVotesListLoading":false},"users":{"authorRefs":{},"authorIds":{},"pagesCount":{},"authorProfiles":{"comdivuz":{"alias":"comdivuz","badgets":[{"title":"Отхабренный","description":"Пользователь с кармой \u003C0","url":null,"isRemovable":false},{"title":"Хорошая реакция","description":"Успел активировать дополнительный набор реакций до того, как реакции убрали с Хабра","url":null,"isRemovable":false}],"aboutHtml":"","contacts":[],"invitedBy":{"issuerLogin":null,"timeCreated":"2023-01-31T18:56:01+00:00"},"careerProfile":null,"companies":{"pagesCount":1,"companyIds":[],"companyRefs":{}}}},"userHubs":{},"userInvitations":{},"authorFollowers":{},"authorFollowed":{},"userSpecialization":{},"karmaStats":[],"statistics":null,"isLoading":false,"authorFollowersLoading":false,"authorFollowedLoading":false,"userHubsLoading":false,"userInvitationsLoading":false,"route":{}},"viewport":{"prevScrollY":{},"scrollY":0,"width":0},"tracker":{"notificationsLoading":false,"notificationsList":[],"notificationsPageCount":0,"pendingMarkNotificationsRead":[],"publicationsLoading":true,"publicationsList":[],"publicationsPageCount":0,"pendingDeletePublications":false,"pendingMarkPublicationsRead":false},"events":{"eventRefs":{},"eventIds":[],"pagesCount":0,"categories":[],"cities":[],"actualEvents":[{"id":"588","titleHtml":"Конкурс «Снежный код» от Хекслета. Три гранта на бесплатное 10-месячное обучение","descriptionHtml":"\u003Cp\u003EУчаствуйте в конкурсе грантов от онлайн-школы программирования Хекслет. Три победителя пройдут 10-месячное обучение с наставником, освоив один из востребованных стеков: Java, Python, JavaScript, PHP или Node.js.\u003C\u002Fp\u003E\u003Cp\u003EЭто шанс без вложений освоить новый стек, систематизировать знания, восполнить пробелы и повысить свою ценность на рынке. Технологии развиваются быстро — обновляйте навыки, чтобы не отставать.\u003C\u002Fp\u003E\u003Cp\u003EПомимо грантов, можно выиграть доступ ко всем курсам Хекслета, полезные подписки, сертификаты и подарки от Хабра и партнеров.\u003C\u002Fp\u003E\u003Cp\u003EВ прошлом году три победителя успешно завершили программу и уже работают в IT.  Инвестируйте время в свое развитие — участвуйте! \u003C\u002Fp\u003E","imageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Ff79\u002F1fc\u002F79d\u002Ff791fc79d0d9fdda84397ed0c0717764.png","eventUrl":"https:\u002F\u002Fspecial.hexlet.io\u002Fgrant?utm_source=partners&utm_medium=referral&utm_campaign=grant&utm_content=link&utm_term=placement_habr","startDay":"2025-02-17","finishDay":"2025-03-24","isOnline":true,"geo":[],"isArchive":false,"categories":[{"id":"2","titleHtml":"Разработка"}],"tags":["гранты","конкурс","Хекслет","Java","Python","JavaScript","PHP","Node.js"],"metadata":null},{"id":"596","titleHtml":"Офлайн-конференция Хабр х K-team: как удерживать таланты в 2025 году","descriptionHtml":"\u003Cp\u003EМы — Хабр и K-Team — провели масштабное исследование, чтобы разобраться, что на самом деле мотивирует сотрудников оставаться в компании и быть лояльными\u003C\u002Fp\u003E\u003Cp\u003EВместе прошли по тернистому пути к лояльности, опросив&nbsp;3 000+ сотрудников, HR и руководителей из разных отраслей:&nbsp;от ретейла и логистики до IT и промышленности. Мы заботливо собрали самые разные мнения, чтобы понять, что по-настоящему важно для людей, которые остаются в компании надолго и любят свою работу. \u003C\u002Fp\u003E\u003Cp\u003EНаша цель проста — помочь бизнесу не сливать бюджет на бесполезные инициативы, а сотрудникам — получать то, что им действительно нужно. \u003C\u002Fp\u003E\u003Cp\u003EПриглашаем вас на офлайн-презентацию в Москве в марте. Обсудим результаты исследования, ключевые выводы и разберем, как строить эффективные Retention-стратегии в 2025 году.\u003C\u002Fp\u003E\u003Cp\u003EКоличество мест ограничено, заявки проходят модерацию. Если ваша заявка будет одобрена, вы получите письмо с подтверждением и адресом встречи.\u003C\u002Fp\u003E\u003Cp\u003EЕсли прийти не получится — после ивента отправим результаты исследования всем, кто зарегистрируется на лендинге.\u003C\u002Fp\u003E\u003Cp\u003EМентальное здоровье сотрудников — важная часть корпоративной культуры. В «Ясно для бизнеса» изучают, как забота о команде влияет на вовлечённость и эффективность. Они подготовили гайд о работе с молодыми специалистами, а для теста сервиса есть промокод CORP-HABRTLNT-DISC20 на скидку 20% для первых сессий: https:\u002F\u002Fu.habr.com\u002FPQP4b\u003C\u002Fp\u003E\u003Cp\u003E\u003C\u002Fp\u003E","imageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fb14\u002Fcd3\u002F772\u002Fb14cd3772bc67698c8fbfd846e23824a.png","eventUrl":"https:\u002F\u002Fevent.k-team.ru\u002Fexpectations_vs_reality?utm_source=habr","startDay":"2025-03-20","startTime":"10:00","finishDay":"2025-03-20","finishTime":"17:00","isOnline":false,"geo":["Москва"],"isArchive":false,"categories":[{"id":"16","titleHtml":"Другое"}],"tags":["HR","HRD","Удержание сотрудников"],"metadata":null},{"id":"604","titleHtml":"IX HappyWorkForum | Аутентичность и ментальное здоровье персонала","descriptionHtml":"\u003Cp\u003EБолее 250 HRD, первые лица компаний и владельцы крупного бизнеса обсудят лучшие практики благополучия и управление командой.\u003C\u002Fp\u003E\u003Cp\u003EПочему ментальное здоровье становится KPI бизнеса?\u003C\u002Fp\u003E\u003Cp\u003EГде граница ответственности за выгорание и стресс сотрудников?\u003C\u002Fp\u003E\u003Cp\u003EКак стать работодателем №1?\u003C\u002Fp\u003E\u003Cp\u003EКак управлять уставшими командами?\u003C\u002Fp\u003E\u003Cp\u003EКак справляться с выгоранием руководителей?\u003C\u002Fp\u003E\u003Cp\u003EЧем замотивировать сотрудников, когда деньги уже не работают?&nbsp;&nbsp;\u003C\u002Fp\u003E\u003Cp\u003EКак решать ценностные конфликты?\u003C\u002Fp\u003E\u003Cp\u003EУспешные корпоративные программы: что реально работает?&nbsp;&nbsp;\u003C\u002Fp\u003E\u003Cp\u003EВ программе презентация отчёта по развитию лидерства, батлы, практические кейсы и нетворкинг.\u003C\u002Fp\u003E\u003Cp\u003EСреди спикеров, представители компаний: Т-банк, Сравни.ру, Ростелеком, ТД Ренна, Спортмастер, ТрансТелеком, Оптиком, Норникель, Азбука вкуса, ЕВМ и другие.\u003C\u002Fp\u003E\u003Cp\u003EУчастие для HRD, руководителей и владельцев бизнеса без оплаты. Действует строгая модерация.\u003C\u002Fp\u003E\u003Cp\u003E\u003C\u002Fp\u003E","imageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F733\u002F9ef\u002F194\u002F7339ef1945f3ee6906daf89db79829d4.png","eventUrl":"https:\u002F\u002Fhappyforum.ru\u002F?utm_source=habr&utm_medium=email&utm_campaign=hwf","startDay":"2025-03-20","startTime":"10:00","finishDay":"2025-03-20","finishTime":"18:00","isOnline":true,"geo":["Москва"],"isArchive":false,"categories":[{"id":"16","titleHtml":"Другое"}],"tags":["HRD","HR"],"metadata":null},{"id":"612","titleHtml":"Вебинар «Мастерская бюджета: как управлять затратами на облачные ресурсы»","descriptionHtml":"\u003Cp\u003EРасскажем, как сэкономить на использовании облачных сервисов через возможности личного кабинета, сервисы с free tier и акции. Покажем, как оптимизировать потребление ресурсов и настроить лимиты бюджетов.\u003C\u002Fp\u003E\u003Cp\u003EПрограмма вебинара:\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003EАнализ текущей утилизации ресурсов: поиск ресурсов с низкой утилизацией и анализ возможной оптимизации.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EКалькулятор затрат: демо-настройки параметров для точных прогнозов расходов.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EАнализ детализированных данных: подходы к аналитике, включая метаданные.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EОптимизация потребления: использование зарезервированных инстансов и спотовых экземпляров.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EАнализ бесплатного потребления: как использовать free tier для сокращения затрат.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EНастройка лимитов бюджетов: автоматизация и уведомления для контроля расходов.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EИспользование Public API: тегирование ресурсов для лучшей аналитики затрат.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003EВебинар будет интересен менеджерам облачных ресурсов и IT-департаментов, DevOps-инженерам и сотрудникам, в чью зону ответственности входит контроль над облачными расходами.\u003C\u002Fp\u003E","imageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F38f\u002F10d\u002Ff4c\u002F38f10df4c7f9d7c5d4610fe426af0ab4.png","eventUrl":"https:\u002F\u002Fu.habr.com\u002Fcldr_cloudeventwebinar","startDay":"2025-03-20","startTime":"11:00","finishDay":"2025-03-20","isOnline":true,"geo":[],"isArchive":false,"categories":[{"id":"2","titleHtml":"Разработка"},{"id":"4","titleHtml":"Администрирование"}],"tags":["вебинар cloudru","вебинар для айтишников","вебинар про облака"],"metadata":null},{"id":"616","titleHtml":"Бизнес-конференция «Digital Brand Day 2025: Орбита 2025»","descriptionHtml":"\u003Cp\u003E21 марта конференция «Digital Brand Day 2025: Орбита 2025» в восьмой раз соберёт ведущих экспертов цифрового маркетинга и рекламы для обсуждения главных трендов digital-рынка и новых инструментов, которые определят стратегию брендов.\u003C\u002Fp\u003E\u003Cp\u003EВ основе темы Digital Brand Day 2025 лежит фундаментальный вопрос философии: что первично — материя или сознание? А что же первично в цифровой среде — технологии или идеи? Конференция станет эпицентром открытий, где мы вместе проложим путь сквозь бескрайние просторы рекламного космоса и наметим вектор развития цифрового маркетинга.\u003C\u002Fp\u003E\u003Cp\u003EГостей «Digital Brand Day: Орбита 2025» ждёт не только насыщенная программа, но и возможность завести полезные знакомства, увидеть, каким будет диджитал завтра.\u003C\u002Fp\u003E","imageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F523\u002F7fb\u002F13a\u002F5237fb13ad7fb6fb483c49691aaec836.png","eventUrl":"https:\u002F\u002Fu.habr.com\u002Fcldr_digitalbrandday","startDay":"2025-03-21","startTime":"10:00","isOnline":false,"geo":["Москва"],"isArchive":false,"categories":[{"id":"10","titleHtml":"Маркетинг"},{"id":"16","titleHtml":"Другое"}],"tags":["digital brand day","бизнес-конференция digital brand day","цифровой маркетинг","digital-рынок"],"metadata":null},{"id":"608","titleHtml":"Вебинар «Контент-маркетинг здорового человека: как привлечь внимание аудитории»","descriptionHtml":"\u003Cp\u003E27 марта в 16:00 МСК вместе с агентством Loft PR Studio проведем открытый вебинар о том, как писать про здоровье на Хабре. \u003C\u002Fp\u003E\u003Cp\u003EНа вебинаре разберем, что помогает удерживать внимание и превращает контент в работающий инструмент. Поделимся опытом брендов, которые ведут блоги и регулярно публикуют статьи.\u003C\u002Fp\u003E\u003Cp\u003EБудет интересно тем, кто продвигает товары и услуги для здоровья на аудиторию B2C и B2B. \u003C\u002Fp\u003E\u003Cp\u003E🔗 Участие бесплатное, но нужна предварительная регистрация.\u003C\u002Fp\u003E","imageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F8fd\u002Fe04\u002Fddd\u002F8fde04ddd9ba3f6bcd515aa6209f96b7.png","eventUrl":"https:\u002F\u002Fhabr.timepad.ru\u002Fevent\u002F3266126\u002F?utm_refcode=b5d44b4f1d5f2c06b5696586408b58e610baafd8","startDay":"2025-03-27","startTime":"16:00","finishDay":"2025-03-27","finishTime":"18:00","isOnline":true,"geo":[],"isArchive":false,"categories":[{"id":"10","titleHtml":"Маркетинг"},{"id":"16","titleHtml":"Другое"}],"tags":["Вебинар","Контент","Хабр"],"metadata":null},{"id":"606","titleHtml":"Серия вебинаров «DevOps Middle: AvitoTech vs ecom.tech»","descriptionHtml":"\u003Cp\u003EУчебный центр Слёрм запустил серию бесплатных вебинаров «Честные вакансии: DevOps Middle».\u003C\u002Fp\u003E\u003Cp\u003EДва раза в неделю Вячеслав Федосеев, TeamLead DevOps в «Честном знаке» и автор телеграм-канала «DevOps Bootcamp с Федосеевым» встречается в прямом эфире с экспертами из бигтеха, чтобы обсудить:\u003C\u002Fp\u003E\u003Col\u003E\u003Cli\u003E\u003Cp\u003EКакие задачи должен решать DevOps middle.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EКакими основными и дополнительными инструментами и подходами должен владеть DevOps middle.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EСтоп-факторы на собеседовании.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EКак выглядит рабочий день DevOps middle.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EКакие софт-скилы действительно важны.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Fol\u003E\u003Cp\u003E31 марта состоится встреча с экспертами AvitoTech, 2 апреля — с ecom.tech. Кому подходите вы, а кто — вам? Разберёмся вместе на вебинарах.\u003C\u002Fp\u003E\u003Cp\u003EПодробности — в telegram-боте.\u003C\u002Fp\u003E\u003Cp\u003E\u003C\u002Fp\u003E","imageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fb99\u002F62a\u002Fb24\u002Fb9962ab2439c6edc80f96d7f0a847c72.png","eventUrl":"https:\u002F\u002Fu.habr.com\u002Fcldr_slermdevops","startDay":"2025-03-31","startTime":"17:00","isOnline":true,"geo":[],"isArchive":false,"categories":[{"id":"2","titleHtml":"Разработка"},{"id":"4","titleHtml":"Администрирование"}],"tags":["Вебинар Слерм","Вебинар Devops","Честные вакансии","Слерм","Честные вакансии Devops Middle"],"metadata":null},{"id":"618","titleHtml":"Реалити для разработчиков: узнайте, как строится новое публичное облако MWS","descriptionHtml":"\u003Cp\u003EBuilding the Cloud — это реалити-проект для разработчиков о новом облаке МТС Web Services. Каждый эпизод посвящён отдельному building-блоку новой облачной платформы.\u003C\u002Fp\u003E\u003Cp\u003EВ прямом эфире:\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003EПоказываем архитектуру сервисов облака ещё до релиза.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EДелимся опытом на реальных кейсах из разработки.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EОтвечаем на вопросы в прямом эфире.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003EВ новом выпуске проекта расскажем, как строим underlay-сеть нового облака.\u003C\u002Fp\u003E\u003Cp\u003EВы узнаете:\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003EКак мы поменяли подход к построению underlay-сети в новом облаке MWS.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EКакую архитектуру строим и как реализовали изоляцию management и data plane.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EКак обеспечиваем отказоустойчивость и производительность на уровне физической инфраструктуры.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003EНовый выпуск Building the Cloud будет интересен сетевым инженерам, backend-разработчикам, DevOps- и SRE-инженерам, а также всем, кто интересуется сетевыми или облачными технологиями.\u003C\u002Fp\u003E\u003Cp\u003EРегистрируйтесь по ссылке, подключайтесь к прямому эфиру и задавайте вопросы в чате.\u003C\u002Fp\u003E\u003Cp\u003EЗа самый интересный вопрос подарим фирменный мерч MWS.\u003C\u002Fp\u003E\u003Cp\u003EДо встречи в эфире.\u003C\u002Fp\u003E","imageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Ff76\u002F0f9\u002Fa82\u002Ff760f9a827b851a5eeca4802c643a91d.png","eventUrl":"https:\u002F\u002Fu.habr.com\u002Fcldr_buildingthecloud4","startDay":"2025-04-03","startTime":"11:00","isOnline":true,"geo":[],"isArchive":false,"categories":[{"id":"2","titleHtml":"Разработка"}],"tags":["реалити-проект для разработчиков","Реалити для разработчиков","облако","облако MWS"],"metadata":null},{"id":"620","titleHtml":"Открытая встреча «System Analysis Meetup SberHealth»","descriptionHtml":"\u003Cp\u003EВ программе:\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003EГоргоц Мария, старший системный аналитик, расскажет про описание требований для мобильных приложений.&nbsp;\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EНижник Станислав, ведущий системный аналитик, расскажет про книжный клуб системных аналитиков: «Как мы создали сообщество для обмена знаниями».\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EВ качестве приглашённого спикера Севостьянова Анастасия, ведущий системный аналитик в Альфа-Банке, расскажет про мидл слой без хаоса: «Как сделать документацию понятной и живой».&nbsp;\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003EПосле сессии с докладами проведём профессиональную игру для офлайн-участников «Искусство защиты абсурда».&nbsp;\u003C\u002Fp\u003E\u003Cp\u003EВедущая митапа Пашкова Ольга, руководитель направления методологии и системного анализа в СберЗдоровье.\u003C\u002Fp\u003E","imageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Feba\u002Fc37\u002F879\u002Febac378793b959ebce42f41713e7b67f.jpg","eventUrl":"https:\u002F\u002Fu.habr.com\u002Fcldr_sbermeetup","startDay":"2025-04-03","startTime":"17:00","finishDay":"2025-04-03","finishTime":"23:00","isOnline":true,"geo":["Москва"],"isArchive":false,"categories":[{"id":"12","titleHtml":"Аналитика"}],"tags":["Семинар аналитика","сбер митап","системная аналитика митап","системная аналитика"],"metadata":null},{"id":"590","titleHtml":"«GoCloud 2025» — масштабная IT-конференция про облака и AI","descriptionHtml":"\u003Cp\u003EПоговорим про глобальные тренды в AI, расскажем про широкий набор сценариев работы в облаке, поделимся последними релизами и нашими планами, чтобы показать, какой простор открывают облачные и AI-технологии для бизнеса и разработчиков.\u003C\u002Fp\u003E\u003Cp\u003EЧто ждёт участников в этом году:\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003EТри трека: инфраструктура и инструменты, AI и R&amp;D и сценарии работы в облаке.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003E30+ спикеров из Cloud.ru и ведущих российских компаний.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003ELive-демонстрации облачных платформ и нетворкинг с экспертами.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EНе только доклады: интерактивные зоны, afterparty с музыкальной программой и кастомный мерч.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003EКому будет полезно: техническим лидерам, IT-директорам, бизнес-руководителям, разработчикам, DevOps-инженерам, архитекторам, дата-инженерам, AI\u002FML-инженерам, дата-сайентистам, SRE-инженерам, системным администраторам, специалистам по информационной безопасности.\u003C\u002Fp\u003E\u003Cp\u003EАдрес: Москва, Цифровое деловое пространство (ЦДП), ул. Покровка, 47.\u003C\u002Fp\u003E\u003Cp\u003E\u003C\u002Fp\u003E","imageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F31b\u002Fe68\u002F295\u002F31be6829578e7934fbc944396eb330b1.png","eventUrl":"https:\u002F\u002Fu.habr.com\u002Fcldr_gocloud","startDay":"2025-04-10","startTime":"10:00","finishDay":"2025-04-10","finishTime":"20:00","isOnline":true,"geo":["Москва"],"isArchive":false,"categories":[{"id":"2","titleHtml":"Разработка"},{"id":"4","titleHtml":"Администрирование"},{"id":"8","titleHtml":"Менеджмент"}],"tags":["конференция Cloud.ru","AI","ИИ","айти конференция","облачные хранилища"],"metadata":null},{"id":"516","titleHtml":"IT-конференция Merge Tatarstan 2025","descriptionHtml":"\u003Cp\u003EКрупнейшая региональная IT-конференция России собирает профессионалов со всей страны для нетворкинга, обмена опытом и поиска новых деловых контактов.\u003C\u002Fp\u003E\u003Cp\u003EMerge Tatarstan — это 7 тематических конференций на одной площадке, 2000 участников, более 170 спикеров-практиков, мастер-классы, воркшопы и BoF-сессии.\u003C\u002Fp\u003E\u003Cp\u003EК участию в конференции приглашаются разработчики, QA, тимлиды, Project\u002FProduct-менеджеры, маркетологи, аналитики, UI\u002FUX-дизайнеры, PR-специалисты, HR-менеджеры, владельцы бизнеса и начинающие специалисты.\u003C\u002Fp\u003E\u003Cp\u003E\u003C\u002Fp\u003E","imageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F0e9\u002F3a8\u002F3ec\u002F0e93a83ecea09f806d1df907ddb036a4.jpg","eventUrl":"https:\u002F\u002Fu.habr.com\u002Fcldr_tatarstan","startDay":"2025-04-25","startTime":"09:00","finishDay":"2025-04-26","finishTime":"19:30","isOnline":false,"geo":["Казань"],"isArchive":false,"categories":[{"id":"2","titleHtml":"Разработка"},{"id":"10","titleHtml":"Маркетинг"},{"id":"16","titleHtml":"Другое"}],"tags":["Разработка","IT","PR","UI\u002FUX","бизнес","маркетинг","аналитика"],"metadata":null},{"id":"610","titleHtml":"Летняя айти-тусовка Summer Merge","descriptionHtml":"\u003Cp\u003EЛетняя айти-тусовка возвращается.\u003C\u002Fp\u003E\u003Cp\u003EВырваться из рутины и сменить обстановку на несколько дней можно вместе с Summer Merge.&nbsp;\u003C\u002Fp\u003E\u003Cp\u003EСосновый лес, чистый воздух, живое общение с экспертами IT, спортивные состязания, мастер-классы, квесты, встречи с друзьями, новые знакомства, afterparty — забудьте про суету города и окунитесь в приятную атмосферу digital detox. В эти летние IT-выходные мы обещаем атмосферу ярких приключений.&nbsp;\u003C\u002Fp\u003E\u003Cp\u003EЖдём вас 20—22 июня в экопарке «Русский берег» на Summer Merge.\u003C\u002Fp\u003E","imageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F652\u002F12d\u002F998\u002F65212d998fb4939d9787bd9c726d2acb.png","eventUrl":"https:\u002F\u002Fu.habr.com\u002Fcldr_summermerge","startDay":"2025-06-20","finishDay":"2025-06-22","isOnline":false,"geo":["Ульяновская область"],"isArchive":false,"categories":[{"id":"2","titleHtml":"Разработка"},{"id":"16","titleHtml":"Другое"}],"tags":["летняя айти-тусовка","айти-кэмп","летний выезд для айтишников","Summer Merge"],"metadata":null}],"currentEvent":null,"eventsFilter":{"city":"all","timeStarted":null,"timeEnded":null}},"wysiwyg":{"WYSIWYGRulesRefs":null}};(function(){var s;(s=document.currentScript||document.scripts[document.scripts.length-1]).parentNode.removeChild(s);}());</script><script src="https://assets.habr.com/habr-web/js/chunk-vendors.3b11d41f.js" defer></script><script src="https://assets.habr.com/habr-web/js/app.7a97ea6d.js" defer></script></div>
    <div id="overlays"><!----><!--teleport anchor--><!----><!--teleport anchor--><!----><!--teleport anchor--><!----><!--teleport anchor--><!----><!--teleport anchor--><!----><!--teleport anchor--></div>
    
    
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-S28W1WC23F"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());
    </script>
  
  <script type="text/javascript" >
    (function(m,e,t,r,i,k,a){m[i]=m[i]||function(){(m[i].a=m[i].a||[]).push(arguments)};
    m[i].l=1*new Date();k=e.createElement(t),a=e.getElementsByTagName(t)[0],k.async=1,k.src=r,a.parentNode.insertBefore(k,a)})
    (window, document, "script", "https://mc.yandex.ru/metrika/tag.js", "ym");

  </script>
    <script type="text/javascript">
      window.addEventListener('load', function () {
        setTimeout(() => {
          const img = new Image();
          img.src = 'https://vk.com/rtrg?p=VK-RTRG-421343-57vKE';
        }, 0);
      });
    </script>
  
    </body>

    </html>
