<!DOCTYPE html>
<html lang="ru">

  <head>
    <title>Работа с асинхронными операциями с помощью Kotlin Coroutines &#x2F; Хабр</title>
<meta property="fb:app_id" content="444736788986613">
<meta property="fb:pages" content="472597926099084">
<meta name="twitter:card" content="summary_large_image">
<meta name="twitter:site" content="@habr_com">
<meta property="og:site_name" content="Хабр">
<link href="https://habr.com/ru/rss/post/747858/?fl=ru" type="application/rss+xml" title rel="alternate" name="rss">
<link href="https://habr.com/ru/articles/747858/" rel="canonical" data-hid="e3fa780">
<link rel="image_src" href="https://habrastorage.org/getpro/habr/upload_files/ff3/45f/947/ff345f947d03f94e08ce4ba461a330c4.png" data-hid="2a79c45">
<link rel="amphtml" href="https://habr.com/ru/amp/publications/747858/">
<meta property="og:title" content="Работа с асинхронными операциями с помощью Kotlin Coroutines">
<meta name="twitter:title" content="Работа с асинхронными операциями с помощью Kotlin Coroutines">
<meta name="aiturec:title" content="Работа с асинхронными операциями с помощью Kotlin Coroutines">
<meta name="description" content="Всем привет! Меня зовут Сергей, я Android-разработчик Студии Олега Чулакова на проектах Сбера. Недавно я написал статью Многопоточность в мобильной разработке . В ней был затронут один из наиболее...">
<meta itemprop="description" content="Всем привет! Меня зовут Сергей, я Android-разработчик Студии Олега Чулакова на проектах Сбера. Недавно я написал статью Многопоточность в мобильной разработке . В ней был затронут один из наиболее...">
<meta property="og:description" content="Всем привет! Меня зовут Сергей, я Android-разработчик Студии Олега Чулакова на проектах Сбера. Недавно я написал статью Многопоточность в мобильной разработке . В ней был затронут один из наиболее...">
<meta name="twitter:description" content="Всем привет! Меня зовут Сергей, я Android-разработчик Студии Олега Чулакова на проектах Сбера. Недавно я написал статью Многопоточность в мобильной разработке . В ней был затронут один из наиболее...">
<meta property="aiturec:description" content="Всем привет! Меня зовут Сергей, я Android-разработчик Студии Олега Чулакова на проектах Сбера. Недавно я написал статью Многопоточность в мобильной разработке . В ней был затронут один из наиболее...">
<meta itemprop="image" content="https://habrastorage.org/getpro/habr/upload_files/ff3/45f/947/ff345f947d03f94e08ce4ba461a330c4.png">
<meta property="og:image" content="https://habrastorage.org/getpro/habr/upload_files/ff3/45f/947/ff345f947d03f94e08ce4ba461a330c4.png">
<meta property="og:image:width" content="1200">
<meta property="og:image:height" content="630">
<meta property="aiturec:image" content="https://habrastorage.org/getpro/habr/upload_files/ff3/45f/947/ff345f947d03f94e08ce4ba461a330c4.png">
<meta name="twitter:image" content="https://habrastorage.org/getpro/habr/upload_files/ff3/45f/947/ff345f947d03f94e08ce4ba461a330c4.png">
<meta property="vk:image" content="https://habrastorage.org/getpro/habr/upload_files/ff3/45f/947/ff345f947d03f94e08ce4ba461a330c4.png?format=vk">
<meta property="vk:image" content="https://habrastorage.org/getpro/habr/upload_files/ff3/45f/947/ff345f947d03f94e08ce4ba461a330c4.png?format=vk">
<meta property="aiturec:item_id" content="747858">
<meta property="aiturec:datetime" content="2023-07-18T11:21:04.000Z">
<meta content="https://habr.com/ru/articles/747858/" property="og:url">
<meta property="og:type" content="article">
<meta property="og:locale" content="ru_RU">
<meta property="og:image:width" content="1200">
<meta property="og:image:height" content="630">
<meta name="keywords" content="kotlin coroutines, асинхронные операции, android, многопоточность">
<script type="application/ld+json" data-hid="1e0f0a2">{"@context":"http:\/\/schema.org","@type":"Article","mainEntityOfPage":{"@type":"WebPage","@id":"https:\/\/habr.com\/ru\/articles\/747858\/"},"headline":"Работа с асинхронными операциями с помощью Kotlin Coroutines","datePublished":"2023-07-18T14:21:04+03:00","dateModified":"2023-07-20T13:09:24+03:00","author":{"@type":"Person","name":"Chulakov"},"publisher":{"@type":"Organization","name":"Habr","logo":{"@type":"ImageObject","url":"https:\/\/habrastorage.org\/webt\/a_\/lk\/9m\/a_lk9mjkccjox-zccjrpfolmkmq.png"}},"description":"Всем привет! Меня зовут Сергей, я Android-разработчик Студии Олега Чулакова на проектах Сбера. Недавно я написал статью Многопоточность в мобильной разработке. В...","url":"https:\/\/habr.com\/ru\/articles\/747858\/#post-content-body","about":["h_java","h_mobile_dev","h_android_dev","h_kotlin","f_develop"],"image":["https:\/\/habr.com\/share\/publication\/747858\/021bd530fcb1feb87bfcd4fca5fcf8c7\/","https:\/\/habrastorage.org\/getpro\/habr\/upload_files\/eed\/b3a\/f0a\/eedb3af0a819733cbfccf5a73926db32.png","https:\/\/habrastorage.org\/getpro\/habr\/upload_files\/4d4\/474\/eec\/4d4474eecd7c6bcd185d44e29c591345.jpg","https:\/\/habrastorage.org\/getpro\/habr\/upload_files\/c96\/b92\/73b\/c96b9273b8a5d6dc99cbe3e9a5d85a37.jpg","https:\/\/habrastorage.org\/getpro\/habr\/upload_files\/c3c\/58f\/7ec\/c3c58f7ec8d37058fde912662ecb8139.jpg","https:\/\/habrastorage.org\/getpro\/habr\/upload_files\/ac7\/1b3\/296\/ac71b32966cff2a9102cb97f6866bf8b.jpg","https:\/\/habrastorage.org\/getpro\/habr\/upload_files\/e31\/45f\/ef0\/e3145fef0f88ea1825343607ebd8fdb7.jpg","https:\/\/habrastorage.org\/getpro\/habr\/upload_files\/5d1\/989\/3e3\/5d19893e3f70a50c7681c1c839d7fa7e.jpg"]}</script>
    <meta charset="UTF-8">
    <meta name="viewport"
      content="width=device-width,initial-scale=1.0,viewport-fit=cover,maximum-scale=1,user-scalable=0">
    <meta name="referrer" content="unsafe-url">
    <style>
      /* cyrillic-ext */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 400;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9E4kDNxMZdWfMOD5VvmojLazX3dGTP.woff2) format('woff2');
        unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;
      }

      /* cyrillic */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 400;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9E4kDNxMZdWfMOD5Vvk4jLazX3dGTP.woff2) format('woff2');
        unicode-range: U+0301, U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;
      }

      /* latin-ext */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 400;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9E4kDNxMZdWfMOD5VvmYjLazX3dGTP.woff2) format('woff2');
        unicode-range: U+0100-02AF, U+0304, U+0308, U+0329, U+1E00-1E9F, U+1EF2-1EFF, U+2020, U+20A0-20AB, U+20AD-20C0, U+2113, U+2C60-2C7F, U+A720-A7FF;
      }

      /* latin */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 400;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9E4kDNxMZdWfMOD5Vvl4jLazX3dA.woff2) format('woff2');
        unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+0304, U+0308, U+0329, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
      }

      /* cyrillic-ext */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 500;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnZKveSxf6Xl7Gl3LX.woff2) format('woff2');
        unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;
      }

      /* cyrillic */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 500;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnZKveQhf6Xl7Gl3LX.woff2) format('woff2');
        unicode-range: U+0301, U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;
      }

      /* latin-ext */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 500;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnZKveSBf6Xl7Gl3LX.woff2) format('woff2');
        unicode-range: U+0100-02AF, U+0304, U+0308, U+0329, U+1E00-1E9F, U+1EF2-1EFF, U+2020, U+20A0-20AB, U+20AD-20C0, U+2113, U+2C60-2C7F, U+A720-A7FF;
      }

      /* latin */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 500;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnZKveRhf6Xl7Glw.woff2) format('woff2');
        unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+0304, U+0308, U+0329, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
      }

      /* cyrillic-ext */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 700;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnLK3eSxf6Xl7Gl3LX.woff2) format('woff2');
        unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;
      }

      /* cyrillic */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 700;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnLK3eQhf6Xl7Gl3LX.woff2) format('woff2');
        unicode-range: U+0301, U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;
      }

      /* latin-ext */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 700;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnLK3eSBf6Xl7Gl3LX.woff2) format('woff2');
        unicode-range: U+0100-02AF, U+0304, U+0308, U+0329, U+1E00-1E9F, U+1EF2-1EFF, U+2020, U+20A0-20AB, U+20AD-20C0, U+2113, U+2C60-2C7F, U+A720-A7FF;
      }

      /* latin */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 700;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnLK3eRhf6Xl7Glw.woff2) format('woff2');
        unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+0304, U+0308, U+0329, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
      }
    </style>
    <link rel="preload" href="https://assets.habr.com/habr-web/css/theme/light-v1.css" as="style" media="(prefers-color-scheme: light)" /><link rel="preload" href="https://assets.habr.com/habr-web/css/theme/dark-v1.css" as="style" media="(prefers-color-scheme: dark)" /><link id="light-colors" rel="stylesheet" href="https://assets.habr.com/habr-web/css/theme/light-v1.css" media="(prefers-color-scheme: light)" /><link id="dark-colors" rel="stylesheet" href="https://assets.habr.com/habr-web/css/theme/dark-v1.css" media="(prefers-color-scheme: dark)" />
    <script>window.i18nFetch = new Promise((res, rej) => {
          const xhr = new XMLHttpRequest();
          xhr.open('GET', '/js/i18n/ru-compiled.35b2fec11bb79a62419ab67779c2dd82.json');
          xhr.responseType = 'json';
          xhr.onload = function(e) {
            if (this.status === 200) {
              res({ru: xhr.response});
            } else {
              rej(e);
            }
          };
          xhr.send();
        });</script>
    <style>
      .grecaptcha-badge {
        visibility: hidden;
      }
    </style>
    <meta name="habr-version" content="2.233.0">
    
    <meta name="apple-mobile-web-app-status-bar-style" content="#303b44">
    <meta name="msapplication-TileColor" content="#629FBC">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="mobile-web-app-capable" content="yes">
    <link rel="shortcut icon" type="image/png" sizes="16x16" href="https://assets.habr.com/habr-web/img/favicons/favicon-16.png">
    <link rel="shortcut icon" type="image/png" sizes="32x32" href="https://assets.habr.com/habr-web/img/favicons/favicon-32.png">
    <link rel="apple-touch-icon" type="image/png" sizes="76x76" href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-76.png">
    <link rel="apple-touch-icon" type="image/png" sizes="120x120" href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-120.png">
    <link rel="apple-touch-icon" type="image/png" sizes="152x152" href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-152.png">
    <link rel="apple-touch-icon" type="image/png" sizes="180x180" href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-180.png">
    <link rel="apple-touch-icon" type="image/png" sizes="256x256" href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-256.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 320px) and (device-height: 568px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1136x640.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 375px) and (device-height: 812px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2436x1125.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1792x828.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_828x1792.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 375px) and (device-height: 667px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1334x750.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1242x2668.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 414px) and (device-height: 736px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2208x1242.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 375px) and (device-height: 812px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1125x2436.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 414px) and (device-height: 736px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1242x2208.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 1024px) and (device-height: 1366px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2732x2048.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2688x1242.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 834px) and (device-height: 1112px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2224x1668.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 375px) and (device-height: 667px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_750x1334.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 1024px) and (device-height: 1366px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2048x2732.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 834px) and (device-height: 1194px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2388x1668.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 834px) and (device-height: 1112px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1668x2224.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 320px) and (device-height: 568px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_640x1136.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 834px) and (device-height: 1194px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1668x2388.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 768px) and (device-height: 1024px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2048x1536.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 768px) and (device-height: 1024px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1536x2048.png">
    <link rel="mask-icon" color="#77a2b6" href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-120.svg">
    <link crossorigin="use-credentials" href="/manifest.webmanifest" rel="manifest">
    <script async src="https://unpkg.com/pwacompat" crossorigin="anonymous"></script>
    <script>window.yaContextCb = window.yaContextCb || []</script>
    <script src="https://yandex.ru/ads/system/context.js" async></script>
  <link rel="preload" href="https://assets.habr.com/habr-web/css/chunk-vendors.04465f7c.css" as="style"><link rel="preload" href="https://assets.habr.com/habr-web/js/chunk-vendors.3b11d41f.js" as="script"><link rel="preload" href="https://assets.habr.com/habr-web/css/app.20959a76.css" as="style"><link rel="preload" href="https://assets.habr.com/habr-web/js/app.7a97ea6d.js" as="script"><link rel="stylesheet" href="https://assets.habr.com/habr-web/css/chunk-vendors.04465f7c.css"><link rel="stylesheet" href="https://assets.habr.com/habr-web/css/app.20959a76.css"></head>
  <body>
    
    <div id="mount"><div id="app" data-async-called="true"><div class="tm-layout__wrapper"><!--[--><!----><div></div><div class="tm-feature tm-feature"><!----></div><header class="tm-header" data-test-id="header"><div class="tm-page-width"><!--[--><div class="tm-header__container"><div class="tm-header__burger-nav" data-test-id="burger-nav"><button class="tm-header__button tm-header__button_burger" type="button"><svg class="tm-svg-img tm-header__icon tm-header__icon-burger" height="16" width="16"><title>Меню</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#header-burger"></use></svg></button></div><span class="tm-header__logo-wrap"><a class="tm-header__logo tm-header__logo_hl-ru tm-header__logo" href="/ru/"><svg class="tm-svg-img tm-header__icon" height="16" width="16"><title>Хабр</title><use xlink:href="/img/habr-logo-ru.svg#logo"></use></svg></a><span style="display:none;" class="tm-header__beta-sign">β</span></span><!----><div class="tm-header-user-menu tm-header_user-menu"><a href="/ru/search/" class="tm-header-user-menu__item tm-header-user-menu__search" data-test-id="search-button"><svg class="tm-svg-img tm-header-user-menu__icon tm-header-user-menu__icon_search" height="24" width="24"><title>Поиск</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#search"></use></svg></a><!----><!----><div class="tm-header-user-menu__item tm-header-user-menu__write"><div><svg class="tm-svg-img tm-header-user-menu__icon tm-header-user-menu__icon_write" height="24" width="24"><title>Написать публикацию</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#write"></use></svg></div><!----></div><!--[--><div class="tm-header-user-menu__item"><button class="tm-header-user-menu__toggle" data-test-id="user-menu-settings"><svg class="tm-svg-img tm-header-user-menu__icon" height="24" width="24"><title>Настройки</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#page-settings"></use></svg></button></div><a href="https://habr.com/kek/v1/auth/habrahabr/?back=/ru/articles/747858/&amp;hl=ru" rel="nofollow" class="tm-header-user-menu__item"><!--[--><button class="btn btn_solid btn_small tm-header-user-menu__login" type="button"><!--[-->Войти<!--]--></button><!--]--></a><!--]--><!----><!--teleport start--><!--teleport end--><!----></div></div><!--]--></div></header><div class="tm-layout"><div class="tm-page-progress-bar"></div><!----><!----><div class="tm-page-width"><!--[--><!--]--></div><main class="tm-layout__container"><div class="tm-page" hl="ru" data-async-called="true" style="--0c809c5a:16px;--a086013e:100%;--7c457026:0;"><div class="tm-page-width"><!--[--><!----><div class="tm-page__wrapper"><div class="tm-page__main_has-sidebar tm-page__main"><div class="pull-down"><!----><div class="pull-down__header" style="height:0px;"><div class="pull-down__content" style="bottom:10px;"><svg class="tm-svg-img pull-down__icon pull-down__arrow" height="24" width="24"><title>Обновить</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#pull-arrow"></use></svg></div></div><!--[--><!--[--><div class="banner-wrapper narrow" style="--467224fc:100px;--58ff5eba:auto;" data-v-ad758baa><!--[--><div class="placeholder-wrapper placeholder" data-v-ad758baa><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><div class="adfox-banner-placeholder narrow" data-v-12f7bcca><div class="image loads" data-v-12f7bcca></div><div class="lines" data-v-12f7bcca><div class="line loads" data-v-12f7bcca></div><div class="line loads" data-v-12f7bcca></div><div class="line loads" data-v-12f7bcca></div></div></div><!----></div><div id="adfox_169815559787254866" class="tm-adfox-banner" data-v-ad758baa></div><!--]--></div><div class="tm-article-presenter"><!--[--><!--]--><div class="tm-article-presenter__body" data-test-id="article-body"><div class="tm-misprint-area"><div class="tm-misprint-area__wrapper"><!--[--><article class="tm-article-presenter__content tm-article-presenter__content_narrow"><!--[--><div class="tm-article-presenter__header"><!--[--><!--]--><div class="tm-article-snippet tm-article-snippet tm-article-presenter__snippet"><!--[--><!--]--><div class="tm-article-snippet__meta-container"><div class="tm-article-snippet__meta"><span class="tm-user-info tm-article-snippet__author"><a href="/ru/users/Chulakov_Dev/" class="tm-user-info__userpic" data-test-id="user-info-pic" title="Chulakov_Dev"><div class="tm-entity-image"><img alt="" class="tm-entity-image__pic" height="32" src="//habrastorage.org/r/w64/getpro/habr/avatars/e84/1e0/492/e841e0492642b21cfb9211cf61f94520.png" width="32"></div></a><span class="tm-user-info__user tm-user-info__user_appearance-default" data-test-id="user-info-description"><a href="/ru/users/Chulakov_Dev/" class="tm-user-info__username">Chulakov_Dev <!----></a><!--[--><span class="tm-article-datetime-published"><time datetime="2023-07-18T11:21:04.000Z" title="2023-07-18, 14:21">18  июл  2023 в 14:21</time></span><!--]--></span></span></div><!----></div><h1 class="tm-title tm-title_h1" lang="ru" data-test-id="articleTitle"><span>Работа с асинхронными операциями с помощью Kotlin Coroutines</span></h1><div class="tm-article-snippet__stats" data-test-id="articleStats"><div class="tm-article-complexity tm-article-complexity_complexity-medium"><span class="tm-svg-icon__wrapper tm-article-complexity__icon"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Уровень сложности</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#complexity-medium"></use></svg></span><span class="tm-article-complexity__label">Средний</span></div><div class="tm-article-reading-time"><span class="tm-svg-icon__wrapper tm-article-reading-time__icon"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Время на прочтение</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#clock"></use></svg></span><span class="tm-article-reading-time__label">20 мин</span></div><span class="tm-icon-counter tm-data-icons__item"><svg class="tm-svg-img tm-icon-counter__icon" height="24" width="24"><title>Количество просмотров</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-views"></use></svg><span class="tm-icon-counter__value" title="38276">38K</span></span></div><div class="tm-publication-hubs__container" data-test-id="articleHubsList"><div class="tm-publication-hubs"><!--[--><span class="tm-publication-hub__link-container"><a href="/ru/hubs/java/" class="tm-publication-hub__link"><!--[--><span>Java</span><span class="tm-article-snippet__profiled-hub" title="Профильный хаб">*</span><!--]--></a></span><span class="tm-publication-hub__link-container"><a href="/ru/hubs/mobile_dev/" class="tm-publication-hub__link"><!--[--><span>Разработка мобильных приложений</span><span class="tm-article-snippet__profiled-hub" title="Профильный хаб">*</span><!--]--></a></span><span class="tm-publication-hub__link-container"><a href="/ru/hubs/android_dev/" class="tm-publication-hub__link"><!--[--><span>Разработка под Android</span><span class="tm-article-snippet__profiled-hub" title="Профильный хаб">*</span><!--]--></a></span><span class="tm-publication-hub__link-container"><a href="/ru/hubs/kotlin/" class="tm-publication-hub__link"><!--[--><span>Kotlin</span><span class="tm-article-snippet__profiled-hub" title="Профильный хаб">*</span><!--]--></a></span><!--]--></div></div><!----><!----><!----></div></div><!--[--><!----><div class="tm-article-body" data-gallery-root lang="ru"><div><!--[--><!--]--></div><div id="post-content-body"><div><div class="article-formatted-body article-formatted-body article-formatted-body_version-2"><div xmlns="http://www.w3.org/1999/xhtml"><figure class="full-width "><img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/eed/b3a/f0a/eedb3af0a819733cbfccf5a73926db32.png" width="3200" height="1804" data-src="https://habrastorage.org/getpro/habr/upload_files/eed/b3a/f0a/eedb3af0a819733cbfccf5a73926db32.png"/></figure><p>Всем привет! Меня зовут Сергей, я Android-разработчик Студии Олега Чулакова на проектах Сбера. Недавно я написал статью <a href="https://habr.com/ru/articles/739212/" rel="noopener noreferrer nofollow">Многопоточность в мобильной разработке</a>. В ней был затронут один из наиболее популярных инструментов для работы с асинхронными операциями — Kotlin Coroutines. </p><p>Сегодня я хочу углубиться в Kotlin Coroutines и разобрать их основные компоненты. Мы рассмотрим Kotlin Coroutines, предполагая, что у вас уже есть базовое понимание языка Kotlin и некоторый опыт разработки Android-приложений. Мы изучим основные концепции Kotlin Coroutines, способы работы с асинхронными операциями, управление потоком выполнения, обработку ошибок и исключений, а также многое другое.</p><p>Моя цель — помочь вам овладеть Kotlin Coroutines и научиться использовать их для упрощения и оптимизации вашего кода, обеспечения более гладкого пользовательского опыта и более эффективного управления асинхронными операциями. Приятного чтения, мы начинаем!</p><h2>Содержание статьи</h2><p></p><p><a href="#1" rel="noopener noreferrer nofollow"><strong>1. Знакомство с Kotlin Coroutines</strong></a></p><ul><li><p>Что такое сопрограммы (coroutines)?</p></li><li><p>Почему Kotlin Coroutines стали популярными в разработке Android-приложений</p></li></ul><p></p><p><a href="#2" rel="noopener noreferrer nofollow"><strong>2. Области видимости (CoroutineScope) </strong></a></p><ul><li><p>Понятие CoroutineScope</p></li><li><p>Основные виды и различия CoroutineScope</p></li><li><p>Примеры с кодом</p></li></ul><p></p><p><a href="#3" rel="noopener noreferrer nofollow"><strong>3. Диспетчеры (Dispatchers)</strong></a></p><ul><li><p>Понятие Dispatchers</p></li><li><p>Виды и различия Dispatchers</p></li></ul><p></p><p><a href="#4" rel="noopener noreferrer nofollow"><strong>4. Корутин-билдеры (Coroutine Builders) </strong></a></p><ul><li><p>Понятие Coroutine Builders</p></li><li><p>Виды и различия Coroutine Builders</p></li><li><p>Примеры с кодом</p></li></ul><p></p><p><a href="#5" rel="noopener noreferrer nofollow"><strong>5. Задачи (Jobs) </strong></a></p><ul><li><p>Что такое Job</p></li><li><p>Основные методы для работы и отслеживания состояний Job</p></li><li><p>Примеры с кодом</p></li></ul><p></p><p><a href="#6" rel="noopener noreferrer nofollow"><strong>6. Функции приостановки (Suspend)  </strong></a></p><ul><li><p>Понятие и сравнение с обычной функцией</p></li><li><p>Примеры с кодом</p></li></ul><p></p><p><a href="#7" rel="noopener noreferrer nofollow"><strong>7. Continuation </strong></a></p><ul><li><p>Разбор кода корутины</p></li><li><p>Пример Continuation</p></li><li><p>Пример Continuation, в составе которого есть suspend-функции с возвращаемым результатом</p></li></ul><p></p><p><a href="#8" rel="noopener noreferrer nofollow"><strong>8. CoroutineExceptionHandler  </strong></a></p><ul><li><p>Почему стоит избегать try-catch в корутинах</p></li><li><p>Принцип обработки ошибок в корутинах</p></li><li><p>Примеры с кодом</p></li></ul><p></p><p><a href="#9" rel="noopener noreferrer nofollow"><strong>9. SupervisorJob </strong></a></p><ul><li><p>Определение SupervisorJob</p></li><li><p>Практика и применение</p></li></ul><p></p><p><a href="#10" rel="noopener noreferrer nofollow"><strong>10. Заключение </strong></a></p><a class="anchor" name="1" id="1"></a><h2>1. Знакомство с Kotlin Coroutines </h2><figure class="full-width "><img src="https://habrastorage.org/r/w780q1/getpro/habr/upload_files/4d4/474/eec/4d4474eecd7c6bcd185d44e29c591345.jpg" width="3200" height="800" data-src="https://habrastorage.org/getpro/habr/upload_files/4d4/474/eec/4d4474eecd7c6bcd185d44e29c591345.jpg" data-blurred="true"/></figure><p>Операции в корутинах являются сопрограммами. Это легковесные потоки, которые выполняются в контексте реальных потоков. Это означает, что они не создают дополнительную нагрузку на систему, так как не являются отдельными потоками.</p><p>Корутины позволяют писать асинхронный код, который выглядит как последовательный и легко читается, при этом обеспечивая эффективное использование ресурсов и управление потоком выполнения.</p><p>Kotlin Coroutines стали популярными в разработке Android-приложений по следующим причинам.</p><p><strong>1. Лаконичность и простота использования.</strong></p><p>Одним из основных преимуществ Kotlin Coroutines является их лаконичный и интуитивно понятный синтаксис. С применением ключевого слова <em>suspend</em> разработчики могут объявлять функции, которые приостанавливают свое выполнение без блокировки потока и затем продолжают работу после завершения асинхронной операции. Это делает код легко читаемым, сокращая количество необходимого шаблонного кода.</p><p><strong>2. Интеграция с языком Kotlin.</strong></p><p>Kotlin Coroutines являются интегрированной частью языка Kotlin, что означает, что они предоставляются в стандартной библиотеке Kotlin. Это делает их применение естественным и удобным для разработчиков, которые уже используют Kotlin для своих проектов.</p><p><strong>3. Эффективное использование ресурсов.</strong></p><p>Одним из ключевых преимуществ Kotlin Coroutines является эффективное использование ресурсов, таких как потоки выполнения. Вместо создания новых потоков для каждой асинхронной операции Kotlin Coroutines применяют меньшее количество потоков и эффективно переиспользуют их, что позволяет снизить накладные расходы на создание и уничтожение потоков.</p><p><strong>4. Упрощение асинхронного кода.</strong></p><p>Kotlin Coroutines предоставляют возможность писать асинхронный код в последовательном стиле, без необходимости использования колбэков или цепочек вызовов. Это упрощает чтение и поддержку кода, делая его более логичным и структурированным. Кроме того, Kotlin Coroutines предлагают удобные операторы для комбинирования и управления последовательностями асинхронных операций, такие как <em>async</em>, <em>await</em>, <em>withContext </em>и другие.</p><p><strong>5. Поддержка отмены и обработки ошибок.</strong></p><p>Kotlin Coroutines предоставляют встроенную поддержку отмены корутин и обработки ошибок. Разработчики могут использовать различные операторы, такие как <em>cancel </em>и <em>isActive</em>, для прерывания выполнения корутины или отслеживания ее текущего статуса. Кроме того, Kotlin Coroutines предоставляют возможность обрабатывать исключения, возникающие внутри корутин.</p><p><strong>6. Легкая миграция с существующего кода.</strong></p><p>Kotlin Coroutines предоставляют возможность постепенной миграции с существующего синхронного кода на асинхронный с использованием корутин. Разработчики могут внедрять сопрограммы в свои проекты, не переписывая полностью существующий код, а постепенно обновляя его части.</p><p>В результате Kotlin Coroutines стали популярным выбором у разработчиков Android-приложений, желающих повысить производительность и качество своего кода.</p><h2>2. Области видимости (CoroutineScope)</h2><p><strong>CoroutineScope</strong> — это основной компонент для управления корутинами в Kotlin. Он предоставляет API для запуска и отмены корутин и позволяет определять, на каком потоке должны выполняться операции. CoroutineScope также дает возможность управлять жизненным циклом корутин и предотвращает утечки памяти.</p><p><strong>GlobalScope </strong>— это глобальный CoroutineScope, который может быть использован для запуска корутин в приложении. Он не связан с жизненным циклом компонентов Android и продолжает выполнение корутин, даже если активность или фрагмент были уничтожены.</p><pre><code class="kotlin">GlobalScope.launch {
    // Код корутины
}
</code></pre><p>Однако использование GlobalScope не рекомендуется в большинстве случаев. Вот несколько причин.</p><p><strong>1. Отсутствие контроля жизненного цикла.</strong></p><p>Корутины, запущенные внутри GlobalScope, не связаны с жизненным циклом других компонентов приложения. Это может привести к утечкам памяти и непредсказуемому поведению, когда приложения уничтожаются, но корутины все еще выполняются.</p><p><strong>2. Затруднение в тестировании.</strong></p><p>Корутины, запущенные внутри GlobalScope, могут быть сложными для тестирования, поскольку они не связаны с конкретным контекстом выполнения или жизненным циклом. Это может привести к проблемам с модульными или юнит-тестами.</p><p>Вот что нам говорит официальная документация. Существуют ограниченные обстоятельства, при которых <strong>GlobalScope </strong>может быть законно и безопасно использован. Например, процессы, которые должны оставаться активными в течение всего срока службы приложения. Любое применение <strong>GlobalScope </strong>требует явной регистрации с помощью @OptIn(DelicateCoroutinesApi::class), например:</p><pre><code class="kotlin">//Глобальная сопрограмма для ежесекундного ведения статистики
//Должна быть всегда активна
@OptIn(DelicateCoroutinesApi::class)
val globalScopeReporter = GlobalScope.launch {
     while (true) {
         delay(1000)
         logStatistics()
     }
}
</code></pre><p><strong>viewModelScope </strong>— это CoroutineScope, связанный с жизненным циклом ViewModel. Он автоматически отменяет все связанные с ним корутины при уничтожении ViewModel.</p><pre><code class="kotlin">class MyViewModel : ViewModel() {
    fun doSomething() {
        viewModelScope.launch {
            // Код корутины
        }
    }
}
</code></pre><p><strong>lifecycleScope </strong>является удобным способом создания CoroutineScope, связанного с жизненным циклом компонента LifecycleOwner (например фрагмента или активности).</p><p>Преимуществом использования lifecycleScope является автоматическая отмена корутин. Корутины, запущенные в lifecycleScope, отменяются при уничтожении фрагмента или активности. Вам не нужно беспокоиться о явной отмене корутин: это происходит автоматически.</p><pre><code class="kotlin">class MyFragment : Fragment() {


    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        
        viewLifecycleOwner.lifecycleScope.launch {
            // Код корутины
        }
    }


    // Остальной код фрагмента
}
</code></pre><p><strong>CoroutineScope</strong>, созданный локально:</p><pre><code class="kotlin">class MyFragment : Fragment() {


    private val myCoroutineScope = CoroutineScope(Dispatchers.Main)


    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)


        myCoroutineScope.launch {
            // Код корутины
        }
    }


    override fun onDestroyView() {
        super.onDestroyView()
        myCoroutineScope.cancel()
    }


    // Остальной код фрагмента
}
</code></pre><p>Обратите внимание, что при создании своего CoroutineScope вам необходимо самостоятельно отслеживать и отменять корутины. Убедитесь, что вы правильно отменяете свой CoroutineScope, чтобы избежать утечек памяти и неправильного поведения вашего приложения.</p><p>Использование собственного CoroutineScope особенно полезно, когда вам нужно управлять выполнением корутин в определенной области или жизненном цикле вашего компонента.</p><h2>3. Диспетчеры (Dispatchers)</h2><figure class="full-width "><img src="https://habrastorage.org/r/w780q1/getpro/habr/upload_files/c96/b92/73b/c96b9273b8a5d6dc99cbe3e9a5d85a37.jpg" width="3200" height="1306" data-src="https://habrastorage.org/getpro/habr/upload_files/c96/b92/73b/c96b9273b8a5d6dc99cbe3e9a5d85a37.jpg" data-blurred="true"/></figure><p>Диспетчеры определяют контекст выполнения корутин. Они указывают, на каком потоке или потоках будет выполняться код корутины. Выбор правильного диспетчера важен для эффективного применения ресурсов и предотвращения блокировки пользовательского интерфейса.</p><p>Существует несколько встроенных диспетчеров, доступных в Kotlin. </p><p><strong>Dispatchers.Main</strong> — это диспетчер, который используется для выполнения корутин в главном потоке Android. Он должен применяться для всех операций, которые изменяют пользовательский интерфейс, таких как обновление View, Toast и т.д.</p><p><strong>Dispatchers.IO</strong> — диспетчер, который используется для ввода-вывода (I/O) операций, таких как чтение или запись файлов, сетевые операции и т.д. Он также имеет доступ к пулу потоков с несколькими потоками.</p><p><strong>Dispatchers.Default</strong> — это диспетчер, который используется по умолчанию. Он предназначен для выполнения вычислительных задач и имеет доступ к пулу потоков с несколькими потоками. Если вы не указываете явно диспетчер для корутины, она будет выполнена на диспетчере Default.</p><p><strong>Dispatchers.Unconfined</strong> — это диспетчер, который не ограничивает выполнение корутины каким-либо конкретным потоком. Корутина будет продолжена на том же потоке, на котором была запущена. Этот диспетчер должен использоваться только в очень ограниченном числе случаев, когда корутина может быть запущена и продолжена на любом потоке.</p><p>Под капотом диспетчеры работают на основе пула потоков. Пул потоков представляет собой набор заранее созданных потоков, которые могут быть повторно использованы для выполнения задач. Когда корутина запускается с определенным диспетчером, диспетчер проверяет, есть ли доступные потоки в пуле. Если есть свободный поток, диспетчер назначает этот поток для выполнения корутины. Если все потоки уже заняты, диспетчер может создать новый поток в пуле, если это разрешено его настройками.</p><a class="anchor" name="4" id="4"></a><h2>4. Корутин-билдеры (Coroutine Builders) </h2><p>Корутин-билдеры в Kotlin Coroutines представляют собой функции, которые используются для создания и запуска корутин. Они предоставляют удобный способ определения асинхронных операций и управления их выполнением. Корутин-билдеры предоставляют различные способы запуска корутин и позволяют управлять их поведением и свойствами. Давайте рассмотрим основные виды корутин-билдеров и их применение.</p><p><strong>1) launch</strong></p><p>Корутин-билдер launch используется для запуска корутины, которая не возвращает результат. Он принимает на вход блок кода, который будет выполняться асинхронно.</p><pre><code class="kotlin">CoroutineScope(Dispatchers.IO).launch {
    // Код корутины
    delay(1000)
    println("Coroutine completed")
}
</code></pre><p><strong>2) async</strong></p><p>Корутин-билдер async используется для запуска корутины, которая возвращает результат. Он также принимает на вход блок кода, который будет выполняться асинхронно. Однако, в отличие от launch, async возвращает объект Deferred, который представляет собой отложенное значение результата выполнения корутины.</p><pre><code class="kotlin">val deferredResult: Deferred&lt;Int&gt; = CoroutineScope(Dispatchers.IO).async {
    // Код корутины
    delay(1000)
    return@async 42
}

// Получение результата корутины
runBlocking {
    val result = deferredResult.await()
    println("Coroutine result: $result")
}
</code></pre><p>Давайте разберем каждый пункт данного кода подробно.</p><ol><li><p>Создание и запуск корутины с помощью корутин-билдера <em>async </em>с указанием типа результата.</p></li><li><p>Далее в <em>CoroutineScope </em>мы передаем <em>Dispatchers.IO</em>, который указывает на то, что корутина будет асинхронно выполняться на одном из потоков, предназначенных для операций ввода-вывода, и не будет блокировать основной поток выполнения.</p></li><li><p><em>async </em>возвращает объект <em>Deferred</em>, который представляет собой отложенное значение результата корутины. Мы указываем тип ожидаемого результата (в данном случае — Int) в определении переменной <em>deferredResult.</em></p></li><li><p>Внутри блока кода корутины мы выполняем задержку в 1 секунду и возвращаем значение 42.</p></li><li><p>Далее мы используем <em>runBlocking </em>для создания новой области видимости и блокировки текущего потока до завершения всех запущенных корутин внутри него.</p></li><li><p>Мы вызываем метод <em>await()</em> для объекта <em>deferredResult</em>, чтобы дождаться завершения корутины и получить ее результат.</p></li><li><p>Затем мы выводим результат в консоль.</p></li></ol><p><strong>3) runBlocking</strong></p><p>Корутин-билдер runBlocking используется для запуска новой области видимости (CoroutineScope) и выполнения блока кода синхронно. Этот билдер блокирует текущий поток до завершения всех запущенных корутин внутри него. runBlocking обычно используется в функции main или в тестовом окружении.</p><pre><code class="kotlin">fun main() = runBlocking {
    // Код корутин
    delay(1000)
    println("Coroutine completed")
}
</code></pre><p><strong>4) withContext</strong></p><p>Корутин-билдер withContext используется для выполнения блока кода в контексте определенного диспетчера. Он позволяет переключаться на другой диспетчер внутри корутины и продолжать выполнение кода на этом диспетчере.</p><pre><code class="kotlin">suspend fun fetchData(): String {
    return withContext(Dispatchers.IO) {
        // Код, выполняющийся в диспетчере IO
        delay(1000)
        return@withContext "Data fetched"
    }
}
</code></pre><p>Это основные виды корутин-билдеров, предоставляемых в Kotlin Coroutines. Каждый из них имеет свое специфическое применение и позволяет эффективно управлять асинхронными операциями. </p><a class="anchor" name="5" id="5"></a><h2>5. Задачи (Jobs)  </h2><figure class="full-width "><img src="https://habrastorage.org/r/w780q1/getpro/habr/upload_files/c3c/58f/7ec/c3c58f7ec8d37058fde912662ecb8139.jpg" width="3200" height="860" data-src="https://habrastorage.org/getpro/habr/upload_files/c3c/58f/7ec/c3c58f7ec8d37058fde912662ecb8139.jpg" data-blurred="true"/></figure><p>Когда мы запускаем корутину, она возвращает объект задачи (Job), который позволяет нам управлять и отменять выполнение этой задачи. Задачи могут быть связаны друг с другом, образуя иерархию задач, что позволяет нам контролировать группы корутин и выполнять коллективные операции с ними.</p><p>Рассмотрим подробнее различные аспекты и примеры использования Job в Kotlin Coroutines.</p><pre><code class="kotlin">val job = CoroutineScope(Dispatchers.IO) {
    // Код корутины
    delay(1000)
    println("Coroutine completed")
}
</code></pre><p>В приведенном примере мы создаем корутину с помощью корутин-билдера launch. Результатом работы корутины будет являться Job, который представляет собой задачу выполнения корутины. Задача начинает выполняться асинхронно, и мы можем использовать Job для управления ее состоянием.</p><p><strong>cancel()</strong></p><p>Мы можем использовать метод cancel() объекта Job для отмены корутины. При вызове cancel() корутина будет прервана и прекратит свое выполнение.</p><pre><code class="kotlin">// Отмена корутины
job.cancel() 
</code></pre><p><strong>isActive</strong></p><p>Свойство isActive позволяет проверить, активен ли Job (не был ли отменен или завершен).</p><pre><code class="kotlin">val job = CoroutineScope(Dispatchers.IO).launch {
    // Код корутины
    while (isActive) {
        // Выполнять циклическую задачу, пока Job активен
        // ...
    }
}
</code></pre><p><strong>isCompleted</strong></p><p>Свойство isCompleted позволяет проверить, завершен ли Job.</p><pre><code class="kotlin">val job = CoroutineScope(Dispatchers.IO).launch {
    // Код корутины
    delay(1000)
    println("Coroutine completed")
}

// Проверка, завершен ли Job
if (job.isCompleted) {
    println("Job completed")
} else {
    println("Job is still active")
}
</code></pre><p><strong>join</strong></p><p>Метод join() используется для ожидания завершения Job. Он блокирует текущий поток до завершения Job.</p><pre><code class="kotlin">val job = CoroutineScope(Dispatchers.IO).launch {
    // Код корутины
    delay(1000)
    println("Coroutine completed")
}

// Ожидание завершения Job
job.join()
println("Job completed")
</code></pre><p><strong>invokeOnCompletion</strong></p><p>Метод invokeOnCompletion позволяет зарегистрировать обратный вызов, который будет осуществлен при завершении Job.</p><pre><code class="kotlin">val job = CoroutineScope(Dispatchers.IO).launch {
    // Код корутины
    delay(1000)
    println("Coroutine completed")
}

// Регистрация обратного вызова при завершении Job
job.invokeOnCompletion { throwable -&gt;
    if (throwable != null) {
        println("Job was cancelled: ${throwable.message}")
    } else {
        println("Job completed successfully")
    }
}
</code></pre><p>Важно учитывать, что при отмене или ошибке выполнения корутины мы получаем объект Throwable в методе invokeOnCompletion, что позволяет нам обработать исключение. Однако если корутина успешно завершается, то в invokeOnCompletion мы получаем значение null.</p><p><strong>children</strong></p><p>Свойство children предоставляет доступ к дочерним задачам Job. Оно возвращает список Job всех дочерних задач. Пример использования:</p><pre><code class="kotlin">val parentJob = Job()

val childJob1 = CoroutineScope(Dispatchers.IO).launch(parentJob) {
    // Код первой корутины
    delay(5_000)
}

val childJob2 = CoroutineScope(Dispatchers.IO).launch(parentJob) {
    // Код второй корутины
    delay(5_000)
}

// Получение списка дочерних задач
val childrenJobs = parentJob.children
println("Number of child jobs: ${childrenJobs.count()}")
</code></pre><p>В данном примере создаются две дочерние задачи (childJob1 и childJob2), привязанные к родительскому Job (parentJob). Затем мы получаем список дочерних задач с помощью свойства children и выводим количество дочерних задач в консоль.</p><a class="anchor" name="6" id="6"></a><h2>6. Функции приостановки (suspend)</h2><figure class="full-width "><img src="https://habrastorage.org/r/w780q1/getpro/habr/upload_files/ac7/1b3/296/ac71b32966cff2a9102cb97f6866bf8b.jpg" width="3200" height="1472" data-src="https://habrastorage.org/getpro/habr/upload_files/ac7/1b3/296/ac71b32966cff2a9102cb97f6866bf8b.jpg" data-blurred="true"/></figure><p>Ключевое слово suspend в Kotlin используется для обозначения функций, которые приостанавливают выполнение, но не блокируют поток выполнения. В контексте Kotlin Coroutines это означает, что функции с пометкой suspend могут быть приостановлены в процессе своего выполнения и возобновлены позже без блокировки основного потока выполнения.</p><p>Функции, помеченные как suspend, могут выполнять длительные операции ввода-вывода или другие блокирующие операции, не блокируя при этом основной поток выполнения. Вместо этого они могут приостанавливать свое выполнение и давать возможность другим сопрограммам его продолжить.</p><p>Функции с ключевым словом suspend могут быть вызваны только из корутин или других функций с ключевым словом suspend. Это делает код более безопасным и позволяет избежать проблем, связанных с блокировкой потоков.</p><p>Давайте рассмотрим пример загрузки данных без использования корутин и suspend-функций.</p><pre><code class="kotlin">// Долгая операция
loadData()


Toast.makeText(this, "Данные загружены", Toast.LENGTH_SHORT).show()
</code></pre><p>Мы вызываем функцию <em>loadData()</em>, которая выполнит загрузку данных. После этого мы выводим toast-сообщение о том, что данные загружены.</p><p>Функция <em>loadData()</em> является блокирующей, так как она загружает данные из сети длительное время и будет блокировать поток, в котором она выполняется. Однако мы должны показывать toast только в UI-потоке. Чтобы решить проблему блокирования главного потока, нам нужно сделать функцию <em>loadData()</em> асинхронной и поместить вызов <em>toast </em>в колбэк, который будет выполнен по завершении загрузки.</p><pre><code class="kotlin">fun loadData(callback: () -&gt; Unit) {
    // Асинхронные операции загрузки данных
    // ...
    // Загрузка данных завершена
    callback.invoke()
}
</code></pre><p>Когда загрузка данных завершается, вызывается переданный колбэк.</p><pre><code class="kotlin">loadData {
    Toast.makeText(this, "Данные загружены", Toast.LENGTH_SHORT).show()
}
</code></pre><p>Это позволит показать <em>toast </em>после завершения загрузки данных.</p><p>Применение suspend-функций в Kotlin позволяет нам не блокировать поток выполнения и избавиться от колбэка. Вот как будет выглядеть код с использованием корутины и suspend-функции:</p><pre><code class="kotlin">suspend fun loadData() {
    // Асинхронные операции загрузки данных
    delay(3_000) // Имитация загрузки данных
    // Загрузка данных завершена
}


lifecycleScope.launch {
     loadData() //suspend function
     Toast.makeText(this, "Данные загружены", Toast.LENGTH_SHORT).show()
}
</code></pre><p>Эта корутина позволит выполнить код без блокировки основного потока, в котором она запущена, даже если это основной поток приложения. Функция <em>loadData() </em>загрузит данные в отдельном потоке, и <em>toast</em> будет выполнен только после завершения загрузки благодаря использованию механизма <strong>Continuation</strong>.</p><p>Важное замечание: когда корутина вызывает suspend для приостановки своего выполнения, она освобождает текущий поток, на котором выполнялась. Однако, когда корутина возобновляет свое выполнение, она может быть запущена на другом свободном потоке благодаря пулу потоков. Это позволяет реализовать эффективное распределение нагрузки и повышает производительность программы.</p><a class="anchor" name="7" id="7"></a><h2>7. Continuation</h2><p>В качестве примера используем корутину:</p><pre><code class="kotlin">launch {
    loadData() //suspend function


    println("Data loaded")
}
</code></pre><p>Как мы знаем, на этапе компиляции весь Kotlin-код компилируется в байт-код JVM. В упрощенном варианте код нашей корутины будет выглядеть следующим образом:</p><pre><code class="java">class GeneratedContinuationClass extends SuspendLambda {


    int label;
 
    void invokeSuspend() {
    switch (label) {


        case 0: {
	 label = 1;
            loadData(this); // suspend function
            return;
        }


        case 1: {
            println("Data loaded");
            return;
        }
    }
}
</code></pre><p>Suspend-функция <em>loadData()</em> поделит выполнение кода на две части. Код, который находится в ней и перед вызовом этой функции, будет относиться к первой части, в то время как код, который следует после вызова функции, будет относиться ко второй части.</p><ul><li><p>Первый вызов метода <em>invokeSuspend </em>происходит при запуске корутины. В этом вызове будет выполнена первая часть кода (в случае <em>label</em> — равного 0).</p></li><li><p>Переменной label будет присвоено новое значение — 1, затем будет запущена suspend-функция.</p></li><li><p>После завершения работы suspend-функции необходимо сделать второй вызов метода <em>invokeSuspend</em>, чтобы выполнить вторую часть кода, то есть вызов <em>println</em>, именно поэтому при вызове suspend-функции <em>loadData(this) </em>передается ссылка на <em>GeneratedContinuationClass.</em></p></li><li><p>После завершения suspend-функции <em>loadData() </em>будет вызван метод <em>invokeSuspend.</em></p></li><li><p>Поскольку в первой части кода <em>(case 0)</em> значение переменной label было изменено на 1, то выполнится уже вторая часть кода <em>(case 1).</em></p></li></ul><p>Рассмотрим ситуацию, когда suspend-функция возвращает результат.</p><pre><code class="kotlin">launch {
val userId = loadUserId() // suspend function


println("User ID is downloaded")


val user = loadUserById(userId) // suspend function


println("User is downloaded: $user")
}
</code></pre><p>В упрощенном варианте код нашей корутины будет выглядеть следующим образом:</p><pre><code class="java">class GeneratedContinuationClass extends SuspendLambda {


    int label;
    String userId;
    User user; 
 
    void invokeSuspend(Object result) {
    switch (label) {


        case 0: {
	 label = 1;
            loadUserId(this); // suspend function
            return;
        }


        case 1: {
            userId = (String) result;
            println("User ID is downloaded");
	 label = 2;


            loadUserById(userId, this); // suspend function
            return;
        }


        case 2: {
            user = (User) result;
            println("User is downloaded: " + user.toString());
            return;
        }
    }
}
</code></pre><p>Давайте разберем этот код подробно по строчкам.</p><p>1. Создается класс <em>GeneratedContinuationClass.</em></p><p>2. Объявляются переменные <em>label</em>, <em>userId </em>и <em>user</em>, которые будут использоваться для отслеживания состояния и хранения результатов.</p><p>3. При значении <em>label</em>,<em> </em>равном 0 (case 0), выполняется следующий код:</p><ul><li><p>значение <em>label </em>устанавливается на 1;</p></li><li><p>вызывается suspend-функция <em>loadUserId(this)</em>, которая передает ссылку на текущий экземпляр <em>GeneratedContinuationClass</em>;</p></li><li><p>выполнение метода <em>invokeSuspend </em>приостанавливается, и управление передается в suspend-функцию <em>loadUserId.</em></p></li></ul><p>4. Когда suspend-функция <em>loadUserId </em>завершается, вызывается метод <em>invokeSuspend </em>у переданного в эту функцию <em>GeneratedContinuationClass</em> и передается результат работы — <em>invokeSuspend(result).</em></p><p>5. При значении <em>label</em>,<em> </em>равном 1 (case 1), выполняется следующий код:</p><ul><li><p>результат приводится к типу String и присваивается переменной <em>userId;</em></p></li><li><p>выводится сообщение "User ID is downloaded";</p></li><li><p>значение <em>label </em>устанавливается на 2;</p></li><li><p>вызывается suspend-функция <em>loadUserById(userId, this)</em>, которая передает ссылку на текущий экземпляр <em>GeneratedContinuationClass;</em></p></li><li><p>выполнение метода <em>invokeSuspend </em>приостанавливается, и управление передается в suspend-функцию <em>loadUserById.</em></p></li></ul><p>6. Когда suspend-функция <em>loadUserById </em>завершается, вызывается метод <em>invokeSuspend </em>у переданного в эту функцию <em>GeneratedContinuationClass </em>и передается результат работы — <em>invokeSuspend(result).</em></p><p>7. При значении <em>label</em>,<em> </em>равном 2 (case 2), выполняется следующий код:</p><ul><li><p>результат приводится к типу <em>User </em>и присваивается переменной <em>user</em>;</p></li><li><p>выводится сообщение "User is downloaded: …".</p></li></ul><p>Таким образом, класс GeneratedContinuationClass представляет собой сгенерированный код для управления выполнением suspend-функций и хранения результатов на различных этапах выполнения сопрограммы. После завершения выполнения suspend-функции управление передается обратно в invokeSuspend с результатом, и в зависимости от значения label выполняется соответствующий код для продолжения выполнения сопрограммы.</p><a class="anchor" name="8" id="8"></a><h2>8. CoroutineExceptionHandler  </h2><p>При работе с корутинами важно правильно обрабатывать исключения, чтобы предотвратить непредвиденные ошибки и сбои в асинхронном коде. Возникает вопрос: можно ли использовать try-catch-блоки внутри корутин для обработки исключений? Попытка обернуть весь код корутины в try-catch-блок может показаться привлекательной идеей, но на самом деле это не рекомендуется. Вот несколько причин.</p><p><strong>1. Отсутствие гарантии перехвата всех исключений.</strong></p><p>Если исключение возникает внутри корутины и оно не было перехвачено внутри try-catch-блока, оно может пробиться через корутину и вызвать сбой или неожиданное поведение в коде, который вызывает корутину.</p><p><strong>2. Снижение читаемости кода.</strong></p><p>Использование множества try-catch-блоков внутри корутины может сделать код менее читаемым и усложнить понимание логики выполнения.</p><p><strong>3. Ограниченный контроль над обработкой исключений.</strong></p><p>При использовании try-catch-блоков внутри корутины вы обрабатываете исключения только внутри самой корутины. Однако в большинстве случаев вам может потребоваться выполнять дополнительные действия при возникновении исключений, такие как возврат ошибки или взаимодействие с другими компонентами системы.</p><p>Вместо использования многочисленных try-catch-блоков внутри корутин Kotlin предоставляет механизм <strong>CoroutineExceptionHandler</strong>, который позволяет нам более элегантно и надежно обрабатывать ошибки в асинхронном коде.</p><p><strong>CoroutineExceptionHandler </strong>— это механизм, предоставляемый Kotlin, который позволяет обрабатывать исключения, возникающие в корутинах, в едином месте. Он предлагает более гибкую и полноценную обработку ошибок в асинхронном коде.</p><p>Для создания обработчика исключений используется функция CoroutineExceptionHandler, которая принимает в качестве аргумента лямбда-выражение для обработки исключений.</p><p>Обработчик исключений можно привязать к области видимости корутины, используя CoroutineScope, чтобы все корутины, созданные в этой области, применяли этот обработчик для обработки исключений.</p><p>Разберем следующий пример:</p><pre><code class="kotlin">val coroutineExceptionHandler = CoroutineExceptionHandler { _, throwable -&gt;
        println(throwable.message)
}


val scope = CoroutineScope(Dispatchers.IO)


scope.launch {
     launch(coroutineExceptionHandler) {
            throw IllegalStateException("Exception from child coroutine")
     }
}
</code></pre><ul><li><p>В этом примере мы создаем обработчик исключений <em>CoroutineExceptionHandler</em>, который выводит сообщение об ошибке при возникновении исключения в корутине. </p></li><li><p>Затем мы создаем <em>CoroutineScope </em>и запускаем корутину в этой области.</p></li><li><p>Внутри родительской корутины запускается дочерняя корутина с переданным обработчиком исключений <em>CoroutineExceptionHandler</em>. </p></li></ul><p>Данный пример приведет к крашу из-за особенностей обработки ошибок в корутинах. Когда в корутине возникает Exception, эта корутина обращается к вышестоящей для проверки, является ли она корутиной или областью видимости (CoroutineScope), и так далее, пока родительская корутина не доберется до CoroutineScope. В этом случае родительская корутина будет ответственна за обработку исключения, возникшего в дочерней корутине.  </p><figure class="full-width "><img src="https://habrastorage.org/r/w780q1/getpro/habr/upload_files/e31/45f/ef0/e3145fef0f88ea1825343607ebd8fdb7.jpg" width="3200" height="1144" data-src="https://habrastorage.org/getpro/habr/upload_files/e31/45f/ef0/e3145fef0f88ea1825343607ebd8fdb7.jpg" data-blurred="true"/></figure><p>Для того чтобы успешно обработать исключение, необходимо передать CoroutineExceptionHandler в родительскую корутину. В противном случае, если мы не передаем обработчик исключений в родительскую корутину, программа упадет с ошибкой без выполнения необходимой обработки исключения.</p><p>Чтобы исправить это, мы должны передать СoroutineExceptionHandler в родительскую корутину. Вот исправленный пример:</p><pre><code class="kotlin">val coroutineExceptionHandler = CoroutineExceptionHandler { _, throwable -&gt;
    println(throwable.message)
}


val scope = CoroutineScope(Dispatchers.IO + coroutineExceptionHandler)


scope.launch {
    launch {
        throw IllegalStateException("Exception from child coroutine")
    }
}
</code></pre><p>Теперь мы передаем CoroutineExceptionHandler в CoroutineScope, образуя связь между обработчиком исключений и всеми корутинами, созданными в этой области видимости. Исключение, возникшее в дочерней корутине, будет перехвачено CoroutineExceptionHandler, и его сообщение будет выведено.</p><p>Таким образом, важно передавать CoroutineExceptionHandler в родительскую корутину или при создании CoroutineScope, чтобы обеспечить обработку исключений во всех корутинах, включая дочерние.</p><a class="anchor" name="9" id="9"></a><h2>9. SupervisorJob</h2><p>Разберем следующий пример:</p><pre><code class="kotlin">val coroutineExceptionHandler = CoroutineExceptionHandler { _, throwable -&gt;
        println("Handle exception: ${throwable.message}")
}


val scope = CoroutineScope(Dispatchers.IO + coroutineExceptionHandler)


scope.launch {
     launch {
         delay(3_000)
          throw (IllegalStateException("Child coroutine failed"))
     }
     while (true) {
         delay(1_000)
          println("tick 1")
     }
}


scope.launch {
     while (true) {
         delay(1_000)
          println("tick 2")
     }
}
</code></pre><ul><li><p>Здесь мы создаем CoroutineScope с использованием Dispatchers.IO и экземпляра CoroutineExceptionHandler.</p></li><li><p>Затем запускается основная корутина, которая через каждую секунду выводит "tick 1". Внутри этой корутины есть дочерняя корутина, которая с задержкой в 3 секунды бросает IllegalStateException.</p></li><li><p>Далее мы создаем вторую корутину, запущенную в том же CoroutineScope, которая также выполняет бесконечный цикл, выводящий сообщение "tick 2" с интервалом в 1 секунду.</p></li></ul><p>В результате работы этого кода мы увидим следующее:</p><p>tick 2</p><p>tick 1</p><p>tick 1</p><p>tick 2</p><p>Handle exception: Child coroutine failed</p><p>Теперь рассмотрим поведение при возникновении ошибки в дочерней корутине:</p><ul><li><p>Когда исключение IllegalStateException генерируется в дочерней корутине, CoroutineExceptionHandler перехватывает исключение.</p></li><li><p>В обработчике исключений выводится сообщение "Handle exception: Child coroutine failed".</p></li><li><p>Весь CoroutineScope, включая все дочерние корутины, отменяется из-за исключения в дочерней корутине.</p></li><li><p>Вторая корутина, запущенная в том же CoroutineScope, также отменяется.</p></li><li><p>В результате выполнение всех корутин прекращается, и программа завершается.</p></li></ul><p>Причина отмены всего CoroutineScope в случае ошибки в дочерней корутине заключается в том, что по умолчанию в Kotlin Coroutines стратегия отмены — это отмена родительской корутины и всех ее дочерних корутин. Это помогает избежать утечек ресурсов и неопределенного поведения.</p><p>Если вам нужно предотвратить отмену всего CoroutineScope при возникновении ошибки в дочерней корутине, вы можете использовать <strong>SupervisorJob</strong>. Это позволит изолировать ошибки в дочерних корутинах и сохранить независимость выполнения других корутин.</p><p><strong>SupervisorJob </strong>— это специальный тип работы (Job) в Kotlin Coroutines, который предоставляет механизм для изоляции ошибок в дочерних корутинах от родительской корутины. Он был создан для обеспечения независимости выполнения корутин, чтобы ошибка в одной дочерней корутине не приводила к автоматической отмене других корутин.</p><p>SupervisorJob предоставляет отдельный скоуп для дочерних корутин, который не привязан к состоянию других корутин. Таким образом, при возникновении ошибки в дочерней корутине только эта конкретная корутина будет отменена, а остальные корутины в рамках того же SupervisorJob продолжат свое выполнение.</p><figure class="full-width "><img src="https://habrastorage.org/r/w780q1/getpro/habr/upload_files/5d1/989/3e3/5d19893e3f70a50c7681c1c839d7fa7e.jpg" width="3200" height="1618" data-src="https://habrastorage.org/getpro/habr/upload_files/5d1/989/3e3/5d19893e3f70a50c7681c1c839d7fa7e.jpg" data-blurred="true"/></figure><p>Давайте разберем выполнение корутин с использованием SupervisorJob.</p><pre><code class="kotlin">val exceptionHandler= CoroutineExceptionHandler { _, throwable -&gt;
     println("Handle exception: ${throwable.message}")
}
val supervisorJob = SupervisorJob()
val scope = CoroutineScope(Dispatchers.IO + supervisorJob + exceptionHandler)


scope.launch {
    launch {
        delay(3_000)
         throw (IllegalStateException("Child coroutine failed"))
    }
    while (true) {
        delay(1_000)
         println("tick 1")
    }
}


scope.launch {
    while (true) {
        delay(1_000)
        println("tick 2")
    }
}
</code></pre><p>В этом примере мы добавляем SupervisorJob в CoroutineScope. Теперь каждая дочерняя корутина, запущенная в этом скоупе, будет иметь независимость в отношении отмены. В случае возникновения ошибки в дочерней корутине остальные корутины будут продолжать выполнение.</p><p>При запуске этого кода вы увидите, что ошибка в первой дочерней корутине (IllegalStateException) обрабатывается обработчиком исключений, но вторая запущенная корутина продолжает генерировать сообщения каждую секунду, несмотря на ошибку в первой корутине.</p><p>tick 1</p><p>tick 2</p><p>tick 1</p><p>tick 2</p><p>Handle exception: Child coroutine failed</p><p>tick 2</p><p>tick 2</p><p>…</p><p>Таким образом, при использовании SupervisorJob вы получаете более гибкий контроль над отменой корутин и возможность сохранить работоспособность других корутин в случае ошибки в одной из них.</p><a class="anchor" name="10" id="10"></a><h2>10. Заключение  </h2><p>В данной статье мы познакомились с основными концепциями Kotlin Coroutines. Мы узнали, что такое сопрограммы и почему они стали популярными в разработке Android-приложений. </p><p>Основной строительный блок Kotlin Coroutines — это CoroutineScope, который определяет область видимости для запуска и управления корутинами. Мы изучили различные виды CoroutineScope и узнали, как они взаимодействуют с жизненными циклами Android-компонентов.</p><p>Мы рассмотрели различные виды Dispatchers и их применение в разных сценариях асинхронной работы, различные виды корутин-билдеров, такие как launch, async и runBlocking, и их особенности. Изучили понятие Job и рассмотрели основные методы для работы и отслеживания состояний задачи.</p><p>Рассмотрели ключевое слово suspend, которое используется для обозначения приостановки выполнения функции в контексте корутин. А также узнали, чем suspend-функции отличаются от обычных функций и как они позволяют эффективно организовывать асинхронный код.</p><p>Разобрались, как корутины работают под капотом, используя Continuation, изучили CoroutineExceptionHandler, который предоставляет механизм для централизованной обработки и реагирования на ошибки в корутинах.</p><p>Наконец, мы познакомились с SupervisorJob, который предоставляет дополнительные возможности управления и обработки ошибок в иерархии корутин.</p><p>Надеюсь, эта статья окажется полезной и познавательной как для людей, только начинающих свой путь в разработке, так и для опытных разработчиков. Пишите свои комментарии, буду рад ответить на них. Всем хорошего асинхронного кода!</p><p></p></div></div></div><!----><!----></div><!----><!----></div><!--]--><!----><div class="tm-article-presenter__meta" data-test-id="article-meta-links"><div class="tm-separated-list tm-article-presenter__meta-list"><span class="tm-separated-list__title">Теги:</span><ul class="tm-separated-list__list"><!--[--><li class="tm-separated-list__item"><!--[--><a href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[kotlin+coroutines]" class="tm-tags-list__link"><span>kotlin coroutines</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[%D0%B0%D1%81%D0%B8%D0%BD%D1%85%D1%80%D0%BE%D0%BD%D0%BD%D1%8B%D0%B5+%D0%BE%D0%BF%D0%B5%D1%80%D0%B0%D1%86%D0%B8%D0%B8]" class="tm-tags-list__link"><span>асинхронные операции</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[android]" class="tm-tags-list__link"><span>android</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[%D0%BC%D0%BD%D0%BE%D0%B3%D0%BE%D0%BF%D0%BE%D1%82%D0%BE%D1%87%D0%BD%D0%BE%D1%81%D1%82%D1%8C]" class="tm-tags-list__link"><span>многопоточность</span></a><!--]--></li><!--]--><!----></ul></div><div class="tm-separated-list tm-article-presenter__meta-list"><span class="tm-separated-list__title">Хабы:</span><ul class="tm-separated-list__list"><!--[--><li class="tm-separated-list__item"><!--[--><a href="/ru/hubs/java/" class="tm-hubs-list__link"><!--[--><span>Java</span><!--]--></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a href="/ru/hubs/mobile_dev/" class="tm-hubs-list__link"><!--[--><span>Разработка мобильных приложений</span><!--]--></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a href="/ru/hubs/android_dev/" class="tm-hubs-list__link"><!--[--><span>Разработка под Android</span><!--]--></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a href="/ru/hubs/kotlin/" class="tm-hubs-list__link"><!--[--><span>Kotlin</span><!--]--></a><!--]--></li><!--]--><!----></ul></div></div><!----><!--]--></article><!--]--></div><!----></div><div style="" class="tm-article-sticky-panel" data-test-id="article-sticky-panel"><div class="tm-data-icons tm-data-icons tm-data-icons_space-big tm-article-sticky-panel__icons" data-test-id="article-stats-icons"><div class="tm-article-rating tm-data-icons__item"><div class="tm-votes-meter tm-article-rating__votes-switcher"><svg class="tm-svg-img tm-votes-meter__icon tm-votes-meter__icon tm-votes-meter__icon_appearance-article" height="24" width="24"><title>Всего голосов 8: ↑8 и ↓0</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-rating"></use></svg><span class="tm-votes-meter__value tm-votes-meter__value_positive tm-votes-meter__value_appearance-article tm-votes-meter__value_rating tm-votes-meter__value" data-test-id="votes-meter-value" title="Всего голосов 8: ↑8 и ↓0">+8</span></div><!--teleport start--><!--teleport end--><!----></div><!----><!----><button class="bookmarks-button tm-data-icons__item" title="Добавить в закладки" type="button"><span class="tm-svg-icon__wrapper bookmarks-button__icon"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Добавить в закладки</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-favorite"></use></svg></span><span class="bookmarks-button__counter" title="Количество пользователей, добавивших публикацию в закладки">103</span></button><div class="tm-sharing tm-data-icons__item" title="Поделиться"><button class="tm-sharing__button" type="button"><svg viewbox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" class="tm-sharing__icon"><path fill="currentColor" d="M13.8 13.8V18l7.2-6.6L13.8 5v3.9C5 8.9 3 18.6 3 18.6c2.5-4.4 6-4.8 10.8-4.8z"></path></svg></button><!--teleport start--><!--teleport end--></div><div class="tm-article-comments-counter-link tm-data-icons__item" title="Читать комментарии"><a href="/ru/articles/747858/comments/" class="tm-article-comments-counter-link__link" data-test-id="counter-comments"><!--[--><svg class="tm-svg-img tm-article-comments-counter-link__icon" height="24" width="24"><title>Комментарии</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-comments"></use></svg><span class="tm-article-comments-counter-link__value">10</span><!--]--></a><!----></div><!--[--><!--[--><!--[--><!----><!--]--><!--]--><!--]--><!--teleport start--><!--teleport end--><!----></div></div></div><!--[--><!--]--><div class="tm-article-presenter__footer"><!--[--><!--[--><div class="tm-article-blocks"><!----><!--[--><section class="tm-block tm-block tm-block_spacing-bottom"><!----><!--[--><div class="tm-block__body tm-block__body tm-block__body_variant-balanced"><!--[--><div class="tm-article-author" data-test-id="article-author-info" data-async-called="true"><!--[--><!--]--><div class="tm-user-card tm-user-card tm-user-card_variant-article tm-article-author__user-card" data-async-called="true"><div class="tm-user-card__info-container"><div class="tm-user-card__header"><div class="tm-user-card__header-data"><a href="/ru/users/Chulakov_Dev/" class="tm-user-card__userpic tm-user-card__userpic_size-40"><div class="tm-entity-image"><img alt="" class="tm-entity-image__pic" src="//habrastorage.org/getpro/habr/avatars/e84/1e0/492/e841e0492642b21cfb9211cf61f94520.png"></div></a><div class="tm-user-card__meta"><div class="tm-counter-container tm-karma tm-karma" title=" 14 голосов "><div class="tm-counter-container__header"><!--[--><div class="karma-display positive" data-v-7635202e>12</div><!----><!--]--></div><div class="tm-counter-container__footer"><!--[--><div class="tm-karma__text">Карма</div><!--teleport start--><!--teleport end--><!--]--></div></div><div class="tm-counter-container" title="Рейтинг пользователя"><div class="tm-counter-container__header"><!--[--><!--[--><!--]--><div class="tm-votes-lever tm-votes-lever tm-votes-lever_appearance-rating"><!----><div class="tm-votes-lever__score tm-votes-lever__score_appearance-rating tm-votes-lever__score"><!--[--><span><span class="tm-votes-lever__score-counter tm-votes-lever__score-counter_rating tm-votes-lever__score-counter" data-test-id="votes-score-counter">0</span></span><!--]--></div><!----></div><!--]--></div><div class="tm-counter-container__footer"><!--[--><span class="tm-rating__text tm-rating__text">Рейтинг</span><!--]--></div></div></div></div></div><div class="tm-user-card__info tm-user-card__info_variant-article tm-user-card__info"><div class="tm-user-card__title tm-user-card__title_variant-article tm-user-card__title"><span class="tm-user-card__name tm-user-card__name_variant-article tm-user-card__name">Chulakov</span><a href="/ru/users/Chulakov_Dev/" class="tm-user-card__nickname tm-user-card__nickname tm-user-card__nickname_variant-article"> @Chulakov_Dev</a><!----></div><p class="tm-user-card__short-info tm-user-card__short-info_variant-article tm-user-card__short-info" data-test-id="user-card-speciality">Разработчик № 1 для банков</p></div></div><!----><div class="tm-user-card__buttons tm-user-card__buttons_variant-article tm-user-card__buttons"><!----><div class="tm-user-card__button"><div class="tm-button-follow tm-user-card__button-follow"><!----><button class="tm-button-follow__button tm-button-follow__button_big" data-test-id="follow-button" type="button">Подписаться</button></div></div><!----><div class="tm-user-card__button tm-user-card__button_write" data-test-id="user-card-conversations"><svg class="tm-svg-img tm-user-card__button-icon" height="16" width="16"><title>Отправить сообщение</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#mail"></use></svg></div><!----></div><!----></div><div class="tm-article-author__user-contacts" data-test-id="author-contacts"><!----><!----><!--[--><a class="tm-article-author__contact" data-test-id="author-contact-link" href="https://chulakov.ru" rel="noopener" target="_blank">Сайт</a><a class="tm-article-author__contact" data-test-id="author-contact-link" href="https://telegram.me/chulakov_dev" rel="noopener" target="_blank">Telegram</a><!--]--></div></div><!--]--></div><!--]--><!----></section><!----><!--[--><div class="banner-wrapper leaderboard tm-page-article__banner" style="--467224fc:200px;--58ff5eba:auto;" data-v-ad758baa><!--[--><div class="placeholder-wrapper placeholder" data-v-ad758baa><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><div class="adfox-banner-placeholder leaderboard" data-v-12f7bcca><div class="image loads" data-v-12f7bcca></div><div class="lines" data-v-12f7bcca><div class="line loads" data-v-12f7bcca></div><div class="line loads" data-v-12f7bcca></div><div class="line loads" data-v-12f7bcca></div></div></div><!----></div><div id="adfox_164725660339535756" class="tm-adfox-banner" data-v-ad758baa></div><!--]--></div><!--]--><!--]--><div class="tm-article-blocks__comments"><div id="publication-comments" class="tm-article-page-comments"><div><!--[--><div class="tm-article-comments-counter-link tm-article-comments-counter-button"><a href="/ru/articles/747858/comments/" class="tm-article-comments-counter-link__link tm-article-comments-counter-link__link_button-style" data-test-id="counter-comments"><!--[--><svg class="tm-svg-img tm-article-comments-counter-link__icon tm-article-comments-counter-link__icon_contrasted" height="24" width="24"><title>Комментарии</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-comments"></use></svg><span class="tm-article-comments-counter-link__value tm-article-comments-counter-link__value_contrasted"> Комментарии 10 </span><!--]--></a><!----></div><!--]--></div></div></div><!--[--><!--[--><!--]--><section class="tm-block tm-block tm-block_spacing-bottom"><header class="tm-block__header tm-block__header tm-block__header_variant-borderless"><div class="tm-block__header-container"><h2 class="tm-block__title tm-block__title tm-block__title_variant-large">Публикации</h2><!--[--><!--]--></div><!----></header><!--[--><div class="tm-block__body tm-block__body tm-block__body_variant-condensed-slim"><!--[--><!--[--><div class="tm-tabs tm-tabs"><div class=""><!--[--><span class="tm-tabs__tab-item"><button class="tm-tabs__tab-link tm-tabs__tab-link_active tm-tabs__tab-link_slim tm-tabs__tab-link">Лучшие за сутки</button></span><span class="tm-tabs__tab-item"><button class="tm-tabs__tab-link tm-tabs__tab-link_slim tm-tabs__tab-link">Похожие</button></span><!--]--></div><!----></div><div class="similar-and-daily__tab-view"><div class="daily-articles-list"><ul class="tm-article-card-list"><!--[--><!--]--><div class="tm-bordered-card"><!----><!--[--><!--]--></div></ul><div class="daily-articles-block__button-container"><button class="btn btn_transparent btn_small tm-button tm-button_color-horizon" type="button"><!--[--><!--[-->Показать лучшие за всё время<!--]--><!--]--></button></div></div><!----></div><!--]--><!--]--></div><!--]--><!----></section><!--[--><section class="tm-block tm-block tm-block_spacing-around tm-stories-block" data-navigatable tabindex="0" data-async-called="true"><header class="tm-block__header tm-block__header"><div class="tm-block__header-container"><h2 class="tm-block__title tm-block__title">Истории</h2><!--[--><!--]--></div><!----></header><!--[--><div class="tm-block__body tm-block__body tm-block__body_variant-equal"><!--[--><div class="tm-stories-empty"><!--[--><div class="tm-stories-card-empty"><div class="tm-stories-card-empty__image"></div><div class="tm-stories-card-empty__title"><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div></div></div><div class="tm-stories-card-empty"><div class="tm-stories-card-empty__image"></div><div class="tm-stories-card-empty__title"><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div></div></div><div class="tm-stories-card-empty"><div class="tm-stories-card-empty__image"></div><div class="tm-stories-card-empty__title"><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div></div></div><div class="tm-stories-card-empty"><div class="tm-stories-card-empty__image"></div><div class="tm-stories-card-empty__title"><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div></div></div><div class="tm-stories-card-empty"><div class="tm-stories-card-empty__image"></div><div class="tm-stories-card-empty__title"><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div></div></div><div class="tm-stories-card-empty"><div class="tm-stories-card-empty__image"></div><div class="tm-stories-card-empty__title"><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div></div></div><!--]--></div><!----><!--]--></div><!--]--><!----></section><div class="placeholder-wrapper"><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><div class="tm-placeholder-inset tm-placeholder-questions"><div class="tm-placeholder-inset__header"><div class="tm-placeholder__line tm-placeholder__line_inset-header loads"></div></div><div class="tm-placeholder-inset__body"><ul class="tm-placeholder-list"><!--[--><li class="tm-placeholder-list__item tm-placeholder-list__item_inset"><div class="tm-placeholder__line tm-placeholder__line_item-title loads"></div><div class="tm-project-block-items__properties"><!--[--><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><!--]--></div></li><li class="tm-placeholder-list__item tm-placeholder-list__item_inset"><div class="tm-placeholder__line tm-placeholder__line_item-title loads"></div><div class="tm-project-block-items__properties"><!--[--><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><!--]--></div></li><li class="tm-placeholder-list__item tm-placeholder-list__item_inset"><div class="tm-placeholder__line tm-placeholder__line_item-title loads"></div><div class="tm-project-block-items__properties"><!--[--><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><!--]--></div></li><li class="tm-placeholder-list__item tm-placeholder-list__item_inset"><div class="tm-placeholder__line tm-placeholder__line_item-title loads"></div><div class="tm-project-block-items__properties"><!--[--><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><!--]--></div></li><li class="tm-placeholder-list__item tm-placeholder-list__item_inset"><div class="tm-placeholder__line tm-placeholder__line_item-title loads"></div><div class="tm-project-block-items__properties"><!--[--><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><!--]--></div></li><!--]--></ul></div><div class="tm-placeholder-inset__footer"><div class="tm-placeholder__line tm-placeholder__line_inset-footer loads"></div></div></div><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----></div><!--]--><!----><!--[--><div><div class="placeholder-wrapper"><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><div class="tm-placeholder-promo"><div class="tm-placeholder-promo__header"><div class="tm-placeholder__line tm-placeholder__line_promo-title"></div></div><div class="tm-placeholder-promo__body"><div class="tm-placeholder-promo__posts"><div class="tm-placeholder-promo__post"><div class="tm-placeholder-promo__image"></div><div class="tm-placeholder__line tm-placeholder__line_post-title"></div></div><div class="tm-placeholder-promo__post"><div class="tm-placeholder-promo__image"></div><div class="tm-placeholder__line tm-placeholder__line_post-title"></div></div><div class="tm-placeholder-promo__post"><div class="tm-placeholder-promo__image"></div><div class="tm-placeholder__line tm-placeholder__line_post-title"></div></div></div><div class="tm-placeholder-promo__dots"><div class="tm-placeholder-promo__dot"></div><div class="tm-placeholder-promo__dot"></div><div class="tm-placeholder-promo__dot"></div></div></div></div><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----></div></div><section class="tm-block tm-block tm-block_spacing-top" data-async-called="true"><header class="tm-block__header tm-block__header"><div class="tm-block__header-container"><h2 class="tm-block__title tm-block__title">Работа</h2><!--[--><!--]--></div><!----></header><!--[--><div class="tm-block__body tm-block__body"><!--[--><!--[--><div class="tm-vacancies-block__item"><a class="tm-vacancies-block__vacancy-title" href="https://career.habr.com/vacancies/ios_razrabotchik" target="_blank">iOS разработчик</a><div class="tm-vacancies-block__vacancies-count">13
    вакансий</div></div><div class="tm-vacancies-block__item"><a class="tm-vacancies-block__vacancy-title" href="https://career.habr.com/vacancies/java_developer" target="_blank">Java разработчик</a><div class="tm-vacancies-block__vacancies-count">211
    вакансий</div></div><div class="tm-vacancies-block__item"><a class="tm-vacancies-block__vacancy-title" href="https://career.habr.com/vacancies/ios_razrabotchik_swift" target="_blank">Swift разработчик</a><div class="tm-vacancies-block__vacancies-count">13
    вакансий</div></div><div class="tm-vacancies-block__item"><a class="tm-vacancies-block__vacancy-title" href="https://career.habr.com/vacancies/android_developer" target="_blank">Android разработчик </a><div class="tm-vacancies-block__vacancies-count">10
    вакансий</div></div><!--]--><!--]--></div><!--]--><footer class="tm-block__footer"><!--[--><a class="tm-block-extralink" href="https://career.habr.com/catalog">Все вакансии</a><!--]--></footer></section><section class="tm-block tm-block tm-block_spacing-around tm-events-block" data-navigatable tabindex="0" data-async-called="true"><header class="tm-block__header tm-block__header tm-block__header_variant-borderless-large"><div class="tm-block__header-container"><h2 class="tm-block__title tm-block__title">Ближайшие события</h2><!--[--><!--]--></div><!----></header><!--[--><div class="tm-block__body tm-block__body tm-block__body_variant-equal"><!--[--><div class="swiper-container tm-events-widget" style="--swiper-space-between:22px;"><div class="swiper-wrapper"><!--[--><!--[--><div class="swiper-slide"><!--[--><section class="tm-block tm-block tm-block_spacing-none" id="588" tabindex="-1"><!----><!--[--><div class="tm-event-card tm-event-card_is-widget tm-event-card_responsive"><a href="/ru/events/588/" class=""><img alt class="tm-event-card__image" data-src="https://habrastorage.org/getpro/habr/upload_files/f79/1fc/79d/f791fc79d0d9fdda84397ed0c0717764.png" loading="lazy" src="https://habrastorage.org/r/w390/getpro/habr/upload_files/f79/1fc/79d/f791fc79d0d9fdda84397ed0c0717764.png" srcset="https://habrastorage.org/r/w390/getpro/habr/upload_files/f79/1fc/79d/f791fc79d0d9fdda84397ed0c0717764.png, https://habrastorage.org/getpro/habr/upload_files/f79/1fc/79d/f791fc79d0d9fdda84397ed0c0717764.png 2x"></a><!----><div class="tm-event-card__info"><div class="tm-event-card__date"><!----><div class="tm-event-card__day"><span>17  февраля   – 24  марта  </span></div></div><a href="/ru/events/588/" class="tm-event-card__title-link"><span>Конкурс «Снежный код» от Хекслета. Три гранта на бесплатное 10-месячное обучение</span></a><div class="tm-event-card__places"><div class="tm-event-card__places-list"><!--[--><span class="tm-event-card__places-item"><span>Онлайн</span><!----></span><!--]--></div></div></div><div class="tm-event-card__footer tm-event-card__footer_widget"><a href="/ru/events/#588" class="tm-event-card__link">Больше событий в календаре</a><div class="tm-event-card__categories"><!--[--><div class="event-category__label event-category__label_type-development"><span>Разработка</span></div><!--]--></div></div></div><!--]--><!----></section><!--]--></div><div class="swiper-slide"><!--[--><section class="tm-block tm-block tm-block_spacing-none" id="596" tabindex="-1"><!----><!--[--><div class="tm-event-card tm-event-card_is-widget tm-event-card_responsive"><a href="/ru/events/596/" class=""><img alt class="tm-event-card__image" data-src="https://habrastorage.org/getpro/habr/upload_files/b14/cd3/772/b14cd3772bc67698c8fbfd846e23824a.png" loading="lazy" src="https://habrastorage.org/r/w390/getpro/habr/upload_files/b14/cd3/772/b14cd3772bc67698c8fbfd846e23824a.png" srcset="https://habrastorage.org/r/w390/getpro/habr/upload_files/b14/cd3/772/b14cd3772bc67698c8fbfd846e23824a.png, https://habrastorage.org/getpro/habr/upload_files/b14/cd3/772/b14cd3772bc67698c8fbfd846e23824a.png 2x"></a><!----><div class="tm-event-card__info"><div class="tm-event-card__date"><!----><div class="tm-event-card__day"><span>20  марта  </span></div></div><a href="/ru/events/596/" class="tm-event-card__title-link"><span>Офлайн-конференция Хабр х K-team: как удерживать таланты в 2025 году</span></a><div class="tm-event-card__places"><div class="tm-event-card__places-list"><!--[--><span class="tm-event-card__places-item"><span>Москва</span><!----></span><!--]--></div></div></div><div class="tm-event-card__footer tm-event-card__footer_widget"><a href="/ru/events/#596" class="tm-event-card__link">Больше событий в календаре</a><div class="tm-event-card__categories"><!--[--><div class="event-category__label event-category__label_type-other"><span>Другое</span></div><!--]--></div></div></div><!--]--><!----></section><!--]--></div><div class="swiper-slide"><!--[--><section class="tm-block tm-block tm-block_spacing-none" id="604" tabindex="-1"><!----><!--[--><div class="tm-event-card tm-event-card_is-widget tm-event-card_responsive"><a href="/ru/events/604/" class=""><img alt class="tm-event-card__image" data-src="https://habrastorage.org/getpro/habr/upload_files/733/9ef/194/7339ef1945f3ee6906daf89db79829d4.png" loading="lazy" src="https://habrastorage.org/r/w390/getpro/habr/upload_files/733/9ef/194/7339ef1945f3ee6906daf89db79829d4.png" srcset="https://habrastorage.org/r/w390/getpro/habr/upload_files/733/9ef/194/7339ef1945f3ee6906daf89db79829d4.png, https://habrastorage.org/getpro/habr/upload_files/733/9ef/194/7339ef1945f3ee6906daf89db79829d4.png 2x"></a><!----><div class="tm-event-card__info"><div class="tm-event-card__date"><!----><div class="tm-event-card__day"><span>20  марта  </span></div></div><a href="/ru/events/604/" class="tm-event-card__title-link"><span>IX HappyWorkForum | Аутентичность и ментальное здоровье персонала</span></a><div class="tm-event-card__places"><div class="tm-event-card__places-list"><!--[--><span class="tm-event-card__places-item"><span>Москва</span><span class="tm-event-card__places-separator"> • </span></span><span class="tm-event-card__places-item"><span>Онлайн</span><!----></span><!--]--></div></div></div><div class="tm-event-card__footer tm-event-card__footer_widget"><a href="/ru/events/#604" class="tm-event-card__link">Больше событий в календаре</a><div class="tm-event-card__categories"><!--[--><div class="event-category__label event-category__label_type-other"><span>Другое</span></div><!--]--></div></div></div><!--]--><!----></section><!--]--></div><div class="swiper-slide"><!--[--><section class="tm-block tm-block tm-block_spacing-none" id="612" tabindex="-1"><!----><!--[--><div class="tm-event-card tm-event-card_is-widget tm-event-card_responsive"><a href="/ru/events/612/" class=""><img alt class="tm-event-card__image" data-src="https://habrastorage.org/getpro/habr/upload_files/38f/10d/f4c/38f10df4c7f9d7c5d4610fe426af0ab4.png" loading="lazy" src="https://habrastorage.org/r/w390/getpro/habr/upload_files/38f/10d/f4c/38f10df4c7f9d7c5d4610fe426af0ab4.png" srcset="https://habrastorage.org/r/w390/getpro/habr/upload_files/38f/10d/f4c/38f10df4c7f9d7c5d4610fe426af0ab4.png, https://habrastorage.org/getpro/habr/upload_files/38f/10d/f4c/38f10df4c7f9d7c5d4610fe426af0ab4.png 2x"></a><!----><div class="tm-event-card__info"><div class="tm-event-card__date"><!----><div class="tm-event-card__day"><span>20  марта  </span></div></div><a href="/ru/events/612/" class="tm-event-card__title-link"><span>Вебинар «Мастерская бюджета: как управлять затратами на облачные ресурсы»</span></a><div class="tm-event-card__places"><div class="tm-event-card__places-list"><!--[--><span class="tm-event-card__places-item"><span>Онлайн</span><!----></span><!--]--></div></div></div><div class="tm-event-card__footer tm-event-card__footer_widget"><a href="/ru/events/#612" class="tm-event-card__link">Больше событий в календаре</a><div class="tm-event-card__categories"><!--[--><div class="event-category__label event-category__label_type-development"><span>Разработка</span></div><div class="event-category__label event-category__label_type-admin"><span>Администрирование</span></div><!--]--></div></div></div><!--]--><!----></section><!--]--></div><div class="swiper-slide"><!--[--><section class="tm-block tm-block tm-block_spacing-none" id="616" tabindex="-1"><!----><!--[--><div class="tm-event-card tm-event-card_is-widget tm-event-card_responsive"><a href="/ru/events/616/" class=""><img alt class="tm-event-card__image" data-src="https://habrastorage.org/getpro/habr/upload_files/523/7fb/13a/5237fb13ad7fb6fb483c49691aaec836.png" loading="lazy" src="https://habrastorage.org/r/w390/getpro/habr/upload_files/523/7fb/13a/5237fb13ad7fb6fb483c49691aaec836.png" srcset="https://habrastorage.org/r/w390/getpro/habr/upload_files/523/7fb/13a/5237fb13ad7fb6fb483c49691aaec836.png, https://habrastorage.org/getpro/habr/upload_files/523/7fb/13a/5237fb13ad7fb6fb483c49691aaec836.png 2x"></a><!----><div class="tm-event-card__info"><div class="tm-event-card__date"><!----><div class="tm-event-card__day"><span>21  марта  </span></div></div><a href="/ru/events/616/" class="tm-event-card__title-link"><span>Бизнес-конференция «Digital Brand Day 2025: Орбита 2025»</span></a><div class="tm-event-card__places"><div class="tm-event-card__places-list"><!--[--><span class="tm-event-card__places-item"><span>Москва</span><!----></span><!--]--></div></div></div><div class="tm-event-card__footer tm-event-card__footer_widget"><a href="/ru/events/#616" class="tm-event-card__link">Больше событий в календаре</a><div class="tm-event-card__categories"><!--[--><div class="event-category__label event-category__label_type-marketing"><span>Маркетинг</span></div><div class="event-category__label event-category__label_type-other"><span>Другое</span></div><!--]--></div></div></div><!--]--><!----></section><!--]--></div><div class="swiper-slide"><!--[--><section class="tm-block tm-block tm-block_spacing-none" id="608" tabindex="-1"><!----><!--[--><div class="tm-event-card tm-event-card_is-widget tm-event-card_responsive"><a href="/ru/events/608/" class=""><img alt class="tm-event-card__image" data-src="https://habrastorage.org/getpro/habr/upload_files/8fd/e04/ddd/8fde04ddd9ba3f6bcd515aa6209f96b7.png" loading="lazy" src="https://habrastorage.org/r/w390/getpro/habr/upload_files/8fd/e04/ddd/8fde04ddd9ba3f6bcd515aa6209f96b7.png" srcset="https://habrastorage.org/r/w390/getpro/habr/upload_files/8fd/e04/ddd/8fde04ddd9ba3f6bcd515aa6209f96b7.png, https://habrastorage.org/getpro/habr/upload_files/8fd/e04/ddd/8fde04ddd9ba3f6bcd515aa6209f96b7.png 2x"></a><!----><div class="tm-event-card__info"><div class="tm-event-card__date"><!----><div class="tm-event-card__day"><span>27  марта  </span></div></div><a href="/ru/events/608/" class="tm-event-card__title-link"><span>Вебинар «Контент-маркетинг здорового человека: как привлечь внимание аудитории»</span></a><div class="tm-event-card__places"><div class="tm-event-card__places-list"><!--[--><span class="tm-event-card__places-item"><span>Онлайн</span><!----></span><!--]--></div></div></div><div class="tm-event-card__footer tm-event-card__footer_widget"><a href="/ru/events/#608" class="tm-event-card__link">Больше событий в календаре</a><div class="tm-event-card__categories"><!--[--><div class="event-category__label event-category__label_type-marketing"><span>Маркетинг</span></div><div class="event-category__label event-category__label_type-other"><span>Другое</span></div><!--]--></div></div></div><!--]--><!----></section><!--]--></div><div class="swiper-slide"><!--[--><section class="tm-block tm-block tm-block_spacing-none" id="606" tabindex="-1"><!----><!--[--><div class="tm-event-card tm-event-card_is-widget tm-event-card_responsive"><a href="/ru/events/606/" class=""><img alt class="tm-event-card__image" data-src="https://habrastorage.org/getpro/habr/upload_files/b99/62a/b24/b9962ab2439c6edc80f96d7f0a847c72.png" loading="lazy" src="https://habrastorage.org/r/w390/getpro/habr/upload_files/b99/62a/b24/b9962ab2439c6edc80f96d7f0a847c72.png" srcset="https://habrastorage.org/r/w390/getpro/habr/upload_files/b99/62a/b24/b9962ab2439c6edc80f96d7f0a847c72.png, https://habrastorage.org/getpro/habr/upload_files/b99/62a/b24/b9962ab2439c6edc80f96d7f0a847c72.png 2x"></a><!----><div class="tm-event-card__info"><div class="tm-event-card__date"><!----><div class="tm-event-card__day"><span>31  марта  </span></div></div><a href="/ru/events/606/" class="tm-event-card__title-link"><span>Серия вебинаров «DevOps Middle: AvitoTech vs ecom.tech»</span></a><div class="tm-event-card__places"><div class="tm-event-card__places-list"><!--[--><span class="tm-event-card__places-item"><span>Онлайн</span><!----></span><!--]--></div></div></div><div class="tm-event-card__footer tm-event-card__footer_widget"><a href="/ru/events/#606" class="tm-event-card__link">Больше событий в календаре</a><div class="tm-event-card__categories"><!--[--><div class="event-category__label event-category__label_type-development"><span>Разработка</span></div><div class="event-category__label event-category__label_type-admin"><span>Администрирование</span></div><!--]--></div></div></div><!--]--><!----></section><!--]--></div><div class="swiper-slide"><!--[--><section class="tm-block tm-block tm-block_spacing-none" id="618" tabindex="-1"><!----><!--[--><div class="tm-event-card tm-event-card_is-widget tm-event-card_responsive"><a href="/ru/events/618/" class=""><img alt class="tm-event-card__image" data-src="https://habrastorage.org/getpro/habr/upload_files/f76/0f9/a82/f760f9a827b851a5eeca4802c643a91d.png" loading="lazy" src="https://habrastorage.org/r/w390/getpro/habr/upload_files/f76/0f9/a82/f760f9a827b851a5eeca4802c643a91d.png" srcset="https://habrastorage.org/r/w390/getpro/habr/upload_files/f76/0f9/a82/f760f9a827b851a5eeca4802c643a91d.png, https://habrastorage.org/getpro/habr/upload_files/f76/0f9/a82/f760f9a827b851a5eeca4802c643a91d.png 2x"></a><!----><div class="tm-event-card__info"><div class="tm-event-card__date"><!----><div class="tm-event-card__day"><span>3  апреля  </span></div></div><a href="/ru/events/618/" class="tm-event-card__title-link"><span>Реалити для разработчиков: узнайте, как строится новое публичное облако MWS</span></a><div class="tm-event-card__places"><div class="tm-event-card__places-list"><!--[--><span class="tm-event-card__places-item"><span>Онлайн</span><!----></span><!--]--></div></div></div><div class="tm-event-card__footer tm-event-card__footer_widget"><a href="/ru/events/#618" class="tm-event-card__link">Больше событий в календаре</a><div class="tm-event-card__categories"><!--[--><div class="event-category__label event-category__label_type-development"><span>Разработка</span></div><!--]--></div></div></div><!--]--><!----></section><!--]--></div><div class="swiper-slide"><!--[--><section class="tm-block tm-block tm-block_spacing-none" id="620" tabindex="-1"><!----><!--[--><div class="tm-event-card tm-event-card_is-widget tm-event-card_responsive"><a href="/ru/events/620/" class=""><img alt class="tm-event-card__image" data-src="https://habrastorage.org/getpro/habr/upload_files/eba/c37/879/ebac378793b959ebce42f41713e7b67f.jpg" loading="lazy" src="https://habrastorage.org/r/w390/getpro/habr/upload_files/eba/c37/879/ebac378793b959ebce42f41713e7b67f.jpg" srcset="https://habrastorage.org/r/w390/getpro/habr/upload_files/eba/c37/879/ebac378793b959ebce42f41713e7b67f.jpg, https://habrastorage.org/getpro/habr/upload_files/eba/c37/879/ebac378793b959ebce42f41713e7b67f.jpg 2x"></a><!----><div class="tm-event-card__info"><div class="tm-event-card__date"><!----><div class="tm-event-card__day"><span>3  апреля  </span></div></div><a href="/ru/events/620/" class="tm-event-card__title-link"><span>Открытая встреча «System Analysis Meetup SberHealth»</span></a><div class="tm-event-card__places"><div class="tm-event-card__places-list"><!--[--><span class="tm-event-card__places-item"><span>Москва</span><span class="tm-event-card__places-separator"> • </span></span><span class="tm-event-card__places-item"><span>Онлайн</span><!----></span><!--]--></div></div></div><div class="tm-event-card__footer tm-event-card__footer_widget"><a href="/ru/events/#620" class="tm-event-card__link">Больше событий в календаре</a><div class="tm-event-card__categories"><!--[--><div class="event-category__label event-category__label_type-analytics"><span>Аналитика</span></div><!--]--></div></div></div><!--]--><!----></section><!--]--></div><div class="swiper-slide"><!--[--><section class="tm-block tm-block tm-block_spacing-none" id="590" tabindex="-1"><!----><!--[--><div class="tm-event-card tm-event-card_is-widget tm-event-card_responsive"><a href="/ru/events/590/" class=""><img alt class="tm-event-card__image" data-src="https://habrastorage.org/getpro/habr/upload_files/31b/e68/295/31be6829578e7934fbc944396eb330b1.png" loading="lazy" src="https://habrastorage.org/r/w390/getpro/habr/upload_files/31b/e68/295/31be6829578e7934fbc944396eb330b1.png" srcset="https://habrastorage.org/r/w390/getpro/habr/upload_files/31b/e68/295/31be6829578e7934fbc944396eb330b1.png, https://habrastorage.org/getpro/habr/upload_files/31b/e68/295/31be6829578e7934fbc944396eb330b1.png 2x"></a><!----><div class="tm-event-card__info"><div class="tm-event-card__date"><!----><div class="tm-event-card__day"><span>10  апреля  </span></div></div><a href="/ru/events/590/" class="tm-event-card__title-link"><span>«GoCloud 2025» — масштабная IT-конференция про облака и AI</span></a><div class="tm-event-card__places"><div class="tm-event-card__places-list"><!--[--><span class="tm-event-card__places-item"><span>Москва</span><span class="tm-event-card__places-separator"> • </span></span><span class="tm-event-card__places-item"><span>Онлайн</span><!----></span><!--]--></div></div></div><div class="tm-event-card__footer tm-event-card__footer_widget"><a href="/ru/events/#590" class="tm-event-card__link">Больше событий в календаре</a><div class="tm-event-card__categories"><!--[--><div class="event-category__label event-category__label_type-development"><span>Разработка</span></div><div class="event-category__label event-category__label_type-admin"><span>Администрирование</span></div><div class="event-category__label event-category__label_type-management"><span>Менеджмент</span></div><!--]--></div></div></div><!--]--><!----></section><!--]--></div><div class="swiper-slide"><!--[--><section class="tm-block tm-block tm-block_spacing-none" id="516" tabindex="-1"><!----><!--[--><div class="tm-event-card tm-event-card_is-widget tm-event-card_responsive"><a href="/ru/events/516/" class=""><img alt class="tm-event-card__image" data-src="https://habrastorage.org/getpro/habr/upload_files/0e9/3a8/3ec/0e93a83ecea09f806d1df907ddb036a4.jpg" loading="lazy" src="https://habrastorage.org/r/w390/getpro/habr/upload_files/0e9/3a8/3ec/0e93a83ecea09f806d1df907ddb036a4.jpg" srcset="https://habrastorage.org/r/w390/getpro/habr/upload_files/0e9/3a8/3ec/0e93a83ecea09f806d1df907ddb036a4.jpg, https://habrastorage.org/getpro/habr/upload_files/0e9/3a8/3ec/0e93a83ecea09f806d1df907ddb036a4.jpg 2x"></a><!----><div class="tm-event-card__info"><div class="tm-event-card__date"><!----><div class="tm-event-card__day"><span>25 – 26  апреля  </span></div></div><a href="/ru/events/516/" class="tm-event-card__title-link"><span>IT-конференция Merge Tatarstan 2025</span></a><div class="tm-event-card__places"><div class="tm-event-card__places-list"><!--[--><span class="tm-event-card__places-item"><span>Казань</span><!----></span><!--]--></div></div></div><div class="tm-event-card__footer tm-event-card__footer_widget"><a href="/ru/events/#516" class="tm-event-card__link">Больше событий в календаре</a><div class="tm-event-card__categories"><!--[--><div class="event-category__label event-category__label_type-development"><span>Разработка</span></div><div class="event-category__label event-category__label_type-marketing"><span>Маркетинг</span></div><div class="event-category__label event-category__label_type-other"><span>Другое</span></div><!--]--></div></div></div><!--]--><!----></section><!--]--></div><div class="swiper-slide"><!--[--><section class="tm-block tm-block tm-block_spacing-none" id="610" tabindex="-1"><!----><!--[--><div class="tm-event-card tm-event-card_is-widget tm-event-card_responsive"><a href="/ru/events/610/" class=""><img alt class="tm-event-card__image" data-src="https://habrastorage.org/getpro/habr/upload_files/652/12d/998/65212d998fb4939d9787bd9c726d2acb.png" loading="lazy" src="https://habrastorage.org/r/w390/getpro/habr/upload_files/652/12d/998/65212d998fb4939d9787bd9c726d2acb.png" srcset="https://habrastorage.org/r/w390/getpro/habr/upload_files/652/12d/998/65212d998fb4939d9787bd9c726d2acb.png, https://habrastorage.org/getpro/habr/upload_files/652/12d/998/65212d998fb4939d9787bd9c726d2acb.png 2x"></a><!----><div class="tm-event-card__info"><div class="tm-event-card__date"><!----><div class="tm-event-card__day"><span>20 – 22  июня  </span></div></div><a href="/ru/events/610/" class="tm-event-card__title-link"><span>Летняя айти-тусовка Summer Merge</span></a><div class="tm-event-card__places"><div class="tm-event-card__places-list"><!--[--><span class="tm-event-card__places-item"><span>Ульяновская область</span><!----></span><!--]--></div></div></div><div class="tm-event-card__footer tm-event-card__footer_widget"><a href="/ru/events/#610" class="tm-event-card__link">Больше событий в календаре</a><div class="tm-event-card__categories"><!--[--><div class="event-category__label event-category__label_type-development"><span>Разработка</span></div><div class="event-category__label event-category__label_type-other"><span>Другое</span></div><!--]--></div></div></div><!--]--><!----></section><!--]--></div><!--]--><!--]--></div><!----><!--[--><button class="swiper-button-prev"><span class="tm-svg-icon__wrapper swiper-button-icon"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Влево</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#arrow-back"></use></svg></span></button><button class="swiper-button-next"><span class="tm-svg-icon__wrapper swiper-button-icon"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Вправо</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#arrow-back"></use></svg></span></button><!--]--></div><!--]--></div><!--]--><!----></section><!--]--><!--]--></div><!--]--><!--]--></div></div><!--]--><!--]--></div></div><div class="tm-page__sidebar"><!--[--><!----><!--]--></div></div><!----><!--]--></div></div></main><!----></div><!----><div class="tm-footer"><div class="tm-page-width"><!--[--><div class="tm-footer__container"><div class="tm-footer__title"><a class="tm-svg-icon__wrapper tm-footer__title-link" href="/ru/"><svg class="tm-svg-img tm-svg-icon" height="16" width="16"><title>Хабр</title><use xlink:href="/img/habr-logo-ru.svg#logo"></use></svg></a></div><div class="tm-footer__social"><!--[--><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://www.facebook.com/habrahabr.ru" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="36" width="36"><title>Facebook</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-facebook"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://twitter.com/habr_com" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="36" width="36"><title>Twitter</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-twitter"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://vk.com/habr" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="36" width="36"><title>VK</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-vk"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://telegram.me/habr_com" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="36" width="36"><title>Telegram</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-telegram"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://www.youtube.com/channel/UCd_sTwKqVrweTt4oAKY5y4w" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="36" width="36"><title>Youtube</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-youtube"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://dzen.ru/habr" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="36" width="36"><title>Яндекс Дзен</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-dzen"></use></svg></a><!--]--></div><!--teleport start--><!--teleport end--><button class="tm-footer__link"><svg class="tm-svg-img tm-footer__icon" height="16" width="16"><title>Язык</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#lang"></use></svg> Настройка языка</button><a href="/ru/feedback/" class="tm-footer__link">Техническая поддержка</a><div class="tm-footer-copyright"><span class="tm-copyright"><span class="tm-copyright__years">© 2006–2025, </span><span class="tm-copyright__name"><a class="tm-copyright__link" href="https://company.habr.com/" rel="noopener" target="_blank">Habr</a></span></span></div></div><!--]--></div></div><!----><!--]--></div><!----></div><script>window.__INITIAL_STATE__={"adblock":{"hasAcceptableAdsFilter":false,"hasAdblock":false},"articlesList":{"articlesList":{"747858":{"id":"747858","timePublished":"2023-07-18T11:21:04+00:00","isCorporative":false,"lang":"ru","titleHtml":"Работа с асинхронными операциями с помощью Kotlin Coroutines","leadData":{"textHtml":"\u003Cp\u003EВсем привет! Меня зовут Сергей, я Android-разработчик Студии Олега Чулакова на проектах Сбера. Недавно я написал статью \u003Ca href=\"https:\u002F\u002Fhabr.com\u002Fru\u002Farticles\u002F739212\u002F\" rel=\"noopener noreferrer nofollow\"\u003EМногопоточность в мобильной разработке\u003C\u002Fa\u003E. В ней был затронут один из наиболее популярных инструментов для работы с асинхронными операциями — Kotlin Coroutines.&nbsp;\u003C\u002Fp\u003E\u003Cp\u003EСегодня я хочу углубиться в Kotlin Coroutines и разобрать их основные компоненты. Мы рассмотрим Kotlin Coroutines, предполагая, что у вас уже есть базовое понимание языка Kotlin и некоторый опыт разработки Android-приложений. Мы изучим основные концепции Kotlin Coroutines, способы работы с асинхронными операциями, управление потоком выполнения, обработку ошибок и исключений, а также многое другое.\u003C\u002Fp\u003E\u003Cp\u003EМоя цель — помочь вам овладеть Kotlin Coroutines и научиться использовать их для упрощения и оптимизации вашего кода, обеспечения более гладкого пользовательского опыта и более эффективного управления асинхронными операциями. Приятного прочтения, мы начинаем!\u003C\u002Fp\u003E\u003Cp\u003E\u003C\u002Fp\u003E","imageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fff3\u002F45f\u002F947\u002Fff345f947d03f94e08ce4ba461a330c4.png","buttonTextHtml":"Читать далее","image":{"url":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fff3\u002F45f\u002F947\u002Fff345f947d03f94e08ce4ba461a330c4.png","fit":"cover","positionY":0,"positionX":0}},"editorVersion":"2.0","postType":"article","postLabels":[],"author":{"id":"3624633","alias":"Chulakov_Dev","fullname":"Chulakov","avatarUrl":"\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Favatars\u002Fe84\u002F1e0\u002F492\u002Fe841e0492642b21cfb9211cf61f94520.png","speciality":"Разработчик № 1 для банков","scoreStats":{"score":12,"votesCount":14},"rating":0,"relatedData":null,"contacts":[{"title":"Сайт","url":"https:\u002F\u002Fchulakov.ru","value":"https:\u002F\u002Fchulakov.ru","siteTitle":null,"favicon":null},{"title":"Telegram","url":"https:\u002F\u002Ftelegram.me\u002Fchulakov_dev","value":"chulakov_dev","siteTitle":null,"favicon":null}],"authorContacts":[{"title":"Сайт","url":"https:\u002F\u002Fchulakov.ru","value":"https:\u002F\u002Fchulakov.ru","siteTitle":null,"favicon":null},{"title":"Telegram","url":"https:\u002F\u002Ftelegram.me\u002Fchulakov_dev","value":"chulakov_dev","siteTitle":null,"favicon":null}],"paymentDetails":{"paymentYandexMoney":null,"paymentPayPalMe":null,"paymentWebmoney":null},"donationsMethod":null,"isInBlacklist":null,"careerProfile":null},"statistics":{"commentsCount":10,"favoritesCount":103,"readingCount":38276,"score":8,"votesCount":8,"votesCountPlus":8,"votesCountMinus":0},"hubs":[{"id":"375","alias":"java","type":"collective","title":"Java","titleHtml":"Java","isProfiled":true,"relatedData":null},{"id":"6345","alias":"mobile_dev","type":"collective","title":"Разработка мобильных приложений","titleHtml":"Разработка мобильных приложений","isProfiled":true,"relatedData":null},{"id":"17107","alias":"android_dev","type":"collective","title":"Разработка под Android","titleHtml":"Разработка под Android","isProfiled":true,"relatedData":null},{"id":"19441","alias":"kotlin","type":"collective","title":"Kotlin","titleHtml":"Kotlin","isProfiled":true,"relatedData":null}],"flows":[{"id":"1","alias":"develop","title":"Разработка","titleHtml":"Разработка"}],"relatedData":{"vote":null,"unreadCommentsCount":0,"bookmarked":false,"canComment":false,"canEdit":false,"canViewVotes":false,"votePlus":{"canVote":false,"isChargeEnough":false,"isKarmaEnough":false,"isVotingOver":true,"isPublicationLimitEnough":false},"voteMinus":{"canVote":false,"isChargeEnough":false,"isKarmaEnough":false,"isVotingOver":true,"isPublicationLimitEnough":false},"canModerateComments":false,"trackerSubscribed":false,"emailSubscribed":false},"textHtml":"\u003Cdiv xmlns=\"http:\u002F\u002Fwww.w3.org\u002F1999\u002Fxhtml\"\u003E\u003Cfigure class=\"full-width \"\u003E\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw1560\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Feed\u002Fb3a\u002Ff0a\u002Feedb3af0a819733cbfccf5a73926db32.png\" width=\"3200\" height=\"1804\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Feed\u002Fb3a\u002Ff0a\u002Feedb3af0a819733cbfccf5a73926db32.png\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cp\u003EВсем привет! Меня зовут Сергей, я Android-разработчик Студии Олега Чулакова на проектах Сбера. Недавно я написал статью \u003Ca href=\"https:\u002F\u002Fhabr.com\u002Fru\u002Farticles\u002F739212\u002F\" rel=\"noopener noreferrer nofollow\"\u003EМногопоточность в мобильной разработке\u003C\u002Fa\u003E. В ней был затронут один из наиболее популярных инструментов для работы с асинхронными операциями — Kotlin Coroutines. \u003C\u002Fp\u003E\u003Cp\u003EСегодня я хочу углубиться в Kotlin Coroutines и разобрать их основные компоненты. Мы рассмотрим Kotlin Coroutines, предполагая, что у вас уже есть базовое понимание языка Kotlin и некоторый опыт разработки Android-приложений. Мы изучим основные концепции Kotlin Coroutines, способы работы с асинхронными операциями, управление потоком выполнения, обработку ошибок и исключений, а также многое другое.\u003C\u002Fp\u003E\u003Cp\u003EМоя цель — помочь вам овладеть Kotlin Coroutines и научиться использовать их для упрощения и оптимизации вашего кода, обеспечения более гладкого пользовательского опыта и более эффективного управления асинхронными операциями. Приятного чтения, мы начинаем!\u003C\u002Fp\u003E\u003Ch2\u003EСодержание статьи\u003C\u002Fh2\u003E\u003Cp\u003E\u003C\u002Fp\u003E\u003Cp\u003E\u003Ca href=\"#1\" rel=\"noopener noreferrer nofollow\"\u003E\u003Cstrong\u003E1. Знакомство с Kotlin Coroutines\u003C\u002Fstrong\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003EЧто такое сопрограммы (coroutines)?\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EПочему Kotlin Coroutines стали популярными в разработке Android-приложений\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003E\u003C\u002Fp\u003E\u003Cp\u003E\u003Ca href=\"#2\" rel=\"noopener noreferrer nofollow\"\u003E\u003Cstrong\u003E2. Области видимости (CoroutineScope) \u003C\u002Fstrong\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003EПонятие CoroutineScope\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EОсновные виды и различия CoroutineScope\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EПримеры с кодом\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003E\u003C\u002Fp\u003E\u003Cp\u003E\u003Ca href=\"#3\" rel=\"noopener noreferrer nofollow\"\u003E\u003Cstrong\u003E3. Диспетчеры (Dispatchers)\u003C\u002Fstrong\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003EПонятие Dispatchers\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EВиды и различия Dispatchers\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003E\u003C\u002Fp\u003E\u003Cp\u003E\u003Ca href=\"#4\" rel=\"noopener noreferrer nofollow\"\u003E\u003Cstrong\u003E4. Корутин-билдеры (Coroutine Builders) \u003C\u002Fstrong\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003EПонятие Coroutine Builders\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EВиды и различия Coroutine Builders\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EПримеры с кодом\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003E\u003C\u002Fp\u003E\u003Cp\u003E\u003Ca href=\"#5\" rel=\"noopener noreferrer nofollow\"\u003E\u003Cstrong\u003E5. Задачи (Jobs) \u003C\u002Fstrong\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003EЧто такое Job\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EОсновные методы для работы и отслеживания состояний Job\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EПримеры с кодом\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003E\u003C\u002Fp\u003E\u003Cp\u003E\u003Ca href=\"#6\" rel=\"noopener noreferrer nofollow\"\u003E\u003Cstrong\u003E6. Функции приостановки (Suspend)  \u003C\u002Fstrong\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003EПонятие и сравнение с обычной функцией\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EПримеры с кодом\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003E\u003C\u002Fp\u003E\u003Cp\u003E\u003Ca href=\"#7\" rel=\"noopener noreferrer nofollow\"\u003E\u003Cstrong\u003E7. Continuation \u003C\u002Fstrong\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003EРазбор кода корутины\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EПример Continuation\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EПример Continuation, в составе которого есть suspend-функции с возвращаемым результатом\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003E\u003C\u002Fp\u003E\u003Cp\u003E\u003Ca href=\"#8\" rel=\"noopener noreferrer nofollow\"\u003E\u003Cstrong\u003E8. CoroutineExceptionHandler  \u003C\u002Fstrong\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003EПочему стоит избегать try-catch в корутинах\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EПринцип обработки ошибок в корутинах\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EПримеры с кодом\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003E\u003C\u002Fp\u003E\u003Cp\u003E\u003Ca href=\"#9\" rel=\"noopener noreferrer nofollow\"\u003E\u003Cstrong\u003E9. SupervisorJob \u003C\u002Fstrong\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003EОпределение SupervisorJob\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EПрактика и применение\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003E\u003C\u002Fp\u003E\u003Cp\u003E\u003Ca href=\"#10\" rel=\"noopener noreferrer nofollow\"\u003E\u003Cstrong\u003E10. Заключение \u003C\u002Fstrong\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\u003Ca class=\"anchor\" name=\"1\" id=\"1\"\u003E\u003C\u002Fa\u003E\u003Ch2\u003E1. Знакомство с Kotlin Coroutines \u003C\u002Fh2\u003E\u003Cfigure class=\"full-width \"\u003E\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw780q1\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F4d4\u002F474\u002Feec\u002F4d4474eecd7c6bcd185d44e29c591345.jpg\" width=\"3200\" height=\"800\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F4d4\u002F474\u002Feec\u002F4d4474eecd7c6bcd185d44e29c591345.jpg\" data-blurred=\"true\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cp\u003EОперации в корутинах являются сопрограммами. Это легковесные потоки, которые выполняются в контексте реальных потоков. Это означает, что они не создают дополнительную нагрузку на систему, так как не являются отдельными потоками.\u003C\u002Fp\u003E\u003Cp\u003EКорутины позволяют писать асинхронный код, который выглядит как последовательный и легко читается, при этом обеспечивая эффективное использование ресурсов и управление потоком выполнения.\u003C\u002Fp\u003E\u003Cp\u003EKotlin Coroutines стали популярными в разработке Android-приложений по следующим причинам.\u003C\u002Fp\u003E\u003Cp\u003E\u003Cstrong\u003E1. Лаконичность и простота использования.\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\u003Cp\u003EОдним из основных преимуществ Kotlin Coroutines является их лаконичный и интуитивно понятный синтаксис. С применением ключевого слова \u003Cem\u003Esuspend\u003C\u002Fem\u003E разработчики могут объявлять функции, которые приостанавливают свое выполнение без блокировки потока и затем продолжают работу после завершения асинхронной операции. Это делает код легко читаемым, сокращая количество необходимого шаблонного кода.\u003C\u002Fp\u003E\u003Cp\u003E\u003Cstrong\u003E2. Интеграция с языком Kotlin.\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\u003Cp\u003EKotlin Coroutines являются интегрированной частью языка Kotlin, что означает, что они предоставляются в стандартной библиотеке Kotlin. Это делает их применение естественным и удобным для разработчиков, которые уже используют Kotlin для своих проектов.\u003C\u002Fp\u003E\u003Cp\u003E\u003Cstrong\u003E3. Эффективное использование ресурсов.\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\u003Cp\u003EОдним из ключевых преимуществ Kotlin Coroutines является эффективное использование ресурсов, таких как потоки выполнения. Вместо создания новых потоков для каждой асинхронной операции Kotlin Coroutines применяют меньшее количество потоков и эффективно переиспользуют их, что позволяет снизить накладные расходы на создание и уничтожение потоков.\u003C\u002Fp\u003E\u003Cp\u003E\u003Cstrong\u003E4. Упрощение асинхронного кода.\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\u003Cp\u003EKotlin Coroutines предоставляют возможность писать асинхронный код в последовательном стиле, без необходимости использования колбэков или цепочек вызовов. Это упрощает чтение и поддержку кода, делая его более логичным и структурированным. Кроме того, Kotlin Coroutines предлагают удобные операторы для комбинирования и управления последовательностями асинхронных операций, такие как \u003Cem\u003Easync\u003C\u002Fem\u003E, \u003Cem\u003Eawait\u003C\u002Fem\u003E, \u003Cem\u003EwithContext \u003C\u002Fem\u003Eи другие.\u003C\u002Fp\u003E\u003Cp\u003E\u003Cstrong\u003E5. Поддержка отмены и обработки ошибок.\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\u003Cp\u003EKotlin Coroutines предоставляют встроенную поддержку отмены корутин и обработки ошибок. Разработчики могут использовать различные операторы, такие как \u003Cem\u003Ecancel \u003C\u002Fem\u003Eи \u003Cem\u003EisActive\u003C\u002Fem\u003E, для прерывания выполнения корутины или отслеживания ее текущего статуса. Кроме того, Kotlin Coroutines предоставляют возможность обрабатывать исключения, возникающие внутри корутин.\u003C\u002Fp\u003E\u003Cp\u003E\u003Cstrong\u003E6. Легкая миграция с существующего кода.\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\u003Cp\u003EKotlin Coroutines предоставляют возможность постепенной миграции с существующего синхронного кода на асинхронный с использованием корутин. Разработчики могут внедрять сопрограммы в свои проекты, не переписывая полностью существующий код, а постепенно обновляя его части.\u003C\u002Fp\u003E\u003Cp\u003EВ результате Kotlin Coroutines стали популярным выбором у разработчиков Android-приложений, желающих повысить производительность и качество своего кода.\u003C\u002Fp\u003E\u003Ch2\u003E2. Области видимости (CoroutineScope)\u003C\u002Fh2\u003E\u003Cp\u003E\u003Cstrong\u003ECoroutineScope\u003C\u002Fstrong\u003E — это основной компонент для управления корутинами в Kotlin. Он предоставляет API для запуска и отмены корутин и позволяет определять, на каком потоке должны выполняться операции. CoroutineScope также дает возможность управлять жизненным циклом корутин и предотвращает утечки памяти.\u003C\u002Fp\u003E\u003Cp\u003E\u003Cstrong\u003EGlobalScope \u003C\u002Fstrong\u003E— это глобальный CoroutineScope, который может быть использован для запуска корутин в приложении. Он не связан с жизненным циклом компонентов Android и продолжает выполнение корутин, даже если активность или фрагмент были уничтожены.\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003EGlobalScope.launch {\n    \u002F\u002F Код корутины\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EОднако использование GlobalScope не рекомендуется в большинстве случаев. Вот несколько причин.\u003C\u002Fp\u003E\u003Cp\u003E\u003Cstrong\u003E1. Отсутствие контроля жизненного цикла.\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\u003Cp\u003EКорутины, запущенные внутри GlobalScope, не связаны с жизненным циклом других компонентов приложения. Это может привести к утечкам памяти и непредсказуемому поведению, когда приложения уничтожаются, но корутины все еще выполняются.\u003C\u002Fp\u003E\u003Cp\u003E\u003Cstrong\u003E2. Затруднение в тестировании.\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\u003Cp\u003EКорутины, запущенные внутри GlobalScope, могут быть сложными для тестирования, поскольку они не связаны с конкретным контекстом выполнения или жизненным циклом. Это может привести к проблемам с модульными или юнит-тестами.\u003C\u002Fp\u003E\u003Cp\u003EВот что нам говорит официальная документация. Существуют ограниченные обстоятельства, при которых \u003Cstrong\u003EGlobalScope \u003C\u002Fstrong\u003Eможет быть законно и безопасно использован. Например, процессы, которые должны оставаться активными в течение всего срока службы приложения. Любое применение \u003Cstrong\u003EGlobalScope \u003C\u002Fstrong\u003Eтребует явной регистрации с помощью @OptIn(DelicateCoroutinesApi::class), например:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003E\u002F\u002FГлобальная сопрограмма для ежесекундного ведения статистики\n\u002F\u002FДолжна быть всегда активна\n@OptIn(DelicateCoroutinesApi::class)\nval globalScopeReporter = GlobalScope.launch {\n     while (true) {\n         delay(1000)\n         logStatistics()\n     }\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E\u003Cstrong\u003EviewModelScope \u003C\u002Fstrong\u003E— это CoroutineScope, связанный с жизненным циклом ViewModel. Он автоматически отменяет все связанные с ним корутины при уничтожении ViewModel.\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Eclass MyViewModel : ViewModel() {\n    fun doSomething() {\n        viewModelScope.launch {\n            \u002F\u002F Код корутины\n        }\n    }\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E\u003Cstrong\u003ElifecycleScope \u003C\u002Fstrong\u003Eявляется удобным способом создания CoroutineScope, связанного с жизненным циклом компонента LifecycleOwner (например фрагмента или активности).\u003C\u002Fp\u003E\u003Cp\u003EПреимуществом использования lifecycleScope является автоматическая отмена корутин. Корутины, запущенные в lifecycleScope, отменяются при уничтожении фрагмента или активности. Вам не нужно беспокоиться о явной отмене корутин: это происходит автоматически.\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Eclass MyFragment : Fragment() {\n\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n        \n        viewLifecycleOwner.lifecycleScope.launch {\n            \u002F\u002F Код корутины\n        }\n    }\n\n\n    \u002F\u002F Остальной код фрагмента\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E\u003Cstrong\u003ECoroutineScope\u003C\u002Fstrong\u003E, созданный локально:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Eclass MyFragment : Fragment() {\n\n\n    private val myCoroutineScope = CoroutineScope(Dispatchers.Main)\n\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n\n\n        myCoroutineScope.launch {\n            \u002F\u002F Код корутины\n        }\n    }\n\n\n    override fun onDestroyView() {\n        super.onDestroyView()\n        myCoroutineScope.cancel()\n    }\n\n\n    \u002F\u002F Остальной код фрагмента\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EОбратите внимание, что при создании своего CoroutineScope вам необходимо самостоятельно отслеживать и отменять корутины. Убедитесь, что вы правильно отменяете свой CoroutineScope, чтобы избежать утечек памяти и неправильного поведения вашего приложения.\u003C\u002Fp\u003E\u003Cp\u003EИспользование собственного CoroutineScope особенно полезно, когда вам нужно управлять выполнением корутин в определенной области или жизненном цикле вашего компонента.\u003C\u002Fp\u003E\u003Ch2\u003E3. Диспетчеры (Dispatchers)\u003C\u002Fh2\u003E\u003Cfigure class=\"full-width \"\u003E\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw780q1\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fc96\u002Fb92\u002F73b\u002Fc96b9273b8a5d6dc99cbe3e9a5d85a37.jpg\" width=\"3200\" height=\"1306\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fc96\u002Fb92\u002F73b\u002Fc96b9273b8a5d6dc99cbe3e9a5d85a37.jpg\" data-blurred=\"true\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cp\u003EДиспетчеры определяют контекст выполнения корутин. Они указывают, на каком потоке или потоках будет выполняться код корутины. Выбор правильного диспетчера важен для эффективного применения ресурсов и предотвращения блокировки пользовательского интерфейса.\u003C\u002Fp\u003E\u003Cp\u003EСуществует несколько встроенных диспетчеров, доступных в Kotlin. \u003C\u002Fp\u003E\u003Cp\u003E\u003Cstrong\u003EDispatchers.Main\u003C\u002Fstrong\u003E — это диспетчер, который используется для выполнения корутин в главном потоке Android. Он должен применяться для всех операций, которые изменяют пользовательский интерфейс, таких как обновление View, Toast и т.д.\u003C\u002Fp\u003E\u003Cp\u003E\u003Cstrong\u003EDispatchers.IO\u003C\u002Fstrong\u003E — диспетчер, который используется для ввода-вывода (I\u002FO) операций, таких как чтение или запись файлов, сетевые операции и т.д. Он также имеет доступ к пулу потоков с несколькими потоками.\u003C\u002Fp\u003E\u003Cp\u003E\u003Cstrong\u003EDispatchers.Default\u003C\u002Fstrong\u003E — это диспетчер, который используется по умолчанию. Он предназначен для выполнения вычислительных задач и имеет доступ к пулу потоков с несколькими потоками. Если вы не указываете явно диспетчер для корутины, она будет выполнена на диспетчере Default.\u003C\u002Fp\u003E\u003Cp\u003E\u003Cstrong\u003EDispatchers.Unconfined\u003C\u002Fstrong\u003E — это диспетчер, который не ограничивает выполнение корутины каким-либо конкретным потоком. Корутина будет продолжена на том же потоке, на котором была запущена. Этот диспетчер должен использоваться только в очень ограниченном числе случаев, когда корутина может быть запущена и продолжена на любом потоке.\u003C\u002Fp\u003E\u003Cp\u003EПод капотом диспетчеры работают на основе пула потоков. Пул потоков представляет собой набор заранее созданных потоков, которые могут быть повторно использованы для выполнения задач. Когда корутина запускается с определенным диспетчером, диспетчер проверяет, есть ли доступные потоки в пуле. Если есть свободный поток, диспетчер назначает этот поток для выполнения корутины. Если все потоки уже заняты, диспетчер может создать новый поток в пуле, если это разрешено его настройками.\u003C\u002Fp\u003E\u003Ca class=\"anchor\" name=\"4\" id=\"4\"\u003E\u003C\u002Fa\u003E\u003Ch2\u003E4. Корутин-билдеры (Coroutine Builders) \u003C\u002Fh2\u003E\u003Cp\u003EКорутин-билдеры в Kotlin Coroutines представляют собой функции, которые используются для создания и запуска корутин. Они предоставляют удобный способ определения асинхронных операций и управления их выполнением. Корутин-билдеры предоставляют различные способы запуска корутин и позволяют управлять их поведением и свойствами. Давайте рассмотрим основные виды корутин-билдеров и их применение.\u003C\u002Fp\u003E\u003Cp\u003E\u003Cstrong\u003E1) launch\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\u003Cp\u003EКорутин-билдер launch используется для запуска корутины, которая не возвращает результат. Он принимает на вход блок кода, который будет выполняться асинхронно.\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003ECoroutineScope(Dispatchers.IO).launch {\n    \u002F\u002F Код корутины\n    delay(1000)\n    println(\"Coroutine completed\")\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E\u003Cstrong\u003E2) async\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\u003Cp\u003EКорутин-билдер async используется для запуска корутины, которая возвращает результат. Он также принимает на вход блок кода, который будет выполняться асинхронно. Однако, в отличие от launch, async возвращает объект Deferred, который представляет собой отложенное значение результата выполнения корутины.\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Eval deferredResult: Deferred&lt;Int&gt; = CoroutineScope(Dispatchers.IO).async {\n    \u002F\u002F Код корутины\n    delay(1000)\n    return@async 42\n}\n\n\u002F\u002F Получение результата корутины\nrunBlocking {\n    val result = deferredResult.await()\n    println(\"Coroutine result: $result\")\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EДавайте разберем каждый пункт данного кода подробно.\u003C\u002Fp\u003E\u003Col\u003E\u003Cli\u003E\u003Cp\u003EСоздание и запуск корутины с помощью корутин-билдера \u003Cem\u003Easync \u003C\u002Fem\u003Eс указанием типа результата.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EДалее в \u003Cem\u003ECoroutineScope \u003C\u002Fem\u003Eмы передаем \u003Cem\u003EDispatchers.IO\u003C\u002Fem\u003E, который указывает на то, что корутина будет асинхронно выполняться на одном из потоков, предназначенных для операций ввода-вывода, и не будет блокировать основной поток выполнения.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003E\u003Cem\u003Easync \u003C\u002Fem\u003Eвозвращает объект \u003Cem\u003EDeferred\u003C\u002Fem\u003E, который представляет собой отложенное значение результата корутины. Мы указываем тип ожидаемого результата (в данном случае — Int) в определении переменной \u003Cem\u003EdeferredResult.\u003C\u002Fem\u003E\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EВнутри блока кода корутины мы выполняем задержку в 1 секунду и возвращаем значение 42.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EДалее мы используем \u003Cem\u003ErunBlocking \u003C\u002Fem\u003Eдля создания новой области видимости и блокировки текущего потока до завершения всех запущенных корутин внутри него.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EМы вызываем метод \u003Cem\u003Eawait()\u003C\u002Fem\u003E для объекта \u003Cem\u003EdeferredResult\u003C\u002Fem\u003E, чтобы дождаться завершения корутины и получить ее результат.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EЗатем мы выводим результат в консоль.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Fol\u003E\u003Cp\u003E\u003Cstrong\u003E3) runBlocking\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\u003Cp\u003EКорутин-билдер runBlocking используется для запуска новой области видимости (CoroutineScope) и выполнения блока кода синхронно. Этот билдер блокирует текущий поток до завершения всех запущенных корутин внутри него. runBlocking обычно используется в функции main или в тестовом окружении.\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Efun main() = runBlocking {\n    \u002F\u002F Код корутин\n    delay(1000)\n    println(\"Coroutine completed\")\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E\u003Cstrong\u003E4) withContext\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\u003Cp\u003EКорутин-билдер withContext используется для выполнения блока кода в контексте определенного диспетчера. Он позволяет переключаться на другой диспетчер внутри корутины и продолжать выполнение кода на этом диспетчере.\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Esuspend fun fetchData(): String {\n    return withContext(Dispatchers.IO) {\n        \u002F\u002F Код, выполняющийся в диспетчере IO\n        delay(1000)\n        return@withContext \"Data fetched\"\n    }\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EЭто основные виды корутин-билдеров, предоставляемых в Kotlin Coroutines. Каждый из них имеет свое специфическое применение и позволяет эффективно управлять асинхронными операциями. \u003C\u002Fp\u003E\u003Ca class=\"anchor\" name=\"5\" id=\"5\"\u003E\u003C\u002Fa\u003E\u003Ch2\u003E5. Задачи (Jobs)  \u003C\u002Fh2\u003E\u003Cfigure class=\"full-width \"\u003E\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw780q1\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fc3c\u002F58f\u002F7ec\u002Fc3c58f7ec8d37058fde912662ecb8139.jpg\" width=\"3200\" height=\"860\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fc3c\u002F58f\u002F7ec\u002Fc3c58f7ec8d37058fde912662ecb8139.jpg\" data-blurred=\"true\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cp\u003EКогда мы запускаем корутину, она возвращает объект задачи (Job), который позволяет нам управлять и отменять выполнение этой задачи. Задачи могут быть связаны друг с другом, образуя иерархию задач, что позволяет нам контролировать группы корутин и выполнять коллективные операции с ними.\u003C\u002Fp\u003E\u003Cp\u003EРассмотрим подробнее различные аспекты и примеры использования Job в Kotlin Coroutines.\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Eval job = CoroutineScope(Dispatchers.IO) {\n    \u002F\u002F Код корутины\n    delay(1000)\n    println(\"Coroutine completed\")\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EВ приведенном примере мы создаем корутину с помощью корутин-билдера launch. Результатом работы корутины будет являться Job, который представляет собой задачу выполнения корутины. Задача начинает выполняться асинхронно, и мы можем использовать Job для управления ее состоянием.\u003C\u002Fp\u003E\u003Cp\u003E\u003Cstrong\u003Ecancel()\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\u003Cp\u003EМы можем использовать метод cancel() объекта Job для отмены корутины. При вызове cancel() корутина будет прервана и прекратит свое выполнение.\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003E\u002F\u002F Отмена корутины\njob.cancel() \n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E\u003Cstrong\u003EisActive\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\u003Cp\u003EСвойство isActive позволяет проверить, активен ли Job (не был ли отменен или завершен).\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Eval job = CoroutineScope(Dispatchers.IO).launch {\n    \u002F\u002F Код корутины\n    while (isActive) {\n        \u002F\u002F Выполнять циклическую задачу, пока Job активен\n        \u002F\u002F ...\n    }\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E\u003Cstrong\u003EisCompleted\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\u003Cp\u003EСвойство isCompleted позволяет проверить, завершен ли Job.\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Eval job = CoroutineScope(Dispatchers.IO).launch {\n    \u002F\u002F Код корутины\n    delay(1000)\n    println(\"Coroutine completed\")\n}\n\n\u002F\u002F Проверка, завершен ли Job\nif (job.isCompleted) {\n    println(\"Job completed\")\n} else {\n    println(\"Job is still active\")\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E\u003Cstrong\u003Ejoin\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\u003Cp\u003EМетод join() используется для ожидания завершения Job. Он блокирует текущий поток до завершения Job.\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Eval job = CoroutineScope(Dispatchers.IO).launch {\n    \u002F\u002F Код корутины\n    delay(1000)\n    println(\"Coroutine completed\")\n}\n\n\u002F\u002F Ожидание завершения Job\njob.join()\nprintln(\"Job completed\")\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E\u003Cstrong\u003EinvokeOnCompletion\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\u003Cp\u003EМетод invokeOnCompletion позволяет зарегистрировать обратный вызов, который будет осуществлен при завершении Job.\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Eval job = CoroutineScope(Dispatchers.IO).launch {\n    \u002F\u002F Код корутины\n    delay(1000)\n    println(\"Coroutine completed\")\n}\n\n\u002F\u002F Регистрация обратного вызова при завершении Job\njob.invokeOnCompletion { throwable -&gt;\n    if (throwable != null) {\n        println(\"Job was cancelled: ${throwable.message}\")\n    } else {\n        println(\"Job completed successfully\")\n    }\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EВажно учитывать, что при отмене или ошибке выполнения корутины мы получаем объект Throwable в методе invokeOnCompletion, что позволяет нам обработать исключение. Однако если корутина успешно завершается, то в invokeOnCompletion мы получаем значение null.\u003C\u002Fp\u003E\u003Cp\u003E\u003Cstrong\u003Echildren\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\u003Cp\u003EСвойство children предоставляет доступ к дочерним задачам Job. Оно возвращает список Job всех дочерних задач. Пример использования:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Eval parentJob = Job()\n\nval childJob1 = CoroutineScope(Dispatchers.IO).launch(parentJob) {\n    \u002F\u002F Код первой корутины\n    delay(5_000)\n}\n\nval childJob2 = CoroutineScope(Dispatchers.IO).launch(parentJob) {\n    \u002F\u002F Код второй корутины\n    delay(5_000)\n}\n\n\u002F\u002F Получение списка дочерних задач\nval childrenJobs = parentJob.children\nprintln(\"Number of child jobs: ${childrenJobs.count()}\")\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EВ данном примере создаются две дочерние задачи (childJob1 и childJob2), привязанные к родительскому Job (parentJob). Затем мы получаем список дочерних задач с помощью свойства children и выводим количество дочерних задач в консоль.\u003C\u002Fp\u003E\u003Ca class=\"anchor\" name=\"6\" id=\"6\"\u003E\u003C\u002Fa\u003E\u003Ch2\u003E6. Функции приостановки (suspend)\u003C\u002Fh2\u003E\u003Cfigure class=\"full-width \"\u003E\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw780q1\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fac7\u002F1b3\u002F296\u002Fac71b32966cff2a9102cb97f6866bf8b.jpg\" width=\"3200\" height=\"1472\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fac7\u002F1b3\u002F296\u002Fac71b32966cff2a9102cb97f6866bf8b.jpg\" data-blurred=\"true\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cp\u003EКлючевое слово suspend в Kotlin используется для обозначения функций, которые приостанавливают выполнение, но не блокируют поток выполнения. В контексте Kotlin Coroutines это означает, что функции с пометкой suspend могут быть приостановлены в процессе своего выполнения и возобновлены позже без блокировки основного потока выполнения.\u003C\u002Fp\u003E\u003Cp\u003EФункции, помеченные как suspend, могут выполнять длительные операции ввода-вывода или другие блокирующие операции, не блокируя при этом основной поток выполнения. Вместо этого они могут приостанавливать свое выполнение и давать возможность другим сопрограммам его продолжить.\u003C\u002Fp\u003E\u003Cp\u003EФункции с ключевым словом suspend могут быть вызваны только из корутин или других функций с ключевым словом suspend. Это делает код более безопасным и позволяет избежать проблем, связанных с блокировкой потоков.\u003C\u002Fp\u003E\u003Cp\u003EДавайте рассмотрим пример загрузки данных без использования корутин и suspend-функций.\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003E\u002F\u002F Долгая операция\nloadData()\n\n\nToast.makeText(this, \"Данные загружены\", Toast.LENGTH_SHORT).show()\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EМы вызываем функцию \u003Cem\u003EloadData()\u003C\u002Fem\u003E, которая выполнит загрузку данных. После этого мы выводим toast-сообщение о том, что данные загружены.\u003C\u002Fp\u003E\u003Cp\u003EФункция \u003Cem\u003EloadData()\u003C\u002Fem\u003E является блокирующей, так как она загружает данные из сети длительное время и будет блокировать поток, в котором она выполняется. Однако мы должны показывать toast только в UI-потоке. Чтобы решить проблему блокирования главного потока, нам нужно сделать функцию \u003Cem\u003EloadData()\u003C\u002Fem\u003E асинхронной и поместить вызов \u003Cem\u003Etoast \u003C\u002Fem\u003Eв колбэк, который будет выполнен по завершении загрузки.\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Efun loadData(callback: () -&gt; Unit) {\n    \u002F\u002F Асинхронные операции загрузки данных\n    \u002F\u002F ...\n    \u002F\u002F Загрузка данных завершена\n    callback.invoke()\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EКогда загрузка данных завершается, вызывается переданный колбэк.\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003EloadData {\n    Toast.makeText(this, \"Данные загружены\", Toast.LENGTH_SHORT).show()\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EЭто позволит показать \u003Cem\u003Etoast \u003C\u002Fem\u003Eпосле завершения загрузки данных.\u003C\u002Fp\u003E\u003Cp\u003EПрименение suspend-функций в Kotlin позволяет нам не блокировать поток выполнения и избавиться от колбэка. Вот как будет выглядеть код с использованием корутины и suspend-функции:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Esuspend fun loadData() {\n    \u002F\u002F Асинхронные операции загрузки данных\n    delay(3_000) \u002F\u002F Имитация загрузки данных\n    \u002F\u002F Загрузка данных завершена\n}\n\n\nlifecycleScope.launch {\n     loadData() \u002F\u002Fsuspend function\n     Toast.makeText(this, \"Данные загружены\", Toast.LENGTH_SHORT).show()\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EЭта корутина позволит выполнить код без блокировки основного потока, в котором она запущена, даже если это основной поток приложения. Функция \u003Cem\u003EloadData() \u003C\u002Fem\u003Eзагрузит данные в отдельном потоке, и \u003Cem\u003Etoast\u003C\u002Fem\u003E будет выполнен только после завершения загрузки благодаря использованию механизма \u003Cstrong\u003EContinuation\u003C\u002Fstrong\u003E.\u003C\u002Fp\u003E\u003Cp\u003EВажное замечание: когда корутина вызывает suspend для приостановки своего выполнения, она освобождает текущий поток, на котором выполнялась. Однако, когда корутина возобновляет свое выполнение, она может быть запущена на другом свободном потоке благодаря пулу потоков. Это позволяет реализовать эффективное распределение нагрузки и повышает производительность программы.\u003C\u002Fp\u003E\u003Ca class=\"anchor\" name=\"7\" id=\"7\"\u003E\u003C\u002Fa\u003E\u003Ch2\u003E7. Continuation\u003C\u002Fh2\u003E\u003Cp\u003EВ качестве примера используем корутину:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Elaunch {\n    loadData() \u002F\u002Fsuspend function\n\n\n    println(\"Data loaded\")\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EКак мы знаем, на этапе компиляции весь Kotlin-код компилируется в байт-код JVM. В упрощенном варианте код нашей корутины будет выглядеть следующим образом:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"java\"\u003Eclass GeneratedContinuationClass extends SuspendLambda {\n\n\n    int label;\n \n    void invokeSuspend() {\n    switch (label) {\n\n\n        case 0: {\n\t label = 1;\n            loadData(this); \u002F\u002F suspend function\n            return;\n        }\n\n\n        case 1: {\n            println(\"Data loaded\");\n            return;\n        }\n    }\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003ESuspend-функция \u003Cem\u003EloadData()\u003C\u002Fem\u003E поделит выполнение кода на две части. Код, который находится в ней и перед вызовом этой функции, будет относиться к первой части, в то время как код, который следует после вызова функции, будет относиться ко второй части.\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003EПервый вызов метода \u003Cem\u003EinvokeSuspend \u003C\u002Fem\u003Eпроисходит при запуске корутины. В этом вызове будет выполнена первая часть кода (в случае \u003Cem\u003Elabel\u003C\u002Fem\u003E — равного 0).\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EПеременной label будет присвоено новое значение — 1, затем будет запущена suspend-функция.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EПосле завершения работы suspend-функции необходимо сделать второй вызов метода \u003Cem\u003EinvokeSuspend\u003C\u002Fem\u003E, чтобы выполнить вторую часть кода, то есть вызов \u003Cem\u003Eprintln\u003C\u002Fem\u003E, именно поэтому при вызове suspend-функции \u003Cem\u003EloadData(this) \u003C\u002Fem\u003Eпередается ссылка на \u003Cem\u003EGeneratedContinuationClass.\u003C\u002Fem\u003E\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EПосле завершения suspend-функции \u003Cem\u003EloadData() \u003C\u002Fem\u003Eбудет вызван метод \u003Cem\u003EinvokeSuspend.\u003C\u002Fem\u003E\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EПоскольку в первой части кода \u003Cem\u003E(case 0)\u003C\u002Fem\u003E значение переменной label было изменено на 1, то выполнится уже вторая часть кода \u003Cem\u003E(case 1).\u003C\u002Fem\u003E\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003EРассмотрим ситуацию, когда suspend-функция возвращает результат.\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Elaunch {\nval userId = loadUserId() \u002F\u002F suspend function\n\n\nprintln(\"User ID is downloaded\")\n\n\nval user = loadUserById(userId) \u002F\u002F suspend function\n\n\nprintln(\"User is downloaded: $user\")\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EВ упрощенном варианте код нашей корутины будет выглядеть следующим образом:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"java\"\u003Eclass GeneratedContinuationClass extends SuspendLambda {\n\n\n    int label;\n    String userId;\n    User user; \n \n    void invokeSuspend(Object result) {\n    switch (label) {\n\n\n        case 0: {\n\t label = 1;\n            loadUserId(this); \u002F\u002F suspend function\n            return;\n        }\n\n\n        case 1: {\n            userId = (String) result;\n            println(\"User ID is downloaded\");\n\t label = 2;\n\n\n            loadUserById(userId, this); \u002F\u002F suspend function\n            return;\n        }\n\n\n        case 2: {\n            user = (User) result;\n            println(\"User is downloaded: \" + user.toString());\n            return;\n        }\n    }\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EДавайте разберем этот код подробно по строчкам.\u003C\u002Fp\u003E\u003Cp\u003E1. Создается класс \u003Cem\u003EGeneratedContinuationClass.\u003C\u002Fem\u003E\u003C\u002Fp\u003E\u003Cp\u003E2. Объявляются переменные \u003Cem\u003Elabel\u003C\u002Fem\u003E, \u003Cem\u003EuserId \u003C\u002Fem\u003Eи \u003Cem\u003Euser\u003C\u002Fem\u003E, которые будут использоваться для отслеживания состояния и хранения результатов.\u003C\u002Fp\u003E\u003Cp\u003E3. При значении \u003Cem\u003Elabel\u003C\u002Fem\u003E,\u003Cem\u003E \u003C\u002Fem\u003Eравном 0 (case 0), выполняется следующий код:\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003Eзначение \u003Cem\u003Elabel \u003C\u002Fem\u003Eустанавливается на 1;\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003Eвызывается suspend-функция \u003Cem\u003EloadUserId(this)\u003C\u002Fem\u003E, которая передает ссылку на текущий экземпляр \u003Cem\u003EGeneratedContinuationClass\u003C\u002Fem\u003E;\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003Eвыполнение метода \u003Cem\u003EinvokeSuspend \u003C\u002Fem\u003Eприостанавливается, и управление передается в suspend-функцию \u003Cem\u003EloadUserId.\u003C\u002Fem\u003E\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003E4. Когда suspend-функция \u003Cem\u003EloadUserId \u003C\u002Fem\u003Eзавершается, вызывается метод \u003Cem\u003EinvokeSuspend \u003C\u002Fem\u003Eу переданного в эту функцию \u003Cem\u003EGeneratedContinuationClass\u003C\u002Fem\u003E и передается результат работы — \u003Cem\u003EinvokeSuspend(result).\u003C\u002Fem\u003E\u003C\u002Fp\u003E\u003Cp\u003E5. При значении \u003Cem\u003Elabel\u003C\u002Fem\u003E,\u003Cem\u003E \u003C\u002Fem\u003Eравном 1 (case 1), выполняется следующий код:\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003Eрезультат приводится к типу String и присваивается переменной \u003Cem\u003EuserId;\u003C\u002Fem\u003E\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003Eвыводится сообщение \"User ID is downloaded\";\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003Eзначение \u003Cem\u003Elabel \u003C\u002Fem\u003Eустанавливается на 2;\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003Eвызывается suspend-функция \u003Cem\u003EloadUserById(userId, this)\u003C\u002Fem\u003E, которая передает ссылку на текущий экземпляр \u003Cem\u003EGeneratedContinuationClass;\u003C\u002Fem\u003E\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003Eвыполнение метода \u003Cem\u003EinvokeSuspend \u003C\u002Fem\u003Eприостанавливается, и управление передается в suspend-функцию \u003Cem\u003EloadUserById.\u003C\u002Fem\u003E\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003E6. Когда suspend-функция \u003Cem\u003EloadUserById \u003C\u002Fem\u003Eзавершается, вызывается метод \u003Cem\u003EinvokeSuspend \u003C\u002Fem\u003Eу переданного в эту функцию \u003Cem\u003EGeneratedContinuationClass \u003C\u002Fem\u003Eи передается результат работы — \u003Cem\u003EinvokeSuspend(result).\u003C\u002Fem\u003E\u003C\u002Fp\u003E\u003Cp\u003E7. При значении \u003Cem\u003Elabel\u003C\u002Fem\u003E,\u003Cem\u003E \u003C\u002Fem\u003Eравном 2 (case 2), выполняется следующий код:\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003Eрезультат приводится к типу \u003Cem\u003EUser \u003C\u002Fem\u003Eи присваивается переменной \u003Cem\u003Euser\u003C\u002Fem\u003E;\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003Eвыводится сообщение \"User is downloaded: …\".\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003EТаким образом, класс GeneratedContinuationClass представляет собой сгенерированный код для управления выполнением suspend-функций и хранения результатов на различных этапах выполнения сопрограммы. После завершения выполнения suspend-функции управление передается обратно в invokeSuspend с результатом, и в зависимости от значения label выполняется соответствующий код для продолжения выполнения сопрограммы.\u003C\u002Fp\u003E\u003Ca class=\"anchor\" name=\"8\" id=\"8\"\u003E\u003C\u002Fa\u003E\u003Ch2\u003E8. CoroutineExceptionHandler  \u003C\u002Fh2\u003E\u003Cp\u003EПри работе с корутинами важно правильно обрабатывать исключения, чтобы предотвратить непредвиденные ошибки и сбои в асинхронном коде. Возникает вопрос: можно ли использовать try-catch-блоки внутри корутин для обработки исключений? Попытка обернуть весь код корутины в try-catch-блок может показаться привлекательной идеей, но на самом деле это не рекомендуется. Вот несколько причин.\u003C\u002Fp\u003E\u003Cp\u003E\u003Cstrong\u003E1. Отсутствие гарантии перехвата всех исключений.\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\u003Cp\u003EЕсли исключение возникает внутри корутины и оно не было перехвачено внутри try-catch-блока, оно может пробиться через корутину и вызвать сбой или неожиданное поведение в коде, который вызывает корутину.\u003C\u002Fp\u003E\u003Cp\u003E\u003Cstrong\u003E2. Снижение читаемости кода.\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\u003Cp\u003EИспользование множества try-catch-блоков внутри корутины может сделать код менее читаемым и усложнить понимание логики выполнения.\u003C\u002Fp\u003E\u003Cp\u003E\u003Cstrong\u003E3. Ограниченный контроль над обработкой исключений.\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\u003Cp\u003EПри использовании try-catch-блоков внутри корутины вы обрабатываете исключения только внутри самой корутины. Однако в большинстве случаев вам может потребоваться выполнять дополнительные действия при возникновении исключений, такие как возврат ошибки или взаимодействие с другими компонентами системы.\u003C\u002Fp\u003E\u003Cp\u003EВместо использования многочисленных try-catch-блоков внутри корутин Kotlin предоставляет механизм \u003Cstrong\u003ECoroutineExceptionHandler\u003C\u002Fstrong\u003E, который позволяет нам более элегантно и надежно обрабатывать ошибки в асинхронном коде.\u003C\u002Fp\u003E\u003Cp\u003E\u003Cstrong\u003ECoroutineExceptionHandler \u003C\u002Fstrong\u003E— это механизм, предоставляемый Kotlin, который позволяет обрабатывать исключения, возникающие в корутинах, в едином месте. Он предлагает более гибкую и полноценную обработку ошибок в асинхронном коде.\u003C\u002Fp\u003E\u003Cp\u003EДля создания обработчика исключений используется функция CoroutineExceptionHandler, которая принимает в качестве аргумента лямбда-выражение для обработки исключений.\u003C\u002Fp\u003E\u003Cp\u003EОбработчик исключений можно привязать к области видимости корутины, используя CoroutineScope, чтобы все корутины, созданные в этой области, применяли этот обработчик для обработки исключений.\u003C\u002Fp\u003E\u003Cp\u003EРазберем следующий пример:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Eval coroutineExceptionHandler = CoroutineExceptionHandler { _, throwable -&gt;\n        println(throwable.message)\n}\n\n\nval scope = CoroutineScope(Dispatchers.IO)\n\n\nscope.launch {\n     launch(coroutineExceptionHandler) {\n            throw IllegalStateException(\"Exception from child coroutine\")\n     }\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003EВ этом примере мы создаем обработчик исключений \u003Cem\u003ECoroutineExceptionHandler\u003C\u002Fem\u003E, который выводит сообщение об ошибке при возникновении исключения в корутине. \u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EЗатем мы создаем \u003Cem\u003ECoroutineScope \u003C\u002Fem\u003Eи запускаем корутину в этой области.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EВнутри родительской корутины запускается дочерняя корутина с переданным обработчиком исключений \u003Cem\u003ECoroutineExceptionHandler\u003C\u002Fem\u003E. \u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003EДанный пример приведет к крашу из-за особенностей обработки ошибок в корутинах. Когда в корутине возникает Exception, эта корутина обращается к вышестоящей для проверки, является ли она корутиной или областью видимости (CoroutineScope), и так далее, пока родительская корутина не доберется до CoroutineScope. В этом случае родительская корутина будет ответственна за обработку исключения, возникшего в дочерней корутине.  \u003C\u002Fp\u003E\u003Cfigure class=\"full-width \"\u003E\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw780q1\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fe31\u002F45f\u002Fef0\u002Fe3145fef0f88ea1825343607ebd8fdb7.jpg\" width=\"3200\" height=\"1144\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fe31\u002F45f\u002Fef0\u002Fe3145fef0f88ea1825343607ebd8fdb7.jpg\" data-blurred=\"true\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cp\u003EДля того чтобы успешно обработать исключение, необходимо передать CoroutineExceptionHandler в родительскую корутину. В противном случае, если мы не передаем обработчик исключений в родительскую корутину, программа упадет с ошибкой без выполнения необходимой обработки исключения.\u003C\u002Fp\u003E\u003Cp\u003EЧтобы исправить это, мы должны передать СoroutineExceptionHandler в родительскую корутину. Вот исправленный пример:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Eval coroutineExceptionHandler = CoroutineExceptionHandler { _, throwable -&gt;\n    println(throwable.message)\n}\n\n\nval scope = CoroutineScope(Dispatchers.IO + coroutineExceptionHandler)\n\n\nscope.launch {\n    launch {\n        throw IllegalStateException(\"Exception from child coroutine\")\n    }\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EТеперь мы передаем CoroutineExceptionHandler в CoroutineScope, образуя связь между обработчиком исключений и всеми корутинами, созданными в этой области видимости. Исключение, возникшее в дочерней корутине, будет перехвачено CoroutineExceptionHandler, и его сообщение будет выведено.\u003C\u002Fp\u003E\u003Cp\u003EТаким образом, важно передавать CoroutineExceptionHandler в родительскую корутину или при создании CoroutineScope, чтобы обеспечить обработку исключений во всех корутинах, включая дочерние.\u003C\u002Fp\u003E\u003Ca class=\"anchor\" name=\"9\" id=\"9\"\u003E\u003C\u002Fa\u003E\u003Ch2\u003E9. SupervisorJob\u003C\u002Fh2\u003E\u003Cp\u003EРазберем следующий пример:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Eval coroutineExceptionHandler = CoroutineExceptionHandler { _, throwable -&gt;\n        println(\"Handle exception: ${throwable.message}\")\n}\n\n\nval scope = CoroutineScope(Dispatchers.IO + coroutineExceptionHandler)\n\n\nscope.launch {\n     launch {\n         delay(3_000)\n          throw (IllegalStateException(\"Child coroutine failed\"))\n     }\n     while (true) {\n         delay(1_000)\n          println(\"tick 1\")\n     }\n}\n\n\nscope.launch {\n     while (true) {\n         delay(1_000)\n          println(\"tick 2\")\n     }\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003EЗдесь мы создаем CoroutineScope с использованием Dispatchers.IO и экземпляра CoroutineExceptionHandler.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EЗатем запускается основная корутина, которая через каждую секунду выводит \"tick 1\". Внутри этой корутины есть дочерняя корутина, которая с задержкой в 3 секунды бросает IllegalStateException.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EДалее мы создаем вторую корутину, запущенную в том же CoroutineScope, которая также выполняет бесконечный цикл, выводящий сообщение \"tick 2\" с интервалом в 1 секунду.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003EВ результате работы этого кода мы увидим следующее:\u003C\u002Fp\u003E\u003Cp\u003Etick 2\u003C\u002Fp\u003E\u003Cp\u003Etick 1\u003C\u002Fp\u003E\u003Cp\u003Etick 1\u003C\u002Fp\u003E\u003Cp\u003Etick 2\u003C\u002Fp\u003E\u003Cp\u003EHandle exception: Child coroutine failed\u003C\u002Fp\u003E\u003Cp\u003EТеперь рассмотрим поведение при возникновении ошибки в дочерней корутине:\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003EКогда исключение IllegalStateException генерируется в дочерней корутине, CoroutineExceptionHandler перехватывает исключение.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EВ обработчике исключений выводится сообщение \"Handle exception: Child coroutine failed\".\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EВесь CoroutineScope, включая все дочерние корутины, отменяется из-за исключения в дочерней корутине.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EВторая корутина, запущенная в том же CoroutineScope, также отменяется.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EВ результате выполнение всех корутин прекращается, и программа завершается.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003EПричина отмены всего CoroutineScope в случае ошибки в дочерней корутине заключается в том, что по умолчанию в Kotlin Coroutines стратегия отмены — это отмена родительской корутины и всех ее дочерних корутин. Это помогает избежать утечек ресурсов и неопределенного поведения.\u003C\u002Fp\u003E\u003Cp\u003EЕсли вам нужно предотвратить отмену всего CoroutineScope при возникновении ошибки в дочерней корутине, вы можете использовать \u003Cstrong\u003ESupervisorJob\u003C\u002Fstrong\u003E. Это позволит изолировать ошибки в дочерних корутинах и сохранить независимость выполнения других корутин.\u003C\u002Fp\u003E\u003Cp\u003E\u003Cstrong\u003ESupervisorJob \u003C\u002Fstrong\u003E— это специальный тип работы (Job) в Kotlin Coroutines, который предоставляет механизм для изоляции ошибок в дочерних корутинах от родительской корутины. Он был создан для обеспечения независимости выполнения корутин, чтобы ошибка в одной дочерней корутине не приводила к автоматической отмене других корутин.\u003C\u002Fp\u003E\u003Cp\u003ESupervisorJob предоставляет отдельный скоуп для дочерних корутин, который не привязан к состоянию других корутин. Таким образом, при возникновении ошибки в дочерней корутине только эта конкретная корутина будет отменена, а остальные корутины в рамках того же SupervisorJob продолжат свое выполнение.\u003C\u002Fp\u003E\u003Cfigure class=\"full-width \"\u003E\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw780q1\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F5d1\u002F989\u002F3e3\u002F5d19893e3f70a50c7681c1c839d7fa7e.jpg\" width=\"3200\" height=\"1618\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F5d1\u002F989\u002F3e3\u002F5d19893e3f70a50c7681c1c839d7fa7e.jpg\" data-blurred=\"true\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cp\u003EДавайте разберем выполнение корутин с использованием SupervisorJob.\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Eval exceptionHandler= CoroutineExceptionHandler { _, throwable -&gt;\n     println(\"Handle exception: ${throwable.message}\")\n}\nval supervisorJob = SupervisorJob()\nval scope = CoroutineScope(Dispatchers.IO + supervisorJob + exceptionHandler)\n\n\nscope.launch {\n    launch {\n        delay(3_000)\n         throw (IllegalStateException(\"Child coroutine failed\"))\n    }\n    while (true) {\n        delay(1_000)\n         println(\"tick 1\")\n    }\n}\n\n\nscope.launch {\n    while (true) {\n        delay(1_000)\n        println(\"tick 2\")\n    }\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EВ этом примере мы добавляем SupervisorJob в CoroutineScope. Теперь каждая дочерняя корутина, запущенная в этом скоупе, будет иметь независимость в отношении отмены. В случае возникновения ошибки в дочерней корутине остальные корутины будут продолжать выполнение.\u003C\u002Fp\u003E\u003Cp\u003EПри запуске этого кода вы увидите, что ошибка в первой дочерней корутине (IllegalStateException) обрабатывается обработчиком исключений, но вторая запущенная корутина продолжает генерировать сообщения каждую секунду, несмотря на ошибку в первой корутине.\u003C\u002Fp\u003E\u003Cp\u003Etick 1\u003C\u002Fp\u003E\u003Cp\u003Etick 2\u003C\u002Fp\u003E\u003Cp\u003Etick 1\u003C\u002Fp\u003E\u003Cp\u003Etick 2\u003C\u002Fp\u003E\u003Cp\u003EHandle exception: Child coroutine failed\u003C\u002Fp\u003E\u003Cp\u003Etick 2\u003C\u002Fp\u003E\u003Cp\u003Etick 2\u003C\u002Fp\u003E\u003Cp\u003E…\u003C\u002Fp\u003E\u003Cp\u003EТаким образом, при использовании SupervisorJob вы получаете более гибкий контроль над отменой корутин и возможность сохранить работоспособность других корутин в случае ошибки в одной из них.\u003C\u002Fp\u003E\u003Ca class=\"anchor\" name=\"10\" id=\"10\"\u003E\u003C\u002Fa\u003E\u003Ch2\u003E10. Заключение  \u003C\u002Fh2\u003E\u003Cp\u003EВ данной статье мы познакомились с основными концепциями Kotlin Coroutines. Мы узнали, что такое сопрограммы и почему они стали популярными в разработке Android-приложений. \u003C\u002Fp\u003E\u003Cp\u003EОсновной строительный блок Kotlin Coroutines — это CoroutineScope, который определяет область видимости для запуска и управления корутинами. Мы изучили различные виды CoroutineScope и узнали, как они взаимодействуют с жизненными циклами Android-компонентов.\u003C\u002Fp\u003E\u003Cp\u003EМы рассмотрели различные виды Dispatchers и их применение в разных сценариях асинхронной работы, различные виды корутин-билдеров, такие как launch, async и runBlocking, и их особенности. Изучили понятие Job и рассмотрели основные методы для работы и отслеживания состояний задачи.\u003C\u002Fp\u003E\u003Cp\u003EРассмотрели ключевое слово suspend, которое используется для обозначения приостановки выполнения функции в контексте корутин. А также узнали, чем suspend-функции отличаются от обычных функций и как они позволяют эффективно организовывать асинхронный код.\u003C\u002Fp\u003E\u003Cp\u003EРазобрались, как корутины работают под капотом, используя Continuation, изучили CoroutineExceptionHandler, который предоставляет механизм для централизованной обработки и реагирования на ошибки в корутинах.\u003C\u002Fp\u003E\u003Cp\u003EНаконец, мы познакомились с SupervisorJob, который предоставляет дополнительные возможности управления и обработки ошибок в иерархии корутин.\u003C\u002Fp\u003E\u003Cp\u003EНадеюсь, эта статья окажется полезной и познавательной как для людей, только начинающих свой путь в разработке, так и для опытных разработчиков. Пишите свои комментарии, буду рад ответить на них. Всем хорошего асинхронного кода!\u003C\u002Fp\u003E\u003Cp\u003E\u003C\u002Fp\u003E\u003C\u002Fdiv\u003E","tags":[{"titleHtml":"kotlin coroutines"},{"titleHtml":"асинхронные операции"},{"titleHtml":"android"},{"titleHtml":"многопоточность"}],"metadata":{"stylesUrls":[],"scriptUrls":[],"shareImageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fff3\u002F45f\u002F947\u002Fff345f947d03f94e08ce4ba461a330c4.png","shareImageWidth":1200,"shareImageHeight":630,"vkShareImageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fff3\u002F45f\u002F947\u002Fff345f947d03f94e08ce4ba461a330c4.png","schemaJsonLd":"{\"@context\":\"http:\\\u002F\\\u002Fschema.org\",\"@type\":\"Article\",\"mainEntityOfPage\":{\"@type\":\"WebPage\",\"@id\":\"https:\\\u002F\\\u002Fhabr.com\\\u002Fru\\\u002Farticles\\\u002F747858\\\u002F\"},\"headline\":\"Работа с асинхронными операциями с помощью Kotlin Coroutines\",\"datePublished\":\"2023-07-18T14:21:04+03:00\",\"dateModified\":\"2023-07-20T13:09:24+03:00\",\"author\":{\"@type\":\"Person\",\"name\":\"Chulakov\"},\"publisher\":{\"@type\":\"Organization\",\"name\":\"Habr\",\"logo\":{\"@type\":\"ImageObject\",\"url\":\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fwebt\\\u002Fa_\\\u002Flk\\\u002F9m\\\u002Fa_lk9mjkccjox-zccjrpfolmkmq.png\"}},\"description\":\"Всем привет! Меня зовут Сергей, я Android-разработчик Студии Олега Чулакова на проектах Сбера. Недавно я написал статью Многопоточность в мобильной разработке. В...\",\"url\":\"https:\\\u002F\\\u002Fhabr.com\\\u002Fru\\\u002Farticles\\\u002F747858\\\u002F#post-content-body\",\"about\":[\"h_java\",\"h_mobile_dev\",\"h_android_dev\",\"h_kotlin\",\"f_develop\"],\"image\":[\"https:\\\u002F\\\u002Fhabr.com\\\u002Fshare\\\u002Fpublication\\\u002F747858\\\u002F021bd530fcb1feb87bfcd4fca5fcf8c7\\\u002F\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fupload_files\\\u002Feed\\\u002Fb3a\\\u002Ff0a\\\u002Feedb3af0a819733cbfccf5a73926db32.png\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fupload_files\\\u002F4d4\\\u002F474\\\u002Feec\\\u002F4d4474eecd7c6bcd185d44e29c591345.jpg\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fupload_files\\\u002Fc96\\\u002Fb92\\\u002F73b\\\u002Fc96b9273b8a5d6dc99cbe3e9a5d85a37.jpg\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fupload_files\\\u002Fc3c\\\u002F58f\\\u002F7ec\\\u002Fc3c58f7ec8d37058fde912662ecb8139.jpg\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fupload_files\\\u002Fac7\\\u002F1b3\\\u002F296\\\u002Fac71b32966cff2a9102cb97f6866bf8b.jpg\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fupload_files\\\u002Fe31\\\u002F45f\\\u002Fef0\\\u002Fe3145fef0f88ea1825343607ebd8fdb7.jpg\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fupload_files\\\u002F5d1\\\u002F989\\\u002F3e3\\\u002F5d19893e3f70a50c7681c1c839d7fa7e.jpg\"]}","metaDescription":"Всем привет! Меня зовут Сергей, я Android-разработчик Студии Олега Чулакова на проектах Сбера. Недавно я написал статью Многопоточность в мобильной разработке . В ней был затронут один из наиболее...","mainImageUrl":null,"amp":true,"customTrackerLinks":[]},"polls":[],"commentsEnabled":{"status":true,"reason":null},"rulesRemindEnabled":false,"votesEnabled":true,"status":"published","plannedPublishTime":null,"checked":null,"hasPinnedComments":false,"format":null,"banner":null,"multiwidget":null,"multiwidgetUuid":null,"readingTime":20,"complexity":"medium","isEditorial":false}},"articlesIds":{},"isLoading":false,"pagesCount":{},"route":{},"reasonsList":null,"postReasonsList":null,"view":"list","lastVisitedRoute":{},"ssrCommentsArticleIds":[""],"viewedPosts":[],"myFeedFilter":{"complexity":"all","score":"all","types":["articles","posts","news"]},"myFeedIsApplyFilters":false,"myFeedIsForce":false,"karma":{"userReasonsList":null}},"authorContribution":{"authors":{}},"betaTest":{"currentAnnouncement":null,"announcements":{},"announcementCards":null,"announcementComments":{},"announcementCommentThreads":{},"announcementCommentingStatuses":{},"archivedList":[]},"authorStatistics":{"articleRefs":{},"articleIds":{},"pagesCount":{},"route":{},"viewsCount":[],"maxStatsCount":{}},"career":{"seoLandings":[{"title":"iOS разработчик","vacanciesCount":13,"itemUrl":"https:\u002F\u002Fcareer.habr.com\u002Fvacancies\u002Fios_razrabotchik","itemHubs":["swift","xcode","mobile_dev","flutter","cocoa","ios_dev"]},{"title":"Java разработчик","vacanciesCount":211,"itemUrl":"https:\u002F\u002Fcareer.habr.com\u002Fvacancies\u002Fjava_developer","itemHubs":["java","javame_dev","gradle"]},{"title":"Swift разработчик","vacanciesCount":13,"itemUrl":"https:\u002F\u002Fcareer.habr.com\u002Fvacancies\u002Fios_razrabotchik_swift","itemHubs":["swift","xcode","mobile_dev","flutter","cocoa","ios_dev"]},{"title":"Android разработчик ","vacanciesCount":10,"itemUrl":"https:\u002F\u002Fcareer.habr.com\u002Fvacancies\u002Fandroid_developer","itemHubs":["android_dev","mobile_dev","flutter"]}],"hubs":"java,mobile_dev,android_dev,kotlin"},"comments":{"articleComments":{},"articlePinnedComments":{},"searchCommentsResults":null,"pagesCount":null,"commentAccess":{},"scrollParents":{},"pageArticleComments":{"lastViewedComment":0,"postId":null,"lastCommentTimestamp":"","moderated":[],"moderatedIds":[],"commentRoute":"","idempotenceKey":""}},"companies":{"companyRefs":{},"companyIds":{},"companyTopIds":{},"pagesCount":{},"companyProfiles":{},"companiesCategories":[],"companiesCategoriesTotalCount":0,"companiesWidgets":{},"companiesWorkers":{},"companiesFans":{},"multiwidgets":{},"route":{},"isLoading":false,"companyWorkersLoading":false,"companyFansLoading":false,"multiwidgetLoading":false,"vacancies":{},"companiesGalleries":{},"companiesBanners":{},"companiesLandingVacancies":{},"companiesTechnologies":{},"workplaceInfo":null},"companyAdmin":{"companyInfo":null,"companyInfoLoading":false,"faqArticles":null,"brandingPreviewImageUrl":null,"jivoStatus":0,"adminNotifications":null,"availableInvitesCount":{}},"companyAdd":{"currentStep":"","stepsData":{},"uncompletedSteps":[],"isStepLoading":true,"isStepCommitting":false,"isInitialized":false,"agreementContent":""},"companiesContribution":{"hubs":{},"flows":{},"companyRefs":{}},"companyHubsContribution":{"contributionRefs":{"hubRefs":{},"hubIds":{}}},"conversation":{"messages":[],"respondent":null,"isLoadMore":false},"conversations":{"conversations":[],"pagesCount":0},"docs":{"menu":{},"articles":{},"mainMenu":[],"loading":{"main":false,"dropdown":false,"article":false}},"feature":{"isProbablyVisible":true},"fixedBanner":{"isArticleStickyPanelVisible":false,"isArticleStickyPanelAtTheBottom":false,"isFixedBannerVisible":false,"isStickyPanelIconsHidden":false},"flows":{"flows":[{"id":"1","alias":"develop","title":"Разработка","titleHtml":"Разработка","route":{"name":"FLOW_PAGE","params":{"flowName":"develop"}}},{"id":"6","alias":"admin","title":"Администрирование","titleHtml":"Администрирование","route":{"name":"FLOW_PAGE","params":{"flowName":"admin"}}},{"id":"2","alias":"design","title":"Дизайн","titleHtml":"Дизайн","route":{"name":"FLOW_PAGE","params":{"flowName":"design"}}},{"id":"3","alias":"management","title":"Менеджмент","titleHtml":"Менеджмент","route":{"name":"FLOW_PAGE","params":{"flowName":"management"}}},{"id":"4","alias":"marketing","title":"Маркетинг","titleHtml":"Маркетинг","route":{"name":"FLOW_PAGE","params":{"flowName":"marketing"}}},{"id":"7","alias":"popsci","title":"Научпоп","titleHtml":"Научпоп","route":{"name":"FLOW_PAGE","params":{"flowName":"popsci"}}}],"updates":{}},"global":{"isPwa":false,"device":"mobile","isHabrCom":true,"requestId":"8cd276b986d0a7fbfbe24a6f787801d3"},"hubs":{"hubRefs":{},"hubIds":{},"pagesCount":{},"isLoading":false,"route":{}},"hubsBlock":{"hubRefs":{},"hubIds":{}},"i18n":{"fl":"ru","hl":"ru"},"info":{"welcomePage":{},"isLoading":true},"location":{"urlStruct":{"protocol":null,"slashes":null,"auth":null,"host":null,"port":null,"hostname":null,"hash":null,"query":{},"pathname":"\u002Fru\u002Farticles\u002F747858\u002F","path":"\u002Fru\u002Farticles\u002F747858\u002F","href":"\u002Fru\u002Farticles\u002F747858\u002F"}},"me":{"user":null,"uuid":null,"ppgDemanded":false,"karmaResetInfo":{"canReincarnate":null,"wasReincarnated":null,"currentScore":null},"notes":null,"userUpdates":{"feeds":{"newPostsCount":null,"newThreadsCount":null,"newNewsCount":null,"newCount":null},"conversationUnreadCount":0}},"mostReadingList":{"mostReadingListIds":[],"mostReadingListRefs":null,"promoPost":null},"onboarding":{"currentStep":null,"stepsData":{},"stepsErrors":{},"completedSteps":[],"isStepCommitting":false,"isCommitDisabled":true},"ppa":{"articles":{},"card":null,"transactions":null,"totalTransactions":null,"isAccessible":null},"projectsBlocks":{"activeBlocks":{"questions":"project-block-article"}},"promoData":{"isLoading":false,"hasLoaded":false,"featurer":null,"megaposts":null,"promoLinks":null,"promoPosts":null,"sticker":null},"publicationStatistics":{"statsInfo":{},"statsFunnels":{},"statsGraph":{},"defaultSuggest":{},"suggest":{},"timeTracker":{},"isTrackingActivity":false,"isUserActive":true,"otherPublicationStats":{}},"pullRefresh":{"shouldRefresh":false},"sandbox":{"articleIds":[],"articleRefs":{},"pagesCount":null,"route":{},"lastVisitedRoute":{},"isLoading":false},"search":{"searchQueryError":null},"settingsOther":{"inputs":{"uiLang":{"errors":[],"ref":null,"value":""},"articlesLangEnglish":{"errors":[],"ref":null,"value":false},"articlesLangRussian":{"errors":[],"ref":null,"value":false},"agreement":{"errors":[],"ref":null,"value":false},"email":{"errors":[],"ref":null,"value":true},"digest":{"errors":[],"ref":null,"value":true}}},"similarList":{"similarListIds":[],"similarListRefs":null},"ssr":{"error":null,"isDataLoaded":true,"isDataLoading":false,"isHydrationFailed":false,"isServer":false},"stories":{"stories":[{"id":"story-998","author":{"logo":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F91a\u002F166\u002F49f\u002F91a16649f9ef89302a5a56cfa22a451d.png","title":"Яндекс Практикум","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up"},"title":"Как расти на работе?","lang":"ru","startTime":"2025-03-18T18:45:00+03:00","finishTime":"2025-03-31T19:00:00+03:00","slides":[{"id":"story-998_1","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fbf4\u002F911\u002F7e6\u002Fbf49117e637ff2099b3944f8803cd7a3.png","button":null},{"id":"story-998_2","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F3e3\u002Fc84\u002Fe83\u002F3e3c84e8330ea1ddf72e9d310457ed2f.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_3","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F84b\u002F533\u002F3c3\u002F84b5333c3e77e8dac62a8b50d042acb9.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_4","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F257\u002Feb0\u002F2be\u002F257eb02bea1777e13f3e647cae6e06cd.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_5","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F858\u002F086\u002F0ed\u002F8580860ed3497c043c04f9a42054d74f.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_6","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fcdf\u002F32f\u002F387\u002Fcdf32f38777f046c063b5182f4125e14.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_7","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fd48\u002Ff2d\u002F0e2\u002Fd48f2d0e2ecd7d746d738191bb913d8f.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_8","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fb38\u002Ffd7\u002Fee0\u002Fb38fd7ee04848bf3b058be7403438bd1.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_9","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F79e\u002Feaa\u002F9d8\u002F79eeaa9d8af5a288ad42bd9d63b5793a.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_10","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fcdc\u002F17e\u002F385\u002Fcdc17e38582dc67838b9abfb200d982e.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}}]},{"id":"story-996","author":{"logo":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fe63\u002F36d\u002Fa24\u002Fe6336da24460ab6b9fbc347d03eb263a.png","title":"Хабр","link":null},"title":"Здоровье айтишника","lang":"ru","startTime":"2025-03-17T10:22:00+03:00","finishTime":"2025-04-13T10:22:00+03:00","slides":[{"id":"story-996_1","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fb7c\u002F6de\u002F8ea\u002Fb7c6de8ea6789dbc30f071716172b6dd.jpg","button":null},{"id":"story-996_2","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F2e7\u002F88a\u002F0fe\u002F2e788a0fe61729ca8b23eb59069c844f.jpg","button":{"title":"Личный опыт","link":"https:\u002F\u002Fu.habr.com\u002Fzd-1","colorType":"light"}},{"id":"story-996_3","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fb93\u002F6f4\u002F256\u002Fb936f425653b84fa60ab00d09f78c543.jpg","button":{"title":"Как это было","link":"https:\u002F\u002Fu.habr.com\u002Fzd-2","colorType":"light"}},{"id":"story-996_4","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fc10\u002Fd14\u002Ff5a\u002Fc10d14f5a4859fe10baecbcc2bcb8828.jpg","button":{"title":"Шея в фокусе","link":"https:\u002F\u002Fu.habr.com\u002Fzd-3","colorType":"dark"}},{"id":"story-996_5","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F535\u002Fe1b\u002F77a\u002F535e1b77a9eb896262ad73321f2ad99f.jpg","button":{"title":"Фотоинструкция","link":"https:\u002F\u002Fu.habr.com\u002Fzd-4","colorType":"light"}},{"id":"story-996_6","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F569\u002Fc39\u002F49f\u002F569c3949f5b330ea85d4a1864f481c3d.jpg","button":{"title":"Сидите (не)правильно","link":"https:\u002F\u002Fu.habr.com\u002Fzd-5","colorType":"dark"}},{"id":"story-996_7","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F1f2\u002F1de\u002Fdbf\u002F1f21dedbf2902bc4061a75b839b63595.jpg","button":{"title":"Журнал изменений","link":"https:\u002F\u002Fu.habr.com\u002Fzd-6","colorType":"dark"}},{"id":"story-996_8","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F95a\u002F164\u002F21b\u002F95a16421badc3a9f1135309ab0c42c41.jpg","button":{"title":"Альтернатива","link":"https:\u002F\u002Fu.habr.com\u002Fzd-7","colorType":"light"}},{"id":"story-996_9","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F624\u002F027\u002F54d\u002F62402754d311798af44bcfe7f9abfedc.jpg","button":{"title":"Хроника поисков","link":"https:\u002F\u002Fu.habr.com\u002Fzd-8","colorType":"dark"}}]},{"id":"story-992","author":{"logo":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F3fe\u002F2fc\u002Fb05\u002F3fe2fcb05df852d7e1e00d44e54e39ae.png","title":"Сезоны Хабра","link":"https:\u002F\u002Fu.habr.com\u002Ffnstories"},"title":"Угадайте будущее в новом сезоне","lang":"ru","startTime":"2025-03-12T19:15:00+03:00","finishTime":"2025-03-31T23:56:00+03:00","slides":[{"id":"story-992_1","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fc56\u002Faf5\u002Fc43\u002Fc56af5c4377f7f7b94f7b6ad20fc92c3.png","button":{"title":"А что за сезон?","link":"https:\u002F\u002Fu.habr.com\u002Ffnstories","colorType":"light"}},{"id":"story-992_2","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F8fa\u002Fde7\u002F65d\u002F8fade765d99207f31c597283ae6ce912.png","button":{"title":"Какие темы нужны","link":"https:\u002F\u002Fu.habr.com\u002Ffnstories","colorType":"dark"}},{"id":"story-992_3","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F23e\u002F7b9\u002Fb24\u002F23e7b9b24cb056d1a42e8d31ccea16ce.png","button":{"title":"Сезон будущего ИИ","link":"https:\u002F\u002Fu.habr.com\u002Ffnstories","colorType":"dark"}},{"id":"story-992_4","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F27b\u002Fbfc\u002Fa18\u002F27bbfca18e656ee0122b5cb8eb2cb502.png","button":{"title":"Все правила сезона","link":"https:\u002F\u002Fu.habr.com\u002Ffnstories","colorType":"dark"}},{"id":"story-992_5","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F1e0\u002F6c6\u002Ff33\u002F1e06c6f33e703bbd2b2ae3baee3376fd.png","button":{"title":"Как участвовать","link":"https:\u002F\u002Fu.habr.com\u002Ffnstories","colorType":"dark"}}]},{"id":"story-990","author":{"logo":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F282\u002Fe80\u002Fbf1\u002F282e80bf1b73484126ed53c6f3e42692.png","title":"Aeza","link":"https:\u002F\u002Fu.habr.com\u002FI72qi"},"title":"С праздником весны!","lang":"ru","startTime":"2025-03-09T10:15:00+03:00","finishTime":"2025-03-30T23:59:00+03:00","slides":[{"id":"story-990_1","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F064\u002F9dd\u002Ff59\u002F0649ddf5949cae6c9342fb62034a36ac.png","button":null},{"id":"story-990_2","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F05f\u002F96b\u002F25e\u002F05f96b25e910c32256ee0b1916f21380.png","button":{"title":"Семейная история","link":"https:\u002F\u002Fu.habr.com\u002Fey2bY","colorType":"light"}},{"id":"story-990_3","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fcd1\u002Ff5d\u002F921\u002Fcd1f5d921bb9489ac11727272660bdb6.png","button":{"title":"Движущиеся картинки","link":"https:\u002F\u002Fu.habr.com\u002FWLKXU","colorType":"light"}},{"id":"story-990_4","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fb55\u002Fd45\u002Fec5\u002Fb55d45ec50e53275c60d16ea886a0672.png","button":{"title":"Личный опыт","link":"https:\u002F\u002Fu.habr.com\u002FSxrki","colorType":"light"}},{"id":"story-990_5","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Ffa7\u002F1ce\u002Ffca\u002Ffa71cefca5ed0a3fe8b50bd703b3605f.png","button":{"title":"Алгоритм","link":"https:\u002F\u002Fu.habr.com\u002Ftbz2p","colorType":"light"}},{"id":"story-990_6","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F435\u002F89d\u002Ff90\u002F43589df9018846cc6a8eed986226b252.png","button":{"title":"Выбрать сценарий","link":"https:\u002F\u002Fu.habr.com\u002F0RCPk","colorType":"light"}},{"id":"story-990_7","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F514\u002F5f8\u002F619\u002F5145f86194ad48dad48a846b42af0f93.png","button":{"title":"Jiraзамещение","link":"https:\u002F\u002Fu.habr.com\u002FEwhYq","colorType":"light"}},{"id":"story-990_8","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F439\u002Fa83\u002Fae7\u002F439a83ae78f7ef711e3b9bbed1ec26c5.png","button":{"title":"8 вещей","link":"https:\u002F\u002Fu.habr.com\u002FVTv2r","colorType":"light"}},{"id":"story-990_9","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F02d\u002F783\u002F2f7\u002F02d7832f7b1c95d88bff9f34209e204a.png","button":{"title":"Интерфейсы","link":"https:\u002F\u002Fu.habr.com\u002FUFOMZ","colorType":"light"}},{"id":"story-990_10","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F0cb\u002Ff7f\u002F0d9\u002F0cbf7f0d905d486ce4ff82bc939b21d5.png","button":{"title":"Стикеры ваши","link":"https:\u002F\u002Fu.habr.com\u002FoA1K7","colorType":"light"}}]},{"id":"story-984","author":{"logo":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F648\u002F61b\u002F9ae\u002F64861b9aecb7c474cd94063f98045541.png","title":"Хабр","link":null},"title":"Всегда котов!","lang":"ru","startTime":"2025-03-01T00:01:09+03:00","finishTime":"2025-03-23T16:21:00+03:00","slides":[{"id":"story-984_1","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fc06\u002Fc21\u002F93f\u002Fc06c2193ff34362ac2af782cf2571f55.png","button":null},{"id":"story-984_2","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fb68\u002F15f\u002F763\u002Fb6815f7630b9c015b1e67efb5bdf12d4.jpg","button":{"title":"Сделать purrrr","link":"https:\u002F\u002Fu.habr.com\u002Fj4DN1","colorType":"light"}},{"id":"story-984_3","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F550\u002F76e\u002Fd7a\u002F55076ed7a0954e243f944fc2f330623a.png","button":{"title":"Тыгыдык","link":"https:\u002F\u002Fu.habr.com\u002Fya360_kotov","colorType":"dark"}},{"id":"story-984_4","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F2fb\u002F23b\u002F06c\u002F2fb23b06cf294c2050104b2aef589788.jpg","button":{"title":"Исследование","link":"https:\u002F\u002Fu.habr.com\u002FbO3r0","colorType":"light"}},{"id":"story-984_5","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Ff50\u002F50f\u002F0ae\u002Ff5050f0aeea1335c4f0544c1863f8342.jpg","button":{"title":"Детали проекта","link":"https:\u002F\u002Fu.habr.com\u002FQJmhe","colorType":"light"}},{"id":"story-984_6","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F825\u002F3dd\u002F5f5\u002F8253dd5f5c19dd061578f1d09310a45f.jpg","button":{"title":"Эксперименты","link":"https:\u002F\u002Fu.habr.com\u002FVaOdo","colorType":"light"}},{"id":"story-984_7","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F3fb\u002Fc92\u002F0f9\u002F3fbc920f9ea81eca2c1c027ff77fc659.jpg","button":{"title":"Это не мем","link":"https:\u002F\u002Fu.habr.com\u002F0Wb3p","colorType":"light"}},{"id":"story-984_8","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F2b4\u002F794\u002Fc33\u002F2b4794c33844e60aad9468018fd132cd.jpg","button":{"title":"В засаде","link":"https:\u002F\u002Fu.habr.com\u002FnasCD","colorType":"dark"}}]}]},"technotext":{"years":[],"technotextDocForNominees":null,"technotextDocForWinners":null,"technotextInfo":{},"technotextInfoLoading":false,"technotextWinners":{},"technotextWinnersLoading":false},"userHubsContribution":{"contributionRefs":{"hubRefs":{},"hubIds":{}}},"userInvites":{"availableInvites":0,"usedInvitesIds":[],"usedInvitesRefs":{},"usedInvitesPagesCount":0,"unusedInvitesIds":[],"unusedInvitesRefs":{},"unusedInvitesPagesCount":0},"userVotes":{"karmaVotesList":[],"karmaVotesPagesCount":null,"karmaVotesListLoading":false,"commentsVotesList":[],"commentsVotesPagesCount":null,"commentsVotesListLoading":false,"postsVotesList":[],"postsVotesPagesCount":null,"postsVotesListLoading":false,"userVotesList":[],"userVotesPagesCount":null,"userVotesListLoading":false},"users":{"authorRefs":{},"authorIds":{},"pagesCount":{},"authorProfiles":{"chulakov_dev":{"alias":"Chulakov_Dev","badgets":[{"title":"Захабренный","description":"Пользователь с кармой \u003E0","url":null,"isRemovable":false}],"aboutHtml":"Компания Chulakov — разработчик № 1 для банков по версии Рейтинга Рунета 2021–2023.\u003Cbr\u003E \u003Cbr\u003E Входим в ТОП-5 лучших веб-студий России по версии Рейтинга Рунета 2023.\u003Cbr\u003E \u003Cbr\u003E Уже 14 лет создаем лучшие цифровые продукты с фокусом на дизайн для людей. \u003Cbr\u003E \u003Cbr\u003E Разрабатываем сервисы, сайты и мобильные приложения для крупнейших международных и российских компаний: СБЕР, ВТБ, МТС, Tele2, МегаФон, Yota, ГК ФСК, МГТУ им. Баумана, re:Store, Avito, Альфа-Банк, IKEA и др.","contacts":[{"title":"Сайт","url":"https:\u002F\u002Fchulakov.ru","value":"https:\u002F\u002Fchulakov.ru","siteTitle":"Студия Олега Чулакова","favicon":"https:\u002F\u002Fchulakov.ru\u002Fassets\u002Ficons\u002Ffavicons\u002F16x16.png"},{"title":"Telegram","url":"https:\u002F\u002Ftelegram.me\u002Fchulakov_dev","value":"chulakov_dev","siteTitle":"Telegram: Contact @chulakov_dev","favicon":"https:\u002F\u002Ftelegram.org\u002Fimg\u002Fwebsite_icon.svg?4"}],"invitedBy":{"issuerLogin":null,"timeCreated":"2023-06-01T11:46:35+00:00"},"careerProfile":null,"companies":{"pagesCount":1,"companyIds":[],"companyRefs":{}}}},"userHubs":{},"userInvitations":{},"authorFollowers":{},"authorFollowed":{},"userSpecialization":{},"karmaStats":[],"statistics":null,"isLoading":false,"authorFollowersLoading":false,"authorFollowedLoading":false,"userHubsLoading":false,"userInvitationsLoading":false,"route":{}},"viewport":{"prevScrollY":{},"scrollY":0,"width":0},"tracker":{"notificationsLoading":false,"notificationsList":[],"notificationsPageCount":0,"pendingMarkNotificationsRead":[],"publicationsLoading":true,"publicationsList":[],"publicationsPageCount":0,"pendingDeletePublications":false,"pendingMarkPublicationsRead":false},"events":{"eventRefs":{},"eventIds":[],"pagesCount":0,"categories":[],"cities":[],"actualEvents":[{"id":"588","titleHtml":"Конкурс «Снежный код» от Хекслета. Три гранта на бесплатное 10-месячное обучение","descriptionHtml":"\u003Cp\u003EУчаствуйте в конкурсе грантов от онлайн-школы программирования Хекслет. Три победителя пройдут 10-месячное обучение с наставником, освоив один из востребованных стеков: Java, Python, JavaScript, PHP или Node.js.\u003C\u002Fp\u003E\u003Cp\u003EЭто шанс без вложений освоить новый стек, систематизировать знания, восполнить пробелы и повысить свою ценность на рынке. Технологии развиваются быстро — обновляйте навыки, чтобы не отставать.\u003C\u002Fp\u003E\u003Cp\u003EПомимо грантов, можно выиграть доступ ко всем курсам Хекслета, полезные подписки, сертификаты и подарки от Хабра и партнеров.\u003C\u002Fp\u003E\u003Cp\u003EВ прошлом году три победителя успешно завершили программу и уже работают в IT.  Инвестируйте время в свое развитие — участвуйте! \u003C\u002Fp\u003E","imageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Ff79\u002F1fc\u002F79d\u002Ff791fc79d0d9fdda84397ed0c0717764.png","eventUrl":"https:\u002F\u002Fspecial.hexlet.io\u002Fgrant?utm_source=partners&utm_medium=referral&utm_campaign=grant&utm_content=link&utm_term=placement_habr","startDay":"2025-02-17","finishDay":"2025-03-24","isOnline":true,"geo":[],"isArchive":false,"categories":[{"id":"2","titleHtml":"Разработка"}],"tags":["гранты","конкурс","Хекслет","Java","Python","JavaScript","PHP","Node.js"],"metadata":null},{"id":"596","titleHtml":"Офлайн-конференция Хабр х K-team: как удерживать таланты в 2025 году","descriptionHtml":"\u003Cp\u003EМы — Хабр и K-Team — провели масштабное исследование, чтобы разобраться, что на самом деле мотивирует сотрудников оставаться в компании и быть лояльными\u003C\u002Fp\u003E\u003Cp\u003EВместе прошли по тернистому пути к лояльности, опросив&nbsp;3 000+ сотрудников, HR и руководителей из разных отраслей:&nbsp;от ретейла и логистики до IT и промышленности. Мы заботливо собрали самые разные мнения, чтобы понять, что по-настоящему важно для людей, которые остаются в компании надолго и любят свою работу. \u003C\u002Fp\u003E\u003Cp\u003EНаша цель проста — помочь бизнесу не сливать бюджет на бесполезные инициативы, а сотрудникам — получать то, что им действительно нужно. \u003C\u002Fp\u003E\u003Cp\u003EПриглашаем вас на офлайн-презентацию в Москве в марте. Обсудим результаты исследования, ключевые выводы и разберем, как строить эффективные Retention-стратегии в 2025 году.\u003C\u002Fp\u003E\u003Cp\u003EКоличество мест ограничено, заявки проходят модерацию. Если ваша заявка будет одобрена, вы получите письмо с подтверждением и адресом встречи.\u003C\u002Fp\u003E\u003Cp\u003EЕсли прийти не получится — после ивента отправим результаты исследования всем, кто зарегистрируется на лендинге.\u003C\u002Fp\u003E\u003Cp\u003EМентальное здоровье сотрудников — важная часть корпоративной культуры. В «Ясно для бизнеса» изучают, как забота о команде влияет на вовлечённость и эффективность. Они подготовили гайд о работе с молодыми специалистами, а для теста сервиса есть промокод CORP-HABRTLNT-DISC20 на скидку 20% для первых сессий: https:\u002F\u002Fu.habr.com\u002FPQP4b\u003C\u002Fp\u003E\u003Cp\u003E\u003C\u002Fp\u003E","imageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fb14\u002Fcd3\u002F772\u002Fb14cd3772bc67698c8fbfd846e23824a.png","eventUrl":"https:\u002F\u002Fevent.k-team.ru\u002Fexpectations_vs_reality?utm_source=habr","startDay":"2025-03-20","startTime":"10:00","finishDay":"2025-03-20","finishTime":"17:00","isOnline":false,"geo":["Москва"],"isArchive":false,"categories":[{"id":"16","titleHtml":"Другое"}],"tags":["HR","HRD","Удержание сотрудников"],"metadata":null},{"id":"604","titleHtml":"IX HappyWorkForum | Аутентичность и ментальное здоровье персонала","descriptionHtml":"\u003Cp\u003EБолее 250 HRD, первые лица компаний и владельцы крупного бизнеса обсудят лучшие практики благополучия и управление командой.\u003C\u002Fp\u003E\u003Cp\u003EПочему ментальное здоровье становится KPI бизнеса?\u003C\u002Fp\u003E\u003Cp\u003EГде граница ответственности за выгорание и стресс сотрудников?\u003C\u002Fp\u003E\u003Cp\u003EКак стать работодателем №1?\u003C\u002Fp\u003E\u003Cp\u003EКак управлять уставшими командами?\u003C\u002Fp\u003E\u003Cp\u003EКак справляться с выгоранием руководителей?\u003C\u002Fp\u003E\u003Cp\u003EЧем замотивировать сотрудников, когда деньги уже не работают?&nbsp;&nbsp;\u003C\u002Fp\u003E\u003Cp\u003EКак решать ценностные конфликты?\u003C\u002Fp\u003E\u003Cp\u003EУспешные корпоративные программы: что реально работает?&nbsp;&nbsp;\u003C\u002Fp\u003E\u003Cp\u003EВ программе презентация отчёта по развитию лидерства, батлы, практические кейсы и нетворкинг.\u003C\u002Fp\u003E\u003Cp\u003EСреди спикеров, представители компаний: Т-банк, Сравни.ру, Ростелеком, ТД Ренна, Спортмастер, ТрансТелеком, Оптиком, Норникель, Азбука вкуса, ЕВМ и другие.\u003C\u002Fp\u003E\u003Cp\u003EУчастие для HRD, руководителей и владельцев бизнеса без оплаты. Действует строгая модерация.\u003C\u002Fp\u003E\u003Cp\u003E\u003C\u002Fp\u003E","imageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F733\u002F9ef\u002F194\u002F7339ef1945f3ee6906daf89db79829d4.png","eventUrl":"https:\u002F\u002Fhappyforum.ru\u002F?utm_source=habr&utm_medium=email&utm_campaign=hwf","startDay":"2025-03-20","startTime":"10:00","finishDay":"2025-03-20","finishTime":"18:00","isOnline":true,"geo":["Москва"],"isArchive":false,"categories":[{"id":"16","titleHtml":"Другое"}],"tags":["HRD","HR"],"metadata":null},{"id":"612","titleHtml":"Вебинар «Мастерская бюджета: как управлять затратами на облачные ресурсы»","descriptionHtml":"\u003Cp\u003EРасскажем, как сэкономить на использовании облачных сервисов через возможности личного кабинета, сервисы с free tier и акции. Покажем, как оптимизировать потребление ресурсов и настроить лимиты бюджетов.\u003C\u002Fp\u003E\u003Cp\u003EПрограмма вебинара:\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003EАнализ текущей утилизации ресурсов: поиск ресурсов с низкой утилизацией и анализ возможной оптимизации.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EКалькулятор затрат: демо-настройки параметров для точных прогнозов расходов.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EАнализ детализированных данных: подходы к аналитике, включая метаданные.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EОптимизация потребления: использование зарезервированных инстансов и спотовых экземпляров.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EАнализ бесплатного потребления: как использовать free tier для сокращения затрат.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EНастройка лимитов бюджетов: автоматизация и уведомления для контроля расходов.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EИспользование Public API: тегирование ресурсов для лучшей аналитики затрат.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003EВебинар будет интересен менеджерам облачных ресурсов и IT-департаментов, DevOps-инженерам и сотрудникам, в чью зону ответственности входит контроль над облачными расходами.\u003C\u002Fp\u003E","imageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F38f\u002F10d\u002Ff4c\u002F38f10df4c7f9d7c5d4610fe426af0ab4.png","eventUrl":"https:\u002F\u002Fu.habr.com\u002Fcldr_cloudeventwebinar","startDay":"2025-03-20","startTime":"11:00","finishDay":"2025-03-20","isOnline":true,"geo":[],"isArchive":false,"categories":[{"id":"2","titleHtml":"Разработка"},{"id":"4","titleHtml":"Администрирование"}],"tags":["вебинар cloudru","вебинар для айтишников","вебинар про облака"],"metadata":null},{"id":"616","titleHtml":"Бизнес-конференция «Digital Brand Day 2025: Орбита 2025»","descriptionHtml":"\u003Cp\u003E21 марта конференция «Digital Brand Day 2025: Орбита 2025» в восьмой раз соберёт ведущих экспертов цифрового маркетинга и рекламы для обсуждения главных трендов digital-рынка и новых инструментов, которые определят стратегию брендов.\u003C\u002Fp\u003E\u003Cp\u003EВ основе темы Digital Brand Day 2025 лежит фундаментальный вопрос философии: что первично — материя или сознание? А что же первично в цифровой среде — технологии или идеи? Конференция станет эпицентром открытий, где мы вместе проложим путь сквозь бескрайние просторы рекламного космоса и наметим вектор развития цифрового маркетинга.\u003C\u002Fp\u003E\u003Cp\u003EГостей «Digital Brand Day: Орбита 2025» ждёт не только насыщенная программа, но и возможность завести полезные знакомства, увидеть, каким будет диджитал завтра.\u003C\u002Fp\u003E","imageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F523\u002F7fb\u002F13a\u002F5237fb13ad7fb6fb483c49691aaec836.png","eventUrl":"https:\u002F\u002Fu.habr.com\u002Fcldr_digitalbrandday","startDay":"2025-03-21","startTime":"10:00","isOnline":false,"geo":["Москва"],"isArchive":false,"categories":[{"id":"10","titleHtml":"Маркетинг"},{"id":"16","titleHtml":"Другое"}],"tags":["digital brand day","бизнес-конференция digital brand day","цифровой маркетинг","digital-рынок"],"metadata":null},{"id":"608","titleHtml":"Вебинар «Контент-маркетинг здорового человека: как привлечь внимание аудитории»","descriptionHtml":"\u003Cp\u003E27 марта в 16:00 МСК вместе с агентством Loft PR Studio проведем открытый вебинар о том, как писать про здоровье на Хабре. \u003C\u002Fp\u003E\u003Cp\u003EНа вебинаре разберем, что помогает удерживать внимание и превращает контент в работающий инструмент. Поделимся опытом брендов, которые ведут блоги и регулярно публикуют статьи.\u003C\u002Fp\u003E\u003Cp\u003EБудет интересно тем, кто продвигает товары и услуги для здоровья на аудиторию B2C и B2B. \u003C\u002Fp\u003E\u003Cp\u003E🔗 Участие бесплатное, но нужна предварительная регистрация.\u003C\u002Fp\u003E","imageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F8fd\u002Fe04\u002Fddd\u002F8fde04ddd9ba3f6bcd515aa6209f96b7.png","eventUrl":"https:\u002F\u002Fhabr.timepad.ru\u002Fevent\u002F3266126\u002F?utm_refcode=b5d44b4f1d5f2c06b5696586408b58e610baafd8","startDay":"2025-03-27","startTime":"16:00","finishDay":"2025-03-27","finishTime":"18:00","isOnline":true,"geo":[],"isArchive":false,"categories":[{"id":"10","titleHtml":"Маркетинг"},{"id":"16","titleHtml":"Другое"}],"tags":["Вебинар","Контент","Хабр"],"metadata":null},{"id":"606","titleHtml":"Серия вебинаров «DevOps Middle: AvitoTech vs ecom.tech»","descriptionHtml":"\u003Cp\u003EУчебный центр Слёрм запустил серию бесплатных вебинаров «Честные вакансии: DevOps Middle».\u003C\u002Fp\u003E\u003Cp\u003EДва раза в неделю Вячеслав Федосеев, TeamLead DevOps в «Честном знаке» и автор телеграм-канала «DevOps Bootcamp с Федосеевым» встречается в прямом эфире с экспертами из бигтеха, чтобы обсудить:\u003C\u002Fp\u003E\u003Col\u003E\u003Cli\u003E\u003Cp\u003EКакие задачи должен решать DevOps middle.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EКакими основными и дополнительными инструментами и подходами должен владеть DevOps middle.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EСтоп-факторы на собеседовании.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EКак выглядит рабочий день DevOps middle.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EКакие софт-скилы действительно важны.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Fol\u003E\u003Cp\u003E31 марта состоится встреча с экспертами AvitoTech, 2 апреля — с ecom.tech. Кому подходите вы, а кто — вам? Разберёмся вместе на вебинарах.\u003C\u002Fp\u003E\u003Cp\u003EПодробности — в telegram-боте.\u003C\u002Fp\u003E\u003Cp\u003E\u003C\u002Fp\u003E","imageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fb99\u002F62a\u002Fb24\u002Fb9962ab2439c6edc80f96d7f0a847c72.png","eventUrl":"https:\u002F\u002Fu.habr.com\u002Fcldr_slermdevops","startDay":"2025-03-31","startTime":"17:00","isOnline":true,"geo":[],"isArchive":false,"categories":[{"id":"2","titleHtml":"Разработка"},{"id":"4","titleHtml":"Администрирование"}],"tags":["Вебинар Слерм","Вебинар Devops","Честные вакансии","Слерм","Честные вакансии Devops Middle"],"metadata":null},{"id":"618","titleHtml":"Реалити для разработчиков: узнайте, как строится новое публичное облако MWS","descriptionHtml":"\u003Cp\u003EBuilding the Cloud — это реалити-проект для разработчиков о новом облаке МТС Web Services. Каждый эпизод посвящён отдельному building-блоку новой облачной платформы.\u003C\u002Fp\u003E\u003Cp\u003EВ прямом эфире:\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003EПоказываем архитектуру сервисов облака ещё до релиза.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EДелимся опытом на реальных кейсах из разработки.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EОтвечаем на вопросы в прямом эфире.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003EВ новом выпуске проекта расскажем, как строим underlay-сеть нового облака.\u003C\u002Fp\u003E\u003Cp\u003EВы узнаете:\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003EКак мы поменяли подход к построению underlay-сети в новом облаке MWS.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EКакую архитектуру строим и как реализовали изоляцию management и data plane.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EКак обеспечиваем отказоустойчивость и производительность на уровне физической инфраструктуры.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003EНовый выпуск Building the Cloud будет интересен сетевым инженерам, backend-разработчикам, DevOps- и SRE-инженерам, а также всем, кто интересуется сетевыми или облачными технологиями.\u003C\u002Fp\u003E\u003Cp\u003EРегистрируйтесь по ссылке, подключайтесь к прямому эфиру и задавайте вопросы в чате.\u003C\u002Fp\u003E\u003Cp\u003EЗа самый интересный вопрос подарим фирменный мерч MWS.\u003C\u002Fp\u003E\u003Cp\u003EДо встречи в эфире.\u003C\u002Fp\u003E","imageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Ff76\u002F0f9\u002Fa82\u002Ff760f9a827b851a5eeca4802c643a91d.png","eventUrl":"https:\u002F\u002Fu.habr.com\u002Fcldr_buildingthecloud4","startDay":"2025-04-03","startTime":"11:00","isOnline":true,"geo":[],"isArchive":false,"categories":[{"id":"2","titleHtml":"Разработка"}],"tags":["реалити-проект для разработчиков","Реалити для разработчиков","облако","облако MWS"],"metadata":null},{"id":"620","titleHtml":"Открытая встреча «System Analysis Meetup SberHealth»","descriptionHtml":"\u003Cp\u003EВ программе:\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003EГоргоц Мария, старший системный аналитик, расскажет про описание требований для мобильных приложений.&nbsp;\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EНижник Станислав, ведущий системный аналитик, расскажет про книжный клуб системных аналитиков: «Как мы создали сообщество для обмена знаниями».\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EВ качестве приглашённого спикера Севостьянова Анастасия, ведущий системный аналитик в Альфа-Банке, расскажет про мидл слой без хаоса: «Как сделать документацию понятной и живой».&nbsp;\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003EПосле сессии с докладами проведём профессиональную игру для офлайн-участников «Искусство защиты абсурда».&nbsp;\u003C\u002Fp\u003E\u003Cp\u003EВедущая митапа Пашкова Ольга, руководитель направления методологии и системного анализа в СберЗдоровье.\u003C\u002Fp\u003E","imageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Feba\u002Fc37\u002F879\u002Febac378793b959ebce42f41713e7b67f.jpg","eventUrl":"https:\u002F\u002Fu.habr.com\u002Fcldr_sbermeetup","startDay":"2025-04-03","startTime":"17:00","finishDay":"2025-04-03","finishTime":"23:00","isOnline":true,"geo":["Москва"],"isArchive":false,"categories":[{"id":"12","titleHtml":"Аналитика"}],"tags":["Семинар аналитика","сбер митап","системная аналитика митап","системная аналитика"],"metadata":null},{"id":"590","titleHtml":"«GoCloud 2025» — масштабная IT-конференция про облака и AI","descriptionHtml":"\u003Cp\u003EПоговорим про глобальные тренды в AI, расскажем про широкий набор сценариев работы в облаке, поделимся последними релизами и нашими планами, чтобы показать, какой простор открывают облачные и AI-технологии для бизнеса и разработчиков.\u003C\u002Fp\u003E\u003Cp\u003EЧто ждёт участников в этом году:\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003EТри трека: инфраструктура и инструменты, AI и R&amp;D и сценарии работы в облаке.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003E30+ спикеров из Cloud.ru и ведущих российских компаний.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003ELive-демонстрации облачных платформ и нетворкинг с экспертами.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EНе только доклады: интерактивные зоны, afterparty с музыкальной программой и кастомный мерч.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003EКому будет полезно: техническим лидерам, IT-директорам, бизнес-руководителям, разработчикам, DevOps-инженерам, архитекторам, дата-инженерам, AI\u002FML-инженерам, дата-сайентистам, SRE-инженерам, системным администраторам, специалистам по информационной безопасности.\u003C\u002Fp\u003E\u003Cp\u003EАдрес: Москва, Цифровое деловое пространство (ЦДП), ул. Покровка, 47.\u003C\u002Fp\u003E\u003Cp\u003E\u003C\u002Fp\u003E","imageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F31b\u002Fe68\u002F295\u002F31be6829578e7934fbc944396eb330b1.png","eventUrl":"https:\u002F\u002Fu.habr.com\u002Fcldr_gocloud","startDay":"2025-04-10","startTime":"10:00","finishDay":"2025-04-10","finishTime":"20:00","isOnline":true,"geo":["Москва"],"isArchive":false,"categories":[{"id":"2","titleHtml":"Разработка"},{"id":"4","titleHtml":"Администрирование"},{"id":"8","titleHtml":"Менеджмент"}],"tags":["конференция Cloud.ru","AI","ИИ","айти конференция","облачные хранилища"],"metadata":null},{"id":"516","titleHtml":"IT-конференция Merge Tatarstan 2025","descriptionHtml":"\u003Cp\u003EКрупнейшая региональная IT-конференция России собирает профессионалов со всей страны для нетворкинга, обмена опытом и поиска новых деловых контактов.\u003C\u002Fp\u003E\u003Cp\u003EMerge Tatarstan — это 7 тематических конференций на одной площадке, 2000 участников, более 170 спикеров-практиков, мастер-классы, воркшопы и BoF-сессии.\u003C\u002Fp\u003E\u003Cp\u003EК участию в конференции приглашаются разработчики, QA, тимлиды, Project\u002FProduct-менеджеры, маркетологи, аналитики, UI\u002FUX-дизайнеры, PR-специалисты, HR-менеджеры, владельцы бизнеса и начинающие специалисты.\u003C\u002Fp\u003E\u003Cp\u003E\u003C\u002Fp\u003E","imageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F0e9\u002F3a8\u002F3ec\u002F0e93a83ecea09f806d1df907ddb036a4.jpg","eventUrl":"https:\u002F\u002Fu.habr.com\u002Fcldr_tatarstan","startDay":"2025-04-25","startTime":"09:00","finishDay":"2025-04-26","finishTime":"19:30","isOnline":false,"geo":["Казань"],"isArchive":false,"categories":[{"id":"2","titleHtml":"Разработка"},{"id":"10","titleHtml":"Маркетинг"},{"id":"16","titleHtml":"Другое"}],"tags":["Разработка","IT","PR","UI\u002FUX","бизнес","маркетинг","аналитика"],"metadata":null},{"id":"610","titleHtml":"Летняя айти-тусовка Summer Merge","descriptionHtml":"\u003Cp\u003EЛетняя айти-тусовка возвращается.\u003C\u002Fp\u003E\u003Cp\u003EВырваться из рутины и сменить обстановку на несколько дней можно вместе с Summer Merge.&nbsp;\u003C\u002Fp\u003E\u003Cp\u003EСосновый лес, чистый воздух, живое общение с экспертами IT, спортивные состязания, мастер-классы, квесты, встречи с друзьями, новые знакомства, afterparty — забудьте про суету города и окунитесь в приятную атмосферу digital detox. В эти летние IT-выходные мы обещаем атмосферу ярких приключений.&nbsp;\u003C\u002Fp\u003E\u003Cp\u003EЖдём вас 20—22 июня в экопарке «Русский берег» на Summer Merge.\u003C\u002Fp\u003E","imageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F652\u002F12d\u002F998\u002F65212d998fb4939d9787bd9c726d2acb.png","eventUrl":"https:\u002F\u002Fu.habr.com\u002Fcldr_summermerge","startDay":"2025-06-20","finishDay":"2025-06-22","isOnline":false,"geo":["Ульяновская область"],"isArchive":false,"categories":[{"id":"2","titleHtml":"Разработка"},{"id":"16","titleHtml":"Другое"}],"tags":["летняя айти-тусовка","айти-кэмп","летний выезд для айтишников","Summer Merge"],"metadata":null}],"currentEvent":null,"eventsFilter":{"city":"all","timeStarted":null,"timeEnded":null}},"wysiwyg":{"WYSIWYGRulesRefs":null}};(function(){var s;(s=document.currentScript||document.scripts[document.scripts.length-1]).parentNode.removeChild(s);}());</script><script src="https://assets.habr.com/habr-web/js/chunk-vendors.3b11d41f.js" defer></script><script src="https://assets.habr.com/habr-web/js/app.7a97ea6d.js" defer></script></div>
    <div id="overlays"><!----><!--teleport anchor--><!----><!--teleport anchor--><!----><!--teleport anchor--><!----><!--teleport anchor--><!----><!--teleport anchor--><!----><!--teleport anchor--></div>
    
    
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-S28W1WC23F"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());
    </script>
  
  <script type="text/javascript" >
    (function(m,e,t,r,i,k,a){m[i]=m[i]||function(){(m[i].a=m[i].a||[]).push(arguments)};
    m[i].l=1*new Date();k=e.createElement(t),a=e.getElementsByTagName(t)[0],k.async=1,k.src=r,a.parentNode.insertBefore(k,a)})
    (window, document, "script", "https://mc.yandex.ru/metrika/tag.js", "ym");

  </script>
    <script type="text/javascript">
      window.addEventListener('load', function () {
        setTimeout(() => {
          const img = new Image();
          img.src = 'https://vk.com/rtrg?p=VK-RTRG-421343-57vKE';
        }, 0);
      });
    </script>
  
    </body>

    </html>
