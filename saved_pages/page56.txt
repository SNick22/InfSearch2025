<!DOCTYPE html>
<html lang="ru">

  <head>
    <title>Kotlin DSL: Теория и Практика &#x2F; Хабр</title>
<meta property="fb:app_id" content="444736788986613">
<meta property="fb:pages" content="472597926099084">
<meta name="twitter:card" content="summary_large_image">
<meta name="twitter:site" content="@habr_com">
<meta property="og:site_name" content="Хабр">
<link href="https://habr.com/ru/rss/post/416725/?fl=ru" type="application/rss+xml" title rel="alternate" name="rss">
<link href="https://habr.com/ru/companies/jugru/articles/416725/" rel="canonical" data-hid="e3fa780">
<link rel="image_src" href="https://habr.com/share/publication/416725/8ebef63795781a3780fcb7c68b335364/" data-hid="2a79c45">
<meta property="og:title" content="Kotlin DSL: Теория и Практика">
<meta name="twitter:title" content="Kotlin DSL: Теория и Практика">
<meta name="aiturec:title" content="Kotlin DSL: Теория и Практика">
<meta name="description" content="Разработка тестов приложения — не самое приятное занятие. Этот процесс занимает долгое время, требует большой концентрации и при этом крайне востребован. Язык Kotlin дает набор инструментов, который...">
<meta itemprop="description" content="Разработка тестов приложения — не самое приятное занятие. Этот процесс занимает долгое время, требует большой концентрации и при этом крайне востребован. Язык Kotlin дает набор инструментов, который...">
<meta property="og:description" content="Разработка тестов приложения — не самое приятное занятие. Этот процесс занимает долгое время, требует большой концентрации и при этом крайне востребован. Язык Kotlin дает набор инструментов, который...">
<meta name="twitter:description" content="Разработка тестов приложения — не самое приятное занятие. Этот процесс занимает долгое время, требует большой концентрации и при этом крайне востребован. Язык Kotlin дает набор инструментов, который...">
<meta property="aiturec:description" content="Разработка тестов приложения — не самое приятное занятие. Этот процесс занимает долгое время, требует большой концентрации и при этом крайне востребован. Язык Kotlin дает набор инструментов, который...">
<meta itemprop="image" content="https://habr.com/share/publication/416725/8ebef63795781a3780fcb7c68b335364/">
<meta property="og:image" content="https://habr.com/share/publication/416725/8ebef63795781a3780fcb7c68b335364/">
<meta property="og:image:width" content="1200">
<meta property="og:image:height" content="630">
<meta property="aiturec:image" content="https://habr.com/share/publication/416725/8ebef63795781a3780fcb7c68b335364/">
<meta name="twitter:image" content="https://habr.com/share/publication/416725/8ebef63795781a3780fcb7c68b335364/">
<meta property="vk:image" content="https://habr.com/share/publication/416725/8ebef63795781a3780fcb7c68b335364/?format=vk">
<meta property="vk:image" content="https://habr.com/share/publication/416725/8ebef63795781a3780fcb7c68b335364/?format=vk?format=vk">
<meta property="aiturec:item_id" content="416725">
<meta property="aiturec:datetime" content="2018-07-10T15:25:18.000Z">
<meta content="https://habr.com/ru/companies/jugru/articles/416725/" property="og:url">
<meta property="og:type" content="article">
<meta property="og:locale" content="ru_RU">
<meta property="og:image:width" content="1200">
<meta property="og:image:height" content="630">
<meta name="keywords" content="kotlin, java, jpoint, joker 2018">
<script type="application/ld+json" data-hid="1e0f0a2">{"@context":"http:\/\/schema.org","@type":"Article","mainEntityOfPage":{"@type":"WebPage","@id":"https:\/\/habr.com\/ru\/companies\/jugru\/articles\/416725\/"},"headline":"Kotlin DSL: Теория и Практика","datePublished":"2018-07-10T18:25:18+03:00","dateModified":"2018-07-11T10:15:45+03:00","author":{"@type":"Person","name":"Олег Чирухин"},"publisher":{"@type":"Organization","name":"Habr","logo":{"@type":"ImageObject","url":"https:\/\/habrastorage.org\/webt\/a_\/lk\/9m\/a_lk9mjkccjox-zccjrpfolmkmq.png"}},"description":"Разработка тестов приложения &mdash; не самое приятное занятие. Этот процесс занимает долгое время, требует большой концентрации и при этом крайне востребован. Язык Ko...","url":"https:\/\/habr.com\/ru\/companies\/jugru\/articles\/416725\/#post-content-body","about":["c_jugru","h_java","h_kotlin","h_compilers","h_programming","f_develop"],"image":["https:\/\/habrastorage.org\/getpro\/habr\/post_images\/ec3\/fa3\/670\/ec3fa3670fd1c8a3cf7222f7e746933c.jpg","https:\/\/habrastorage.org\/getpro\/habr\/post_images\/031\/be4\/27d\/031be427d58c5073a3bc619cbed65792.jpg","https:\/\/habrastorage.org\/getpro\/habr\/post_images\/f64\/032\/4b1\/f640324b1a2ff556a4da892822847a9c.jpg","https:\/\/habrastorage.org\/getpro\/habr\/post_images\/fda\/0f5\/94d\/fda0f594d14b8043054bcae7fe3315ad.jpg","https:\/\/habrastorage.org\/getpro\/habr\/post_images\/521\/543\/590\/521543590a00c6101abd4fcefd345e04.jpg","https:\/\/habrastorage.org\/getpro\/habr\/post_images\/c7f\/c57\/11c\/c7fc5711ccf2a4e9dfb626ea64cffb9b.jpg","https:\/\/habrastorage.org\/getpro\/habr\/post_images\/259\/e9b\/7a3\/259e9b7a39e84a41466572b38afc280d.jpg","https:\/\/habrastorage.org\/getpro\/habr\/post_images\/d55\/610\/ef7\/d55610ef71d368b8d16c1fdef35cd2c5.jpg","https:\/\/habrastorage.org\/getpro\/habr\/post_images\/e2b\/7c5\/f48\/e2b7c5f48dbd065e95b1617ad10622ba.jpg","https:\/\/habrastorage.org\/getpro\/habr\/post_images\/f81\/c79\/0a9\/f81c790a921e43d645fc7380607cf8ea.jpg","https:\/\/habrastorage.org\/getpro\/habr\/post_images\/2f8\/e45\/2f6\/2f8e452f62f39f0f56a2c73e355dddcb.jpg","https:\/\/habrastorage.org\/getpro\/habr\/post_images\/07f\/4cb\/57f\/07f4cb57f84ba884bd558ee8e97202a2.jpg","https:\/\/habrastorage.org\/getpro\/habr\/post_images\/d1d\/b21\/4b3\/d1db214b39b5620875350b382622e662.jpg","https:\/\/habrastorage.org\/getpro\/habr\/post_images\/050\/2e7\/29e\/0502e729ebf030ea5e4d9f038a4b7cc6.jpg","https:\/\/habrastorage.org\/getpro\/habr\/post_images\/5e3\/695\/850\/5e3695850435a204b9cbb3b94f6f7635.png","https:\/\/habrastorage.org\/getpro\/habr\/post_images\/03d\/699\/a71\/03d699a71ecf86e0e5c03b7a6de57995.png","https:\/\/habrastorage.org\/getpro\/habr\/post_images\/a7b\/db9\/656\/a7bdb965641ca434f1eba5e7781b9b53.png","https:\/\/habrastorage.org\/getpro\/habr\/post_images\/378\/6e6\/eaf\/3786e6eafdb8ebd14c344af30698df56.png","https:\/\/habrastorage.org\/getpro\/habr\/post_images\/76b\/a76\/554\/76ba76554585689a4c2562167fd26833.png","https:\/\/habrastorage.org\/getpro\/habr\/post_images\/deb\/a5d\/f0a\/deba5df0a67a08566e07370bf2f70bc0.png","https:\/\/habrastorage.org\/getpro\/habr\/post_images\/8aa\/09d\/a05\/8aa09da05c7c48282e01b0ea409e0f3c.png","https:\/\/habrastorage.org\/getpro\/habr\/post_images\/5f6\/113\/6ef\/5f61136ef41733e6fb88c5ff17d6975f.jpg","https:\/\/habrastorage.org\/getpro\/habr\/post_images\/a48\/f4d\/d49\/a48f4dd497c8aa6b93ab2043e014ca02.jpg","https:\/\/habrastorage.org\/getpro\/habr\/post_images\/194\/fab\/626\/194fab62612fb71e6a5f148193ec1ff9.jpg","https:\/\/habrastorage.org\/getpro\/habr\/post_images\/1ff\/80e\/de2\/1ff80ede232393839186b9345065700c.jpg","https:\/\/habrastorage.org\/getpro\/habr\/post_images\/c8d\/d2b\/952\/c8dd2b952caa82b67157f41dc79535b0.jpg","https:\/\/habrastorage.org\/getpro\/habr\/post_images\/b80\/d7c\/0d8\/b80d7c0d814f3c51a91f2c224707a2d5.jpg","https:\/\/habrastorage.org\/getpro\/habr\/post_images\/74b\/5dd\/a95\/74b5dda953b1df973a8d893f7a615195.jpg","https:\/\/habrastorage.org\/getpro\/habr\/post_images\/69e\/4bd\/781\/69e4bd781897ef0515384f81367899cc.jpg","https:\/\/habrastorage.org\/getpro\/habr\/post_images\/8bd\/375\/5b1\/8bd3755b1085f3049a7ea32c7cc41f79.jpg","https:\/\/habrastorage.org\/getpro\/habr\/post_images\/d80\/552\/181\/d80552181518f155fc596c1bb3ddf2aa.jpg","https:\/\/habrastorage.org\/getpro\/habr\/post_images\/788\/63d\/b17\/78863db1732d9b92bff62bf82060771a.jpg","https:\/\/habrastorage.org\/getpro\/habr\/post_images\/770\/a1b\/038\/770a1b0388cd2380c491cdf5ca8c344c.jpg","https:\/\/habrastorage.org\/getpro\/habr\/post_images\/15b\/f36\/3d9\/15bf363d94919f7c73d775c5d28c6c53.jpg","https:\/\/habrastorage.org\/getpro\/habr\/post_images\/e12\/4cc\/e3b\/e124cce3bd7bdb776c3e946edf8ec52c.jpg","https:\/\/habrastorage.org\/getpro\/habr\/post_images\/eba\/286\/8b3\/eba2868b306f476c35df51d8af500335.jpg","https:\/\/habrastorage.org\/getpro\/habr\/post_images\/d3f\/954\/e2a\/d3f954e2a7016ecf31a081559674d01f.jpg","https:\/\/habrastorage.org\/getpro\/habr\/post_images\/362\/4d8\/3be\/3624d83be81ee01223ad758e9e81c94d.jpg","https:\/\/habrastorage.org\/getpro\/habr\/post_images\/cab\/d4a\/940\/cabd4a940deacfcdcb680c4916b29eae.jpg","https:\/\/habrastorage.org\/getpro\/habr\/post_images\/0b4\/572\/421\/0b457242103fc70de806c9de62234135.jpg","https:\/\/habrastorage.org\/getpro\/habr\/post_images\/b1b\/819\/fdb\/b1b819fdb7488092550b2ac72265cd72.jpg","https:\/\/habrastorage.org\/getpro\/habr\/post_images\/50d\/dbc\/492\/50ddbc4920ffb871918ce7c063a874a2.jpg","https:\/\/habrastorage.org\/getpro\/habr\/post_images\/b72\/155\/316\/b72155316d99a7e4816d1234644b761b.jpg","https:\/\/habrastorage.org\/getpro\/habr\/post_images\/83a\/f30\/2ff\/83af302ff3c0a85db220c70f0d567743.jpg","https:\/\/habrastorage.org\/getpro\/habr\/post_images\/fcc\/1ac\/dfc\/fcc1acdfc43284500c38884d88212877.jpg","https:\/\/habrastorage.org\/getpro\/habr\/post_images\/17b\/360\/9ab\/17b3609ab2ebd28cf27f906934536e05.jpg","https:\/\/habrastorage.org\/getpro\/habr\/post_images\/721\/aea\/73d\/721aea73d36a41cf3dbecd328b1f5ab5.jpg","https:\/\/habrastorage.org\/getpro\/habr\/post_images\/d3d\/226\/065\/d3d2260651fc4049ec8d3e6878a0cc51.jpg","https:\/\/habrastorage.org\/getpro\/habr\/post_images\/3c6\/8c9\/577\/3c68c957760612b06a5b008c734ddb33.jpg","https:\/\/habrastorage.org\/getpro\/habr\/post_images\/25f\/3a1\/f95\/25f3a1f95c8c61dcb4937822bd9578e6.jpg","https:\/\/habrastorage.org\/getpro\/habr\/post_images\/b6b\/61d\/675\/b6b61d67518cb1dc730bce8e309ae0dc.jpg","https:\/\/habrastorage.org\/getpro\/habr\/post_images\/53a\/41f\/7d8\/53a41f7d8e9067b6ce850045e745fb4f.jpg","https:\/\/habrastorage.org\/getpro\/habr\/post_images\/22d\/0e3\/9ef\/22d0e39ef38ceb43fd60654de876691b.jpg","https:\/\/habrastorage.org\/getpro\/habr\/post_images\/1e6\/895\/b9e\/1e6895b9ed089ed99d4c2639e6e1f578.jpg","https:\/\/habrastorage.org\/getpro\/habr\/post_images\/815\/9f5\/a86\/8159f5a8628b6c5bb21d219e395ea32b.jpg","https:\/\/habrastorage.org\/getpro\/habr\/post_images\/4c8\/03d\/2f2\/4c803d2f20ed8b7f79e308d47b734bd9.jpg","https:\/\/habrastorage.org\/webt\/uk\/pg\/0d\/ukpg0djbwn_hfyq4a7g9usa65aa.png","https:\/\/habrastorage.org\/webt\/v_\/mq\/ia\/v_mqia50010hyrqza7zubejj62e.png","https:\/\/habrastorage.org\/webt\/l_\/3q\/uw\/l_3quwu2xaqlxikn71jhpnnero4.png","https:\/\/habrastorage.org\/webt\/fn\/1f\/xa\/fn1fxa5legi4mwszf5xbudchoi0.png","https:\/\/habrastorage.org\/webt\/vj\/bt\/s9\/vjbts9wb6fely-atqa-kr88i9qm.png","https:\/\/habrastorage.org\/webt\/iz\/gd\/dv\/izgddvy3bomaqjp_6yvbfrbcgpe.png","https:\/\/habrastorage.org\/getpro\/habr\/post_images\/b4f\/f23\/a77\/b4ff23a77974a299ecac5c1c3b5d984f.jpg","https:\/\/habrastorage.org\/getpro\/habr\/post_images\/f2c\/185\/5f1\/f2c1855f1ee98b51a4bda6ce9cc0b0a8.jpg","https:\/\/habrastorage.org\/getpro\/habr\/post_images\/444\/95f\/0a3\/44495f0a381b71a20578736f0cb491af.jpg","https:\/\/habrastorage.org\/getpro\/habr\/post_images\/126\/db9\/d78\/126db9d789acf9b3482f314d5a53261f.jpg","https:\/\/habrastorage.org\/webt\/hd\/nf\/ou\/hdnfoutg14046a351gjyhodfprc.png","https:\/\/habrastorage.org\/getpro\/habr\/post_images\/e2b\/37f\/a2f\/e2b37fa2fad7cd8e201987c32fbf572b.jpg","https:\/\/habrastorage.org\/getpro\/habr\/post_images\/e59\/bc7\/479\/e59bc7479e66cd96c4d0d5093ef33608.jpg","https:\/\/habrastorage.org\/getpro\/habr\/post_images\/96a\/cae\/aa9\/96acaeaa91222d55c4a77b70c9b02903.jpg","https:\/\/habrastorage.org\/getpro\/habr\/post_images\/393\/d7d\/5d7\/393d7d5d739ea9cecedadff695ca6874.jpg","https:\/\/habrastorage.org\/getpro\/habr\/post_images\/521\/031\/f59\/521031f59a8e7b222c2614b32ba88abd.jpg","https:\/\/habrastorage.org\/getpro\/habr\/post_images\/54e\/044\/683\/54e0446838b2360d695b45e5bacec69d.jpg","https:\/\/habrastorage.org\/getpro\/habr\/post_images\/4d6\/1af\/f71\/4d61aff7169c403c75493790720c0e6e.jpg","https:\/\/habrastorage.org\/getpro\/habr\/post_images\/59a\/e33\/1c5\/59ae331c58bcd16003f51f870b89549e.jpg","https:\/\/habrastorage.org\/getpro\/habr\/post_images\/a04\/1e8\/610\/a041e86102be21acf2c3170cf941d064.jpg","https:\/\/habrastorage.org\/getpro\/habr\/post_images\/909\/8c3\/4a0\/9098c34a06b09bac0597004c6fbf6b1a.jpg","https:\/\/habrastorage.org\/getpro\/habr\/post_images\/39e\/fc2\/31f\/39efc231fb88cee1ef014a36fcb6cc73.jpg","https:\/\/habrastorage.org\/getpro\/habr\/post_images\/80f\/6dd\/126\/80f6dd126255196fc538026ea28656c1.jpg","https:\/\/habrastorage.org\/getpro\/habr\/post_images\/449\/74c\/fe5\/44974cfe559d94d17e6435557757af80.jpg","https:\/\/habrastorage.org\/getpro\/habr\/post_images\/518\/aac\/4e9\/518aac4e9d92ca84a79e6cdb09fea773.jpg","https:\/\/habrastorage.org\/getpro\/habr\/post_images\/9ff\/0d3\/57a\/9ff0d357a3e39d01bcb3d5d07d81d71e.jpg","https:\/\/habrastorage.org\/getpro\/habr\/post_images\/dfb\/7a7\/0b4\/dfb7a70b4fba1c5cb0bf37715a4fe1bd.jpg","https:\/\/habrastorage.org\/getpro\/habr\/post_images\/4c6\/111\/c5c\/4c6111c5c80ab5c4856e68c06880ed4a.jpg","https:\/\/habrastorage.org\/getpro\/habr\/post_images\/cc3\/572\/a05\/cc3572a054dabbe4e32362d845b30cf8.jpg","https:\/\/habrastorage.org\/getpro\/habr\/post_images\/2fd\/77d\/125\/2fd77d1250c0677a24c1c9c358f11663.jpg","https:\/\/habrastorage.org\/getpro\/habr\/post_images\/9ea\/10d\/d6a\/9ea10dd6af4495be38653339010e0a46.jpg","https:\/\/habrastorage.org\/getpro\/habr\/post_images\/1d7\/9f9\/53f\/1d79f953fc755000013d44d15f56fb73.jpg","https:\/\/habrastorage.org\/getpro\/habr\/post_images\/16c\/690\/f58\/16c690f589bf90cc1547edc1ee985ae0.jpg","https:\/\/habrastorage.org\/getpro\/habr\/post_images\/13e\/4e0\/05a\/13e4e005af12def0ee687b008ffc41ac.jpg"]}</script>
    <meta charset="UTF-8">
    <meta name="viewport"
      content="width=device-width,initial-scale=1.0,viewport-fit=cover,maximum-scale=1,user-scalable=0">
    <meta name="referrer" content="unsafe-url">
    <style>
      /* cyrillic-ext */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 400;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9E4kDNxMZdWfMOD5VvmojLazX3dGTP.woff2) format('woff2');
        unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;
      }

      /* cyrillic */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 400;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9E4kDNxMZdWfMOD5Vvk4jLazX3dGTP.woff2) format('woff2');
        unicode-range: U+0301, U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;
      }

      /* latin-ext */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 400;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9E4kDNxMZdWfMOD5VvmYjLazX3dGTP.woff2) format('woff2');
        unicode-range: U+0100-02AF, U+0304, U+0308, U+0329, U+1E00-1E9F, U+1EF2-1EFF, U+2020, U+20A0-20AB, U+20AD-20C0, U+2113, U+2C60-2C7F, U+A720-A7FF;
      }

      /* latin */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 400;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9E4kDNxMZdWfMOD5Vvl4jLazX3dA.woff2) format('woff2');
        unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+0304, U+0308, U+0329, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
      }

      /* cyrillic-ext */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 500;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnZKveSxf6Xl7Gl3LX.woff2) format('woff2');
        unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;
      }

      /* cyrillic */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 500;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnZKveQhf6Xl7Gl3LX.woff2) format('woff2');
        unicode-range: U+0301, U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;
      }

      /* latin-ext */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 500;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnZKveSBf6Xl7Gl3LX.woff2) format('woff2');
        unicode-range: U+0100-02AF, U+0304, U+0308, U+0329, U+1E00-1E9F, U+1EF2-1EFF, U+2020, U+20A0-20AB, U+20AD-20C0, U+2113, U+2C60-2C7F, U+A720-A7FF;
      }

      /* latin */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 500;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnZKveRhf6Xl7Glw.woff2) format('woff2');
        unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+0304, U+0308, U+0329, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
      }

      /* cyrillic-ext */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 700;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnLK3eSxf6Xl7Gl3LX.woff2) format('woff2');
        unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;
      }

      /* cyrillic */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 700;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnLK3eQhf6Xl7Gl3LX.woff2) format('woff2');
        unicode-range: U+0301, U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;
      }

      /* latin-ext */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 700;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnLK3eSBf6Xl7Gl3LX.woff2) format('woff2');
        unicode-range: U+0100-02AF, U+0304, U+0308, U+0329, U+1E00-1E9F, U+1EF2-1EFF, U+2020, U+20A0-20AB, U+20AD-20C0, U+2113, U+2C60-2C7F, U+A720-A7FF;
      }

      /* latin */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 700;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnLK3eRhf6Xl7Glw.woff2) format('woff2');
        unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+0304, U+0308, U+0329, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
      }
    </style>
    <link rel="preload" href="https://assets.habr.com/habr-web/css/theme/light-v1.css" as="style" media="(prefers-color-scheme: light)" /><link rel="preload" href="https://assets.habr.com/habr-web/css/theme/dark-v1.css" as="style" media="(prefers-color-scheme: dark)" /><link id="light-colors" rel="stylesheet" href="https://assets.habr.com/habr-web/css/theme/light-v1.css" media="(prefers-color-scheme: light)" /><link id="dark-colors" rel="stylesheet" href="https://assets.habr.com/habr-web/css/theme/dark-v1.css" media="(prefers-color-scheme: dark)" />
    <script>window.i18nFetch = new Promise((res, rej) => {
          const xhr = new XMLHttpRequest();
          xhr.open('GET', '/js/i18n/ru-compiled.35b2fec11bb79a62419ab67779c2dd82.json');
          xhr.responseType = 'json';
          xhr.onload = function(e) {
            if (this.status === 200) {
              res({ru: xhr.response});
            } else {
              rej(e);
            }
          };
          xhr.send();
        });</script>
    <style>
      .grecaptcha-badge {
        visibility: hidden;
      }
    </style>
    <meta name="habr-version" content="2.233.0">
    
    <meta name="apple-mobile-web-app-status-bar-style" content="#303b44">
    <meta name="msapplication-TileColor" content="#629FBC">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="mobile-web-app-capable" content="yes">
    <link rel="shortcut icon" type="image/png" sizes="16x16" href="https://assets.habr.com/habr-web/img/favicons/favicon-16.png">
    <link rel="shortcut icon" type="image/png" sizes="32x32" href="https://assets.habr.com/habr-web/img/favicons/favicon-32.png">
    <link rel="apple-touch-icon" type="image/png" sizes="76x76" href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-76.png">
    <link rel="apple-touch-icon" type="image/png" sizes="120x120" href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-120.png">
    <link rel="apple-touch-icon" type="image/png" sizes="152x152" href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-152.png">
    <link rel="apple-touch-icon" type="image/png" sizes="180x180" href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-180.png">
    <link rel="apple-touch-icon" type="image/png" sizes="256x256" href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-256.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 320px) and (device-height: 568px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1136x640.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 375px) and (device-height: 812px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2436x1125.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1792x828.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_828x1792.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 375px) and (device-height: 667px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1334x750.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1242x2668.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 414px) and (device-height: 736px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2208x1242.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 375px) and (device-height: 812px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1125x2436.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 414px) and (device-height: 736px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1242x2208.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 1024px) and (device-height: 1366px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2732x2048.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2688x1242.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 834px) and (device-height: 1112px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2224x1668.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 375px) and (device-height: 667px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_750x1334.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 1024px) and (device-height: 1366px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2048x2732.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 834px) and (device-height: 1194px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2388x1668.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 834px) and (device-height: 1112px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1668x2224.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 320px) and (device-height: 568px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_640x1136.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 834px) and (device-height: 1194px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1668x2388.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 768px) and (device-height: 1024px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2048x1536.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 768px) and (device-height: 1024px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1536x2048.png">
    <link rel="mask-icon" color="#77a2b6" href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-120.svg">
    <link crossorigin="use-credentials" href="/manifest.webmanifest" rel="manifest">
    <script async src="https://unpkg.com/pwacompat" crossorigin="anonymous"></script>
    <script>window.yaContextCb = window.yaContextCb || []</script>
    <script src="https://yandex.ru/ads/system/context.js" async></script>
  <link rel="preload" href="https://assets.habr.com/habr-web/css/chunk-vendors.04465f7c.css" as="style"><link rel="preload" href="https://assets.habr.com/habr-web/js/chunk-vendors.3b11d41f.js" as="script"><link rel="preload" href="https://assets.habr.com/habr-web/css/app.20959a76.css" as="style"><link rel="preload" href="https://assets.habr.com/habr-web/js/app.7a97ea6d.js" as="script"><link rel="stylesheet" href="https://assets.habr.com/habr-web/css/chunk-vendors.04465f7c.css"><link rel="stylesheet" href="https://assets.habr.com/habr-web/css/app.20959a76.css"></head>
  <body>
    
    <div id="mount"><div id="app" data-async-called="true"><div class="tm-layout__wrapper"><!--[--><!----><div></div><div class="tm-feature tm-feature"><!----></div><header class="tm-header" data-test-id="header"><div class="tm-page-width"><!--[--><div class="tm-header__container"><div class="tm-header__burger-nav" data-test-id="burger-nav"><button class="tm-header__button tm-header__button_burger" type="button"><svg class="tm-svg-img tm-header__icon tm-header__icon-burger" height="16" width="16"><title>Меню</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#header-burger"></use></svg></button></div><span class="tm-header__logo-wrap"><a class="tm-header__logo tm-header__logo_hl-ru tm-header__logo" href="/ru/"><svg class="tm-svg-img tm-header__icon" height="16" width="16"><title>Хабр</title><use xlink:href="/img/habr-logo-ru.svg#logo"></use></svg></a><span style="display:none;" class="tm-header__beta-sign">β</span></span><!----><div class="tm-header-user-menu tm-header_user-menu"><a href="/ru/search/" class="tm-header-user-menu__item tm-header-user-menu__search" data-test-id="search-button"><svg class="tm-svg-img tm-header-user-menu__icon tm-header-user-menu__icon_search" height="24" width="24"><title>Поиск</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#search"></use></svg></a><!----><!----><div class="tm-header-user-menu__item tm-header-user-menu__write"><div><svg class="tm-svg-img tm-header-user-menu__icon tm-header-user-menu__icon_write" height="24" width="24"><title>Написать публикацию</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#write"></use></svg></div><!----></div><!--[--><div class="tm-header-user-menu__item"><button class="tm-header-user-menu__toggle" data-test-id="user-menu-settings"><svg class="tm-svg-img tm-header-user-menu__icon" height="24" width="24"><title>Настройки</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#page-settings"></use></svg></button></div><a href="https://habr.com/kek/v1/auth/habrahabr/?back=/ru/companies/jugru/articles/416725/&amp;hl=ru" rel="nofollow" class="tm-header-user-menu__item"><!--[--><button class="btn btn_solid btn_small tm-header-user-menu__login" type="button"><!--[-->Войти<!--]--></button><!--]--></a><!--]--><!----><!--teleport start--><!--teleport end--><!----></div></div><!--]--></div></header><div class="tm-layout"><div class="tm-page-progress-bar"></div><!----><!----><div class="tm-page-width"><!--[--><!--]--></div><main class="tm-layout__container"><div class="tm-page" hl="ru" companyname="jugru" data-async-called="true" style="--0c809c5a:16px;--a086013e:100%;--7c457026:0;"><div class="tm-page-width"><!--[--><div class="tm-page__header"><!--[--><div class="tm-company-card__branding tm-company-card__branding_loading tm-company-article__branding" data-test-id="company-card-branding"><div class="tm-company-card__branding-placeholder"><!----></div><a href="http://jugru.org/?utm_medium=habr&amp;utm_source=header2025"><img class="tm-company-card__branding-image" src="//habrastorage.org/getpro/habr/branding/4f3/90a/544/4f390a544efda63b4d31ab7d9c41396e.jpeg"></a></div><!--]--></div><div class="tm-page__wrapper"><div class="tm-page__main_has-sidebar tm-page__main"><div class="pull-down"><!----><div class="pull-down__header" style="height:0px;"><div class="pull-down__content" style="bottom:10px;"><svg class="tm-svg-img pull-down__icon pull-down__arrow" height="24" width="24"><title>Обновить</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#pull-arrow"></use></svg></div></div><!--[--><!--[--><div class="tm-article-presenter"><!--[--><!--]--><div class="tm-article-presenter__body" data-test-id="article-body"><div class="tm-misprint-area"><div class="tm-misprint-area__wrapper"><!--[--><article class="tm-article-presenter__content tm-article-presenter__content_narrow"><!--[--><div class="tm-article-presenter__header"><!--[--><!--]--><div class="tm-article-snippet tm-article-snippet tm-article-presenter__snippet"><!--[--><!--]--><div class="tm-article-snippet__meta-container"><div class="tm-article-snippet__meta"><span class="tm-user-info tm-article-snippet__author"><a href="/ru/users/olegchir/" class="tm-user-info__userpic" data-test-id="user-info-pic" title="olegchir"><div class="tm-entity-image"><img alt="" class="tm-entity-image__pic" height="32" src="//habrastorage.org/r/w64/getpro/habr/avatars/97a/7a1/7a3/97a7a17a34ac8e5c74105213ae932c4f.jpg" width="32"></div></a><span class="tm-user-info__user tm-user-info__user_appearance-default" data-test-id="user-info-description"><a href="/ru/users/olegchir/" class="tm-user-info__username">olegchir <!----></a><!--[--><span class="tm-article-datetime-published"><time datetime="2018-07-10T15:25:18.000Z" title="2018-07-10, 18:25">10  июл  2018 в 18:25</time></span><!--]--></span></span></div><!----></div><h1 class="tm-title tm-title_h1" lang="ru" data-test-id="articleTitle"><span>Kotlin DSL: Теория и Практика</span></h1><div class="tm-article-snippet__stats" data-test-id="articleStats"><!----><div class="tm-article-reading-time"><span class="tm-svg-icon__wrapper tm-article-reading-time__icon"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Время на прочтение</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#clock"></use></svg></span><span class="tm-article-reading-time__label">21 мин</span></div><span class="tm-icon-counter tm-data-icons__item"><svg class="tm-svg-img tm-icon-counter__icon" height="24" width="24"><title>Количество просмотров</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-views"></use></svg><span class="tm-icon-counter__value" title="15664">16K</span></span></div><div class="tm-publication-hubs__container" data-test-id="articleHubsList"><div class="tm-publication-hubs"><!--[--><span class="tm-publication-hub__link-container"><a href="/ru/companies/jugru/articles/" class="tm-publication-hub__link"><!--[--><span>Блог компании JUG Ru Group</span><!----><!--]--></a></span><span class="tm-publication-hub__link-container"><a href="/ru/hubs/java/" class="tm-publication-hub__link"><!--[--><span>Java</span><span class="tm-article-snippet__profiled-hub" title="Профильный хаб">*</span><!--]--></a></span><span class="tm-publication-hub__link-container"><a href="/ru/hubs/kotlin/" class="tm-publication-hub__link"><!--[--><span>Kotlin</span><span class="tm-article-snippet__profiled-hub" title="Профильный хаб">*</span><!--]--></a></span><span class="tm-publication-hub__link-container"><a href="/ru/hubs/compilers/" class="tm-publication-hub__link"><!--[--><span>Компиляторы</span><span class="tm-article-snippet__profiled-hub" title="Профильный хаб">*</span><!--]--></a></span><span class="tm-publication-hub__link-container"><a href="/ru/hubs/programming/" class="tm-publication-hub__link"><!--[--><span>Программирование</span><span class="tm-article-snippet__profiled-hub" title="Профильный хаб">*</span><!--]--></a></span><!--]--></div></div><!----><!----><!----></div></div><!--[--><!----><div class="tm-article-body" data-gallery-root lang="ru"><div><!--[--><img height="1" src="https://www.facebook.com/tr?id=1067365970024945&amp;ev=PageView&amp;noscript=1" style="display:none;" width="1"><!--]--></div><div id="post-content-body"><div><div class="article-formatted-body article-formatted-body article-formatted-body_version-1"><div xmlns="http://www.w3.org/1999/xhtml">Разработка тестов приложения — не самое приятное занятие. Этот процесс занимает долгое время, требует большой концентрации и при этом крайне востребован. Язык Kotlin дает набор инструментов, который позволяет довольно легко построить собственный проблемно-ориентированный язык (DSL). Есть опыт, когда Kotlin DSL заменил билдеры и статические методы для тестирования модуля планирования ресурсов, что превратило добавление новых тестов и поддержку старых из рутины в увлекательный процесс.<br/>
<br/>
По ходу статьи мы разберем все основные инструменты из арсенала разработчика и то, как их можно комбинировать для решения задач тестирования. Мы с вами проделаем путь от проектирования Идеального Теста до запуска максимально приближенного, чистого и понятного теста для системы планирования ресурсов на основе Kotlin.<br/>
<br/>
Статья будет полезна практикующим инженерам, тем, кто рассматривает Kotlin как язык для комфортного написания компактных тестов, и тем, кто хочет улучшить процесс тестирования в своем проекте.<br/>
<br/>
<div class="oembed"><div><div style="left: 0; width: 100%; height: 0; position: relative; padding-bottom: 56.2493%;"><div class="tm-iframe_temp" data-src="https://www.youtube.com/embed/q_UM1EY2S5g?rel=0&amp;showinfo=1" data-style="border: 0; top: 0; left: 0; width: 100%; height: 100%; position: absolute;" id="" width=""></div></div></div></div><br/>
<br/>
Статья основана на докладе Ивана Осипова (<a href="https://habr.com/users/i_osipov/" class="user_link">i_osipov</a>) на конференции JPoint. Дальнейшее повествование ведется от его лица. Иван работает программистом в компании Haulmont. Основной продукт компании – CUBA, платформа для разработки энтерпрайза и различных веб-приложений. В том числе на этой платформе делаются и аутсорсинговые проекты, среди которых недавно был проект в области образования, в котором Иван занимался построением расписания для образовательного учреждения. Так сложилось, что последние три года Иван так или иначе работает с планировщиками, и конкретно в Haulmont в течение года они этот самый планировщик тестируют. <br/>
<a name="habracut"></a><br/>
Для желающих позапускать примеры — <a href="https://github.com/ivan-osipov/kotlin-dsl-example">держите ссылку на GitHub</a>. По ссылке вы найдете весь код, который сегодня мы с вами будем разбирать, запускать и писать. Открывайте код и вперед!<br/>
<br/>
<img src="https://habrastorage.org/r/w780q1/getpro/habr/post_images/ec3/fa3/670/ec3fa3670fd1c8a3cf7222f7e746933c.jpg" data-src="https://habrastorage.org/getpro/habr/post_images/ec3/fa3/670/ec3fa3670fd1c8a3cf7222f7e746933c.jpg" data-blurred="true"/><br/>
<br/>
Сегодня мы обсудим:<br/>
<br/>
<ul>
<li>что такое проблемно-ориентированные языки; <br/>
</li>
<li>встроенные проблемно-ориентированные языки; <br/>
</li>
<li>построение расписания для образовательного учреждения; <br/>
</li>
<li>как это все тестируется вместе с Kotlin. <br/>
</li>
</ul><br/>
Сегодня я подробно расскажу об инструментах, которые у нас есть в языке, покажу вам несколько демок, и мы напишем целиком тест от начала и до конца. При этом я хотел бы быть более объективным, поэтому расскажу о каких-то минусах, которые я для себя обозначил при разработке.<br/>
<br/>
Начнем с разговора о модуле построения расписания. Итак, построение расписания происходит в несколько этапов. Каждый из этих этапов нужно тестировать отдельно. Нужно понимать, что несмотря на то, что этапы разные, модель данных у нас общая.<br/>
<br/>
<img src="https://habrastorage.org/r/w780q1/getpro/habr/post_images/031/be4/27d/031be427d58c5073a3bc619cbed65792.jpg" data-src="https://habrastorage.org/getpro/habr/post_images/031/be4/27d/031be427d58c5073a3bc619cbed65792.jpg" data-blurred="true"/><br/>
<br/>
Этот процесс можно представить следующим образом: на входе имеются какие-то данные с общей моделью, на выходе – расписание. Данные проходят валидацию, фильтрацию, затем строятся учебные группы. Имеется в виду предметная область расписания для учебного учреждения. На основе построенных групп и на основе каких-то других данных мы размещаем занятие. Сегодня мы будем говорить только про последний этап – про размещение занятий.<br/>
<br/>
<img src="https://habrastorage.org/r/w780q1/getpro/habr/post_images/f64/032/4b1/f640324b1a2ff556a4da892822847a9c.jpg" data-src="https://habrastorage.org/getpro/habr/post_images/f64/032/4b1/f640324b1a2ff556a4da892822847a9c.jpg" data-blurred="true"/><br/>
<br/>
Немного про тестирование планировщика.<br/>
<br/>
Во-первых, как вы уже поняли, разные этапы должны тестироваться по отдельности. Можно выделить более-менее стандартный процесс запуска тестирования: есть инициализация данных, есть запуск планировщика, есть проверка результатов этого самого планировщика. Есть огромное количество различных бизнес-кейсов, которые нужно покрыть и разных ситуаций, которые нужно учитывать, чтобы при построении расписания эти ситуации также сохранялись. <br/>
<br/>
Модель порой бывает развесистой, и для того, чтобы создать одну-единственную сущность, необходимо проинициализировать пять дополнительных сущностей, а то и больше. Таким образом, суммарно получается большое количество кода, который мы пишем снова и снова для каждого теста. Поддержка таких тестов занимает значительное количество времени. Если захочется обновить модель, а такое иногда происходит, то масштаб изменений затрагивает и тесты.<br/>
<br/>
Напишем тест:<br/>
<br/>
<img src="https://habrastorage.org/r/w780q1/getpro/habr/post_images/fda/0f5/94d/fda0f594d14b8043054bcae7fe3315ad.jpg" data-src="https://habrastorage.org/getpro/habr/post_images/fda/0f5/94d/fda0f594d14b8043054bcae7fe3315ad.jpg" data-blurred="true"/><br/>
<br/>
Давайте напишем самый простой тест для того, чтобы вы в общем понимали картину. <br/>
Что первое приходит на ум, когда думаешь про тестирование? Возможно, это несколько примитивные тесты такого вида: создаешь класс, в нем создаешь метод, помечаешь его аннотацией <i><a href="https://habr.com/users/test/" class="user_link">Test</a></i>. В итоге, мы пользуемся возможностями JUnit, и инициализируем какие-то данные, значения по умолчанию, затем специфические для теста значения, делаем все то же самое для остальной части модели, и, наконец, создаем объект-планировщик, передаем в него наши данные, запускаем, получаем результаты и проверяем их. Более-менее стандартный процесс. Но в нем, очевидно, есть дублирование кода. Первое, что приходит на ум, это возможность все вынести в статические методы. Раз есть куча значений по умолчанию, почему бы это не скрыть? <br/>
<br/>
<img src="https://habrastorage.org/r/w780q1/getpro/habr/post_images/521/543/590/521543590a00c6101abd4fcefd345e04.jpg" data-src="https://habrastorage.org/getpro/habr/post_images/521/543/590/521543590a00c6101abd4fcefd345e04.jpg" data-blurred="true"/><br/>
<br/>
Это хороший первый шаг по пути уменьшения дублирования. <br/>
<br/>
<img src="https://habrastorage.org/r/w780q1/getpro/habr/post_images/c7f/c57/11c/c7fc5711ccf2a4e9dfb626ea64cffb9b.jpg" data-src="https://habrastorage.org/getpro/habr/post_images/c7f/c57/11c/c7fc5711ccf2a4e9dfb626ea64cffb9b.jpg" data-blurred="true"/><br/>
<br/>
Глядя на это, ты понимаешь, что хотелось бы модель держать более компактно. Тут у нас появляется паттерн-строитель, в котором где-то под капотом инициализируется значение по умолчанию, и тут же инициализируются специфичные для теста значения. Становится уже лучше, однако, мы все еще пишем boilerplate-код, и пишем его мы каждый раз заново. Представьте 200 тестов – 200 раз придется написать эти три строчки. Очевидно, хотелось бы от этого как-то избавиться. Развивая идею, мы приходим к некоторому пределу. Так, например, мы можем создать паттерн-билдер вообще для всего.<br/>
<br/>
<img src="https://habrastorage.org/r/w780q1/getpro/habr/post_images/259/e9b/7a3/259e9b7a39e84a41466572b38afc280d.jpg" data-src="https://habrastorage.org/getpro/habr/post_images/259/e9b/7a3/259e9b7a39e84a41466572b38afc280d.jpg" data-blurred="true"/><br/>
<br/>
Можно создавать планировщик с нуля и до конца, задавать все нужные нам значения, запускать планирование и все здорово. Если взглянуть подробно на этот пример и детально его разобрать, то окажется, что пишется большое количество ненужного кода. Хотелось бы сделать тесты более читаемыми, чтобы можно было взглянуть и сразу понять, не вникая в паттерны и так далее. <br/>
<br/>
Итак, у нас есть какое-то количество ненужного кода. Несложная математика подсказывает, что тут на 55% больше букв, чем нам необходимо, и хотелось бы как-то от них уйти.<br/>
<br/>
<img src="https://habrastorage.org/r/w780q1/getpro/habr/post_images/d55/610/ef7/d55610ef71d368b8d16c1fdef35cd2c5.jpg" data-src="https://habrastorage.org/getpro/habr/post_images/d55/610/ef7/d55610ef71d368b8d16c1fdef35cd2c5.jpg" data-blurred="true"/><br/>
<br/>
Спустя некоторое время поддержка наших тестов оказывается дороже, потому что кода поддерживать нужно больше. Иногда, если мы не предпринимаем каких-то усилий, читаемость либо оставляет желать лучшего, либо получается приемлемо, но нам бы хотелось еще лучше. Возможно, впоследствии мы начнем добавлять какие-то фреймворки, библиотеки, чтобы тесты писать было проще. Благодаря этому, мы повышаем уровень вхождения в тестирование нашего приложения. Здесь у нас и так сложное приложение, уровень вхождения в его тестирование значителен, а мы его еще сильней повышаем.<br/>
<br/>
<h2>Идеальный тест</h2><br/>
Здорово говорить, как все плохо, но давайте подумаем, как бы было очень хорошо. Идеальный пример, который мы хотели бы получить в результате:<br/>
<br/>
<img src="https://habrastorage.org/r/w780q1/getpro/habr/post_images/e2b/7c5/f48/e2b7c5f48dbd065e95b1617ad10622ba.jpg" data-src="https://habrastorage.org/getpro/habr/post_images/e2b/7c5/f48/e2b7c5f48dbd065e95b1617ad10622ba.jpg" data-blurred="true"/><br/>
<br/>
Представим, что есть некоторая декларация, в которой мы скажем, что это тест с определенным названием, и хочется использовать пробел для разделения слов в названии, а не CamelCase. Мы строим расписание, у нас есть какие-то данные, и результаты планировщика проверяются. Так как мы работаем в основном с Java, и весь код основного приложения написан на этом языке, хочется иметь еще и совместимые возможности в тестировании. Инициализировать данные хотелось бы максимально очевидно для читателя. Хочется инициализировать некоторые общие данные и часть модели, которая нам необходима. Например, создавать студентов, преподавателей, и описывать, когда они доступны. Вот это — наш идеальный пример.<br/>
<br/>
<h2>Domain Specific Language</h2><br/>
<img src="https://habrastorage.org/r/w780q1/getpro/habr/post_images/f81/c79/0a9/f81c790a921e43d645fc7380607cf8ea.jpg" data-src="https://habrastorage.org/getpro/habr/post_images/f81/c79/0a9/f81c790a921e43d645fc7380607cf8ea.jpg" data-blurred="true"/><br/>
<br/>
Глядя на это все, начинает казаться, что это похоже на некоторый проблемно-ориентированный язык. Нужно понять, что это такое и в чем разница. Языки можно разделить на два типа: языки общего назначения (то, на чем мы с вами пишем постоянно, решаем абсолютно любые задачи и справляемся абсолютно со всем) и языки проблемно-ориентированные. Так, например, SQL нам помогает отлично вытаскивать данные из базы, а какие-то другие языки также помогают решать другие специфичные проблемы.<br/>
<br/>
<img src="https://habrastorage.org/r/w780q1/getpro/habr/post_images/2f8/e45/2f6/2f8e452f62f39f0f56a2c73e355dddcb.jpg" data-src="https://habrastorage.org/getpro/habr/post_images/2f8/e45/2f6/2f8e452f62f39f0f56a2c73e355dddcb.jpg" data-blurred="true"/><br/>
<br/>
Один из способов реализации проблемно-ориентированных языков — встраиваемые языки, или внутренние. Такие языки реализуются на основе языка общего назначения. То есть, несколько конструкций нашего языка общего назначения, образуют что-то вроде базиса – то, чем мы пользуемся при работе с проблемно-ориентированным языком. При этом, конечно, у появляется возможность в проблемно-ориентированном языке использовать все фичи и особенности, которые к приходят из языка общего назначения. <br/>
<br/>
<img src="https://habrastorage.org/r/w780q1/getpro/habr/post_images/07f/4cb/57f/07f4cb57f84ba884bd558ee8e97202a2.jpg" data-src="https://habrastorage.org/getpro/habr/post_images/07f/4cb/57f/07f4cb57f84ba884bd558ee8e97202a2.jpg" data-blurred="true"/><br/>
<br/>
Снова взглянем на наш идеальный пример и подумаем, какой язык выбрать. Варианта у нас три.<br/>
<br/>
<img src="https://habrastorage.org/r/w780q1/getpro/habr/post_images/d1d/b21/4b3/d1db214b39b5620875350b382622e662.jpg" data-src="https://habrastorage.org/getpro/habr/post_images/d1d/b21/4b3/d1db214b39b5620875350b382622e662.jpg" data-blurred="true"/><br/>
<br/>
Первый вариант – Groovy. Замечательный, динамичный язык, который отлично показал себя в построении проблемно-ориентированных языков. Снова можно привести пример build файла в Gradle, которым многие из нас пользуются. Eще есть Scala, которая имеет огромное количество возможностей для реализации чего-то своего. И наконец, есть Kotlin, который нам также помогает строить проблемно-ориентированный язык, и сегодня именно о нем пойдет речь. Я бы не хотел разводить войн и сравнивать Kotlin с чем-то другим, скорее, это остается на вашей совести. Сегодня я покажу вам то, что есть в Kotlin для разработки проблемно-ориентированных языков. Когда вы захотите сравнить это и сказать, что какой-то язык лучше, вы сможете вернуться к этой статье и легко увидеть разницу. <br/>
<br/>
<img src="https://habrastorage.org/r/w780q1/getpro/habr/post_images/050/2e7/29e/0502e729ebf030ea5e4d9f038a4b7cc6.jpg" data-src="https://habrastorage.org/getpro/habr/post_images/050/2e7/29e/0502e729ebf030ea5e4d9f038a4b7cc6.jpg" data-blurred="true"/><br/>
<br/>
Что дает нам Kotlin для разработки проблемно-ориентированного языка? <br/>
<br/>
Во-первых, это статическая типизация, и все отсюда вытекающие. На этапе компиляции обнаруживается большое количество проблем, и это очень сильно спасает, особенно в том случае, когда не хочется в тестах получать проблемы, связанные с синтаксисом и написанием. <br/>
Затем, есть отличная система вывода типов, которая приходит из Kotlin. Это замечательно, потому что нет потребности снова и снова писать какие-то типы, все выводится компилятором на ура.<br/>
<br/>
В-третьих, есть отличная поддержка среды разработки, и это неудивительно, ведь та же компания, делает основную на сегодня среду разработки, и она же делает Kotlin. <br/>
Наконец, внутри DSL, очевидно, мы можем использовать Kotlin. На мой субъективный взгляд, поддерживать DSL намного проще, чем поддерживать утилитные классы. Как вы увидите далее, читаемость оказывается немного лучше билдеров. Что я понимаю под «лучше»: у вас получается несколько меньше синтаксиса, который вам необходимо писать, — тот, кто будет читать ваш проблемно-ориентированный язык, будет быстрее это воспринимать. Наконец, написать свой велосипед намного веселее! Но на самом деле, реализовать проблемно-ориентированный язык намного проще, чем изучить какой-то новый фреймворк. <br/>
<br/>
Я напомню еще раз <a href="http://github.com/ivan-osipov/kotlin-dsl-example">ссылку на GitHub</a>, если вы захотите писать демки дальше, то вы можете зайти и забрать код по ссылке. <br/>
<br/>
<h2>Проектирование идеала на Kotlin</h2><br/>
Перейдем к проектированию нашего идеала, но уже на Kotlin. Взглянем на наш пример:<br/>
<br/>
<img src="https://habrastorage.org/r/w1560/getpro/habr/post_images/5e3/695/850/5e3695850435a204b9cbb3b94f6f7635.png" data-src="https://habrastorage.org/getpro/habr/post_images/5e3/695/850/5e3695850435a204b9cbb3b94f6f7635.png"/><br/>
<br/>
И поэтапно начнем его отстраивать.<br/>
<br/>
У нас есть тест, который превращается в функцию в Kotlin, которую можно именовать, используя пробелы. <br/>
<br/>
<img src="https://habrastorage.org/r/w1560/getpro/habr/post_images/03d/699/a71/03d699a71ecf86e0e5c03b7a6de57995.png" data-src="https://habrastorage.org/getpro/habr/post_images/03d/699/a71/03d699a71ecf86e0e5c03b7a6de57995.png"/><br/>
<br/>
Пометим с помощью аннотации <a href="https://habr.com/users/test/" class="user_link">Test</a>, которая нам доступна из JUnit. В Kotlin можно пользоваться сокращенной формой записи функций и через <i>=</i> избавиться от лишних фигурных скобок для самой функции. <br/>
<br/>
Schedule у  нас превращается в блок. То же самое происходит с большим количеством конструкций, так как мы все-таки работаем в Kotlin. <br/>
<br/>
<img src="https://habrastorage.org/r/w1560/getpro/habr/post_images/a7b/db9/656/a7bdb965641ca434f1eba5e7781b9b53.png" data-src="https://habrastorage.org/getpro/habr/post_images/a7b/db9/656/a7bdb965641ca434f1eba5e7781b9b53.png"/><br/>
<br/>
Перейдем к оставшейся части. Опять появляются фигурные скобки, от них мы никак не избавимся, но, по крайней мере, попытаемся приблизиться к нашему примеру. Производя конструкции с пробелами, мы могли бы как-то изощриться и сделать их как-то по-другому, но мне кажется, что лучше все-таки сделать обычные методы, которые будут в себя инкапсулировать обработку, но в целом это будет очевидно для пользователя. <br/>
<br/>
<img src="https://habrastorage.org/r/w1560/getpro/habr/post_images/378/6e6/eaf/3786e6eafdb8ebd14c344af30698df56.png" data-src="https://habrastorage.org/getpro/habr/post_images/378/6e6/eaf/3786e6eafdb8ebd14c344af30698df56.png"/><br/>
<br/>
Наш student превращается в некоторый блок, в котором идет работа со свойствами, с методами, и это мы дальше с вами будем разбирать.<br/>
<br/>
<img width="600" src="https://habrastorage.org/r/w1560/getpro/habr/post_images/76b/a76/554/76ba76554585689a4c2562167fd26833.png" data-src="https://habrastorage.org/getpro/habr/post_images/76b/a76/554/76ba76554585689a4c2562167fd26833.png"/><br/>
<br/>
Наконец, преподаватели. Здесь у нас появляются некоторые вложенные блоки. <br/>
<br/>
<img src="https://habrastorage.org/r/w1560/getpro/habr/post_images/deb/a5d/f0a/deba5df0a67a08566e07370bf2f70bc0.png" data-src="https://habrastorage.org/getpro/habr/post_images/deb/a5d/f0a/deba5df0a67a08566e07370bf2f70bc0.png"/><br/>
<br/>
В коде ниже мы переходим к проверкам. Нам нужны проверки на совместимость с Java-языками – и да, Kotlin совместим с Java.<br/>
<br/>
<img src="https://habrastorage.org/r/w1560/getpro/habr/post_images/8aa/09d/a05/8aa09da05c7c48282e01b0ea409e0f3c.png" data-src="https://habrastorage.org/getpro/habr/post_images/8aa/09d/a05/8aa09da05c7c48282e01b0ea409e0f3c.png"/><br/>
<br/>
<h2>Арсенал разработки DSL на Kotlin</h2><br/>
<img src="https://habrastorage.org/r/w780q1/getpro/habr/post_images/5f6/113/6ef/5f61136ef41733e6fb88c5ff17d6975f.jpg" data-src="https://habrastorage.org/getpro/habr/post_images/5f6/113/6ef/5f61136ef41733e6fb88c5ff17d6975f.jpg" data-blurred="true"/><br/>
<br/>
Перейдем к перечню инструментов, которые у нас есть. Здесь я привел табличку может быть, в ней перечислено все, что необходимо для разработки проблемно-ориентированных языков в Kotlin. Можно время от времени к ней возвращаться и освежать память.<br/>
<br/>
В таблице приведено некоторое сравнение проблемно-ориентированного синтаксиса и обычного синтаксиса, который имеется в языке.<br/>
<br/>
<h2>Лямбды в Kotlin</h2><br/>
<code>val lambda: () -&gt; Unit = { }</code><br/>
<br/>
Начнем с самого базового кирпичика, который у нас есть в Kotlin – это лямбды. <br/>
Сегодня под типом лямбды я буду подразумевать просто функциональный тип. Лямбды обозначаются следующим образом: <code>(типы параметров) -&gt; возвращаемый тип</code>. <br/>
<br/>
Саму лямбду мы инициализируем с помощью фигурных скобок, внутри них мы можем записать какой-то код, который будет вызван. То есть лямбда, по сути, просто в себя прячет этот код. Запуск такой лямбды выглядит как вызов функции, просто круглые скобки.<br/>
<br/>
<img src="https://habrastorage.org/r/w780q1/getpro/habr/post_images/a48/f4d/d49/a48f4dd497c8aa6b93ab2043e014ca02.jpg" data-src="https://habrastorage.org/getpro/habr/post_images/a48/f4d/d49/a48f4dd497c8aa6b93ab2043e014ca02.jpg" data-blurred="true"/><br/>
<br/>
Если мы хотим передать какой-то параметр, во-первых, мы должны описать это в типе. <br/>
Во-вторых, мы имеем доступ к идентификатору по умолчанию it, которым мы можем пользоваться, однако, если нас это как-то не устраивает, можно задать своё имя параметра и пользоваться ими. <br/>
<br/>
<img src="https://habrastorage.org/r/w780q1/getpro/habr/post_images/194/fab/626/194fab62612fb71e6a5f148193ec1ff9.jpg" data-src="https://habrastorage.org/getpro/habr/post_images/194/fab/626/194fab62612fb71e6a5f148193ec1ff9.jpg" data-blurred="true"/><br/>
<br/>
При этом, мы можем пропустить использование этого параметра и воспользоваться знаком нижнего подчеркивания для того, чтобы не плодить идентификаторы. В этом случае для игнорирования идентификатора можно было бы вообще ничего не писать, но в общем случае для нескольких параметров есть упомянутый "_".<br/>
<br/>
<img src="https://habrastorage.org/r/w780q1/getpro/habr/post_images/1ff/80e/de2/1ff80ede232393839186b9345065700c.jpg" data-src="https://habrastorage.org/getpro/habr/post_images/1ff/80e/de2/1ff80ede232393839186b9345065700c.jpg" data-blurred="true"/><br/>
<br/>
Если мы захотим передать больше одного параметра, нужно явно определить их идентификаторы. <br/>
<br/>
<img src="https://habrastorage.org/r/w780q1/getpro/habr/post_images/c8d/d2b/952/c8dd2b952caa82b67157f41dc79535b0.jpg" data-src="https://habrastorage.org/getpro/habr/post_images/c8d/d2b/952/c8dd2b952caa82b67157f41dc79535b0.jpg" data-blurred="true"/><br/>
<br/>
Наконец, что будет, если мы попробуем передать лямбду в какую-то функцию и запустить ее там. Выглядит это в начальном каком-то приближении следующим образом: у нас есть функция, в которую мы передаем лямбду в фигурных скобках, и, если в Kotlin лямбда написана в качестве последнего параметра, мы ее можем как бы вынести за эти скобки. <br/>
<br/>
<img src="https://habrastorage.org/r/w780q1/getpro/habr/post_images/b80/d7c/0d8/b80d7c0d814f3c51a91f2c224707a2d5.jpg" data-src="https://habrastorage.org/getpro/habr/post_images/b80/d7c/0d8/b80d7c0d814f3c51a91f2c224707a2d5.jpg" data-blurred="true"/><br/>
<br/>
Если в скобках не осталось ничего, скобки мы можем упразднить. Тем, кто знаком с Groovy, это должно быть знакомо.<br/>
<br/>
<img src="https://habrastorage.org/r/w780q1/getpro/habr/post_images/74b/5dd/a95/74b5dda953b1df973a8d893f7a615195.jpg" data-src="https://habrastorage.org/getpro/habr/post_images/74b/5dd/a95/74b5dda953b1df973a8d893f7a615195.jpg" data-blurred="true"/><br/>
<br/>
Где это применяется? Абсолютно везде. То есть те самые фигурные скобки, про которые мы с вами уже говорили, их мы и используем, это и есть те самые лямбды. <br/>
<br/>
<img src="https://habrastorage.org/r/w780q1/getpro/habr/post_images/69e/4bd/781/69e4bd781897ef0515384f81367899cc.jpg" data-src="https://habrastorage.org/getpro/habr/post_images/69e/4bd/781/69e4bd781897ef0515384f81367899cc.jpg" data-blurred="true"/><br/>
<br/>
Теперь посмотрим на одну из разновидностей лямбд, я их называю лямбды с контекстом. Вы встретите какие-то другие названия, например, lambda with receiver, и отличаются они от обычных лямбд при объявлении типа следующим образом: слева мы дописываем какой-то класс контекста, это может быть любой класс. <br/>
<br/>
<img src="https://habrastorage.org/r/w780q1/getpro/habr/post_images/8bd/375/5b1/8bd3755b1085f3049a7ea32c7cc41f79.jpg" data-src="https://habrastorage.org/getpro/habr/post_images/8bd/375/5b1/8bd3755b1085f3049a7ea32c7cc41f79.jpg" data-blurred="true"/><br/>
<br/>
Для чего это нужно? Это нужно для того, чтобы внутри лямбды мы имели доступ к ключевому слову this – это самое ключевое слово, указывает нам на наш контекст, то есть на некоторый объект, который мы связали с нашей лямбдой. Так, например, мы можем создать лямбду, которая будет выводить некоторую строку, естественно, мы воспользуемся классом строки для объявления контекста и вызов такой лямбды будет выглядеть вот так:<br/>
<br/>
<img src="https://habrastorage.org/r/w780q1/getpro/habr/post_images/d80/552/181/d80552181518f155fc596c1bb3ddf2aa.jpg" data-src="https://habrastorage.org/getpro/habr/post_images/d80/552/181/d80552181518f155fc596c1bb3ddf2aa.jpg" data-blurred="true"/><br/>
<br/>
<img src="https://habrastorage.org/r/w780q1/getpro/habr/post_images/788/63d/b17/78863db1732d9b92bff62bf82060771a.jpg" data-src="https://habrastorage.org/getpro/habr/post_images/788/63d/b17/78863db1732d9b92bff62bf82060771a.jpg" data-blurred="true"/><br/>
<br/>
<img src="https://habrastorage.org/r/w780q1/getpro/habr/post_images/770/a1b/038/770a1b0388cd2380c491cdf5ca8c344c.jpg" data-src="https://habrastorage.org/getpro/habr/post_images/770/a1b/038/770a1b0388cd2380c491cdf5ca8c344c.jpg" data-blurred="true"/><br/>
<br/>
Если вам хочется передать контекст в качестве параметра, вы можете это точно также сделать. Однако, совсем передать контекст мы не можем, то есть лямбда с контекстом требует – внимание! – контекста, да. Что будет, если мы начнем передавать лямбду с контекстом в какой-то метод? Вот посмотрим снова на наш метод exec:<br/>
<br/>
<img src="https://habrastorage.org/r/w780q1/getpro/habr/post_images/15b/f36/3d9/15bf363d94919f7c73d775c5d28c6c53.jpg" data-src="https://habrastorage.org/getpro/habr/post_images/15b/f36/3d9/15bf363d94919f7c73d775c5d28c6c53.jpg" data-blurred="true"/><br/>
<br/>
Переименуем его в метод student – ничего не изменилось:<br/>
<br/>
<img src="https://habrastorage.org/r/w780q1/getpro/habr/post_images/e12/4cc/e3b/e124cce3bd7bdb776c3e946edf8ec52c.jpg" data-src="https://habrastorage.org/getpro/habr/post_images/e12/4cc/e3b/e124cce3bd7bdb776c3e946edf8ec52c.jpg" data-blurred="true"/><br/>
<br/>
Так мы постепенно движемся к нашей конструкции, конструкции student, которая под фигурными скобками скрывает всю инициализацию. <br/>
<br/>
<img src="https://habrastorage.org/r/w780q1/getpro/habr/post_images/eba/286/8b3/eba2868b306f476c35df51d8af500335.jpg" data-src="https://habrastorage.org/getpro/habr/post_images/eba/286/8b3/eba2868b306f476c35df51d8af500335.jpg" data-blurred="true"/><br/>
<br/>
Давайте в ней разберемся. У нас есть какая-то функция student, которая принимает лямбду с контекстом Student. <br/>
<br/>
<img src="https://habrastorage.org/r/w780q1/getpro/habr/post_images/d3f/954/e2a/d3f954e2a7016ecf31a081559674d01f.jpg" data-src="https://habrastorage.org/getpro/habr/post_images/d3f/954/e2a/d3f954e2a7016ecf31a081559674d01f.jpg" data-blurred="true"/><br/>
<br/>
Очевидно, нам нужен контекст.<br/>
<br/>
<img src="https://habrastorage.org/r/w780q1/getpro/habr/post_images/362/4d8/3be/3624d83be81ee01223ad758e9e81c94d.jpg" data-src="https://habrastorage.org/getpro/habr/post_images/362/4d8/3be/3624d83be81ee01223ad758e9e81c94d.jpg" data-blurred="true"/><br/>
<br/>
Здесь мы создаем объект и на нем же запускаем эту лямбду. <br/>
<br/>
<img src="https://habrastorage.org/r/w780q1/getpro/habr/post_images/cab/d4a/940/cabd4a940deacfcdcb680c4916b29eae.jpg" data-src="https://habrastorage.org/getpro/habr/post_images/cab/d4a/940/cabd4a940deacfcdcb680c4916b29eae.jpg" data-blurred="true"/><br/>
<br/>
В результате, также мы можем перед запуском лямбды проинициализировать какие-то дефолтные значения, таким образом под функцию мы инкапсулируем все, что нам необходимо. <br/>
<br/>
<img src="https://habrastorage.org/r/w780q1/getpro/habr/post_images/0b4/572/421/0b457242103fc70de806c9de62234135.jpg" data-src="https://habrastorage.org/getpro/habr/post_images/0b4/572/421/0b457242103fc70de806c9de62234135.jpg" data-blurred="true"/><br/>
<br/>
Благодаря этому, внутри лямбды мы получаем доступ к ключевому слову this – то, ради чего, наверное, и существуют лямбды с контекстом. <br/>
<br/>
<img src="https://habrastorage.org/r/w780q1/getpro/habr/post_images/b1b/819/fdb/b1b819fdb7488092550b2ac72265cd72.jpg" data-src="https://habrastorage.org/getpro/habr/post_images/b1b/819/fdb/b1b819fdb7488092550b2ac72265cd72.jpg" data-blurred="true"/><br/>
<br/>
Естественно, мы можем от этого ключевого слова избавиться и у нас получается возможность писать вот такие конструкции. <br/>
<br/>
<img src="https://habrastorage.org/r/w780q1/getpro/habr/post_images/50d/dbc/492/50ddbc4920ffb871918ce7c063a874a2.jpg" data-src="https://habrastorage.org/getpro/habr/post_images/50d/dbc/492/50ddbc4920ffb871918ce7c063a874a2.jpg" data-blurred="true"/><br/>
<br/>
Опять же, если у нас есть не только проперти, а еще есть какие-то методы, мы можем их также вызывать, это выглядит довольно естественно.<br/>
<br/>
<img src="https://habrastorage.org/r/w780q1/getpro/habr/post_images/b72/155/316/b72155316d99a7e4816d1234644b761b.jpg" data-src="https://habrastorage.org/getpro/habr/post_images/b72/155/316/b72155316d99a7e4816d1234644b761b.jpg" data-blurred="true"/><br/>
<br/>
<h2>Применение</h2><br/>
Все эти лямбды в коде – это лямбды с контекстом. Существует огромное количество контекстов, они так или иначе пересекаются и позволяют выстраивать наш проблемно-ориентированный язык. <br/>
<br/>
<img src="https://habrastorage.org/r/w780q1/getpro/habr/post_images/83a/f30/2ff/83af302ff3c0a85db220c70f0d567743.jpg" data-src="https://habrastorage.org/getpro/habr/post_images/83a/f30/2ff/83af302ff3c0a85db220c70f0d567743.jpg" data-blurred="true"/><br/>
<br/>
Резюмируя по лямбдам – у нас есть лямбды обычные, есть с контекстом, и теми, и другими можно пользоваться. <br/>
<br/>
<img src="https://habrastorage.org/r/w780q1/getpro/habr/post_images/fcc/1ac/dfc/fcc1acdfc43284500c38884d88212877.jpg" data-src="https://habrastorage.org/getpro/habr/post_images/fcc/1ac/dfc/fcc1acdfc43284500c38884d88212877.jpg" data-blurred="true"/><br/>
<br/>
<h2>Операторы</h2><br/>
В Kotlin есть ограниченный набор операторов, который вы можете переопределять, используя соглашения и ключевое слово operator. <br/>
<br/>
Посмотрим на преподавателя и на его доступность. Допустим, мы говорим, что преподаватель работает по понедельникам с 8 утра в течение 1 часа. Еще мы хотим сказать, что, кроме этого одного часа, он работает с 13.00 в течение 1 часа. Хочется выразить это с помощью оператора <b>+</b>.  Как это можно сделать?<br/>
<br/>
<img src="https://habrastorage.org/r/w780q1/getpro/habr/post_images/17b/360/9ab/17b3609ab2ebd28cf27f906934536e05.jpg" data-src="https://habrastorage.org/getpro/habr/post_images/17b/360/9ab/17b3609ab2ebd28cf27f906934536e05.jpg" data-blurred="true"/><br/>
<br/>
Имеется некоторый метод availability, который принимает лямбду с контекстом <code>AvailabilityTable</code>. Это значит, что есть некоторый класс, который так и называется, и в этом классе объявлен метод monday. Этот метод возвращает <code>DayPointer</code>, т.к. нужно к чему-то прикрепить наш оператор.<br/>
<br/>
<img src="https://habrastorage.org/r/w780q1/getpro/habr/post_images/721/aea/73d/721aea73d36a41cf3dbecd328b1f5ab5.jpg" data-src="https://habrastorage.org/getpro/habr/post_images/721/aea/73d/721aea73d36a41cf3dbecd328b1f5ab5.jpg" data-blurred="true"/><br/>
<br/>
Давайте разберемся в том, что такое DayPointer. Это указатель на таблицу доступности некоторого преподавателя, и день в его же расписании. Также у нас есть функция time, которая будет так или иначе превращать какие-то строки в целочисленные индексы: в Kotlin у нас для этого есть класс <code>IntRange</code>.<br/>
<br/>
Слева есть <code>DayPointer</code>, справа есть time, и нам хотелось бы их объединить оператором <b>+</b>. Для этого в классе <code>DayPointer</code> можно создать наш оператор. Он будет принимать диапазон значений типа Int и возвращать <code>DayPointer</code> для того, чтобы мы цепочкой могли снова и снова склеивать наш DSL.<br/>
Теперь взглянем на ключевую конструкцию, с которой все начинается, с которой начинается наш DSL. Ее реализация немного отличается, и сейчас мы в этом разберемся.<br/>
В Kotlin есть понятие синглтона, встроенное прямо в язык. Для этого вместо ключевого слова class используется ключевое слово <code>object</code>. Если мы создаем метод внутри синглтона, то можно обращаться к нему так, что нет необходимости снова создавать инстанс этого класса. Мы просто обращаемся к нему как к статическому методу в классе.<br/>
<br/>
<img src="https://habrastorage.org/r/w780q1/getpro/habr/post_images/d3d/226/065/d3d2260651fc4049ec8d3e6878a0cc51.jpg" data-src="https://habrastorage.org/getpro/habr/post_images/d3d/226/065/d3d2260651fc4049ec8d3e6878a0cc51.jpg" data-blurred="true"/><br/>
<br/>
Если  взглянуть на результат декомпиляции (то есть, в среде разработки прокликать Tools –&gt; Kotlin –&gt; Show Kotlin Bytecode –&gt; Decompile), то можно увидеть следующую реализацию синглтона: <br/>
<br/>
<img src="https://habrastorage.org/r/w780q1/getpro/habr/post_images/3c6/8c9/577/3c68c957760612b06a5b008c734ddb33.jpg" data-src="https://habrastorage.org/getpro/habr/post_images/3c6/8c9/577/3c68c957760612b06a5b008c734ddb33.jpg" data-blurred="true"/><br/>
<br/>
Это всего лишь обычный класс, и ничего сверхъестественного здесь не происходит.<br/>
Имеется еще один интересный инструмент – это оператор <code>invoke</code>. Представим, что у нас есть некоторый класс А, у нас есть его инстанс, и мы хотели бы словно запускать этот инстанс, то есть вызывать круглые скобки у объекта этого класса, и мы можем это сделать благодаря оператору <code>invoke</code>.<br/>
<br/>
<img src="https://habrastorage.org/r/w780q1/getpro/habr/post_images/25f/3a1/f95/25f3a1f95c8c61dcb4937822bd9578e6.jpg" data-src="https://habrastorage.org/getpro/habr/post_images/25f/3a1/f95/25f3a1f95c8c61dcb4937822bd9578e6.jpg" data-blurred="true"/><br/>
<br/>
По сути, круглые скобки позволяют нам вызывать метод invoke и имеет модификатор operator. Если же мы передадим в этот оператор лямбду с контекстом, то у нас получится вот такая конструкция. <br/>
<br/>
<img src="https://habrastorage.org/r/w780q1/getpro/habr/post_images/b6b/61d/675/b6b61d67518cb1dc730bce8e309ae0dc.jpg" data-src="https://habrastorage.org/getpro/habr/post_images/b6b/61d/675/b6b61d67518cb1dc730bce8e309ae0dc.jpg" data-blurred="true"/><br/>
<br/>
Создавать каждый раз инстансы то еще занятие, поэтому мы можем совместить предыдущие знания и текущие. <br/>
<br/>
Сделаем синглтон, назовем его schedule, внутри него мы объявим оператор invoke, внутри создадим контекст, а принимать он будет лямбду с контекстом вот тем самым, который мы здесь же и создаем. Получается единая точка входа в наш DSL, и, как следствие, получается та же самая конструкция – schedule с фигурными скобками.<br/>
<br/>
<img src="https://habrastorage.org/r/w780q1/getpro/habr/post_images/53a/41f/7d8/53a41f7d8e9067b6ce850045e745fb4f.jpg" data-src="https://habrastorage.org/getpro/habr/post_images/53a/41f/7d8/53a41f7d8e9067b6ce850045e745fb4f.jpg" data-blurred="true"/><br/>
<br/>
Отлично, про schedule мы поговорили, давайте взглянем на наши проверки.<br/>
У нас есть преподаватели, мы построили какое-то расписание, и хотим проверить, что в расписании этого преподавателя в определенный день в определенном занятии есть какой-то объект, с которым мы будем работать. <br/>
<br/>
<img src="https://habrastorage.org/r/w780q1/getpro/habr/post_images/22d/0e3/9ef/22d0e39ef38ceb43fd60654de876691b.jpg" data-src="https://habrastorage.org/getpro/habr/post_images/22d/0e3/9ef/22d0e39ef38ceb43fd60654de876691b.jpg" data-blurred="true"/><br/>
<br/>
Хотелось бы использовать квадратные скобки и обращаться к нашему расписанию способом, визуально похожим на доступ к массивам.<br/>
<br/>
<img src="https://habrastorage.org/r/w780q1/getpro/habr/post_images/1e6/895/b9e/1e6895b9ed089ed99d4c2639e6e1f578.jpg" data-src="https://habrastorage.org/getpro/habr/post_images/1e6/895/b9e/1e6895b9ed089ed99d4c2639e6e1f578.jpg" data-blurred="true"/><br/>
<br/>
Сделать это можно с помощью оператора: get / set:<br/>
<br/>
<img src="https://habrastorage.org/r/w780q1/getpro/habr/post_images/815/9f5/a86/8159f5a8628b6c5bb21d219e395ea32b.jpg" data-src="https://habrastorage.org/getpro/habr/post_images/815/9f5/a86/8159f5a8628b6c5bb21d219e395ea32b.jpg" data-blurred="true"/><br/>
<br/>
Здесь мы не делаем ничего нового, просто следуем соглашениям. В случае оператора set нужно дополнительно передать значения в наш метод:<br/>
<br/>
<img src="https://habrastorage.org/r/w780q1/getpro/habr/post_images/4c8/03d/2f2/4c803d2f20ed8b7f79e308d47b734bd9.jpg" data-src="https://habrastorage.org/getpro/habr/post_images/4c8/03d/2f2/4c803d2f20ed8b7f79e308d47b734bd9.jpg" data-blurred="true"/><br/>
<br/>
Итак, квадратные скобки для чтения превращаются в get, а квадратные скобки, через которые мы присваиваем, превращаются в set.<br/>
<br/>
<h2>Демо: object, operators</h2><br/>
Дальнейший текст можно или читать, или <a href="https://youtu.be/q_UM1EY2S5g?t=1403">смотреть видео по ссылке</a>. У видео есть четкое время начало, но не указано времени окончания — в принципе, однажды начав, можно досмотреть его до конца статьи.<br/>
<br/>
Для удобства я кратко изложу суть видео прямо в тексте.<br/>
<br/>
Давайте напишем тест. У нас есть некоторый объект schedule, и если мы через ctrl+b перейдем к его реализации, то мы увидим все, о чем я перед этим говорил.<br/>
<br/>
<img src="https://habrastorage.org/r/w1560/webt/uk/pg/0d/ukpg0djbwn_hfyq4a7g9usa65aa.png" data-src="https://habrastorage.org/webt/uk/pg/0d/ukpg0djbwn_hfyq4a7g9usa65aa.png"/><br/>
<br/>
Внутри объекта schedule мы хотим проинициализировать данные, затем выполнить какие-то проверки, и в рамках данных мы хотели бы сказать, что:<br/>
<br/>
<ul>
<li>наше учебное заведение работает с 8 утра;<br/>
</li>
<li>есть некоторый набор предметов, для которых мы будем строить расписание;<br/>
</li>
<li>есть некоторые преподаватели, у которых описана какая-то доступность;<br/>
</li>
<li>есть студент;<br/>
</li>
<li>в принципе для студента нам нужно сказать только то, что он изучает какой-то определенный предмет.<br/>
</li>
</ul><br/>
<img src="https://habrastorage.org/r/w1560/webt/v_/mq/ia/v_mqia50010hyrqza7zubejj62e.png" data-src="https://habrastorage.org/webt/v_/mq/ia/v_mqia50010hyrqza7zubejj62e.png"/><br/>
<br/>
И здесь проявляется один из минусов Kotlin и проблемно-ориентированных языков в принципе: довольно сложно адресовать какие-то объекты, которые мы создали раньше. В этом демо я буду указывать все в качестве индексов, то есть rus – это индекс 0, математика – это индекс 2. И преподаватель естественно, тоже что-то ведет. Он не просто на работу ходит, а чем-то занимается. Для читателей этой статьи я хотел бы предложить еще один вариант адресации, вы можете завести уникальные теги и по ним сохранять сущности в Map, а когда нужно обратиться к какой-то из них, то по тегу вы всегда можете её найти. Продолжим разбирать DSL. <br/>
<br/>
Здесь что нужно отметить: во-первых, у нас есть оператор +, к реализации которого мы также можем перейти и увидеть, что у нас на самом деле есть класс DayPointer, который помогает нам связывать это все с помощью оператора. <br/>
<br/>
И благодаря тому, что у нас есть доступ к контексту, среда разработки нам подсказывает, что у нас в контексте через ключевое слово this, нам доступна некоторая коллекция, и ей мы будем пользоваться. <br/>
<br/>
<img src="https://habrastorage.org/r/w1560/webt/l_/3q/uw/l_3quwu2xaqlxikn71jhpnnero4.png" data-src="https://habrastorage.org/webt/l_/3q/uw/l_3quwu2xaqlxikn71jhpnnero4.png"/><br/>
<br/>
То есть у нас это коллекция ивентов. Ивент в себя инкапсулирует набор свойств, например: что имеется студент, преподаватель, в какой день на какой урок они встречаются. <br/>
<br/>
<img src="https://habrastorage.org/r/w1560/webt/fn/1f/xa/fn1fxa5legi4mwszf5xbudchoi0.png" data-src="https://habrastorage.org/webt/fn/1f/xa/fn1fxa5legi4mwszf5xbudchoi0.png"/><br/>
<br/>
Продолжим писать тест дальше. <br/>
<br/>
<img src="https://habrastorage.org/r/w1560/webt/vj/bt/s9/vjbts9wb6fely-atqa-kr88i9qm.png" data-src="https://habrastorage.org/webt/vj/bt/s9/vjbts9wb6fely-atqa-kr88i9qm.png"/><br/>
<br/>
Здесь, опять же, мы пользуемся оператором get, перейти к его реализации не так просто, но мы можем это сделать. <br/>
<br/>
<img src="https://habrastorage.org/r/w1560/webt/iz/gd/dv/izgddvy3bomaqjp_6yvbfrbcgpe.png" data-src="https://habrastorage.org/webt/iz/gd/dv/izgddvy3bomaqjp_6yvbfrbcgpe.png"/><br/>
<br/>
По сути, мы просто следуем соглашению, благодаря чему и получаем доступ к этой конструкции. <br/>
Давайте вернемся к презентации и продолжим разговор про Kotlin. Мы хотели проверки, реализованные на Kotlin, и мы перебирали эти вот ивенты:<br/>
<br/>
<img src="https://habrastorage.org/r/w780q1/getpro/habr/post_images/b4f/f23/a77/b4ff23a77974a299ecac5c1c3b5d984f.jpg" data-src="https://habrastorage.org/getpro/habr/post_images/b4f/f23/a77/b4ff23a77974a299ecac5c1c3b5d984f.jpg" data-blurred="true"/><br/>
<br/>
Ивент – это, по сути, инкапсулированный набор из 4 свойств. Хочется раскладывать этот ивент на набор свойств, словно кортеж. В русском языке такая конструкция называется <i>мульти-декларации</i> (я нашел только такой перевод), или <i>destructuring declaration</i>, и работает это следующим образом:<br/>
<br/>
<img src="https://habrastorage.org/r/w780q1/getpro/habr/post_images/f2c/185/5f1/f2c1855f1ee98b51a4bda6ce9cc0b0a8.jpg" data-src="https://habrastorage.org/getpro/habr/post_images/f2c/185/5f1/f2c1855f1ee98b51a4bda6ce9cc0b0a8.jpg" data-blurred="true"/><br/>
<br/>
Если кто-то из вас не знаком с этой фичей она работает так: можно взять ивент, и на месте, где он используется, воспользовавшись круглыми скобками, разложить его на набор свойств. <br/>
<br/>
<img src="https://habrastorage.org/r/w780q1/getpro/habr/post_images/444/95f/0a3/44495f0a381b71a20578736f0cb491af.jpg" data-src="https://habrastorage.org/getpro/habr/post_images/444/95f/0a3/44495f0a381b71a20578736f0cb491af.jpg" data-blurred="true"/> <br/>
<br/>
Работает это потому, что у нас есть метод componentN, то есть это метод, который генерируется компилятором благодаря модификатору data, который мы пишем перед классом.<br/>
<br/>
<img src="https://habrastorage.org/r/w780q1/getpro/habr/post_images/126/db9/d78/126db9d789acf9b3482f314d5a53261f.jpg" data-src="https://habrastorage.org/getpro/habr/post_images/126/db9/d78/126db9d789acf9b3482f314d5a53261f.jpg" data-blurred="true"/><br/>
<br/>
Вместе с этим нам прилетает большое количество других методов. Нас интересует именно метод componentN, генерируется на основе перечисленных в списке параметров primary-конструктора свойств. <br/>
<br/>
<img src="https://habrastorage.org/r/w1560/webt/hd/nf/ou/hdnfoutg14046a351gjyhodfprc.png" data-src="https://habrastorage.org/webt/hd/nf/ou/hdnfoutg14046a351gjyhodfprc.png"/><br/>
<br/>
Если бы у нас не было модификатора data, необходимо было бы вручную написать оператор, который будет делать все то же самое.<br/>
<br/>
<img src="https://habrastorage.org/r/w780q1/getpro/habr/post_images/e2b/37f/a2f/e2b37fa2fad7cd8e201987c32fbf572b.jpg" data-src="https://habrastorage.org/getpro/habr/post_images/e2b/37f/a2f/e2b37fa2fad7cd8e201987c32fbf572b.jpg" data-blurred="true"/><br/>
<br/>
<img src="https://habrastorage.org/r/w780q1/getpro/habr/post_images/e59/bc7/479/e59bc7479e66cd96c4d0d5093ef33608.jpg" data-src="https://habrastorage.org/getpro/habr/post_images/e59/bc7/479/e59bc7479e66cd96c4d0d5093ef33608.jpg" data-blurred="true"/><br/>
<br/>
Итак, у нас какие-то методы componentN, и они, раскладываются вот в такой вызов:<br/>
<br/>
<img src="https://habrastorage.org/r/w780q1/getpro/habr/post_images/96a/cae/aa9/96acaeaa91222d55c4a77b70c9b02903.jpg" data-src="https://habrastorage.org/getpro/habr/post_images/96a/cae/aa9/96acaeaa91222d55c4a77b70c9b02903.jpg" data-blurred="true"/><br/>
<br/>
По сути, это синтаксический сахар над вызовом нескольких методов. <br/>
<br/>
Мы с вами уже говорили про некоторую таблицу доступности, и, на самом деле, я вас обманул. Так бывает. Никакого <code>avaiabilityTable</code> не существует, нет его в природе, а есть матрица булевских значений. <br/>
<br/>
<img src="https://habrastorage.org/r/w780q1/getpro/habr/post_images/393/d7d/5d7/393d7d5d739ea9cecedadff695ca6874.jpg" data-src="https://habrastorage.org/getpro/habr/post_images/393/d7d/5d7/393d7d5d739ea9cecedadff695ca6874.jpg" data-blurred="true"/><br/>
<br/>
Не нужно никакого дополнительного класса: можно взять матрицу булевских значений и переименовать для большей очевидности. Это можно сделать с помощью так называемого <i>typealias</i> или <i>псевдонима типа</i>. К сожалению, никаких дополнительных бонусов мы от этого не получаем, это просто переименование. Если вы возьмете и availability переименуете обратно в матрицу булевских значений, вообще ничего не изменится. Код как работал, так и будет работать.<br/>
<br/>
Давайте взглянем на преподавателя, вот как раз на эту самую доступность, и поговорим о нем:<br/>
<br/>
<img src="https://habrastorage.org/r/w780q1/getpro/habr/post_images/521/031/f59/521031f59a8e7b222c2614b32ba88abd.jpg" data-src="https://habrastorage.org/getpro/habr/post_images/521/031/f59/521031f59a8e7b222c2614b32ba88abd.jpg" data-blurred="true"/><br/>
<br/>
У нас есть преподаватель, и у него вызывается метод availability (вы еще не потеряли нить рассуждений? :-). Откуда он взялся? То есть, преподаватель — это какая-то entity, у которой есть класс, и это — бизнес-код. И не может там быть никакого дополнительного метода. <br/>
<br/>
<img src="https://habrastorage.org/r/w780q1/getpro/habr/post_images/54e/044/683/54e0446838b2360d695b45e5bacec69d.jpg" data-src="https://habrastorage.org/getpro/habr/post_images/54e/044/683/54e0446838b2360d695b45e5bacec69d.jpg" data-blurred="true"/><br/>
<br/>
Этот метод появляется благодаря extension-функциям. Берем и прикручиваем к нашему классу какому-то еще одну функцию, которую можем запускать на объектах этого класса. <br/>
Если мы передадим этой функции некоторую лямбду, а затем запустим ее на существующем свойстве, то все отлично — метод availability в своей реализации инициализирует свойство availability. От этого можно избавиться. Мы уже знаем про оператор invoke, который может и крепиться к типу, и быть одновременно extension-функцией. Если в этот оператор передавать лямбду, то тут же, на ключевом слове this, мы можем эту лямбду запускать. В результате, когда мы работаем с преподавателем, доступность – свойство преподавателя, а не какой-то дополнительный метод, и тут никакого рассинхрона не происходит. <br/>
<br/>
<img src="https://habrastorage.org/r/w780q1/getpro/habr/post_images/4d6/1af/f71/4d61aff7169c403c75493790720c0e6e.jpg" data-src="https://habrastorage.org/getpro/habr/post_images/4d6/1af/f71/4d61aff7169c403c75493790720c0e6e.jpg" data-blurred="true"/><br/>
<br/>
В качестве бонуса, extension-функции можно создавать для nullable типов. Это хорошо, так как если будет переменная с nullable типом, содержащим значение null, наша функция к этому уже готова, и не упадет с NullPointer. Внутри этой функции this может быть равен null, и это нужно обработать.<br/>
<br/>
<img src="https://habrastorage.org/r/w780q1/getpro/habr/post_images/59a/e33/1c5/59ae331c58bcd16003f51f870b89549e.jpg" data-src="https://habrastorage.org/getpro/habr/post_images/59a/e33/1c5/59ae331c58bcd16003f51f870b89549e.jpg" data-blurred="true"/><br/>
<br/>
Резюмируя по extension-функциям: необходимо понимать, что имеется доступ только к публичному API класса, а сам класс никак не модифицируется. Extension-функция определяется по типу переменной, а не по фактическому типу. Более того, член класса с той же сигнатурой окажется приоритетней. Можно создавать extension-функцию для одного класса, но написать ее в совершенно другом классе, и внутри этой extension-функции будет доступ к одновременно двум контекстам. Получается пересечение контекстов. Ну и наконец, это отличная возможность взять и прикрутить операторы вообще в любое место, где мы хотим. <br/>
<br/>
<img src="https://habrastorage.org/r/w780q1/getpro/habr/post_images/a04/1e8/610/a041e86102be21acf2c3170cf941d064.jpg" data-src="https://habrastorage.org/getpro/habr/post_images/a04/1e8/610/a041e86102be21acf2c3170cf941d064.jpg" data-blurred="true"/><br/>
<br/>
Следующий инструмент — инфиксные функции. Очередной опасный молоток в руках разработчика. Почему опасный? То, что вы видите – это код. Такой код можно написать в Kotlin, и не надо так делать! Пожалуйста, не делайте так. Но тем не менее, подход хороший. Благодаря этому есть возможность избавляться от точек, скобочек — от всего того шумного синтаксиса, от которого мы пытаемся уйти как можно дальше и сделать наш код немного чище. <br/>
<br/>
<img src="https://habrastorage.org/r/w780q1/getpro/habr/post_images/909/8c3/4a0/9098c34a06b09bac0597004c6fbf6b1a.jpg" data-src="https://habrastorage.org/getpro/habr/post_images/909/8c3/4a0/9098c34a06b09bac0597004c6fbf6b1a.jpg" data-blurred="true"/><br/>
<br/>
Как это работает? Давайте возьмем более простой пример — переменную типа integer. Создадим для нее extension-функцию, назовем ее shouldBeEqual, она что-то будет делать, но это уже неинтересно. Если мы допишем слева от нее модификатор infix – все, этого достаточно. Можно избавляться от точек и скобочек, но есть парочка нюансов.<br/>
<br/>
<img src="https://habrastorage.org/r/w780q1/getpro/habr/post_images/39e/fc2/31f/39efc231fb88cee1ef014a36fcb6cc73.jpg" data-src="https://habrastorage.org/getpro/habr/post_images/39e/fc2/31f/39efc231fb88cee1ef014a36fcb6cc73.jpg" data-blurred="true"/><br/>
<br/>
На основе этого реализована как раз конструкция data и assertions, скрепленные вместе.<br/>
<img src="https://habrastorage.org/r/w780q1/getpro/habr/post_images/80f/6dd/126/80f6dd126255196fc538026ea28656c1.jpg" data-src="https://habrastorage.org/getpro/habr/post_images/80f/6dd/126/80f6dd126255196fc538026ea28656c1.jpg" data-blurred="true"/><br/>
<br/>
Давайте в ней разберемся. У нас есть SchedulingContext — общий контекст запуска планирования. Есть функция data, которая возвращает результат этого планирования. При этом мы создаем extension-функцию и одновременно инфикс-функцию assertions, которая будет запускать лямбду, проверяющую наши значения. <br/>
<br/>
<img src="https://habrastorage.org/r/w780q1/getpro/habr/post_images/449/74c/fe5/44974cfe559d94d17e6435557757af80.jpg" data-src="https://habrastorage.org/getpro/habr/post_images/449/74c/fe5/44974cfe559d94d17e6435557757af80.jpg" data-blurred="true"/><br/>
<br/>
Имеется субъект, объект и действие, и нужно их как-то связать. В этом случае результат выполнения data с фигурными скобками – это субъект. Лямбда, которую мы передаем в метод assertions – объект, а сам метод assertions – действие. Все это как бы склеивается. <br/>
<br/>
<img src="https://habrastorage.org/r/w780q1/getpro/habr/post_images/518/aac/4e9/518aac4e9d92ca84a79e6cdb09fea773.jpg" data-src="https://habrastorage.org/getpro/habr/post_images/518/aac/4e9/518aac4e9d92ca84a79e6cdb09fea773.jpg" data-blurred="true"/><br/>
<br/>
Говоря про инфикс функции, важно понимать, что это шаг по избавлению от шумного синтаксиса. Однако, у нас обязательно должен существовать субъект и объект этого действия, и нужно воспользоваться модификатором infix. Может быть точно один параметр — то есть ноль параметров не может быть, два не может быть, три – ну вы поняли. Можно передавать в эту функцию, например, лямбды, и таким образом получаются конструкции, которые вы раньше не видели.<br/>
<br/>
Перейдем к следующей демке. Ее лучше смотреть на видео, а не читать текстом.<br/>
<br/>
<div class="oembed"><div><div style="left: 0; width: 100%; height: 0; position: relative; padding-bottom: 56.2493%;"><div class="tm-iframe_temp" data-src="https://www.youtube.com/embed/q_UM1EY2S5g?rel=0&amp;showinfo=1&amp;start=2072&amp;end=2170" data-style="border: 0; top: 0; left: 0; width: 100%; height: 100%; position: absolute;" id="" width=""></div></div></div></div><br/>
<br/>
Теперь все выглядит готовым: инфикс функции вы увидели, extension функции увидели, destructuring declaration готов. <br/>
<br/>
Вернемся к нашей презентации, и здесь мы перейдем к одному довольно важному моменту при построении проблемно ориентированных языков – то, о чем стоит задумываться – это контроль контекста.<br/>
<br/>
<img src="https://habrastorage.org/r/w780q1/getpro/habr/post_images/9ff/0d3/57a/9ff0d357a3e39d01bcb3d5d07d81d71e.jpg" data-src="https://habrastorage.org/getpro/habr/post_images/9ff/0d3/57a/9ff0d357a3e39d01bcb3d5d07d81d71e.jpg" data-blurred="true"/><br/>
<br/>
Бывают ситуации, когда мы можем взять DSL и переиспользовать его прям внутри него же, а мы этого делать не хотим. Наш пользователь (возможно, неопытный пользователь), пишет data внутри data, и это не имеет никакого смысла. Нам хотелось бы как-то запретить ему это делать. <br/>
<br/>
До Kotlin версии 1.1 мы должны были сделать следующее: в ответ на то, что у нас в <code>SchedulingContext</code> есть метод data, мы должны были в <code>DataContext</code> создать еще один метод data, в который принимаем лямбду (пускай без реализации), должны были пометить этот метод аннотацией <code>@Deprecated</code> и сказать компилятору не компилировать такое. Видишь, что такой метод запускается – не компилируй. Используя такой подход, мы получим даже некоторое осмысленное сообщение, когда будем писать неосмысленный код.<br/>
<br/>
<img src="https://habrastorage.org/r/w780q1/getpro/habr/post_images/dfb/7a7/0b4/dfb7a70b4fba1c5cb0bf37715a4fe1bd.jpg" data-src="https://habrastorage.org/getpro/habr/post_images/dfb/7a7/0b4/dfb7a70b4fba1c5cb0bf37715a4fe1bd.jpg" data-blurred="true"/><br/>
<br/>
После версии Kotlin 1.1, появилась замечательная аннотация <code>@DslMarker</code>. Эта аннотация нужна, чтобы помечать производные аннотации. Ими, в свою очередь, мы будем размечать проблемно-ориентированные языки. Для каждого проблемно-ориентированного языка вы можете создать одну аннотацию, которую пометите <code>@DslMarker</code> и будете её вешать на каждый контекст, который необходим. Больше нет потребности в том, чтобы писать дополнительные методы, которые нужно запрещать компилировать — оно все просто работает. Не компилируется.<br/>
<br/>
Тем не менее, есть один такой специальный случай, когда мы работаем с нашей бизнес-моделью. Обычно она написана на Java. Есть контекст,  есть аннотация, которой нужно пометить контекст. Как думаете, какой контекст внутри метода студент? Класс <code>Student</code>. Это – кусок нашей бизнес-модели, там Kotlin нет. <br/>
<br/>
<img src="https://habrastorage.org/r/w780q1/getpro/habr/post_images/4c6/111/c5c/4c6111c5c80ab5c4856e68c06880ed4a.jpg" data-src="https://habrastorage.org/getpro/habr/post_images/4c6/111/c5c/4c6111c5c80ab5c4856e68c06880ed4a.jpg" data-blurred="true"/><br/>
<br/>
<img src="https://habrastorage.org/r/w780q1/getpro/habr/post_images/cc3/572/a05/cc3572a054dabbe4e32362d845b30cf8.jpg" data-src="https://habrastorage.org/getpro/habr/post_images/cc3/572/a05/cc3572a054dabbe4e32362d845b30cf8.jpg" data-blurred="true"/><br/>
<br/>
Нам хотелось бы как-то эту ситуацию тоже контролировать, ведь в этом случае есть доступ к следующей конструкции: создать студента внутри студентов. Не хочу вызывать у вас никаких неправильных ассоциаций, но мы хотим это запретить, это неправильно.<br/>
<br/>
<img width="100%" src="https://habrastorage.org/r/w780q1/getpro/habr/post_images/2fd/77d/125/2fd77d1250c0677a24c1c9c358f11663.jpg" data-src="https://habrastorage.org/getpro/habr/post_images/2fd/77d/125/2fd77d1250c0677a24c1c9c358f11663.jpg" data-blurred="true"/><br/>
<br/>
Варианта у нас есть три. <br/>
<br/>
<ol>
<li>Создать целый контекст, который отвечает за нашего студента. Назовем его StudentContext. Опишем там все свойства, и потом будем на основе него создавать студента. Некоторое такое безумие – пишется куча кода, наверное, больше, чем для продакшена. <br/>
</li>
<li>Второй вариант – можем взять и создать некоторый интерфейс, который отражает нашего студента, то есть просто перечисляет свойства. Но переиспользуем этот же интерфейс в наших тестах. Возьмем StudentContext и скажем, что он реализует некоторый интерфейс IStudent посредством делегирования реализации этого интерфейса другому объекту. То есть, создается тут же на месте объект Student, и от него берется вся реализация интерфейса IStudent для StudentContext. Помечаем аннотацией DslMarker и прекрасно, все работает.<br/>
</li>
<li>Любимый способ: воспользуемся аннотацией deprecated и запретим компилировать неправильный код. Просто перечислим то, что нам необходимо. Обычно в иерархии сущностей находится такая сущность, которая содержит идентификатор. На эту сущность мы можем повесить extension-функцию, которую мы и запретим вызывать. В том числе и студента внутри студента.<br/>
</li>
</ol><br/>
<img src="https://habrastorage.org/r/w780q1/getpro/habr/post_images/9ea/10d/d6a/9ea10dd6af4495be38653339010e0a46.jpg" data-src="https://habrastorage.org/getpro/habr/post_images/9ea/10d/d6a/9ea10dd6af4495be38653339010e0a46.jpg" data-blurred="true"/><br/>
<br/>
Таким образом, даже на этом уровне можно контролировать контекст, но с некоторыми ограничениями, которые нужно уметь обходить. <br/>
<br/>
<img src="https://habrastorage.org/r/w780q1/getpro/habr/post_images/1d7/9f9/53f/1d79f953fc755000013d44d15f56fb73.jpg" data-src="https://habrastorage.org/getpro/habr/post_images/1d7/9f9/53f/1d79f953fc755000013d44d15f56fb73.jpg" data-blurred="true"/><br/>
<br/>
Резюмируя про контроль контекста. Защищайте ваших пользователей от ошибок. Понятно, что некоторые ошибки пользователи делать не будут, ведь это очевидно, но контролировать это все равно желательно. Тем более, что реализация такого контроля занимает не так много средств и времени. Пользуйтесь аннотацией @DslMarker, которой вы помечаете ваши собственные аннотации. В тех ситуациях, когда вы не можете пользоваться аннотацией @DslMarker, воспользуйтесь аннотацией @Deprecated, это поможет вам обойти те случаи, которые пока не работают. <br/>
<br/>
Итак, демка контроля контекста:<br/>
<br/>
<div class="oembed"><div><div style="left: 0; width: 100%; height: 0; position: relative; padding-bottom: 56.2493%;"><div class="tm-iframe_temp" data-src="https://www.youtube.com/embed/q_UM1EY2S5g?rel=0&amp;showinfo=1&amp;start=2503&amp;end=2575" data-style="border: 0; top: 0; left: 0; width: 100%; height: 100%; position: absolute;" id="" width=""></div></div></div></div><br/>
<br/>
<img src="https://habrastorage.org/r/w780q1/getpro/habr/post_images/16c/690/f58/16c690f589bf90cc1547edc1ee985ae0.jpg" data-src="https://habrastorage.org/getpro/habr/post_images/16c/690/f58/16c690f589bf90cc1547edc1ee985ae0.jpg" data-blurred="true"/><br/>
<br/>
<h2>Минусы и проблемы</h2><br/>
Во-первых, переиспользование частей DSL. Сегодня вы уже видели, что адресовать созданные с помощью DSL сущности может быть проблематично. Есть способы, как это обойти, но об этом желательно подумать заранее, чтобы на этот случай иметь план.<br/>
<br/>
Представим, что у вас есть какой-то кусочек кода, и вы хотите его просто повторять, например, в цикле иметь возможность создавать студентов, много-много раз одинаковых студентов, или любые другие сущности. Как это сделать? Можно воспользоваться циклом for — не самый лучший вариант. Можно создать дополнительный метод внутри вашего DSL, и это будет уже более хорошим решением, однако, решать такие проблемы придется прямо на уровне DSL. Следите за ключевым словом this и дефолтным именованием параметра it. К счастью, с версии Kotlin плагина 1.2.20 у нас есть хинты, которые видны прямо в среде разработки. Серенький код нам подсказывает, с каким контекстом мы работаем или что такое it. <br/>
<br/>
Вложенность может стать проблемой. Вы выстроили прекрасный DSL, но инициализация модели уходит вглубь-вглубь-вглубь, и в итоге вы чаще пользуетесь горизонтальным скроллом, чем вертикальным. Желательно, скрывать под дефолтной реализацией дефолтные значения. Пользователь, которому нужен просто студент, не хочет знать ни про какую программу обучения, ни про что-то еще, он просто хочет создать студента без подробностей, даже не хочет имя обозначать. Старайтесь сократить синтаксис. Например, какие-то значения по умолчанию указать, лямбду пустую передать и т.д. <br/>
<br/>
Наконец, документация. На мой субъективный взгляд, лучшая документация для вашего проблемно-ориентированного языка – это больше количество примеров этого DSL. Здорово, когда у вас есть Kotlin-доки, это хороший бонус. Однако, если пользователь DSL понятия не имеет, какие конструкции имеются, ему и Kotlin-доки смотреть негде. Чувствовали такое когда-нибудь? Когда вы приходите писать Gradle-файл, в самом начале, вы не понимаете, что в нем есть, и нужны какие-то примеры. Вам наплевать на какие-то контексты, вы хотите примеры, и вот это – та самая лучшая документация, которой можно пользоваться новым юзерам вашего DSL. <br/>
<br/>
<img src="https://habrastorage.org/r/w780q1/getpro/habr/post_images/13e/4e0/05a/13e4e005af12def0ee687b008ffc41ac.jpg" data-src="https://habrastorage.org/getpro/habr/post_images/13e/4e0/05a/13e4e005af12def0ee687b008ffc41ac.jpg" data-blurred="true"/><br/>
<br/>
Не суйте DSL’и во все щели, пожалуйста. Это очень хочется делать, когда вы владеете этим инструментом. Хочется сказать, давайте создадим DSL сюда, может быть, сюда и сюда. Во-первых – это неблагодарная работа. Во-вторых, все-таки желательно применять это по месту назначения. Там, где вам это действительно помогает решать какую-то проблему. <br/>
Наконец, изучайте Kotlin. Изучайте возможности, которые приходят в этот язык, новые функции, благодаря чему ваш код будет все чище, короче, компактнее, читать его будет намного проще. И когда вы будете снова возвращаться к тестированию (например, что-то дописали, на это нужно сделать тест), вам будет намного приятнее это делать, потому что DSL максимально компактный, комфортный, и у вас нет проблем с тем, чтобы создать с десяток студентов. Просто в пару строчек это делается. <br/>
<br/>
Тренируйтесь на «кошках», как герой одного известного фильма. На мой взгляд, сначала проще привнести в ваш проект Kotlin в качестве тестирования. Это хорошая возможность проверить язык, попробовать его, посмотреть на его фичи. Это такое поле боя, на котором даже если ничего не получится — ничего страшного, все еще можно этим пользоваться. <br/>
Наконец, предварительно проектируйте DSL. Сегодня я показал некоторый идеальный пример, и мы прошли поэтапно до построения проблемно-ориентированного языка. Если заранее спроектировать DSL, в конечном итоге будет намного проще, вы не будете по 10 раз переделывать его, вы не будете париться о том, что контексты каким-то образом пересекаются и логически сильно связаны. Просто предварительно спроектируйте DSL – это довольно легко сделать на бумажке, когда вы знаете набор конструкций, которые я вам сегодня рассказал.<br/>
<br/>
И наконец, контакты для связи. Меня зовут Иван Осипов, Telegram: <a href="http://t.me/ivan_osipov">@ivan_osipov</a>, Twitter: <a href="https://twitter.com/_osipov_">@_osipov_</a>, Хабр: <a href="https://habr.com/users/i_osipov/" class="user_link">i_osipov</a>. Буду ждать ваших комментариев.<br/>
<br/>
<blockquote>Минутка рекламы. Если вам понравился этот доклад с конференции <b>JPoint</b> — обратите внимание, что 19-20 октября в Санкт-Петербурге пройдет <a href="https://jokerconf.com/">Joker 2018</a> — крупнейшая в России Java-конференция. В его программе тоже будет много интересного. Конференция анонсирована совсем недавно, но на сайте уже есть первые спикеры и доклады.</blockquote></div></div></div><!----><!----></div><!----><!----></div><!--]--><!----><div class="tm-article-presenter__meta" data-test-id="article-meta-links"><div class="tm-separated-list tm-article-presenter__meta-list"><span class="tm-separated-list__title">Теги:</span><ul class="tm-separated-list__list"><!--[--><li class="tm-separated-list__item"><!--[--><a href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[kotlin]" class="tm-tags-list__link"><span>kotlin</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[java]" class="tm-tags-list__link"><span>java</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[jpoint]" class="tm-tags-list__link"><span>jpoint</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[joker+2018]" class="tm-tags-list__link"><span>joker 2018</span></a><!--]--></li><!--]--><!----></ul></div><div class="tm-separated-list tm-article-presenter__meta-list"><span class="tm-separated-list__title">Хабы:</span><ul class="tm-separated-list__list"><!--[--><li class="tm-separated-list__item"><!--[--><a href="/ru/companies/jugru/articles/" class="tm-hubs-list__link"><!--[--><span>Блог компании JUG Ru Group</span><!--]--></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a href="/ru/hubs/java/" class="tm-hubs-list__link"><!--[--><span>Java</span><!--]--></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a href="/ru/hubs/kotlin/" class="tm-hubs-list__link"><!--[--><span>Kotlin</span><!--]--></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a href="/ru/hubs/compilers/" class="tm-hubs-list__link"><!--[--><span>Компиляторы</span><!--]--></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a href="/ru/hubs/programming/" class="tm-hubs-list__link"><!--[--><span>Программирование</span><!--]--></a><!--]--></li><!--]--><!----></ul></div></div><!----><!--]--></article><!--]--></div><!----></div><div style="" class="tm-article-sticky-panel" data-test-id="article-sticky-panel"><div class="tm-data-icons tm-data-icons tm-data-icons_space-big tm-article-sticky-panel__icons" data-test-id="article-stats-icons"><div class="tm-article-rating tm-data-icons__item"><div class="tm-votes-meter tm-article-rating__votes-switcher"><svg class="tm-svg-img tm-votes-meter__icon tm-votes-meter__icon tm-votes-meter__icon_appearance-article" height="24" width="24"><title>Всего голосов 35: ↑33 и ↓2</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-rating"></use></svg><span class="tm-votes-meter__value tm-votes-meter__value_positive tm-votes-meter__value_appearance-article tm-votes-meter__value_rating tm-votes-meter__value" data-test-id="votes-meter-value" title="Всего голосов 35: ↑33 и ↓2">+31</span></div><!--teleport start--><!--teleport end--><!----></div><!----><!----><button class="bookmarks-button tm-data-icons__item" title="Добавить в закладки" type="button"><span class="tm-svg-icon__wrapper bookmarks-button__icon"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Добавить в закладки</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-favorite"></use></svg></span><span class="bookmarks-button__counter" title="Количество пользователей, добавивших публикацию в закладки">121</span></button><div class="tm-sharing tm-data-icons__item" title="Поделиться"><button class="tm-sharing__button" type="button"><svg viewbox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" class="tm-sharing__icon"><path fill="currentColor" d="M13.8 13.8V18l7.2-6.6L13.8 5v3.9C5 8.9 3 18.6 3 18.6c2.5-4.4 6-4.8 10.8-4.8z"></path></svg></button><!--teleport start--><!--teleport end--></div><div class="tm-article-comments-counter-link tm-data-icons__item" title="Читать комментарии"><a href="/ru/companies/jugru/articles/416725/comments/" class="tm-article-comments-counter-link__link" data-test-id="counter-comments"><!--[--><svg class="tm-svg-img tm-article-comments-counter-link__icon" height="24" width="24"><title>Комментарии</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-comments"></use></svg><span class="tm-article-comments-counter-link__value">10</span><!--]--></a><!----></div><!--[--><!--[--><!--[--><!----><!--]--><!--]--><!--]--><!--teleport start--><!--teleport end--><!----></div></div></div><!--[--><!--]--><div class="tm-article-presenter__footer"><!--[--><!--[--><div class="tm-article-blocks"><!----><!--[--><section class="tm-block tm-block tm-block_spacing-bottom"><!----><!--[--><div class="tm-block__body tm-block__body tm-block__body_variant-balanced"><!--[--><div class="tm-article-author" data-test-id="article-author-info" data-async-called="true"><!--[--><!--[--><div class="tm-article-author__company"><div class="tm-article-author__company-card"><div class="tm-company-snippet"><a href="/ru/companies/jugru/profile/" class="tm-company-snippet__logo-link"><div class="tm-entity-image"><img alt="" class="tm-entity-image__pic" height="40" src="//habrastorage.org/getpro/habr/company/0a7/ce6/a86/0a7ce6a86556ff20579e90e6b732e663.png" width="40"></div></a><div class="tm-company-snippet__info"><a href="/ru/companies/jugru/profile/" class="tm-company-snippet__title" data-test-id="company-title"><span>JUG Ru Group</span></a><div class="tm-company-snippet__description">Конференции для Senior-разработчиков</div></div></div><div class="tm-article-author__buttons"><!----><!----></div></div><div class="tm-article-author__company-contacts"><!--[--><a class="tm-article-author__contact" href="http://jugru.org" rel="noopener" target="_blank">Сайт</a><a class="tm-article-author__contact" href="https://vk.com/jugrugroup" rel="noopener" target="_blank">ВКонтакте</a><a class="tm-article-author__contact" href="https://telegram.me/JUGruSupport" rel="noopener" target="_blank">Telegram</a><!--]--></div><div class="tm-article-author__separator"></div></div><!--]--><!--]--><div class="tm-user-card tm-user-card tm-user-card_variant-article tm-article-author__user-card" data-async-called="true"><div class="tm-user-card__info-container"><div class="tm-user-card__header"><div class="tm-user-card__header-data"><a href="/ru/users/olegchir/" class="tm-user-card__userpic tm-user-card__userpic_size-40"><div class="tm-entity-image"><img alt="" class="tm-entity-image__pic" src="//habrastorage.org/getpro/habr/avatars/97a/7a1/7a3/97a7a17a34ac8e5c74105213ae932c4f.jpg"></div></a><div class="tm-user-card__meta"><div class="tm-counter-container tm-karma tm-karma" title=" 904 голоса "><div class="tm-counter-container__header"><!--[--><div class="karma-display positive" data-v-7635202e>376</div><!----><!--]--></div><div class="tm-counter-container__footer"><!--[--><div class="tm-karma__text">Карма</div><!--teleport start--><!--teleport end--><!--]--></div></div><div class="tm-counter-container" title="Рейтинг пользователя"><div class="tm-counter-container__header"><!--[--><!--[--><!--]--><div class="tm-votes-lever tm-votes-lever tm-votes-lever_appearance-rating"><!----><div class="tm-votes-lever__score tm-votes-lever__score_appearance-rating tm-votes-lever__score"><!--[--><span><span class="tm-votes-lever__score-counter tm-votes-lever__score-counter_rating tm-votes-lever__score-counter" data-test-id="votes-score-counter">0</span></span><!--]--></div><!----></div><!--]--></div><div class="tm-counter-container__footer"><!--[--><span class="tm-rating__text tm-rating__text">Рейтинг</span><!--]--></div></div></div></div></div><div class="tm-user-card__info tm-user-card__info_variant-article tm-user-card__info"><div class="tm-user-card__title tm-user-card__title_variant-article tm-user-card__title"><span class="tm-user-card__name tm-user-card__name_variant-article tm-user-card__name">Олег Чирухин</span><a href="/ru/users/olegchir/" class="tm-user-card__nickname tm-user-card__nickname tm-user-card__nickname_variant-article"> @olegchir</a><!----></div><p class="tm-user-card__short-info tm-user-card__short-info_variant-article tm-user-card__short-info" data-test-id="user-card-speciality">Продакт GIGA IDE Cloud, продюсер в Failover Bar</p></div></div><!----><div class="tm-user-card__buttons tm-user-card__buttons_variant-article tm-user-card__buttons"><!----><div class="tm-user-card__button"><div class="tm-button-follow tm-user-card__button-follow"><!----><button class="tm-button-follow__button tm-button-follow__button_big" data-test-id="follow-button" type="button">Подписаться</button></div></div><!----><div class="tm-user-card__button tm-user-card__button_write" data-test-id="user-card-conversations"><svg class="tm-svg-img tm-user-card__button-icon" height="16" width="16"><title>Отправить сообщение</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#mail"></use></svg></div><!----></div><!----></div><div class="tm-article-author__user-contacts" data-test-id="author-contacts"><!----><!----><!--[--><a class="tm-article-author__contact" data-test-id="author-contact-link" href="https://oleg.guru" rel="noopener" target="_blank">Сайт</a><!--]--></div></div><!--]--></div><!--]--><!----></section><!----><!--[--><!--]--><!--]--><div class="tm-article-blocks__comments"><div id="publication-comments" class="tm-article-page-comments"><div><!--[--><div class="tm-article-comments-counter-link tm-article-comments-counter-button"><a href="/ru/companies/jugru/articles/416725/comments/" class="tm-article-comments-counter-link__link tm-article-comments-counter-link__link_button-style" data-test-id="counter-comments"><!--[--><svg class="tm-svg-img tm-article-comments-counter-link__icon tm-article-comments-counter-link__icon_contrasted" height="24" width="24"><title>Комментарии</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-comments"></use></svg><span class="tm-article-comments-counter-link__value tm-article-comments-counter-link__value_contrasted"> Комментарии 10 </span><!--]--></a><!----></div><!--]--></div></div></div><!--[--><!--[--><!--]--><section class="tm-block tm-block tm-block_spacing-bottom"><header class="tm-block__header tm-block__header tm-block__header_variant-borderless"><div class="tm-block__header-container"><h2 class="tm-block__title tm-block__title tm-block__title_variant-large">Публикации</h2><!--[--><!--]--></div><!----></header><!--[--><div class="tm-block__body tm-block__body tm-block__body_variant-condensed-slim"><!--[--><!--[--><div class="tm-tabs tm-tabs"><div class=""><!--[--><span class="tm-tabs__tab-item"><button class="tm-tabs__tab-link tm-tabs__tab-link_active tm-tabs__tab-link_slim tm-tabs__tab-link">Лучшие за сутки</button></span><span class="tm-tabs__tab-item"><button class="tm-tabs__tab-link tm-tabs__tab-link_slim tm-tabs__tab-link">Похожие</button></span><!--]--></div><!----></div><div class="similar-and-daily__tab-view"><div class="placeholder-wrapper"><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><div class="tm-placeholder-article-cards"><!--[--><div class="tm-placeholder-article-card"><div class="tm-placeholder__user"><div class="tm-placeholder__user-pic loads"></div><div class="tm-placeholder__user-date loads"></div></div><div class="tm-placeholder-article-card__title"><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div></div><div class="tm-placeholder-article-card__icons tm-placeholder__counters"><!--[--><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><!--]--></div></div><div class="tm-placeholder-article-card"><div class="tm-placeholder__user"><div class="tm-placeholder__user-pic loads"></div><div class="tm-placeholder__user-date loads"></div></div><div class="tm-placeholder-article-card__title"><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div></div><div class="tm-placeholder-article-card__icons tm-placeholder__counters"><!--[--><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><!--]--></div></div><div class="tm-placeholder-article-card"><div class="tm-placeholder__user"><div class="tm-placeholder__user-pic loads"></div><div class="tm-placeholder__user-date loads"></div></div><div class="tm-placeholder-article-card__title"><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div></div><div class="tm-placeholder-article-card__icons tm-placeholder__counters"><!--[--><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><!--]--></div></div><div class="tm-placeholder-article-card"><div class="tm-placeholder__user"><div class="tm-placeholder__user-pic loads"></div><div class="tm-placeholder__user-date loads"></div></div><div class="tm-placeholder-article-card__title"><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div></div><div class="tm-placeholder-article-card__icons tm-placeholder__counters"><!--[--><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><!--]--></div></div><div class="tm-placeholder-article-card"><div class="tm-placeholder__user"><div class="tm-placeholder__user-pic loads"></div><div class="tm-placeholder__user-date loads"></div></div><div class="tm-placeholder-article-card__title"><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div></div><div class="tm-placeholder-article-card__icons tm-placeholder__counters"><!--[--><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><!--]--></div></div><!--]--></div><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----></div><!----></div><!--]--><!--]--></div><!--]--><!----></section><!--[--><!--[--><div class="placeholder-wrapper"><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><div class="tm-placeholder-inset tm-placeholder-vacancies"><div class="tm-placeholder-inset__header"><div class="tm-placeholder__line tm-placeholder__line_inset-header loads"></div></div><div class="tm-placeholder-inset__body"><ul class="tm-placeholder-list"><!--[--><li class="tm-placeholder-list__item tm-placeholder-list__item_inset"><div class="tm-placeholder-list__title-container"><div class="tm-placeholder__line tm-placeholder__line_item-title loads"></div></div><div class="tm-project-block-items__properties"><!--[--><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><!--]--></div></li><li class="tm-placeholder-list__item tm-placeholder-list__item_inset"><div class="tm-placeholder-list__title-container"><div class="tm-placeholder__line tm-placeholder__line_item-title loads"></div></div><div class="tm-project-block-items__properties"><!--[--><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><!--]--></div></li><li class="tm-placeholder-list__item tm-placeholder-list__item_inset"><div class="tm-placeholder-list__title-container"><div class="tm-placeholder__line tm-placeholder__line_item-title loads"></div></div><div class="tm-project-block-items__properties"><!--[--><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><!--]--></div></li><li class="tm-placeholder-list__item tm-placeholder-list__item_inset"><div class="tm-placeholder-list__title-container"><div class="tm-placeholder__line tm-placeholder__line_item-title loads"></div></div><div class="tm-project-block-items__properties"><!--[--><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><!--]--></div></li><li class="tm-placeholder-list__item tm-placeholder-list__item_inset"><div class="tm-placeholder-list__title-container"><div class="tm-placeholder__line tm-placeholder__line_item-title loads"></div></div><div class="tm-project-block-items__properties"><!--[--><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><!--]--></div></li><!--]--></ul></div><div class="tm-placeholder-inset__footer"><div class="tm-placeholder__line tm-placeholder__line_inset-footer loads"></div></div></div><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----></div><!--]--><!--]--><!----><!--[--><!--]--><!--]--></div><!--]--><!--]--></div></div><!--]--><!--]--></div></div><div class="tm-page__sidebar"><!--[--><!----><!--]--></div></div><!----><!--]--></div></div></main><!----></div><!----><div class="tm-footer"><div class="tm-page-width"><!--[--><div class="tm-footer__container"><div class="tm-footer__title"><a class="tm-svg-icon__wrapper tm-footer__title-link" href="/ru/"><svg class="tm-svg-img tm-svg-icon" height="16" width="16"><title>Хабр</title><use xlink:href="/img/habr-logo-ru.svg#logo"></use></svg></a></div><div class="tm-footer__social"><!--[--><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://www.facebook.com/habrahabr.ru" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="36" width="36"><title>Facebook</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-facebook"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://twitter.com/habr_com" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="36" width="36"><title>Twitter</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-twitter"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://vk.com/habr" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="36" width="36"><title>VK</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-vk"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://telegram.me/habr_com" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="36" width="36"><title>Telegram</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-telegram"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://www.youtube.com/channel/UCd_sTwKqVrweTt4oAKY5y4w" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="36" width="36"><title>Youtube</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-youtube"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://dzen.ru/habr" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="36" width="36"><title>Яндекс Дзен</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-dzen"></use></svg></a><!--]--></div><!--teleport start--><!--teleport end--><button class="tm-footer__link"><svg class="tm-svg-img tm-footer__icon" height="16" width="16"><title>Язык</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#lang"></use></svg> Настройка языка</button><a href="/ru/feedback/" class="tm-footer__link">Техническая поддержка</a><div class="tm-footer-copyright"><span class="tm-copyright"><span class="tm-copyright__years">© 2006–2025, </span><span class="tm-copyright__name"><a class="tm-copyright__link" href="https://company.habr.com/" rel="noopener" target="_blank">Habr</a></span></span></div></div><!--]--></div></div><!----><!--]--></div><!----></div><script>window.__INITIAL_STATE__={"adblock":{"hasAcceptableAdsFilter":false,"hasAdblock":false},"articlesList":{"articlesList":{"416725":{"id":"416725","timePublished":"2018-07-10T15:25:18+00:00","isCorporative":true,"lang":"ru","titleHtml":"Kotlin DSL: Теория и Практика","leadData":{"textHtml":"Разработка тестов приложения — не самое приятное занятие. Этот процесс занимает долгое время, требует большой концентрации и при этом крайне востребован. Язык Kotlin дает набор инструментов, который позволяет довольно легко построить собственный проблемно-ориентированный язык (DSL). Есть опыт, когда Kotlin DSL заменил билдеры и статические методы для тестирования модуля планирования ресурсов, что превратило добавление новых тестов и поддержку старых из рутины в увлекательный процесс.\u003Cbr\u003E\r\n\u003Cbr\u003E\r\nПо ходу статьи мы разберем все основные инструменты из арсенала разработчика и то, как их можно комбинировать для решения задач тестирования. Мы с вами проделаем путь от проектирования Идеального Теста до запуска максимально приближенного, чистого и понятного теста для системы планирования ресурсов на основе Kotlin.\u003Cbr\u003E\r\n\u003Cbr\u003E\r\nСтатья будет полезна практикующим инженерам, тем, кто рассматривает Kotlin как язык для комфортного написания компактных тестов, и тем, кто хочет улучшить процесс тестирования в своем проекте.\u003Cbr\u003E\r\n\u003Cbr\u003E\r\n\u003Cdiv class=\"oembed\"\u003E\u003Cdiv\u003E\u003Cdiv style=\"left: 0; width: 100%; height: 0; position: relative; padding-bottom: 56.2493%;\"\u003E\u003Ciframe src=\"https:\u002F\u002Fwww.youtube.com\u002Fembed\u002Fq_UM1EY2S5g?rel=0&amp;showinfo=1\" style=\"border: 0; top: 0; left: 0; width: 100%; height: 100%; position: absolute;\" allowfullscreen scrolling=\"no\"\u003E\u003C\u002Fiframe\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003Cbr\u003E\r\n\u003Cbr\u003E\r\nСтатья основана на докладе Ивана Осипова (\u003Ca href=\"https:\u002F\u002Fhabr.com\u002Fusers\u002Fi_osipov\u002F\" class=\"user_link\"\u003Ei_osipov\u003C\u002Fa\u003E) на конференции JPoint. Дальнейшее повествование ведется от его лица. Иван работает программистом в компании Haulmont. Основной продукт компании – CUBA, платформа для разработки энтерпрайза и различных веб-приложений. В том числе на этой платформе делаются и аутсорсинговые проекты, среди которых недавно был проект в области образования, в котором Иван занимался построением расписания для образовательного учреждения. Так сложилось, что последние три года Иван так или иначе работает с планировщиками, и конкретно в Haulmont в течение года они этот самый планировщик тестируют. \u003Cbr\u003E","imageUrl":null,"buttonTextHtml":"Читать дальше →","image":null},"editorVersion":"1.0","postType":"article","postLabels":[],"author":{"id":"47060","alias":"olegchir","fullname":"Олег Чирухин","avatarUrl":"\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Favatars\u002F97a\u002F7a1\u002F7a3\u002F97a7a17a34ac8e5c74105213ae932c4f.jpg","speciality":"Продакт GIGA IDE Cloud, продюсер в Failover Bar","scoreStats":{"score":376,"votesCount":904},"rating":0,"relatedData":null,"contacts":[{"title":"Сайт","url":"https:\u002F\u002Foleg.guru","value":"https:\u002F\u002Foleg.guru","siteTitle":null,"favicon":null}],"authorContacts":[{"title":"Сайт","url":"https:\u002F\u002Foleg.guru","value":"https:\u002F\u002Foleg.guru","siteTitle":null,"favicon":null}],"paymentDetails":{"paymentYandexMoney":null,"paymentPayPalMe":null,"paymentWebmoney":null},"donationsMethod":null,"isInBlacklist":null,"careerProfile":null},"statistics":{"commentsCount":10,"favoritesCount":121,"readingCount":15664,"score":31,"votesCount":35,"votesCountPlus":33,"votesCountMinus":2},"hubs":[{"id":"18226","alias":"jugru","type":"corporative","title":"Блог компании JUG Ru Group","titleHtml":"Блог компании JUG Ru Group","isProfiled":false,"relatedData":null},{"id":"375","alias":"java","type":"collective","title":"Java","titleHtml":"Java","isProfiled":true,"relatedData":null},{"id":"19441","alias":"kotlin","type":"collective","title":"Kotlin","titleHtml":"Kotlin","isProfiled":true,"relatedData":null},{"id":"17188","alias":"compilers","type":"collective","title":"Компиляторы","titleHtml":"Компиляторы","isProfiled":true,"relatedData":null},{"id":"359","alias":"programming","type":"collective","title":"Программирование","titleHtml":"Программирование","isProfiled":true,"relatedData":null}],"flows":[{"id":"1","alias":"develop","title":"Разработка","titleHtml":"Разработка"}],"relatedData":{"vote":null,"unreadCommentsCount":0,"bookmarked":false,"canComment":false,"canEdit":false,"canViewVotes":false,"votePlus":{"canVote":false,"isChargeEnough":false,"isKarmaEnough":false,"isVotingOver":true,"isPublicationLimitEnough":false},"voteMinus":{"canVote":false,"isChargeEnough":false,"isKarmaEnough":false,"isVotingOver":true,"isPublicationLimitEnough":false},"canModerateComments":false,"trackerSubscribed":false,"emailSubscribed":false},"textHtml":"\u003Cdiv xmlns=\"http:\u002F\u002Fwww.w3.org\u002F1999\u002Fxhtml\"\u003EРазработка тестов приложения — не самое приятное занятие. Этот процесс занимает долгое время, требует большой концентрации и при этом крайне востребован. Язык Kotlin дает набор инструментов, который позволяет довольно легко построить собственный проблемно-ориентированный язык (DSL). Есть опыт, когда Kotlin DSL заменил билдеры и статические методы для тестирования модуля планирования ресурсов, что превратило добавление новых тестов и поддержку старых из рутины в увлекательный процесс.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nПо ходу статьи мы разберем все основные инструменты из арсенала разработчика и то, как их можно комбинировать для решения задач тестирования. Мы с вами проделаем путь от проектирования Идеального Теста до запуска максимально приближенного, чистого и понятного теста для системы планирования ресурсов на основе Kotlin.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nСтатья будет полезна практикующим инженерам, тем, кто рассматривает Kotlin как язык для комфортного написания компактных тестов, и тем, кто хочет улучшить процесс тестирования в своем проекте.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cdiv class=\"oembed\"\u003E\u003Cdiv\u003E\u003Cdiv style=\"left: 0; width: 100%; height: 0; position: relative; padding-bottom: 56.2493%;\"\u003E\u003Cdiv class=\"tm-iframe_temp\" data-src=\"https:\u002F\u002Fwww.youtube.com\u002Fembed\u002Fq_UM1EY2S5g?rel=0&amp;showinfo=1\" data-style=\"border: 0; top: 0; left: 0; width: 100%; height: 100%; position: absolute;\" id=\"\" width=\"\"\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nСтатья основана на докладе Ивана Осипова (\u003Ca href=\"https:\u002F\u002Fhabr.com\u002Fusers\u002Fi_osipov\u002F\" class=\"user_link\"\u003Ei_osipov\u003C\u002Fa\u003E) на конференции JPoint. Дальнейшее повествование ведется от его лица. Иван работает программистом в компании Haulmont. Основной продукт компании – CUBA, платформа для разработки энтерпрайза и различных веб-приложений. В том числе на этой платформе делаются и аутсорсинговые проекты, среди которых недавно был проект в области образования, в котором Иван занимался построением расписания для образовательного учреждения. Так сложилось, что последние три года Иван так или иначе работает с планировщиками, и конкретно в Haulmont в течение года они этот самый планировщик тестируют. \u003Cbr\u002F\u003E\n\u003Ca name=\"habracut\"\u003E\u003C\u002Fa\u003E\u003Cbr\u002F\u003E\nДля желающих позапускать примеры — \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fivan-osipov\u002Fkotlin-dsl-example\"\u003Eдержите ссылку на GitHub\u003C\u002Fa\u003E. По ссылке вы найдете весь код, который сегодня мы с вами будем разбирать, запускать и писать. Открывайте код и вперед!\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw780q1\u002Fgetpro\u002Fhabr\u002Fpost_images\u002Fec3\u002Ffa3\u002F670\u002Fec3fa3670fd1c8a3cf7222f7e746933c.jpg\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fpost_images\u002Fec3\u002Ffa3\u002F670\u002Fec3fa3670fd1c8a3cf7222f7e746933c.jpg\" data-blurred=\"true\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nСегодня мы обсудим:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cul\u003E\n\u003Cli\u003Eчто такое проблемно-ориентированные языки; \u003Cbr\u002F\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003Eвстроенные проблемно-ориентированные языки; \u003Cbr\u002F\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003Eпостроение расписания для образовательного учреждения; \u003Cbr\u002F\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003Eкак это все тестируется вместе с Kotlin. \u003Cbr\u002F\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\u003Cbr\u002F\u003E\nСегодня я подробно расскажу об инструментах, которые у нас есть в языке, покажу вам несколько демок, и мы напишем целиком тест от начала и до конца. При этом я хотел бы быть более объективным, поэтому расскажу о каких-то минусах, которые я для себя обозначил при разработке.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nНачнем с разговора о модуле построения расписания. Итак, построение расписания происходит в несколько этапов. Каждый из этих этапов нужно тестировать отдельно. Нужно понимать, что несмотря на то, что этапы разные, модель данных у нас общая.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw780q1\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F031\u002Fbe4\u002F27d\u002F031be427d58c5073a3bc619cbed65792.jpg\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F031\u002Fbe4\u002F27d\u002F031be427d58c5073a3bc619cbed65792.jpg\" data-blurred=\"true\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nЭтот процесс можно представить следующим образом: на входе имеются какие-то данные с общей моделью, на выходе – расписание. Данные проходят валидацию, фильтрацию, затем строятся учебные группы. Имеется в виду предметная область расписания для учебного учреждения. На основе построенных групп и на основе каких-то других данных мы размещаем занятие. Сегодня мы будем говорить только про последний этап – про размещение занятий.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw780q1\u002Fgetpro\u002Fhabr\u002Fpost_images\u002Ff64\u002F032\u002F4b1\u002Ff640324b1a2ff556a4da892822847a9c.jpg\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fpost_images\u002Ff64\u002F032\u002F4b1\u002Ff640324b1a2ff556a4da892822847a9c.jpg\" data-blurred=\"true\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nНемного про тестирование планировщика.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nВо-первых, как вы уже поняли, разные этапы должны тестироваться по отдельности. Можно выделить более-менее стандартный процесс запуска тестирования: есть инициализация данных, есть запуск планировщика, есть проверка результатов этого самого планировщика. Есть огромное количество различных бизнес-кейсов, которые нужно покрыть и разных ситуаций, которые нужно учитывать, чтобы при построении расписания эти ситуации также сохранялись. \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nМодель порой бывает развесистой, и для того, чтобы создать одну-единственную сущность, необходимо проинициализировать пять дополнительных сущностей, а то и больше. Таким образом, суммарно получается большое количество кода, который мы пишем снова и снова для каждого теста. Поддержка таких тестов занимает значительное количество времени. Если захочется обновить модель, а такое иногда происходит, то масштаб изменений затрагивает и тесты.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nНапишем тест:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw780q1\u002Fgetpro\u002Fhabr\u002Fpost_images\u002Ffda\u002F0f5\u002F94d\u002Ffda0f594d14b8043054bcae7fe3315ad.jpg\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fpost_images\u002Ffda\u002F0f5\u002F94d\u002Ffda0f594d14b8043054bcae7fe3315ad.jpg\" data-blurred=\"true\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nДавайте напишем самый простой тест для того, чтобы вы в общем понимали картину. \u003Cbr\u002F\u003E\nЧто первое приходит на ум, когда думаешь про тестирование? Возможно, это несколько примитивные тесты такого вида: создаешь класс, в нем создаешь метод, помечаешь его аннотацией \u003Ci\u003E\u003Ca href=\"https:\u002F\u002Fhabr.com\u002Fusers\u002Ftest\u002F\" class=\"user_link\"\u003ETest\u003C\u002Fa\u003E\u003C\u002Fi\u003E. В итоге, мы пользуемся возможностями JUnit, и инициализируем какие-то данные, значения по умолчанию, затем специфические для теста значения, делаем все то же самое для остальной части модели, и, наконец, создаем объект-планировщик, передаем в него наши данные, запускаем, получаем результаты и проверяем их. Более-менее стандартный процесс. Но в нем, очевидно, есть дублирование кода. Первое, что приходит на ум, это возможность все вынести в статические методы. Раз есть куча значений по умолчанию, почему бы это не скрыть? \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw780q1\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F521\u002F543\u002F590\u002F521543590a00c6101abd4fcefd345e04.jpg\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F521\u002F543\u002F590\u002F521543590a00c6101abd4fcefd345e04.jpg\" data-blurred=\"true\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nЭто хороший первый шаг по пути уменьшения дублирования. \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw780q1\u002Fgetpro\u002Fhabr\u002Fpost_images\u002Fc7f\u002Fc57\u002F11c\u002Fc7fc5711ccf2a4e9dfb626ea64cffb9b.jpg\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fpost_images\u002Fc7f\u002Fc57\u002F11c\u002Fc7fc5711ccf2a4e9dfb626ea64cffb9b.jpg\" data-blurred=\"true\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nГлядя на это, ты понимаешь, что хотелось бы модель держать более компактно. Тут у нас появляется паттерн-строитель, в котором где-то под капотом инициализируется значение по умолчанию, и тут же инициализируются специфичные для теста значения. Становится уже лучше, однако, мы все еще пишем boilerplate-код, и пишем его мы каждый раз заново. Представьте 200 тестов – 200 раз придется написать эти три строчки. Очевидно, хотелось бы от этого как-то избавиться. Развивая идею, мы приходим к некоторому пределу. Так, например, мы можем создать паттерн-билдер вообще для всего.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw780q1\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F259\u002Fe9b\u002F7a3\u002F259e9b7a39e84a41466572b38afc280d.jpg\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F259\u002Fe9b\u002F7a3\u002F259e9b7a39e84a41466572b38afc280d.jpg\" data-blurred=\"true\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nМожно создавать планировщик с нуля и до конца, задавать все нужные нам значения, запускать планирование и все здорово. Если взглянуть подробно на этот пример и детально его разобрать, то окажется, что пишется большое количество ненужного кода. Хотелось бы сделать тесты более читаемыми, чтобы можно было взглянуть и сразу понять, не вникая в паттерны и так далее. \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nИтак, у нас есть какое-то количество ненужного кода. Несложная математика подсказывает, что тут на 55% больше букв, чем нам необходимо, и хотелось бы как-то от них уйти.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw780q1\u002Fgetpro\u002Fhabr\u002Fpost_images\u002Fd55\u002F610\u002Fef7\u002Fd55610ef71d368b8d16c1fdef35cd2c5.jpg\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fpost_images\u002Fd55\u002F610\u002Fef7\u002Fd55610ef71d368b8d16c1fdef35cd2c5.jpg\" data-blurred=\"true\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nСпустя некоторое время поддержка наших тестов оказывается дороже, потому что кода поддерживать нужно больше. Иногда, если мы не предпринимаем каких-то усилий, читаемость либо оставляет желать лучшего, либо получается приемлемо, но нам бы хотелось еще лучше. Возможно, впоследствии мы начнем добавлять какие-то фреймворки, библиотеки, чтобы тесты писать было проще. Благодаря этому, мы повышаем уровень вхождения в тестирование нашего приложения. Здесь у нас и так сложное приложение, уровень вхождения в его тестирование значителен, а мы его еще сильней повышаем.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Ch2\u003EИдеальный тест\u003C\u002Fh2\u003E\u003Cbr\u002F\u003E\nЗдорово говорить, как все плохо, но давайте подумаем, как бы было очень хорошо. Идеальный пример, который мы хотели бы получить в результате:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw780q1\u002Fgetpro\u002Fhabr\u002Fpost_images\u002Fe2b\u002F7c5\u002Ff48\u002Fe2b7c5f48dbd065e95b1617ad10622ba.jpg\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fpost_images\u002Fe2b\u002F7c5\u002Ff48\u002Fe2b7c5f48dbd065e95b1617ad10622ba.jpg\" data-blurred=\"true\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nПредставим, что есть некоторая декларация, в которой мы скажем, что это тест с определенным названием, и хочется использовать пробел для разделения слов в названии, а не CamelCase. Мы строим расписание, у нас есть какие-то данные, и результаты планировщика проверяются. Так как мы работаем в основном с Java, и весь код основного приложения написан на этом языке, хочется иметь еще и совместимые возможности в тестировании. Инициализировать данные хотелось бы максимально очевидно для читателя. Хочется инициализировать некоторые общие данные и часть модели, которая нам необходима. Например, создавать студентов, преподавателей, и описывать, когда они доступны. Вот это — наш идеальный пример.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Ch2\u003EDomain Specific Language\u003C\u002Fh2\u003E\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw780q1\u002Fgetpro\u002Fhabr\u002Fpost_images\u002Ff81\u002Fc79\u002F0a9\u002Ff81c790a921e43d645fc7380607cf8ea.jpg\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fpost_images\u002Ff81\u002Fc79\u002F0a9\u002Ff81c790a921e43d645fc7380607cf8ea.jpg\" data-blurred=\"true\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nГлядя на это все, начинает казаться, что это похоже на некоторый проблемно-ориентированный язык. Нужно понять, что это такое и в чем разница. Языки можно разделить на два типа: языки общего назначения (то, на чем мы с вами пишем постоянно, решаем абсолютно любые задачи и справляемся абсолютно со всем) и языки проблемно-ориентированные. Так, например, SQL нам помогает отлично вытаскивать данные из базы, а какие-то другие языки также помогают решать другие специфичные проблемы.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw780q1\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F2f8\u002Fe45\u002F2f6\u002F2f8e452f62f39f0f56a2c73e355dddcb.jpg\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F2f8\u002Fe45\u002F2f6\u002F2f8e452f62f39f0f56a2c73e355dddcb.jpg\" data-blurred=\"true\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nОдин из способов реализации проблемно-ориентированных языков — встраиваемые языки, или внутренние. Такие языки реализуются на основе языка общего назначения. То есть, несколько конструкций нашего языка общего назначения, образуют что-то вроде базиса – то, чем мы пользуемся при работе с проблемно-ориентированным языком. При этом, конечно, у появляется возможность в проблемно-ориентированном языке использовать все фичи и особенности, которые к приходят из языка общего назначения. \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw780q1\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F07f\u002F4cb\u002F57f\u002F07f4cb57f84ba884bd558ee8e97202a2.jpg\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F07f\u002F4cb\u002F57f\u002F07f4cb57f84ba884bd558ee8e97202a2.jpg\" data-blurred=\"true\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nСнова взглянем на наш идеальный пример и подумаем, какой язык выбрать. Варианта у нас три.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw780q1\u002Fgetpro\u002Fhabr\u002Fpost_images\u002Fd1d\u002Fb21\u002F4b3\u002Fd1db214b39b5620875350b382622e662.jpg\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fpost_images\u002Fd1d\u002Fb21\u002F4b3\u002Fd1db214b39b5620875350b382622e662.jpg\" data-blurred=\"true\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nПервый вариант – Groovy. Замечательный, динамичный язык, который отлично показал себя в построении проблемно-ориентированных языков. Снова можно привести пример build файла в Gradle, которым многие из нас пользуются. Eще есть Scala, которая имеет огромное количество возможностей для реализации чего-то своего. И наконец, есть Kotlin, который нам также помогает строить проблемно-ориентированный язык, и сегодня именно о нем пойдет речь. Я бы не хотел разводить войн и сравнивать Kotlin с чем-то другим, скорее, это остается на вашей совести. Сегодня я покажу вам то, что есть в Kotlin для разработки проблемно-ориентированных языков. Когда вы захотите сравнить это и сказать, что какой-то язык лучше, вы сможете вернуться к этой статье и легко увидеть разницу. \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw780q1\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F050\u002F2e7\u002F29e\u002F0502e729ebf030ea5e4d9f038a4b7cc6.jpg\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F050\u002F2e7\u002F29e\u002F0502e729ebf030ea5e4d9f038a4b7cc6.jpg\" data-blurred=\"true\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nЧто дает нам Kotlin для разработки проблемно-ориентированного языка? \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nВо-первых, это статическая типизация, и все отсюда вытекающие. На этапе компиляции обнаруживается большое количество проблем, и это очень сильно спасает, особенно в том случае, когда не хочется в тестах получать проблемы, связанные с синтаксисом и написанием. \u003Cbr\u002F\u003E\nЗатем, есть отличная система вывода типов, которая приходит из Kotlin. Это замечательно, потому что нет потребности снова и снова писать какие-то типы, все выводится компилятором на ура.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nВ-третьих, есть отличная поддержка среды разработки, и это неудивительно, ведь та же компания, делает основную на сегодня среду разработки, и она же делает Kotlin. \u003Cbr\u002F\u003E\nНаконец, внутри DSL, очевидно, мы можем использовать Kotlin. На мой субъективный взгляд, поддерживать DSL намного проще, чем поддерживать утилитные классы. Как вы увидите далее, читаемость оказывается немного лучше билдеров. Что я понимаю под «лучше»: у вас получается несколько меньше синтаксиса, который вам необходимо писать, — тот, кто будет читать ваш проблемно-ориентированный язык, будет быстрее это воспринимать. Наконец, написать свой велосипед намного веселее! Но на самом деле, реализовать проблемно-ориентированный язык намного проще, чем изучить какой-то новый фреймворк. \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nЯ напомню еще раз \u003Ca href=\"http:\u002F\u002Fgithub.com\u002Fivan-osipov\u002Fkotlin-dsl-example\"\u003Eссылку на GitHub\u003C\u002Fa\u003E, если вы захотите писать демки дальше, то вы можете зайти и забрать код по ссылке. \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Ch2\u003EПроектирование идеала на Kotlin\u003C\u002Fh2\u003E\u003Cbr\u002F\u003E\nПерейдем к проектированию нашего идеала, но уже на Kotlin. Взглянем на наш пример:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw1560\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F5e3\u002F695\u002F850\u002F5e3695850435a204b9cbb3b94f6f7635.png\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F5e3\u002F695\u002F850\u002F5e3695850435a204b9cbb3b94f6f7635.png\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nИ поэтапно начнем его отстраивать.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nУ нас есть тест, который превращается в функцию в Kotlin, которую можно именовать, используя пробелы. \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw1560\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F03d\u002F699\u002Fa71\u002F03d699a71ecf86e0e5c03b7a6de57995.png\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F03d\u002F699\u002Fa71\u002F03d699a71ecf86e0e5c03b7a6de57995.png\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nПометим с помощью аннотации \u003Ca href=\"https:\u002F\u002Fhabr.com\u002Fusers\u002Ftest\u002F\" class=\"user_link\"\u003ETest\u003C\u002Fa\u003E, которая нам доступна из JUnit. В Kotlin можно пользоваться сокращенной формой записи функций и через \u003Ci\u003E=\u003C\u002Fi\u003E избавиться от лишних фигурных скобок для самой функции. \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nSchedule у  нас превращается в блок. То же самое происходит с большим количеством конструкций, так как мы все-таки работаем в Kotlin. \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw1560\u002Fgetpro\u002Fhabr\u002Fpost_images\u002Fa7b\u002Fdb9\u002F656\u002Fa7bdb965641ca434f1eba5e7781b9b53.png\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fpost_images\u002Fa7b\u002Fdb9\u002F656\u002Fa7bdb965641ca434f1eba5e7781b9b53.png\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nПерейдем к оставшейся части. Опять появляются фигурные скобки, от них мы никак не избавимся, но, по крайней мере, попытаемся приблизиться к нашему примеру. Производя конструкции с пробелами, мы могли бы как-то изощриться и сделать их как-то по-другому, но мне кажется, что лучше все-таки сделать обычные методы, которые будут в себя инкапсулировать обработку, но в целом это будет очевидно для пользователя. \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw1560\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F378\u002F6e6\u002Feaf\u002F3786e6eafdb8ebd14c344af30698df56.png\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F378\u002F6e6\u002Feaf\u002F3786e6eafdb8ebd14c344af30698df56.png\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nНаш student превращается в некоторый блок, в котором идет работа со свойствами, с методами, и это мы дальше с вами будем разбирать.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg width=\"600\" src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw1560\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F76b\u002Fa76\u002F554\u002F76ba76554585689a4c2562167fd26833.png\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F76b\u002Fa76\u002F554\u002F76ba76554585689a4c2562167fd26833.png\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nНаконец, преподаватели. Здесь у нас появляются некоторые вложенные блоки. \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw1560\u002Fgetpro\u002Fhabr\u002Fpost_images\u002Fdeb\u002Fa5d\u002Ff0a\u002Fdeba5df0a67a08566e07370bf2f70bc0.png\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fpost_images\u002Fdeb\u002Fa5d\u002Ff0a\u002Fdeba5df0a67a08566e07370bf2f70bc0.png\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nВ коде ниже мы переходим к проверкам. Нам нужны проверки на совместимость с Java-языками – и да, Kotlin совместим с Java.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw1560\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F8aa\u002F09d\u002Fa05\u002F8aa09da05c7c48282e01b0ea409e0f3c.png\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F8aa\u002F09d\u002Fa05\u002F8aa09da05c7c48282e01b0ea409e0f3c.png\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Ch2\u003EАрсенал разработки DSL на Kotlin\u003C\u002Fh2\u003E\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw780q1\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F5f6\u002F113\u002F6ef\u002F5f61136ef41733e6fb88c5ff17d6975f.jpg\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F5f6\u002F113\u002F6ef\u002F5f61136ef41733e6fb88c5ff17d6975f.jpg\" data-blurred=\"true\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nПерейдем к перечню инструментов, которые у нас есть. Здесь я привел табличку может быть, в ней перечислено все, что необходимо для разработки проблемно-ориентированных языков в Kotlin. Можно время от времени к ней возвращаться и освежать память.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nВ таблице приведено некоторое сравнение проблемно-ориентированного синтаксиса и обычного синтаксиса, который имеется в языке.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Ch2\u003EЛямбды в Kotlin\u003C\u002Fh2\u003E\u003Cbr\u002F\u003E\n\u003Ccode\u003Eval lambda: () -&gt; Unit = { }\u003C\u002Fcode\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nНачнем с самого базового кирпичика, который у нас есть в Kotlin – это лямбды. \u003Cbr\u002F\u003E\nСегодня под типом лямбды я буду подразумевать просто функциональный тип. Лямбды обозначаются следующим образом: \u003Ccode\u003E(типы параметров) -&gt; возвращаемый тип\u003C\u002Fcode\u003E. \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nСаму лямбду мы инициализируем с помощью фигурных скобок, внутри них мы можем записать какой-то код, который будет вызван. То есть лямбда, по сути, просто в себя прячет этот код. Запуск такой лямбды выглядит как вызов функции, просто круглые скобки.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw780q1\u002Fgetpro\u002Fhabr\u002Fpost_images\u002Fa48\u002Ff4d\u002Fd49\u002Fa48f4dd497c8aa6b93ab2043e014ca02.jpg\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fpost_images\u002Fa48\u002Ff4d\u002Fd49\u002Fa48f4dd497c8aa6b93ab2043e014ca02.jpg\" data-blurred=\"true\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nЕсли мы хотим передать какой-то параметр, во-первых, мы должны описать это в типе. \u003Cbr\u002F\u003E\nВо-вторых, мы имеем доступ к идентификатору по умолчанию it, которым мы можем пользоваться, однако, если нас это как-то не устраивает, можно задать своё имя параметра и пользоваться ими. \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw780q1\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F194\u002Ffab\u002F626\u002F194fab62612fb71e6a5f148193ec1ff9.jpg\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F194\u002Ffab\u002F626\u002F194fab62612fb71e6a5f148193ec1ff9.jpg\" data-blurred=\"true\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nПри этом, мы можем пропустить использование этого параметра и воспользоваться знаком нижнего подчеркивания для того, чтобы не плодить идентификаторы. В этом случае для игнорирования идентификатора можно было бы вообще ничего не писать, но в общем случае для нескольких параметров есть упомянутый \"_\".\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw780q1\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F1ff\u002F80e\u002Fde2\u002F1ff80ede232393839186b9345065700c.jpg\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F1ff\u002F80e\u002Fde2\u002F1ff80ede232393839186b9345065700c.jpg\" data-blurred=\"true\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nЕсли мы захотим передать больше одного параметра, нужно явно определить их идентификаторы. \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw780q1\u002Fgetpro\u002Fhabr\u002Fpost_images\u002Fc8d\u002Fd2b\u002F952\u002Fc8dd2b952caa82b67157f41dc79535b0.jpg\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fpost_images\u002Fc8d\u002Fd2b\u002F952\u002Fc8dd2b952caa82b67157f41dc79535b0.jpg\" data-blurred=\"true\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nНаконец, что будет, если мы попробуем передать лямбду в какую-то функцию и запустить ее там. Выглядит это в начальном каком-то приближении следующим образом: у нас есть функция, в которую мы передаем лямбду в фигурных скобках, и, если в Kotlin лямбда написана в качестве последнего параметра, мы ее можем как бы вынести за эти скобки. \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw780q1\u002Fgetpro\u002Fhabr\u002Fpost_images\u002Fb80\u002Fd7c\u002F0d8\u002Fb80d7c0d814f3c51a91f2c224707a2d5.jpg\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fpost_images\u002Fb80\u002Fd7c\u002F0d8\u002Fb80d7c0d814f3c51a91f2c224707a2d5.jpg\" data-blurred=\"true\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nЕсли в скобках не осталось ничего, скобки мы можем упразднить. Тем, кто знаком с Groovy, это должно быть знакомо.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw780q1\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F74b\u002F5dd\u002Fa95\u002F74b5dda953b1df973a8d893f7a615195.jpg\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F74b\u002F5dd\u002Fa95\u002F74b5dda953b1df973a8d893f7a615195.jpg\" data-blurred=\"true\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nГде это применяется? Абсолютно везде. То есть те самые фигурные скобки, про которые мы с вами уже говорили, их мы и используем, это и есть те самые лямбды. \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw780q1\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F69e\u002F4bd\u002F781\u002F69e4bd781897ef0515384f81367899cc.jpg\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F69e\u002F4bd\u002F781\u002F69e4bd781897ef0515384f81367899cc.jpg\" data-blurred=\"true\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nТеперь посмотрим на одну из разновидностей лямбд, я их называю лямбды с контекстом. Вы встретите какие-то другие названия, например, lambda with receiver, и отличаются они от обычных лямбд при объявлении типа следующим образом: слева мы дописываем какой-то класс контекста, это может быть любой класс. \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw780q1\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F8bd\u002F375\u002F5b1\u002F8bd3755b1085f3049a7ea32c7cc41f79.jpg\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F8bd\u002F375\u002F5b1\u002F8bd3755b1085f3049a7ea32c7cc41f79.jpg\" data-blurred=\"true\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nДля чего это нужно? Это нужно для того, чтобы внутри лямбды мы имели доступ к ключевому слову this – это самое ключевое слово, указывает нам на наш контекст, то есть на некоторый объект, который мы связали с нашей лямбдой. Так, например, мы можем создать лямбду, которая будет выводить некоторую строку, естественно, мы воспользуемся классом строки для объявления контекста и вызов такой лямбды будет выглядеть вот так:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw780q1\u002Fgetpro\u002Fhabr\u002Fpost_images\u002Fd80\u002F552\u002F181\u002Fd80552181518f155fc596c1bb3ddf2aa.jpg\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fpost_images\u002Fd80\u002F552\u002F181\u002Fd80552181518f155fc596c1bb3ddf2aa.jpg\" data-blurred=\"true\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw780q1\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F788\u002F63d\u002Fb17\u002F78863db1732d9b92bff62bf82060771a.jpg\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F788\u002F63d\u002Fb17\u002F78863db1732d9b92bff62bf82060771a.jpg\" data-blurred=\"true\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw780q1\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F770\u002Fa1b\u002F038\u002F770a1b0388cd2380c491cdf5ca8c344c.jpg\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F770\u002Fa1b\u002F038\u002F770a1b0388cd2380c491cdf5ca8c344c.jpg\" data-blurred=\"true\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nЕсли вам хочется передать контекст в качестве параметра, вы можете это точно также сделать. Однако, совсем передать контекст мы не можем, то есть лямбда с контекстом требует – внимание! – контекста, да. Что будет, если мы начнем передавать лямбду с контекстом в какой-то метод? Вот посмотрим снова на наш метод exec:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw780q1\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F15b\u002Ff36\u002F3d9\u002F15bf363d94919f7c73d775c5d28c6c53.jpg\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F15b\u002Ff36\u002F3d9\u002F15bf363d94919f7c73d775c5d28c6c53.jpg\" data-blurred=\"true\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nПереименуем его в метод student – ничего не изменилось:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw780q1\u002Fgetpro\u002Fhabr\u002Fpost_images\u002Fe12\u002F4cc\u002Fe3b\u002Fe124cce3bd7bdb776c3e946edf8ec52c.jpg\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fpost_images\u002Fe12\u002F4cc\u002Fe3b\u002Fe124cce3bd7bdb776c3e946edf8ec52c.jpg\" data-blurred=\"true\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nТак мы постепенно движемся к нашей конструкции, конструкции student, которая под фигурными скобками скрывает всю инициализацию. \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw780q1\u002Fgetpro\u002Fhabr\u002Fpost_images\u002Feba\u002F286\u002F8b3\u002Feba2868b306f476c35df51d8af500335.jpg\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fpost_images\u002Feba\u002F286\u002F8b3\u002Feba2868b306f476c35df51d8af500335.jpg\" data-blurred=\"true\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nДавайте в ней разберемся. У нас есть какая-то функция student, которая принимает лямбду с контекстом Student. \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw780q1\u002Fgetpro\u002Fhabr\u002Fpost_images\u002Fd3f\u002F954\u002Fe2a\u002Fd3f954e2a7016ecf31a081559674d01f.jpg\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fpost_images\u002Fd3f\u002F954\u002Fe2a\u002Fd3f954e2a7016ecf31a081559674d01f.jpg\" data-blurred=\"true\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nОчевидно, нам нужен контекст.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw780q1\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F362\u002F4d8\u002F3be\u002F3624d83be81ee01223ad758e9e81c94d.jpg\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F362\u002F4d8\u002F3be\u002F3624d83be81ee01223ad758e9e81c94d.jpg\" data-blurred=\"true\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nЗдесь мы создаем объект и на нем же запускаем эту лямбду. \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw780q1\u002Fgetpro\u002Fhabr\u002Fpost_images\u002Fcab\u002Fd4a\u002F940\u002Fcabd4a940deacfcdcb680c4916b29eae.jpg\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fpost_images\u002Fcab\u002Fd4a\u002F940\u002Fcabd4a940deacfcdcb680c4916b29eae.jpg\" data-blurred=\"true\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nВ результате, также мы можем перед запуском лямбды проинициализировать какие-то дефолтные значения, таким образом под функцию мы инкапсулируем все, что нам необходимо. \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw780q1\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F0b4\u002F572\u002F421\u002F0b457242103fc70de806c9de62234135.jpg\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F0b4\u002F572\u002F421\u002F0b457242103fc70de806c9de62234135.jpg\" data-blurred=\"true\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nБлагодаря этому, внутри лямбды мы получаем доступ к ключевому слову this – то, ради чего, наверное, и существуют лямбды с контекстом. \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw780q1\u002Fgetpro\u002Fhabr\u002Fpost_images\u002Fb1b\u002F819\u002Ffdb\u002Fb1b819fdb7488092550b2ac72265cd72.jpg\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fpost_images\u002Fb1b\u002F819\u002Ffdb\u002Fb1b819fdb7488092550b2ac72265cd72.jpg\" data-blurred=\"true\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nЕстественно, мы можем от этого ключевого слова избавиться и у нас получается возможность писать вот такие конструкции. \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw780q1\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F50d\u002Fdbc\u002F492\u002F50ddbc4920ffb871918ce7c063a874a2.jpg\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F50d\u002Fdbc\u002F492\u002F50ddbc4920ffb871918ce7c063a874a2.jpg\" data-blurred=\"true\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nОпять же, если у нас есть не только проперти, а еще есть какие-то методы, мы можем их также вызывать, это выглядит довольно естественно.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw780q1\u002Fgetpro\u002Fhabr\u002Fpost_images\u002Fb72\u002F155\u002F316\u002Fb72155316d99a7e4816d1234644b761b.jpg\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fpost_images\u002Fb72\u002F155\u002F316\u002Fb72155316d99a7e4816d1234644b761b.jpg\" data-blurred=\"true\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Ch2\u003EПрименение\u003C\u002Fh2\u003E\u003Cbr\u002F\u003E\nВсе эти лямбды в коде – это лямбды с контекстом. Существует огромное количество контекстов, они так или иначе пересекаются и позволяют выстраивать наш проблемно-ориентированный язык. \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw780q1\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F83a\u002Ff30\u002F2ff\u002F83af302ff3c0a85db220c70f0d567743.jpg\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F83a\u002Ff30\u002F2ff\u002F83af302ff3c0a85db220c70f0d567743.jpg\" data-blurred=\"true\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nРезюмируя по лямбдам – у нас есть лямбды обычные, есть с контекстом, и теми, и другими можно пользоваться. \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw780q1\u002Fgetpro\u002Fhabr\u002Fpost_images\u002Ffcc\u002F1ac\u002Fdfc\u002Ffcc1acdfc43284500c38884d88212877.jpg\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fpost_images\u002Ffcc\u002F1ac\u002Fdfc\u002Ffcc1acdfc43284500c38884d88212877.jpg\" data-blurred=\"true\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Ch2\u003EОператоры\u003C\u002Fh2\u003E\u003Cbr\u002F\u003E\nВ Kotlin есть ограниченный набор операторов, который вы можете переопределять, используя соглашения и ключевое слово operator. \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nПосмотрим на преподавателя и на его доступность. Допустим, мы говорим, что преподаватель работает по понедельникам с 8 утра в течение 1 часа. Еще мы хотим сказать, что, кроме этого одного часа, он работает с 13.00 в течение 1 часа. Хочется выразить это с помощью оператора \u003Cb\u003E+\u003C\u002Fb\u003E.  Как это можно сделать?\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw780q1\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F17b\u002F360\u002F9ab\u002F17b3609ab2ebd28cf27f906934536e05.jpg\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F17b\u002F360\u002F9ab\u002F17b3609ab2ebd28cf27f906934536e05.jpg\" data-blurred=\"true\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nИмеется некоторый метод availability, который принимает лямбду с контекстом \u003Ccode\u003EAvailabilityTable\u003C\u002Fcode\u003E. Это значит, что есть некоторый класс, который так и называется, и в этом классе объявлен метод monday. Этот метод возвращает \u003Ccode\u003EDayPointer\u003C\u002Fcode\u003E, т.к. нужно к чему-то прикрепить наш оператор.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw780q1\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F721\u002Faea\u002F73d\u002F721aea73d36a41cf3dbecd328b1f5ab5.jpg\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F721\u002Faea\u002F73d\u002F721aea73d36a41cf3dbecd328b1f5ab5.jpg\" data-blurred=\"true\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nДавайте разберемся в том, что такое DayPointer. Это указатель на таблицу доступности некоторого преподавателя, и день в его же расписании. Также у нас есть функция time, которая будет так или иначе превращать какие-то строки в целочисленные индексы: в Kotlin у нас для этого есть класс \u003Ccode\u003EIntRange\u003C\u002Fcode\u003E.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nСлева есть \u003Ccode\u003EDayPointer\u003C\u002Fcode\u003E, справа есть time, и нам хотелось бы их объединить оператором \u003Cb\u003E+\u003C\u002Fb\u003E. Для этого в классе \u003Ccode\u003EDayPointer\u003C\u002Fcode\u003E можно создать наш оператор. Он будет принимать диапазон значений типа Int и возвращать \u003Ccode\u003EDayPointer\u003C\u002Fcode\u003E для того, чтобы мы цепочкой могли снова и снова склеивать наш DSL.\u003Cbr\u002F\u003E\nТеперь взглянем на ключевую конструкцию, с которой все начинается, с которой начинается наш DSL. Ее реализация немного отличается, и сейчас мы в этом разберемся.\u003Cbr\u002F\u003E\nВ Kotlin есть понятие синглтона, встроенное прямо в язык. Для этого вместо ключевого слова class используется ключевое слово \u003Ccode\u003Eobject\u003C\u002Fcode\u003E. Если мы создаем метод внутри синглтона, то можно обращаться к нему так, что нет необходимости снова создавать инстанс этого класса. Мы просто обращаемся к нему как к статическому методу в классе.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw780q1\u002Fgetpro\u002Fhabr\u002Fpost_images\u002Fd3d\u002F226\u002F065\u002Fd3d2260651fc4049ec8d3e6878a0cc51.jpg\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fpost_images\u002Fd3d\u002F226\u002F065\u002Fd3d2260651fc4049ec8d3e6878a0cc51.jpg\" data-blurred=\"true\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nЕсли  взглянуть на результат декомпиляции (то есть, в среде разработки прокликать Tools –&gt; Kotlin –&gt; Show Kotlin Bytecode –&gt; Decompile), то можно увидеть следующую реализацию синглтона: \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw780q1\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F3c6\u002F8c9\u002F577\u002F3c68c957760612b06a5b008c734ddb33.jpg\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F3c6\u002F8c9\u002F577\u002F3c68c957760612b06a5b008c734ddb33.jpg\" data-blurred=\"true\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nЭто всего лишь обычный класс, и ничего сверхъестественного здесь не происходит.\u003Cbr\u002F\u003E\nИмеется еще один интересный инструмент – это оператор \u003Ccode\u003Einvoke\u003C\u002Fcode\u003E. Представим, что у нас есть некоторый класс А, у нас есть его инстанс, и мы хотели бы словно запускать этот инстанс, то есть вызывать круглые скобки у объекта этого класса, и мы можем это сделать благодаря оператору \u003Ccode\u003Einvoke\u003C\u002Fcode\u003E.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw780q1\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F25f\u002F3a1\u002Ff95\u002F25f3a1f95c8c61dcb4937822bd9578e6.jpg\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F25f\u002F3a1\u002Ff95\u002F25f3a1f95c8c61dcb4937822bd9578e6.jpg\" data-blurred=\"true\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nПо сути, круглые скобки позволяют нам вызывать метод invoke и имеет модификатор operator. Если же мы передадим в этот оператор лямбду с контекстом, то у нас получится вот такая конструкция. \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw780q1\u002Fgetpro\u002Fhabr\u002Fpost_images\u002Fb6b\u002F61d\u002F675\u002Fb6b61d67518cb1dc730bce8e309ae0dc.jpg\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fpost_images\u002Fb6b\u002F61d\u002F675\u002Fb6b61d67518cb1dc730bce8e309ae0dc.jpg\" data-blurred=\"true\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nСоздавать каждый раз инстансы то еще занятие, поэтому мы можем совместить предыдущие знания и текущие. \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nСделаем синглтон, назовем его schedule, внутри него мы объявим оператор invoke, внутри создадим контекст, а принимать он будет лямбду с контекстом вот тем самым, который мы здесь же и создаем. Получается единая точка входа в наш DSL, и, как следствие, получается та же самая конструкция – schedule с фигурными скобками.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw780q1\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F53a\u002F41f\u002F7d8\u002F53a41f7d8e9067b6ce850045e745fb4f.jpg\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F53a\u002F41f\u002F7d8\u002F53a41f7d8e9067b6ce850045e745fb4f.jpg\" data-blurred=\"true\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nОтлично, про schedule мы поговорили, давайте взглянем на наши проверки.\u003Cbr\u002F\u003E\nУ нас есть преподаватели, мы построили какое-то расписание, и хотим проверить, что в расписании этого преподавателя в определенный день в определенном занятии есть какой-то объект, с которым мы будем работать. \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw780q1\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F22d\u002F0e3\u002F9ef\u002F22d0e39ef38ceb43fd60654de876691b.jpg\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F22d\u002F0e3\u002F9ef\u002F22d0e39ef38ceb43fd60654de876691b.jpg\" data-blurred=\"true\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nХотелось бы использовать квадратные скобки и обращаться к нашему расписанию способом, визуально похожим на доступ к массивам.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw780q1\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F1e6\u002F895\u002Fb9e\u002F1e6895b9ed089ed99d4c2639e6e1f578.jpg\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F1e6\u002F895\u002Fb9e\u002F1e6895b9ed089ed99d4c2639e6e1f578.jpg\" data-blurred=\"true\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nСделать это можно с помощью оператора: get \u002F set:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw780q1\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F815\u002F9f5\u002Fa86\u002F8159f5a8628b6c5bb21d219e395ea32b.jpg\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F815\u002F9f5\u002Fa86\u002F8159f5a8628b6c5bb21d219e395ea32b.jpg\" data-blurred=\"true\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nЗдесь мы не делаем ничего нового, просто следуем соглашениям. В случае оператора set нужно дополнительно передать значения в наш метод:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw780q1\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F4c8\u002F03d\u002F2f2\u002F4c803d2f20ed8b7f79e308d47b734bd9.jpg\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F4c8\u002F03d\u002F2f2\u002F4c803d2f20ed8b7f79e308d47b734bd9.jpg\" data-blurred=\"true\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nИтак, квадратные скобки для чтения превращаются в get, а квадратные скобки, через которые мы присваиваем, превращаются в set.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Ch2\u003EДемо: object, operators\u003C\u002Fh2\u003E\u003Cbr\u002F\u003E\nДальнейший текст можно или читать, или \u003Ca href=\"https:\u002F\u002Fyoutu.be\u002Fq_UM1EY2S5g?t=1403\"\u003Eсмотреть видео по ссылке\u003C\u002Fa\u003E. У видео есть четкое время начало, но не указано времени окончания — в принципе, однажды начав, можно досмотреть его до конца статьи.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nДля удобства я кратко изложу суть видео прямо в тексте.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nДавайте напишем тест. У нас есть некоторый объект schedule, и если мы через ctrl+b перейдем к его реализации, то мы увидим все, о чем я перед этим говорил.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw1560\u002Fwebt\u002Fuk\u002Fpg\u002F0d\u002Fukpg0djbwn_hfyq4a7g9usa65aa.png\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fwebt\u002Fuk\u002Fpg\u002F0d\u002Fukpg0djbwn_hfyq4a7g9usa65aa.png\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nВнутри объекта schedule мы хотим проинициализировать данные, затем выполнить какие-то проверки, и в рамках данных мы хотели бы сказать, что:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cul\u003E\n\u003Cli\u003Eнаше учебное заведение работает с 8 утра;\u003Cbr\u002F\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003Eесть некоторый набор предметов, для которых мы будем строить расписание;\u003Cbr\u002F\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003Eесть некоторые преподаватели, у которых описана какая-то доступность;\u003Cbr\u002F\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003Eесть студент;\u003Cbr\u002F\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003Eв принципе для студента нам нужно сказать только то, что он изучает какой-то определенный предмет.\u003Cbr\u002F\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw1560\u002Fwebt\u002Fv_\u002Fmq\u002Fia\u002Fv_mqia50010hyrqza7zubejj62e.png\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fwebt\u002Fv_\u002Fmq\u002Fia\u002Fv_mqia50010hyrqza7zubejj62e.png\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nИ здесь проявляется один из минусов Kotlin и проблемно-ориентированных языков в принципе: довольно сложно адресовать какие-то объекты, которые мы создали раньше. В этом демо я буду указывать все в качестве индексов, то есть rus – это индекс 0, математика – это индекс 2. И преподаватель естественно, тоже что-то ведет. Он не просто на работу ходит, а чем-то занимается. Для читателей этой статьи я хотел бы предложить еще один вариант адресации, вы можете завести уникальные теги и по ним сохранять сущности в Map, а когда нужно обратиться к какой-то из них, то по тегу вы всегда можете её найти. Продолжим разбирать DSL. \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nЗдесь что нужно отметить: во-первых, у нас есть оператор +, к реализации которого мы также можем перейти и увидеть, что у нас на самом деле есть класс DayPointer, который помогает нам связывать это все с помощью оператора. \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nИ благодаря тому, что у нас есть доступ к контексту, среда разработки нам подсказывает, что у нас в контексте через ключевое слово this, нам доступна некоторая коллекция, и ей мы будем пользоваться. \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw1560\u002Fwebt\u002Fl_\u002F3q\u002Fuw\u002Fl_3quwu2xaqlxikn71jhpnnero4.png\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fwebt\u002Fl_\u002F3q\u002Fuw\u002Fl_3quwu2xaqlxikn71jhpnnero4.png\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nТо есть у нас это коллекция ивентов. Ивент в себя инкапсулирует набор свойств, например: что имеется студент, преподаватель, в какой день на какой урок они встречаются. \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw1560\u002Fwebt\u002Ffn\u002F1f\u002Fxa\u002Ffn1fxa5legi4mwszf5xbudchoi0.png\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fwebt\u002Ffn\u002F1f\u002Fxa\u002Ffn1fxa5legi4mwszf5xbudchoi0.png\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nПродолжим писать тест дальше. \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw1560\u002Fwebt\u002Fvj\u002Fbt\u002Fs9\u002Fvjbts9wb6fely-atqa-kr88i9qm.png\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fwebt\u002Fvj\u002Fbt\u002Fs9\u002Fvjbts9wb6fely-atqa-kr88i9qm.png\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nЗдесь, опять же, мы пользуемся оператором get, перейти к его реализации не так просто, но мы можем это сделать. \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw1560\u002Fwebt\u002Fiz\u002Fgd\u002Fdv\u002Fizgddvy3bomaqjp_6yvbfrbcgpe.png\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fwebt\u002Fiz\u002Fgd\u002Fdv\u002Fizgddvy3bomaqjp_6yvbfrbcgpe.png\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nПо сути, мы просто следуем соглашению, благодаря чему и получаем доступ к этой конструкции. \u003Cbr\u002F\u003E\nДавайте вернемся к презентации и продолжим разговор про Kotlin. Мы хотели проверки, реализованные на Kotlin, и мы перебирали эти вот ивенты:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw780q1\u002Fgetpro\u002Fhabr\u002Fpost_images\u002Fb4f\u002Ff23\u002Fa77\u002Fb4ff23a77974a299ecac5c1c3b5d984f.jpg\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fpost_images\u002Fb4f\u002Ff23\u002Fa77\u002Fb4ff23a77974a299ecac5c1c3b5d984f.jpg\" data-blurred=\"true\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nИвент – это, по сути, инкапсулированный набор из 4 свойств. Хочется раскладывать этот ивент на набор свойств, словно кортеж. В русском языке такая конструкция называется \u003Ci\u003Eмульти-декларации\u003C\u002Fi\u003E (я нашел только такой перевод), или \u003Ci\u003Edestructuring declaration\u003C\u002Fi\u003E, и работает это следующим образом:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw780q1\u002Fgetpro\u002Fhabr\u002Fpost_images\u002Ff2c\u002F185\u002F5f1\u002Ff2c1855f1ee98b51a4bda6ce9cc0b0a8.jpg\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fpost_images\u002Ff2c\u002F185\u002F5f1\u002Ff2c1855f1ee98b51a4bda6ce9cc0b0a8.jpg\" data-blurred=\"true\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nЕсли кто-то из вас не знаком с этой фичей она работает так: можно взять ивент, и на месте, где он используется, воспользовавшись круглыми скобками, разложить его на набор свойств. \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw780q1\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F444\u002F95f\u002F0a3\u002F44495f0a381b71a20578736f0cb491af.jpg\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F444\u002F95f\u002F0a3\u002F44495f0a381b71a20578736f0cb491af.jpg\" data-blurred=\"true\"\u002F\u003E \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nРаботает это потому, что у нас есть метод componentN, то есть это метод, который генерируется компилятором благодаря модификатору data, который мы пишем перед классом.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw780q1\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F126\u002Fdb9\u002Fd78\u002F126db9d789acf9b3482f314d5a53261f.jpg\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F126\u002Fdb9\u002Fd78\u002F126db9d789acf9b3482f314d5a53261f.jpg\" data-blurred=\"true\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nВместе с этим нам прилетает большое количество других методов. Нас интересует именно метод componentN, генерируется на основе перечисленных в списке параметров primary-конструктора свойств. \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw1560\u002Fwebt\u002Fhd\u002Fnf\u002Fou\u002Fhdnfoutg14046a351gjyhodfprc.png\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fwebt\u002Fhd\u002Fnf\u002Fou\u002Fhdnfoutg14046a351gjyhodfprc.png\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nЕсли бы у нас не было модификатора data, необходимо было бы вручную написать оператор, который будет делать все то же самое.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw780q1\u002Fgetpro\u002Fhabr\u002Fpost_images\u002Fe2b\u002F37f\u002Fa2f\u002Fe2b37fa2fad7cd8e201987c32fbf572b.jpg\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fpost_images\u002Fe2b\u002F37f\u002Fa2f\u002Fe2b37fa2fad7cd8e201987c32fbf572b.jpg\" data-blurred=\"true\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw780q1\u002Fgetpro\u002Fhabr\u002Fpost_images\u002Fe59\u002Fbc7\u002F479\u002Fe59bc7479e66cd96c4d0d5093ef33608.jpg\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fpost_images\u002Fe59\u002Fbc7\u002F479\u002Fe59bc7479e66cd96c4d0d5093ef33608.jpg\" data-blurred=\"true\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nИтак, у нас какие-то методы componentN, и они, раскладываются вот в такой вызов:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw780q1\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F96a\u002Fcae\u002Faa9\u002F96acaeaa91222d55c4a77b70c9b02903.jpg\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F96a\u002Fcae\u002Faa9\u002F96acaeaa91222d55c4a77b70c9b02903.jpg\" data-blurred=\"true\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nПо сути, это синтаксический сахар над вызовом нескольких методов. \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nМы с вами уже говорили про некоторую таблицу доступности, и, на самом деле, я вас обманул. Так бывает. Никакого \u003Ccode\u003EavaiabilityTable\u003C\u002Fcode\u003E не существует, нет его в природе, а есть матрица булевских значений. \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw780q1\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F393\u002Fd7d\u002F5d7\u002F393d7d5d739ea9cecedadff695ca6874.jpg\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F393\u002Fd7d\u002F5d7\u002F393d7d5d739ea9cecedadff695ca6874.jpg\" data-blurred=\"true\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nНе нужно никакого дополнительного класса: можно взять матрицу булевских значений и переименовать для большей очевидности. Это можно сделать с помощью так называемого \u003Ci\u003Etypealias\u003C\u002Fi\u003E или \u003Ci\u003Eпсевдонима типа\u003C\u002Fi\u003E. К сожалению, никаких дополнительных бонусов мы от этого не получаем, это просто переименование. Если вы возьмете и availability переименуете обратно в матрицу булевских значений, вообще ничего не изменится. Код как работал, так и будет работать.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nДавайте взглянем на преподавателя, вот как раз на эту самую доступность, и поговорим о нем:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw780q1\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F521\u002F031\u002Ff59\u002F521031f59a8e7b222c2614b32ba88abd.jpg\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F521\u002F031\u002Ff59\u002F521031f59a8e7b222c2614b32ba88abd.jpg\" data-blurred=\"true\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nУ нас есть преподаватель, и у него вызывается метод availability (вы еще не потеряли нить рассуждений? :-). Откуда он взялся? То есть, преподаватель — это какая-то entity, у которой есть класс, и это — бизнес-код. И не может там быть никакого дополнительного метода. \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw780q1\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F54e\u002F044\u002F683\u002F54e0446838b2360d695b45e5bacec69d.jpg\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F54e\u002F044\u002F683\u002F54e0446838b2360d695b45e5bacec69d.jpg\" data-blurred=\"true\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nЭтот метод появляется благодаря extension-функциям. Берем и прикручиваем к нашему классу какому-то еще одну функцию, которую можем запускать на объектах этого класса. \u003Cbr\u002F\u003E\nЕсли мы передадим этой функции некоторую лямбду, а затем запустим ее на существующем свойстве, то все отлично — метод availability в своей реализации инициализирует свойство availability. От этого можно избавиться. Мы уже знаем про оператор invoke, который может и крепиться к типу, и быть одновременно extension-функцией. Если в этот оператор передавать лямбду, то тут же, на ключевом слове this, мы можем эту лямбду запускать. В результате, когда мы работаем с преподавателем, доступность – свойство преподавателя, а не какой-то дополнительный метод, и тут никакого рассинхрона не происходит. \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw780q1\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F4d6\u002F1af\u002Ff71\u002F4d61aff7169c403c75493790720c0e6e.jpg\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F4d6\u002F1af\u002Ff71\u002F4d61aff7169c403c75493790720c0e6e.jpg\" data-blurred=\"true\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nВ качестве бонуса, extension-функции можно создавать для nullable типов. Это хорошо, так как если будет переменная с nullable типом, содержащим значение null, наша функция к этому уже готова, и не упадет с NullPointer. Внутри этой функции this может быть равен null, и это нужно обработать.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw780q1\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F59a\u002Fe33\u002F1c5\u002F59ae331c58bcd16003f51f870b89549e.jpg\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F59a\u002Fe33\u002F1c5\u002F59ae331c58bcd16003f51f870b89549e.jpg\" data-blurred=\"true\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nРезюмируя по extension-функциям: необходимо понимать, что имеется доступ только к публичному API класса, а сам класс никак не модифицируется. Extension-функция определяется по типу переменной, а не по фактическому типу. Более того, член класса с той же сигнатурой окажется приоритетней. Можно создавать extension-функцию для одного класса, но написать ее в совершенно другом классе, и внутри этой extension-функции будет доступ к одновременно двум контекстам. Получается пересечение контекстов. Ну и наконец, это отличная возможность взять и прикрутить операторы вообще в любое место, где мы хотим. \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw780q1\u002Fgetpro\u002Fhabr\u002Fpost_images\u002Fa04\u002F1e8\u002F610\u002Fa041e86102be21acf2c3170cf941d064.jpg\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fpost_images\u002Fa04\u002F1e8\u002F610\u002Fa041e86102be21acf2c3170cf941d064.jpg\" data-blurred=\"true\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nСледующий инструмент — инфиксные функции. Очередной опасный молоток в руках разработчика. Почему опасный? То, что вы видите – это код. Такой код можно написать в Kotlin, и не надо так делать! Пожалуйста, не делайте так. Но тем не менее, подход хороший. Благодаря этому есть возможность избавляться от точек, скобочек — от всего того шумного синтаксиса, от которого мы пытаемся уйти как можно дальше и сделать наш код немного чище. \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw780q1\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F909\u002F8c3\u002F4a0\u002F9098c34a06b09bac0597004c6fbf6b1a.jpg\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F909\u002F8c3\u002F4a0\u002F9098c34a06b09bac0597004c6fbf6b1a.jpg\" data-blurred=\"true\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nКак это работает? Давайте возьмем более простой пример — переменную типа integer. Создадим для нее extension-функцию, назовем ее shouldBeEqual, она что-то будет делать, но это уже неинтересно. Если мы допишем слева от нее модификатор infix – все, этого достаточно. Можно избавляться от точек и скобочек, но есть парочка нюансов.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw780q1\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F39e\u002Ffc2\u002F31f\u002F39efc231fb88cee1ef014a36fcb6cc73.jpg\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F39e\u002Ffc2\u002F31f\u002F39efc231fb88cee1ef014a36fcb6cc73.jpg\" data-blurred=\"true\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nНа основе этого реализована как раз конструкция data и assertions, скрепленные вместе.\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw780q1\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F80f\u002F6dd\u002F126\u002F80f6dd126255196fc538026ea28656c1.jpg\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F80f\u002F6dd\u002F126\u002F80f6dd126255196fc538026ea28656c1.jpg\" data-blurred=\"true\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nДавайте в ней разберемся. У нас есть SchedulingContext — общий контекст запуска планирования. Есть функция data, которая возвращает результат этого планирования. При этом мы создаем extension-функцию и одновременно инфикс-функцию assertions, которая будет запускать лямбду, проверяющую наши значения. \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw780q1\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F449\u002F74c\u002Ffe5\u002F44974cfe559d94d17e6435557757af80.jpg\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F449\u002F74c\u002Ffe5\u002F44974cfe559d94d17e6435557757af80.jpg\" data-blurred=\"true\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nИмеется субъект, объект и действие, и нужно их как-то связать. В этом случае результат выполнения data с фигурными скобками – это субъект. Лямбда, которую мы передаем в метод assertions – объект, а сам метод assertions – действие. Все это как бы склеивается. \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw780q1\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F518\u002Faac\u002F4e9\u002F518aac4e9d92ca84a79e6cdb09fea773.jpg\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F518\u002Faac\u002F4e9\u002F518aac4e9d92ca84a79e6cdb09fea773.jpg\" data-blurred=\"true\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nГоворя про инфикс функции, важно понимать, что это шаг по избавлению от шумного синтаксиса. Однако, у нас обязательно должен существовать субъект и объект этого действия, и нужно воспользоваться модификатором infix. Может быть точно один параметр — то есть ноль параметров не может быть, два не может быть, три – ну вы поняли. Можно передавать в эту функцию, например, лямбды, и таким образом получаются конструкции, которые вы раньше не видели.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nПерейдем к следующей демке. Ее лучше смотреть на видео, а не читать текстом.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cdiv class=\"oembed\"\u003E\u003Cdiv\u003E\u003Cdiv style=\"left: 0; width: 100%; height: 0; position: relative; padding-bottom: 56.2493%;\"\u003E\u003Cdiv class=\"tm-iframe_temp\" data-src=\"https:\u002F\u002Fwww.youtube.com\u002Fembed\u002Fq_UM1EY2S5g?rel=0&amp;showinfo=1&amp;start=2072&amp;end=2170\" data-style=\"border: 0; top: 0; left: 0; width: 100%; height: 100%; position: absolute;\" id=\"\" width=\"\"\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nТеперь все выглядит готовым: инфикс функции вы увидели, extension функции увидели, destructuring declaration готов. \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nВернемся к нашей презентации, и здесь мы перейдем к одному довольно важному моменту при построении проблемно ориентированных языков – то, о чем стоит задумываться – это контроль контекста.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw780q1\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F9ff\u002F0d3\u002F57a\u002F9ff0d357a3e39d01bcb3d5d07d81d71e.jpg\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F9ff\u002F0d3\u002F57a\u002F9ff0d357a3e39d01bcb3d5d07d81d71e.jpg\" data-blurred=\"true\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nБывают ситуации, когда мы можем взять DSL и переиспользовать его прям внутри него же, а мы этого делать не хотим. Наш пользователь (возможно, неопытный пользователь), пишет data внутри data, и это не имеет никакого смысла. Нам хотелось бы как-то запретить ему это делать. \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nДо Kotlin версии 1.1 мы должны были сделать следующее: в ответ на то, что у нас в \u003Ccode\u003ESchedulingContext\u003C\u002Fcode\u003E есть метод data, мы должны были в \u003Ccode\u003EDataContext\u003C\u002Fcode\u003E создать еще один метод data, в который принимаем лямбду (пускай без реализации), должны были пометить этот метод аннотацией \u003Ccode\u003E@Deprecated\u003C\u002Fcode\u003E и сказать компилятору не компилировать такое. Видишь, что такой метод запускается – не компилируй. Используя такой подход, мы получим даже некоторое осмысленное сообщение, когда будем писать неосмысленный код.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw780q1\u002Fgetpro\u002Fhabr\u002Fpost_images\u002Fdfb\u002F7a7\u002F0b4\u002Fdfb7a70b4fba1c5cb0bf37715a4fe1bd.jpg\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fpost_images\u002Fdfb\u002F7a7\u002F0b4\u002Fdfb7a70b4fba1c5cb0bf37715a4fe1bd.jpg\" data-blurred=\"true\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nПосле версии Kotlin 1.1, появилась замечательная аннотация \u003Ccode\u003E@DslMarker\u003C\u002Fcode\u003E. Эта аннотация нужна, чтобы помечать производные аннотации. Ими, в свою очередь, мы будем размечать проблемно-ориентированные языки. Для каждого проблемно-ориентированного языка вы можете создать одну аннотацию, которую пометите \u003Ccode\u003E@DslMarker\u003C\u002Fcode\u003E и будете её вешать на каждый контекст, который необходим. Больше нет потребности в том, чтобы писать дополнительные методы, которые нужно запрещать компилировать — оно все просто работает. Не компилируется.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nТем не менее, есть один такой специальный случай, когда мы работаем с нашей бизнес-моделью. Обычно она написана на Java. Есть контекст,  есть аннотация, которой нужно пометить контекст. Как думаете, какой контекст внутри метода студент? Класс \u003Ccode\u003EStudent\u003C\u002Fcode\u003E. Это – кусок нашей бизнес-модели, там Kotlin нет. \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw780q1\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F4c6\u002F111\u002Fc5c\u002F4c6111c5c80ab5c4856e68c06880ed4a.jpg\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F4c6\u002F111\u002Fc5c\u002F4c6111c5c80ab5c4856e68c06880ed4a.jpg\" data-blurred=\"true\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw780q1\u002Fgetpro\u002Fhabr\u002Fpost_images\u002Fcc3\u002F572\u002Fa05\u002Fcc3572a054dabbe4e32362d845b30cf8.jpg\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fpost_images\u002Fcc3\u002F572\u002Fa05\u002Fcc3572a054dabbe4e32362d845b30cf8.jpg\" data-blurred=\"true\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nНам хотелось бы как-то эту ситуацию тоже контролировать, ведь в этом случае есть доступ к следующей конструкции: создать студента внутри студентов. Не хочу вызывать у вас никаких неправильных ассоциаций, но мы хотим это запретить, это неправильно.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg width=\"100%\" src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw780q1\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F2fd\u002F77d\u002F125\u002F2fd77d1250c0677a24c1c9c358f11663.jpg\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F2fd\u002F77d\u002F125\u002F2fd77d1250c0677a24c1c9c358f11663.jpg\" data-blurred=\"true\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nВарианта у нас есть три. \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Col\u003E\n\u003Cli\u003EСоздать целый контекст, который отвечает за нашего студента. Назовем его StudentContext. Опишем там все свойства, и потом будем на основе него создавать студента. Некоторое такое безумие – пишется куча кода, наверное, больше, чем для продакшена. \u003Cbr\u002F\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003EВторой вариант – можем взять и создать некоторый интерфейс, который отражает нашего студента, то есть просто перечисляет свойства. Но переиспользуем этот же интерфейс в наших тестах. Возьмем StudentContext и скажем, что он реализует некоторый интерфейс IStudent посредством делегирования реализации этого интерфейса другому объекту. То есть, создается тут же на месте объект Student, и от него берется вся реализация интерфейса IStudent для StudentContext. Помечаем аннотацией DslMarker и прекрасно, все работает.\u003Cbr\u002F\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003EЛюбимый способ: воспользуемся аннотацией deprecated и запретим компилировать неправильный код. Просто перечислим то, что нам необходимо. Обычно в иерархии сущностей находится такая сущность, которая содержит идентификатор. На эту сущность мы можем повесить extension-функцию, которую мы и запретим вызывать. В том числе и студента внутри студента.\u003Cbr\u002F\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw780q1\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F9ea\u002F10d\u002Fd6a\u002F9ea10dd6af4495be38653339010e0a46.jpg\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F9ea\u002F10d\u002Fd6a\u002F9ea10dd6af4495be38653339010e0a46.jpg\" data-blurred=\"true\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nТаким образом, даже на этом уровне можно контролировать контекст, но с некоторыми ограничениями, которые нужно уметь обходить. \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw780q1\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F1d7\u002F9f9\u002F53f\u002F1d79f953fc755000013d44d15f56fb73.jpg\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F1d7\u002F9f9\u002F53f\u002F1d79f953fc755000013d44d15f56fb73.jpg\" data-blurred=\"true\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nРезюмируя про контроль контекста. Защищайте ваших пользователей от ошибок. Понятно, что некоторые ошибки пользователи делать не будут, ведь это очевидно, но контролировать это все равно желательно. Тем более, что реализация такого контроля занимает не так много средств и времени. Пользуйтесь аннотацией @DslMarker, которой вы помечаете ваши собственные аннотации. В тех ситуациях, когда вы не можете пользоваться аннотацией @DslMarker, воспользуйтесь аннотацией @Deprecated, это поможет вам обойти те случаи, которые пока не работают. \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nИтак, демка контроля контекста:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cdiv class=\"oembed\"\u003E\u003Cdiv\u003E\u003Cdiv style=\"left: 0; width: 100%; height: 0; position: relative; padding-bottom: 56.2493%;\"\u003E\u003Cdiv class=\"tm-iframe_temp\" data-src=\"https:\u002F\u002Fwww.youtube.com\u002Fembed\u002Fq_UM1EY2S5g?rel=0&amp;showinfo=1&amp;start=2503&amp;end=2575\" data-style=\"border: 0; top: 0; left: 0; width: 100%; height: 100%; position: absolute;\" id=\"\" width=\"\"\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw780q1\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F16c\u002F690\u002Ff58\u002F16c690f589bf90cc1547edc1ee985ae0.jpg\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F16c\u002F690\u002Ff58\u002F16c690f589bf90cc1547edc1ee985ae0.jpg\" data-blurred=\"true\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Ch2\u003EМинусы и проблемы\u003C\u002Fh2\u003E\u003Cbr\u002F\u003E\nВо-первых, переиспользование частей DSL. Сегодня вы уже видели, что адресовать созданные с помощью DSL сущности может быть проблематично. Есть способы, как это обойти, но об этом желательно подумать заранее, чтобы на этот случай иметь план.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nПредставим, что у вас есть какой-то кусочек кода, и вы хотите его просто повторять, например, в цикле иметь возможность создавать студентов, много-много раз одинаковых студентов, или любые другие сущности. Как это сделать? Можно воспользоваться циклом for — не самый лучший вариант. Можно создать дополнительный метод внутри вашего DSL, и это будет уже более хорошим решением, однако, решать такие проблемы придется прямо на уровне DSL. Следите за ключевым словом this и дефолтным именованием параметра it. К счастью, с версии Kotlin плагина 1.2.20 у нас есть хинты, которые видны прямо в среде разработки. Серенький код нам подсказывает, с каким контекстом мы работаем или что такое it. \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nВложенность может стать проблемой. Вы выстроили прекрасный DSL, но инициализация модели уходит вглубь-вглубь-вглубь, и в итоге вы чаще пользуетесь горизонтальным скроллом, чем вертикальным. Желательно, скрывать под дефолтной реализацией дефолтные значения. Пользователь, которому нужен просто студент, не хочет знать ни про какую программу обучения, ни про что-то еще, он просто хочет создать студента без подробностей, даже не хочет имя обозначать. Старайтесь сократить синтаксис. Например, какие-то значения по умолчанию указать, лямбду пустую передать и т.д. \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nНаконец, документация. На мой субъективный взгляд, лучшая документация для вашего проблемно-ориентированного языка – это больше количество примеров этого DSL. Здорово, когда у вас есть Kotlin-доки, это хороший бонус. Однако, если пользователь DSL понятия не имеет, какие конструкции имеются, ему и Kotlin-доки смотреть негде. Чувствовали такое когда-нибудь? Когда вы приходите писать Gradle-файл, в самом начале, вы не понимаете, что в нем есть, и нужны какие-то примеры. Вам наплевать на какие-то контексты, вы хотите примеры, и вот это – та самая лучшая документация, которой можно пользоваться новым юзерам вашего DSL. \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw780q1\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F13e\u002F4e0\u002F05a\u002F13e4e005af12def0ee687b008ffc41ac.jpg\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fpost_images\u002F13e\u002F4e0\u002F05a\u002F13e4e005af12def0ee687b008ffc41ac.jpg\" data-blurred=\"true\"\u002F\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nНе суйте DSL’и во все щели, пожалуйста. Это очень хочется делать, когда вы владеете этим инструментом. Хочется сказать, давайте создадим DSL сюда, может быть, сюда и сюда. Во-первых – это неблагодарная работа. Во-вторых, все-таки желательно применять это по месту назначения. Там, где вам это действительно помогает решать какую-то проблему. \u003Cbr\u002F\u003E\nНаконец, изучайте Kotlin. Изучайте возможности, которые приходят в этот язык, новые функции, благодаря чему ваш код будет все чище, короче, компактнее, читать его будет намного проще. И когда вы будете снова возвращаться к тестированию (например, что-то дописали, на это нужно сделать тест), вам будет намного приятнее это делать, потому что DSL максимально компактный, комфортный, и у вас нет проблем с тем, чтобы создать с десяток студентов. Просто в пару строчек это делается. \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nТренируйтесь на «кошках», как герой одного известного фильма. На мой взгляд, сначала проще привнести в ваш проект Kotlin в качестве тестирования. Это хорошая возможность проверить язык, попробовать его, посмотреть на его фичи. Это такое поле боя, на котором даже если ничего не получится — ничего страшного, все еще можно этим пользоваться. \u003Cbr\u002F\u003E\nНаконец, предварительно проектируйте DSL. Сегодня я показал некоторый идеальный пример, и мы прошли поэтапно до построения проблемно-ориентированного языка. Если заранее спроектировать DSL, в конечном итоге будет намного проще, вы не будете по 10 раз переделывать его, вы не будете париться о том, что контексты каким-то образом пересекаются и логически сильно связаны. Просто предварительно спроектируйте DSL – это довольно легко сделать на бумажке, когда вы знаете набор конструкций, которые я вам сегодня рассказал.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nИ наконец, контакты для связи. Меня зовут Иван Осипов, Telegram: \u003Ca href=\"http:\u002F\u002Ft.me\u002Fivan_osipov\"\u003E@ivan_osipov\u003C\u002Fa\u003E, Twitter: \u003Ca href=\"https:\u002F\u002Ftwitter.com\u002F_osipov_\"\u003E@_osipov_\u003C\u002Fa\u003E, Хабр: \u003Ca href=\"https:\u002F\u002Fhabr.com\u002Fusers\u002Fi_osipov\u002F\" class=\"user_link\"\u003Ei_osipov\u003C\u002Fa\u003E. Буду ждать ваших комментариев.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cblockquote\u003EМинутка рекламы. Если вам понравился этот доклад с конференции \u003Cb\u003EJPoint\u003C\u002Fb\u003E — обратите внимание, что 19-20 октября в Санкт-Петербурге пройдет \u003Ca href=\"https:\u002F\u002Fjokerconf.com\u002F\"\u003EJoker 2018\u003C\u002Fa\u003E — крупнейшая в России Java-конференция. В его программе тоже будет много интересного. Конференция анонсирована совсем недавно, но на сайте уже есть первые спикеры и доклады.\u003C\u002Fblockquote\u003E\u003C\u002Fdiv\u003E","tags":[{"titleHtml":"kotlin"},{"titleHtml":"java"},{"titleHtml":"jpoint"},{"titleHtml":"joker 2018"}],"metadata":{"stylesUrls":[],"scriptUrls":[],"shareImageUrl":"https:\u002F\u002Fhabr.com\u002Fshare\u002Fpublication\u002F416725\u002F8ebef63795781a3780fcb7c68b335364\u002F","shareImageWidth":1200,"shareImageHeight":630,"vkShareImageUrl":"https:\u002F\u002Fhabr.com\u002Fshare\u002Fpublication\u002F416725\u002F8ebef63795781a3780fcb7c68b335364\u002F?format=vk","schemaJsonLd":"{\"@context\":\"http:\\\u002F\\\u002Fschema.org\",\"@type\":\"Article\",\"mainEntityOfPage\":{\"@type\":\"WebPage\",\"@id\":\"https:\\\u002F\\\u002Fhabr.com\\\u002Fru\\\u002Fcompanies\\\u002Fjugru\\\u002Farticles\\\u002F416725\\\u002F\"},\"headline\":\"Kotlin DSL: Теория и Практика\",\"datePublished\":\"2018-07-10T18:25:18+03:00\",\"dateModified\":\"2018-07-11T10:15:45+03:00\",\"author\":{\"@type\":\"Person\",\"name\":\"Олег Чирухин\"},\"publisher\":{\"@type\":\"Organization\",\"name\":\"Habr\",\"logo\":{\"@type\":\"ImageObject\",\"url\":\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fwebt\\\u002Fa_\\\u002Flk\\\u002F9m\\\u002Fa_lk9mjkccjox-zccjrpfolmkmq.png\"}},\"description\":\"Разработка тестов приложения &mdash; не самое приятное занятие. Этот процесс занимает долгое время, требует большой концентрации и при этом крайне востребован. Язык Ko...\",\"url\":\"https:\\\u002F\\\u002Fhabr.com\\\u002Fru\\\u002Fcompanies\\\u002Fjugru\\\u002Farticles\\\u002F416725\\\u002F#post-content-body\",\"about\":[\"c_jugru\",\"h_java\",\"h_kotlin\",\"h_compilers\",\"h_programming\",\"f_develop\"],\"image\":[\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fpost_images\\\u002Fec3\\\u002Ffa3\\\u002F670\\\u002Fec3fa3670fd1c8a3cf7222f7e746933c.jpg\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fpost_images\\\u002F031\\\u002Fbe4\\\u002F27d\\\u002F031be427d58c5073a3bc619cbed65792.jpg\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fpost_images\\\u002Ff64\\\u002F032\\\u002F4b1\\\u002Ff640324b1a2ff556a4da892822847a9c.jpg\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fpost_images\\\u002Ffda\\\u002F0f5\\\u002F94d\\\u002Ffda0f594d14b8043054bcae7fe3315ad.jpg\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fpost_images\\\u002F521\\\u002F543\\\u002F590\\\u002F521543590a00c6101abd4fcefd345e04.jpg\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fpost_images\\\u002Fc7f\\\u002Fc57\\\u002F11c\\\u002Fc7fc5711ccf2a4e9dfb626ea64cffb9b.jpg\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fpost_images\\\u002F259\\\u002Fe9b\\\u002F7a3\\\u002F259e9b7a39e84a41466572b38afc280d.jpg\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fpost_images\\\u002Fd55\\\u002F610\\\u002Fef7\\\u002Fd55610ef71d368b8d16c1fdef35cd2c5.jpg\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fpost_images\\\u002Fe2b\\\u002F7c5\\\u002Ff48\\\u002Fe2b7c5f48dbd065e95b1617ad10622ba.jpg\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fpost_images\\\u002Ff81\\\u002Fc79\\\u002F0a9\\\u002Ff81c790a921e43d645fc7380607cf8ea.jpg\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fpost_images\\\u002F2f8\\\u002Fe45\\\u002F2f6\\\u002F2f8e452f62f39f0f56a2c73e355dddcb.jpg\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fpost_images\\\u002F07f\\\u002F4cb\\\u002F57f\\\u002F07f4cb57f84ba884bd558ee8e97202a2.jpg\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fpost_images\\\u002Fd1d\\\u002Fb21\\\u002F4b3\\\u002Fd1db214b39b5620875350b382622e662.jpg\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fpost_images\\\u002F050\\\u002F2e7\\\u002F29e\\\u002F0502e729ebf030ea5e4d9f038a4b7cc6.jpg\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fpost_images\\\u002F5e3\\\u002F695\\\u002F850\\\u002F5e3695850435a204b9cbb3b94f6f7635.png\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fpost_images\\\u002F03d\\\u002F699\\\u002Fa71\\\u002F03d699a71ecf86e0e5c03b7a6de57995.png\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fpost_images\\\u002Fa7b\\\u002Fdb9\\\u002F656\\\u002Fa7bdb965641ca434f1eba5e7781b9b53.png\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fpost_images\\\u002F378\\\u002F6e6\\\u002Feaf\\\u002F3786e6eafdb8ebd14c344af30698df56.png\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fpost_images\\\u002F76b\\\u002Fa76\\\u002F554\\\u002F76ba76554585689a4c2562167fd26833.png\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fpost_images\\\u002Fdeb\\\u002Fa5d\\\u002Ff0a\\\u002Fdeba5df0a67a08566e07370bf2f70bc0.png\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fpost_images\\\u002F8aa\\\u002F09d\\\u002Fa05\\\u002F8aa09da05c7c48282e01b0ea409e0f3c.png\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fpost_images\\\u002F5f6\\\u002F113\\\u002F6ef\\\u002F5f61136ef41733e6fb88c5ff17d6975f.jpg\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fpost_images\\\u002Fa48\\\u002Ff4d\\\u002Fd49\\\u002Fa48f4dd497c8aa6b93ab2043e014ca02.jpg\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fpost_images\\\u002F194\\\u002Ffab\\\u002F626\\\u002F194fab62612fb71e6a5f148193ec1ff9.jpg\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fpost_images\\\u002F1ff\\\u002F80e\\\u002Fde2\\\u002F1ff80ede232393839186b9345065700c.jpg\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fpost_images\\\u002Fc8d\\\u002Fd2b\\\u002F952\\\u002Fc8dd2b952caa82b67157f41dc79535b0.jpg\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fpost_images\\\u002Fb80\\\u002Fd7c\\\u002F0d8\\\u002Fb80d7c0d814f3c51a91f2c224707a2d5.jpg\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fpost_images\\\u002F74b\\\u002F5dd\\\u002Fa95\\\u002F74b5dda953b1df973a8d893f7a615195.jpg\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fpost_images\\\u002F69e\\\u002F4bd\\\u002F781\\\u002F69e4bd781897ef0515384f81367899cc.jpg\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fpost_images\\\u002F8bd\\\u002F375\\\u002F5b1\\\u002F8bd3755b1085f3049a7ea32c7cc41f79.jpg\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fpost_images\\\u002Fd80\\\u002F552\\\u002F181\\\u002Fd80552181518f155fc596c1bb3ddf2aa.jpg\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fpost_images\\\u002F788\\\u002F63d\\\u002Fb17\\\u002F78863db1732d9b92bff62bf82060771a.jpg\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fpost_images\\\u002F770\\\u002Fa1b\\\u002F038\\\u002F770a1b0388cd2380c491cdf5ca8c344c.jpg\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fpost_images\\\u002F15b\\\u002Ff36\\\u002F3d9\\\u002F15bf363d94919f7c73d775c5d28c6c53.jpg\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fpost_images\\\u002Fe12\\\u002F4cc\\\u002Fe3b\\\u002Fe124cce3bd7bdb776c3e946edf8ec52c.jpg\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fpost_images\\\u002Feba\\\u002F286\\\u002F8b3\\\u002Feba2868b306f476c35df51d8af500335.jpg\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fpost_images\\\u002Fd3f\\\u002F954\\\u002Fe2a\\\u002Fd3f954e2a7016ecf31a081559674d01f.jpg\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fpost_images\\\u002F362\\\u002F4d8\\\u002F3be\\\u002F3624d83be81ee01223ad758e9e81c94d.jpg\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fpost_images\\\u002Fcab\\\u002Fd4a\\\u002F940\\\u002Fcabd4a940deacfcdcb680c4916b29eae.jpg\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fpost_images\\\u002F0b4\\\u002F572\\\u002F421\\\u002F0b457242103fc70de806c9de62234135.jpg\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fpost_images\\\u002Fb1b\\\u002F819\\\u002Ffdb\\\u002Fb1b819fdb7488092550b2ac72265cd72.jpg\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fpost_images\\\u002F50d\\\u002Fdbc\\\u002F492\\\u002F50ddbc4920ffb871918ce7c063a874a2.jpg\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fpost_images\\\u002Fb72\\\u002F155\\\u002F316\\\u002Fb72155316d99a7e4816d1234644b761b.jpg\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fpost_images\\\u002F83a\\\u002Ff30\\\u002F2ff\\\u002F83af302ff3c0a85db220c70f0d567743.jpg\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fpost_images\\\u002Ffcc\\\u002F1ac\\\u002Fdfc\\\u002Ffcc1acdfc43284500c38884d88212877.jpg\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fpost_images\\\u002F17b\\\u002F360\\\u002F9ab\\\u002F17b3609ab2ebd28cf27f906934536e05.jpg\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fpost_images\\\u002F721\\\u002Faea\\\u002F73d\\\u002F721aea73d36a41cf3dbecd328b1f5ab5.jpg\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fpost_images\\\u002Fd3d\\\u002F226\\\u002F065\\\u002Fd3d2260651fc4049ec8d3e6878a0cc51.jpg\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fpost_images\\\u002F3c6\\\u002F8c9\\\u002F577\\\u002F3c68c957760612b06a5b008c734ddb33.jpg\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fpost_images\\\u002F25f\\\u002F3a1\\\u002Ff95\\\u002F25f3a1f95c8c61dcb4937822bd9578e6.jpg\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fpost_images\\\u002Fb6b\\\u002F61d\\\u002F675\\\u002Fb6b61d67518cb1dc730bce8e309ae0dc.jpg\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fpost_images\\\u002F53a\\\u002F41f\\\u002F7d8\\\u002F53a41f7d8e9067b6ce850045e745fb4f.jpg\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fpost_images\\\u002F22d\\\u002F0e3\\\u002F9ef\\\u002F22d0e39ef38ceb43fd60654de876691b.jpg\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fpost_images\\\u002F1e6\\\u002F895\\\u002Fb9e\\\u002F1e6895b9ed089ed99d4c2639e6e1f578.jpg\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fpost_images\\\u002F815\\\u002F9f5\\\u002Fa86\\\u002F8159f5a8628b6c5bb21d219e395ea32b.jpg\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fpost_images\\\u002F4c8\\\u002F03d\\\u002F2f2\\\u002F4c803d2f20ed8b7f79e308d47b734bd9.jpg\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fwebt\\\u002Fuk\\\u002Fpg\\\u002F0d\\\u002Fukpg0djbwn_hfyq4a7g9usa65aa.png\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fwebt\\\u002Fv_\\\u002Fmq\\\u002Fia\\\u002Fv_mqia50010hyrqza7zubejj62e.png\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fwebt\\\u002Fl_\\\u002F3q\\\u002Fuw\\\u002Fl_3quwu2xaqlxikn71jhpnnero4.png\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fwebt\\\u002Ffn\\\u002F1f\\\u002Fxa\\\u002Ffn1fxa5legi4mwszf5xbudchoi0.png\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fwebt\\\u002Fvj\\\u002Fbt\\\u002Fs9\\\u002Fvjbts9wb6fely-atqa-kr88i9qm.png\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fwebt\\\u002Fiz\\\u002Fgd\\\u002Fdv\\\u002Fizgddvy3bomaqjp_6yvbfrbcgpe.png\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fpost_images\\\u002Fb4f\\\u002Ff23\\\u002Fa77\\\u002Fb4ff23a77974a299ecac5c1c3b5d984f.jpg\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fpost_images\\\u002Ff2c\\\u002F185\\\u002F5f1\\\u002Ff2c1855f1ee98b51a4bda6ce9cc0b0a8.jpg\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fpost_images\\\u002F444\\\u002F95f\\\u002F0a3\\\u002F44495f0a381b71a20578736f0cb491af.jpg\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fpost_images\\\u002F126\\\u002Fdb9\\\u002Fd78\\\u002F126db9d789acf9b3482f314d5a53261f.jpg\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fwebt\\\u002Fhd\\\u002Fnf\\\u002Fou\\\u002Fhdnfoutg14046a351gjyhodfprc.png\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fpost_images\\\u002Fe2b\\\u002F37f\\\u002Fa2f\\\u002Fe2b37fa2fad7cd8e201987c32fbf572b.jpg\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fpost_images\\\u002Fe59\\\u002Fbc7\\\u002F479\\\u002Fe59bc7479e66cd96c4d0d5093ef33608.jpg\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fpost_images\\\u002F96a\\\u002Fcae\\\u002Faa9\\\u002F96acaeaa91222d55c4a77b70c9b02903.jpg\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fpost_images\\\u002F393\\\u002Fd7d\\\u002F5d7\\\u002F393d7d5d739ea9cecedadff695ca6874.jpg\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fpost_images\\\u002F521\\\u002F031\\\u002Ff59\\\u002F521031f59a8e7b222c2614b32ba88abd.jpg\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fpost_images\\\u002F54e\\\u002F044\\\u002F683\\\u002F54e0446838b2360d695b45e5bacec69d.jpg\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fpost_images\\\u002F4d6\\\u002F1af\\\u002Ff71\\\u002F4d61aff7169c403c75493790720c0e6e.jpg\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fpost_images\\\u002F59a\\\u002Fe33\\\u002F1c5\\\u002F59ae331c58bcd16003f51f870b89549e.jpg\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fpost_images\\\u002Fa04\\\u002F1e8\\\u002F610\\\u002Fa041e86102be21acf2c3170cf941d064.jpg\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fpost_images\\\u002F909\\\u002F8c3\\\u002F4a0\\\u002F9098c34a06b09bac0597004c6fbf6b1a.jpg\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fpost_images\\\u002F39e\\\u002Ffc2\\\u002F31f\\\u002F39efc231fb88cee1ef014a36fcb6cc73.jpg\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fpost_images\\\u002F80f\\\u002F6dd\\\u002F126\\\u002F80f6dd126255196fc538026ea28656c1.jpg\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fpost_images\\\u002F449\\\u002F74c\\\u002Ffe5\\\u002F44974cfe559d94d17e6435557757af80.jpg\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fpost_images\\\u002F518\\\u002Faac\\\u002F4e9\\\u002F518aac4e9d92ca84a79e6cdb09fea773.jpg\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fpost_images\\\u002F9ff\\\u002F0d3\\\u002F57a\\\u002F9ff0d357a3e39d01bcb3d5d07d81d71e.jpg\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fpost_images\\\u002Fdfb\\\u002F7a7\\\u002F0b4\\\u002Fdfb7a70b4fba1c5cb0bf37715a4fe1bd.jpg\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fpost_images\\\u002F4c6\\\u002F111\\\u002Fc5c\\\u002F4c6111c5c80ab5c4856e68c06880ed4a.jpg\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fpost_images\\\u002Fcc3\\\u002F572\\\u002Fa05\\\u002Fcc3572a054dabbe4e32362d845b30cf8.jpg\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fpost_images\\\u002F2fd\\\u002F77d\\\u002F125\\\u002F2fd77d1250c0677a24c1c9c358f11663.jpg\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fpost_images\\\u002F9ea\\\u002F10d\\\u002Fd6a\\\u002F9ea10dd6af4495be38653339010e0a46.jpg\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fpost_images\\\u002F1d7\\\u002F9f9\\\u002F53f\\\u002F1d79f953fc755000013d44d15f56fb73.jpg\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fpost_images\\\u002F16c\\\u002F690\\\u002Ff58\\\u002F16c690f589bf90cc1547edc1ee985ae0.jpg\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fpost_images\\\u002F13e\\\u002F4e0\\\u002F05a\\\u002F13e4e005af12def0ee687b008ffc41ac.jpg\"]}","metaDescription":"Разработка тестов приложения — не самое приятное занятие. Этот процесс занимает долгое время, требует большой концентрации и при этом крайне востребован. Язык Kotlin дает набор инструментов, который...","mainImageUrl":null,"amp":false,"customTrackerLinks":["https:\u002F\u002Fwww.facebook.com\u002Ftr?id=1067365970024945&ev=PageView&noscript=1"]},"polls":[],"commentsEnabled":{"status":true,"reason":null},"rulesRemindEnabled":false,"votesEnabled":true,"status":"published","plannedPublishTime":null,"checked":null,"hasPinnedComments":false,"format":null,"banner":null,"multiwidget":null,"multiwidgetUuid":null,"readingTime":21,"complexity":null,"isEditorial":false,"allowedFeatures":{"isTestTargetAllow":false}}},"articlesIds":{},"isLoading":false,"pagesCount":{},"route":{},"reasonsList":null,"postReasonsList":null,"view":"list","lastVisitedRoute":{},"ssrCommentsArticleIds":[""],"viewedPosts":[],"myFeedFilter":{"complexity":"all","score":"all","types":["articles","posts","news"]},"myFeedIsApplyFilters":false,"myFeedIsForce":false,"karma":{"userReasonsList":null}},"authorContribution":{"authors":{}},"betaTest":{"currentAnnouncement":null,"announcements":{},"announcementCards":null,"announcementComments":{},"announcementCommentThreads":{},"announcementCommentingStatuses":{},"archivedList":[]},"authorStatistics":{"articleRefs":{},"articleIds":{},"pagesCount":{},"route":{},"viewsCount":[],"maxStatsCount":{}},"career":{"seoLandings":[],"hubs":""},"comments":{"articleComments":{},"articlePinnedComments":{},"searchCommentsResults":null,"pagesCount":null,"commentAccess":{},"scrollParents":{},"pageArticleComments":{"lastViewedComment":0,"postId":null,"lastCommentTimestamp":"","moderated":[],"moderatedIds":[],"commentRoute":"","idempotenceKey":""}},"companies":{"companyRefs":{"jugru":{"alias":"jugru","imageUrl":"\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fcompany\u002F0a7\u002Fce6\u002Fa86\u002F0a7ce6a86556ff20579e90e6b732e663.png","titleHtml":"JUG Ru Group","descriptionHtml":"Конференции для Senior-разработчиков","relatedData":null,"statistics":{"subscribersCount":93717,"rating":110.73,"invest":null,"postsCount":1181,"threadsCount":0,"newsCount":17,"vacanciesCount":0,"employeesCount":47,"careerRating":null},"foundationDate":{"year":"2012","month":"02","day":"25"},"location":{"city":{"id":"447733","title":"Санкт-Петербург"},"region":{"id":"1948","title":"Санкт-Петербург и область"},"country":{"id":"168","title":"Россия"}},"siteUrl":"https:\u002F\u002Fjugru.org","staffNumber":"51–100 человек","registrationDate":"2013-08-22T14:33:51+00:00","representativeUser":{"alias":"23derevo","fullname":"Алексей Федоров"},"contacts":[{"title":"Сайт","url":"http:\u002F\u002Fjugru.org","siteTitle":"IT-конференции 2025 | JUG Ru Group | Практика и нетворкинг","favicon":"https:\u002F\u002Fjugru.org\u002Fimg\u002Fconference\u002Fjug\u002Ffavicon\u002Ffavicon-32x32.png"},{"title":"ВКонтакте","url":"https:\u002F\u002Fvk.com\u002Fjugrugroup","siteTitle":"VK | VK","favicon":"https:\u002F\u002Fm.vk.com\u002Fimages\u002Ficons\u002Ffavicons\u002Ffav_logo.ico?10"},{"title":"Telegram","url":"https:\u002F\u002Ftelegram.me\u002FJUGruSupport","siteTitle":"Telegram: Contact @JUGruSupport","favicon":"https:\u002F\u002Ftelegram.org\u002Fimg\u002Fwebsite_icon.svg?4"}],"settings":{"analyticsSettings":[{"type":"ym","trackingId":"56554087"}],"branding":{"imageUrl":"\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fbranding\u002F4f3\u002F90a\u002F544\u002F4f390a544efda63b4d31ab7d9c41396e.jpeg","linkUrl":"http:\u002F\u002Fjugru.org\u002F?utm_medium=habr&utm_source=header2025","pixelUrl":null,"uuid":"0194f589-5a3a-709f-9a67-26c93d22df2c"},"status":"active","isStartup":false,"hasActivePolls":false,"shouldShowHabrAds":false},"metadata":{"titleHtml":"JUG Ru Group, Санкт-Петербург - Конференции для Senior-разработчиков с 25 февраля 2012 г.","title":"JUG Ru Group, Санкт-Петербург - Конференции для Senior-разработчиков с 25 февраля 2012 г.","keywords":["java","android","kotlin","spring","joker","jpoint","javascript","vue","react","holyjs"],"descriptionHtml":"1 181 статья от авторов компании JUG Ru Group","description":"1 181 статья от авторов компании JUG Ru Group"},"aDeskSettings":null,"careerAlias":"jugru","schoolAlias":null}},"companyIds":{},"companyTopIds":{},"pagesCount":{},"companyProfiles":{},"companiesCategories":[],"companiesCategoriesTotalCount":0,"companiesWidgets":{},"companiesWorkers":{},"companiesFans":{},"multiwidgets":{},"route":{},"isLoading":false,"companyWorkersLoading":false,"companyFansLoading":false,"multiwidgetLoading":false,"vacancies":{},"companiesGalleries":{},"companiesBanners":{},"companiesLandingVacancies":{},"companiesTechnologies":{},"workplaceInfo":null},"companyAdmin":{"companyInfo":null,"companyInfoLoading":false,"faqArticles":null,"brandingPreviewImageUrl":null,"jivoStatus":0,"adminNotifications":null,"availableInvitesCount":{}},"companyAdd":{"currentStep":"","stepsData":{},"uncompletedSteps":[],"isStepLoading":true,"isStepCommitting":false,"isInitialized":false,"agreementContent":""},"companiesContribution":{"hubs":{},"flows":{},"companyRefs":{}},"companyHubsContribution":{"contributionRefs":{"hubRefs":{},"hubIds":{}}},"conversation":{"messages":[],"respondent":null,"isLoadMore":false},"conversations":{"conversations":[],"pagesCount":0},"docs":{"menu":{},"articles":{},"mainMenu":[],"loading":{"main":false,"dropdown":false,"article":false}},"feature":{"isProbablyVisible":true},"fixedBanner":{"isArticleStickyPanelVisible":false,"isArticleStickyPanelAtTheBottom":false,"isFixedBannerVisible":false,"isStickyPanelIconsHidden":false},"flows":{"flows":[{"id":"1","alias":"develop","title":"Разработка","titleHtml":"Разработка","route":{"name":"FLOW_PAGE","params":{"flowName":"develop"}}},{"id":"6","alias":"admin","title":"Администрирование","titleHtml":"Администрирование","route":{"name":"FLOW_PAGE","params":{"flowName":"admin"}}},{"id":"2","alias":"design","title":"Дизайн","titleHtml":"Дизайн","route":{"name":"FLOW_PAGE","params":{"flowName":"design"}}},{"id":"3","alias":"management","title":"Менеджмент","titleHtml":"Менеджмент","route":{"name":"FLOW_PAGE","params":{"flowName":"management"}}},{"id":"4","alias":"marketing","title":"Маркетинг","titleHtml":"Маркетинг","route":{"name":"FLOW_PAGE","params":{"flowName":"marketing"}}},{"id":"7","alias":"popsci","title":"Научпоп","titleHtml":"Научпоп","route":{"name":"FLOW_PAGE","params":{"flowName":"popsci"}}}],"updates":{}},"global":{"isPwa":false,"device":"mobile","isHabrCom":true,"requestId":"e1b0086e86bfa42436e3bb3459d49839"},"hubs":{"hubRefs":{},"hubIds":{},"pagesCount":{},"isLoading":false,"route":{}},"hubsBlock":{"hubRefs":{},"hubIds":{}},"i18n":{"fl":"ru","hl":"ru"},"info":{"welcomePage":{},"isLoading":true},"location":{"urlStruct":{"protocol":null,"slashes":null,"auth":null,"host":null,"port":null,"hostname":null,"hash":null,"query":{},"pathname":"\u002Fru\u002Fcompanies\u002Fjugru\u002Farticles\u002F416725\u002F","path":"\u002Fru\u002Fcompanies\u002Fjugru\u002Farticles\u002F416725\u002F","href":"\u002Fru\u002Fcompanies\u002Fjugru\u002Farticles\u002F416725\u002F"}},"me":{"user":null,"uuid":null,"ppgDemanded":false,"karmaResetInfo":{"canReincarnate":null,"wasReincarnated":null,"currentScore":null},"notes":null,"userUpdates":{"feeds":{"newPostsCount":null,"newThreadsCount":null,"newNewsCount":null,"newCount":null},"conversationUnreadCount":0}},"mostReadingList":{"mostReadingListIds":[],"mostReadingListRefs":null,"promoPost":null},"onboarding":{"currentStep":null,"stepsData":{},"stepsErrors":{},"completedSteps":[],"isStepCommitting":false,"isCommitDisabled":true},"ppa":{"articles":{},"card":null,"transactions":null,"totalTransactions":null,"isAccessible":null},"projectsBlocks":{"activeBlocks":{"vacancies":"project-block-company-article"}},"promoData":{"isLoading":false,"hasLoaded":false,"featurer":null,"megaposts":null,"promoLinks":null,"promoPosts":null,"sticker":null},"publicationStatistics":{"statsInfo":{},"statsFunnels":{},"statsGraph":{},"defaultSuggest":{},"suggest":{},"timeTracker":{},"isTrackingActivity":false,"isUserActive":true,"otherPublicationStats":{}},"pullRefresh":{"shouldRefresh":false},"sandbox":{"articleIds":[],"articleRefs":{},"pagesCount":null,"route":{},"lastVisitedRoute":{},"isLoading":false},"search":{"searchQueryError":null},"settingsOther":{"inputs":{"uiLang":{"errors":[],"ref":null,"value":""},"articlesLangEnglish":{"errors":[],"ref":null,"value":false},"articlesLangRussian":{"errors":[],"ref":null,"value":false},"agreement":{"errors":[],"ref":null,"value":false},"email":{"errors":[],"ref":null,"value":true},"digest":{"errors":[],"ref":null,"value":true}}},"similarList":{"similarListIds":[],"similarListRefs":null},"ssr":{"error":null,"isDataLoaded":true,"isDataLoading":false,"isHydrationFailed":false,"isServer":false},"stories":{"stories":[{"id":"story-998","author":{"logo":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F91a\u002F166\u002F49f\u002F91a16649f9ef89302a5a56cfa22a451d.png","title":"Яндекс Практикум","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up"},"title":"Как расти на работе?","lang":"ru","startTime":"2025-03-18T18:45:00+03:00","finishTime":"2025-03-31T19:00:00+03:00","slides":[{"id":"story-998_1","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fbf4\u002F911\u002F7e6\u002Fbf49117e637ff2099b3944f8803cd7a3.png","button":null},{"id":"story-998_2","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F3e3\u002Fc84\u002Fe83\u002F3e3c84e8330ea1ddf72e9d310457ed2f.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_3","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F84b\u002F533\u002F3c3\u002F84b5333c3e77e8dac62a8b50d042acb9.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_4","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F257\u002Feb0\u002F2be\u002F257eb02bea1777e13f3e647cae6e06cd.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_5","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F858\u002F086\u002F0ed\u002F8580860ed3497c043c04f9a42054d74f.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_6","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fcdf\u002F32f\u002F387\u002Fcdf32f38777f046c063b5182f4125e14.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_7","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fd48\u002Ff2d\u002F0e2\u002Fd48f2d0e2ecd7d746d738191bb913d8f.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_8","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fb38\u002Ffd7\u002Fee0\u002Fb38fd7ee04848bf3b058be7403438bd1.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_9","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F79e\u002Feaa\u002F9d8\u002F79eeaa9d8af5a288ad42bd9d63b5793a.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_10","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fcdc\u002F17e\u002F385\u002Fcdc17e38582dc67838b9abfb200d982e.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}}]},{"id":"story-996","author":{"logo":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fe63\u002F36d\u002Fa24\u002Fe6336da24460ab6b9fbc347d03eb263a.png","title":"Хабр","link":null},"title":"Здоровье айтишника","lang":"ru","startTime":"2025-03-17T10:22:00+03:00","finishTime":"2025-04-13T10:22:00+03:00","slides":[{"id":"story-996_1","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fb7c\u002F6de\u002F8ea\u002Fb7c6de8ea6789dbc30f071716172b6dd.jpg","button":null},{"id":"story-996_2","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F2e7\u002F88a\u002F0fe\u002F2e788a0fe61729ca8b23eb59069c844f.jpg","button":{"title":"Личный опыт","link":"https:\u002F\u002Fu.habr.com\u002Fzd-1","colorType":"light"}},{"id":"story-996_3","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fb93\u002F6f4\u002F256\u002Fb936f425653b84fa60ab00d09f78c543.jpg","button":{"title":"Как это было","link":"https:\u002F\u002Fu.habr.com\u002Fzd-2","colorType":"light"}},{"id":"story-996_4","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fc10\u002Fd14\u002Ff5a\u002Fc10d14f5a4859fe10baecbcc2bcb8828.jpg","button":{"title":"Шея в фокусе","link":"https:\u002F\u002Fu.habr.com\u002Fzd-3","colorType":"dark"}},{"id":"story-996_5","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F535\u002Fe1b\u002F77a\u002F535e1b77a9eb896262ad73321f2ad99f.jpg","button":{"title":"Фотоинструкция","link":"https:\u002F\u002Fu.habr.com\u002Fzd-4","colorType":"light"}},{"id":"story-996_6","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F569\u002Fc39\u002F49f\u002F569c3949f5b330ea85d4a1864f481c3d.jpg","button":{"title":"Сидите (не)правильно","link":"https:\u002F\u002Fu.habr.com\u002Fzd-5","colorType":"dark"}},{"id":"story-996_7","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F1f2\u002F1de\u002Fdbf\u002F1f21dedbf2902bc4061a75b839b63595.jpg","button":{"title":"Журнал изменений","link":"https:\u002F\u002Fu.habr.com\u002Fzd-6","colorType":"dark"}},{"id":"story-996_8","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F95a\u002F164\u002F21b\u002F95a16421badc3a9f1135309ab0c42c41.jpg","button":{"title":"Альтернатива","link":"https:\u002F\u002Fu.habr.com\u002Fzd-7","colorType":"light"}},{"id":"story-996_9","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F624\u002F027\u002F54d\u002F62402754d311798af44bcfe7f9abfedc.jpg","button":{"title":"Хроника поисков","link":"https:\u002F\u002Fu.habr.com\u002Fzd-8","colorType":"dark"}}]},{"id":"story-992","author":{"logo":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F3fe\u002F2fc\u002Fb05\u002F3fe2fcb05df852d7e1e00d44e54e39ae.png","title":"Сезоны Хабра","link":"https:\u002F\u002Fu.habr.com\u002Ffnstories"},"title":"Угадайте будущее в новом сезоне","lang":"ru","startTime":"2025-03-12T19:15:00+03:00","finishTime":"2025-03-31T23:56:00+03:00","slides":[{"id":"story-992_1","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fc56\u002Faf5\u002Fc43\u002Fc56af5c4377f7f7b94f7b6ad20fc92c3.png","button":{"title":"А что за сезон?","link":"https:\u002F\u002Fu.habr.com\u002Ffnstories","colorType":"light"}},{"id":"story-992_2","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F8fa\u002Fde7\u002F65d\u002F8fade765d99207f31c597283ae6ce912.png","button":{"title":"Какие темы нужны","link":"https:\u002F\u002Fu.habr.com\u002Ffnstories","colorType":"dark"}},{"id":"story-992_3","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F23e\u002F7b9\u002Fb24\u002F23e7b9b24cb056d1a42e8d31ccea16ce.png","button":{"title":"Сезон будущего ИИ","link":"https:\u002F\u002Fu.habr.com\u002Ffnstories","colorType":"dark"}},{"id":"story-992_4","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F27b\u002Fbfc\u002Fa18\u002F27bbfca18e656ee0122b5cb8eb2cb502.png","button":{"title":"Все правила сезона","link":"https:\u002F\u002Fu.habr.com\u002Ffnstories","colorType":"dark"}},{"id":"story-992_5","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F1e0\u002F6c6\u002Ff33\u002F1e06c6f33e703bbd2b2ae3baee3376fd.png","button":{"title":"Как участвовать","link":"https:\u002F\u002Fu.habr.com\u002Ffnstories","colorType":"dark"}}]},{"id":"story-990","author":{"logo":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F282\u002Fe80\u002Fbf1\u002F282e80bf1b73484126ed53c6f3e42692.png","title":"Aeza","link":"https:\u002F\u002Fu.habr.com\u002FI72qi"},"title":"С праздником весны!","lang":"ru","startTime":"2025-03-09T10:15:00+03:00","finishTime":"2025-03-30T23:59:00+03:00","slides":[{"id":"story-990_1","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F064\u002F9dd\u002Ff59\u002F0649ddf5949cae6c9342fb62034a36ac.png","button":null},{"id":"story-990_2","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F05f\u002F96b\u002F25e\u002F05f96b25e910c32256ee0b1916f21380.png","button":{"title":"Семейная история","link":"https:\u002F\u002Fu.habr.com\u002Fey2bY","colorType":"light"}},{"id":"story-990_3","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fcd1\u002Ff5d\u002F921\u002Fcd1f5d921bb9489ac11727272660bdb6.png","button":{"title":"Движущиеся картинки","link":"https:\u002F\u002Fu.habr.com\u002FWLKXU","colorType":"light"}},{"id":"story-990_4","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fb55\u002Fd45\u002Fec5\u002Fb55d45ec50e53275c60d16ea886a0672.png","button":{"title":"Личный опыт","link":"https:\u002F\u002Fu.habr.com\u002FSxrki","colorType":"light"}},{"id":"story-990_5","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Ffa7\u002F1ce\u002Ffca\u002Ffa71cefca5ed0a3fe8b50bd703b3605f.png","button":{"title":"Алгоритм","link":"https:\u002F\u002Fu.habr.com\u002Ftbz2p","colorType":"light"}},{"id":"story-990_6","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F435\u002F89d\u002Ff90\u002F43589df9018846cc6a8eed986226b252.png","button":{"title":"Выбрать сценарий","link":"https:\u002F\u002Fu.habr.com\u002F0RCPk","colorType":"light"}},{"id":"story-990_7","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F514\u002F5f8\u002F619\u002F5145f86194ad48dad48a846b42af0f93.png","button":{"title":"Jiraзамещение","link":"https:\u002F\u002Fu.habr.com\u002FEwhYq","colorType":"light"}},{"id":"story-990_8","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F439\u002Fa83\u002Fae7\u002F439a83ae78f7ef711e3b9bbed1ec26c5.png","button":{"title":"8 вещей","link":"https:\u002F\u002Fu.habr.com\u002FVTv2r","colorType":"light"}},{"id":"story-990_9","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F02d\u002F783\u002F2f7\u002F02d7832f7b1c95d88bff9f34209e204a.png","button":{"title":"Интерфейсы","link":"https:\u002F\u002Fu.habr.com\u002FUFOMZ","colorType":"light"}},{"id":"story-990_10","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F0cb\u002Ff7f\u002F0d9\u002F0cbf7f0d905d486ce4ff82bc939b21d5.png","button":{"title":"Стикеры ваши","link":"https:\u002F\u002Fu.habr.com\u002FoA1K7","colorType":"light"}}]},{"id":"story-984","author":{"logo":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F648\u002F61b\u002F9ae\u002F64861b9aecb7c474cd94063f98045541.png","title":"Хабр","link":null},"title":"Всегда котов!","lang":"ru","startTime":"2025-03-01T00:01:09+03:00","finishTime":"2025-03-23T16:21:00+03:00","slides":[{"id":"story-984_1","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fc06\u002Fc21\u002F93f\u002Fc06c2193ff34362ac2af782cf2571f55.png","button":null},{"id":"story-984_2","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fb68\u002F15f\u002F763\u002Fb6815f7630b9c015b1e67efb5bdf12d4.jpg","button":{"title":"Сделать purrrr","link":"https:\u002F\u002Fu.habr.com\u002Fj4DN1","colorType":"light"}},{"id":"story-984_3","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F550\u002F76e\u002Fd7a\u002F55076ed7a0954e243f944fc2f330623a.png","button":{"title":"Тыгыдык","link":"https:\u002F\u002Fu.habr.com\u002Fya360_kotov","colorType":"dark"}},{"id":"story-984_4","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F2fb\u002F23b\u002F06c\u002F2fb23b06cf294c2050104b2aef589788.jpg","button":{"title":"Исследование","link":"https:\u002F\u002Fu.habr.com\u002FbO3r0","colorType":"light"}},{"id":"story-984_5","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Ff50\u002F50f\u002F0ae\u002Ff5050f0aeea1335c4f0544c1863f8342.jpg","button":{"title":"Детали проекта","link":"https:\u002F\u002Fu.habr.com\u002FQJmhe","colorType":"light"}},{"id":"story-984_6","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F825\u002F3dd\u002F5f5\u002F8253dd5f5c19dd061578f1d09310a45f.jpg","button":{"title":"Эксперименты","link":"https:\u002F\u002Fu.habr.com\u002FVaOdo","colorType":"light"}},{"id":"story-984_7","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F3fb\u002Fc92\u002F0f9\u002F3fbc920f9ea81eca2c1c027ff77fc659.jpg","button":{"title":"Это не мем","link":"https:\u002F\u002Fu.habr.com\u002F0Wb3p","colorType":"light"}},{"id":"story-984_8","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F2b4\u002F794\u002Fc33\u002F2b4794c33844e60aad9468018fd132cd.jpg","button":{"title":"В засаде","link":"https:\u002F\u002Fu.habr.com\u002FnasCD","colorType":"dark"}}]}]},"technotext":{"years":[],"technotextDocForNominees":null,"technotextDocForWinners":null,"technotextInfo":{},"technotextInfoLoading":false,"technotextWinners":{},"technotextWinnersLoading":false},"userHubsContribution":{"contributionRefs":{"hubRefs":{},"hubIds":{}}},"userInvites":{"availableInvites":0,"usedInvitesIds":[],"usedInvitesRefs":{},"usedInvitesPagesCount":0,"unusedInvitesIds":[],"unusedInvitesRefs":{},"unusedInvitesPagesCount":0},"userVotes":{"karmaVotesList":[],"karmaVotesPagesCount":null,"karmaVotesListLoading":false,"commentsVotesList":[],"commentsVotesPagesCount":null,"commentsVotesListLoading":false,"postsVotesList":[],"postsVotesPagesCount":null,"postsVotesListLoading":false,"userVotesList":[],"userVotesPagesCount":null,"userVotesListLoading":false},"users":{"authorRefs":{},"authorIds":{},"pagesCount":{},"authorProfiles":{"olegchir":{"alias":"olegchir","badgets":[{"title":"Захабренный","description":"Пользователь с кармой \u003E0","url":null,"isRemovable":false},{"title":"Легенда","description":"Пользователь, опубликовавший 30 и более топиков; рейтинг каждого топика должен быть более 50 баллов","url":null,"isRemovable":false},{"title":"Старожил","description":"Пользователь, зарегистрированный более 3-х лет назад, с кармой больше 50","url":null,"isRemovable":false},{"title":"Переводчик","description":"Пользователь, опубликовавший не менее 5 переводов, которые набрали более 50 баллов","url":null,"isRemovable":false},{"title":"Бета-тестер","description":"Участвует в тестировании новой функциональности","url":"https:\u002F\u002Fhabr.com\u002Fbeta\u002Fwelcome\u002F","isRemovable":false},{"title":"Победитель сезона Java","description":"За победу в сезоне Java","url":"https:\u002F\u002Fhabr.com\u002Fru\u002Fspecials\u002F673202\u002F","isRemovable":true},{"title":"Техноавтор 2022","description":"Участник конкурса «Технотекст» 2022","url":null,"isRemovable":true}],"aboutHtml":"Я пробовал самостоятельно выучить теорию категорий, но не понял, почему при построении категории, где объекты — типы данных, а морфизмы — функции, из варианта типизированного лямбда-исчисления на комбинаторах получается замкнутая симметричная моноидальная категория (подобно Hilb, где объекты — конечномерные гильбертовы пространства с обычным тензорным произведением, а морфизмы — линейные операторы), но не декартова, каковой является Set. Это завело меня в тупик, и я начал пить.\u003Cbr\u003E \u003Cbr\u003E \u003Chr\u003E\u003Cbr\u003E \u003Cbr\u003E \u003Cb\u003EСейчас\u003C\u002Fb\u003E\u003Cbr\u003E \u003Cbr\u003E 1. Владелец продукта в GigaIDE Cloud. Она интегрирована с GitVerse и в будущем будет иметь отдельную on-premises поставку.\u003Cbr\u003E \u003Cbr\u003E 2. Лидер стартапа Anarchic. Мы занимаемся AI в применении к повседневной жизни.\u003Cbr\u003E \u003Cbr\u003E \u003Cb\u003EРанее\u003C\u002Fb\u003E\u003Cbr\u003E \u003Cbr\u003E Бывший продюсер владелец в Failover Bar — это главный meetup-бар страны, специально созданный для разработчиков, айтишников и гиков. Соорганизатор фестиваля-конференции Pro IT Fest.\u003Cbr\u003E \u003Cbr\u003E Ранее был Head of Developer Advocacy в команде Bellsoft Liberica JDK (официальный дистрибутив Java для Spring), а также Axiom JDK (российский дистрибутив Java) и Libercat (российский Java Application Server).\u003Cbr\u003E \u003Cbr\u003E Ex-член программных комитетов конференций Smart Data, DevOops, Joker\u002FJPoint. Ex product marketing manager в JetBrains Big Data и Remote Development, ex журналист и технопиарщик в JUG.ru Group, ex техлид в Сбербанк-Технологиях. Много чего ещё «ex».\u003Cbr\u003E \u003Cbr\u003E Вся информация, которую я написал в неофициальных постах — мои личные размышления, и никаким образом не отражают мнение компании-работодателя. Иногда они даже могут противоречить официальной позиции компании-работодателя. Если вам нужно получить официальную позицию — лучше обратиться не ко мне, а в какую-нибудь пресс-службу. Серьезно.\u003Cbr\u003E \u003Cbr\u003E Из проектов, сделанных за предыдущие 10+ лет, можно отметить:\u003Cbr\u003E \u003Cul\u003E \u003Cli\u003EСтатьи и доклады по BigData для JetBrains BigDataTools, маркетинговые материалы для Remote Development\u003C\u002Fli\u003E \u003Cli\u003EБлог компании JUG.ru Group, неоднократно поднимавшийся в топы Хабра\u003C\u002Fli\u003E \u003Cli\u003EСбербанк-Технологии: ППРБ.BPM, виртуальная машина для выполнения процессов из BPMN. Лучший BPM-проект 2017 года в России.\u003C\u002Fli\u003E \u003Cli\u003EМинздрав: Единая государственная информационная система в сфере здравоохранения (ЕГИСЗ): Интегрированная Электронная Медицинская Карта (ИЭМК), система регистрации на приём к врачу и вызова врача на дом. Интеграция с Госуслугами. Проксирование до информационных систем ЕМИАС, i-Novus\u002FРостелеком, БАРС. Работа с государственными организациями типа МВД, ГИБДД. Работа с помощью СМЭВ. Микросервисы, чатботы.\u003C\u002Fli\u003E \u003Cli\u003EГосуслуги (ЕПГУ): портальные формы по различным направлениям\u003C\u002Fli\u003E \u003Cli\u003EИнформационная система, управляющая IUPAT (The International Union of Painters and Allied Trades) — сети профсоюзов США, работающей с малярами, штукатурами, и прочими строителями.\u003C\u002Fli\u003E \u003Cli\u003EStarview: Operational Intelligence Platform: фреймворки для автоматического тестирования языка программирования (Star, работает на JVM) и IDE (работает на Eclipse) и SDK для них.\u003C\u002Fli\u003E \u003Cli\u003EPlaytox: участие в создании MMO игр (Стальной Легион, Мир Теней)\u003C\u002Fli\u003E \u003Cli\u003ECodeOrchestra: написание плагинов и деталей реализации языка для IDE, созданной для разработки под Adobe Flash. В основе — Jetbrains MPS. Задержался там супер недолго, но это было очень интересно.\u003C\u002Fli\u003E \u003Cli\u003EErlyvideo: Flussonic (менеджер по продукту)\u003C\u002Fli\u003E \u003Cli\u003EВнутрисеть исполнительной дирекции компании Технопарк-Новосибирск\u003C\u002Fli\u003E \u003C\u002Ful\u003E","contacts":[],"invitedBy":{"issuerLogin":"besisland","timeCreated":"2009-01-12T16:23:00+00:00"},"careerProfile":null,"companies":{"pagesCount":1,"companyIds":["bar","dbtc","JetBrains","microsoft","zfort"],"companyRefs":{"bar":{"id":"8150","alias":"bar","titleHtml":"Anarchic","descriptionHtml":"Открытый AI-стартап","imageUrl":"\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fcompany\u002F525\u002Fc0f\u002Fe26\u002F525c0fe260f0350c077ae26428d9059b.jpeg","relatedData":null,"statistics":{"subscribersCount":95,"rating":38.67,"invest":null},"commonHubs":[]},"dbtc":{"id":"4564","alias":"dbtc","titleHtml":"Технологический Центр Дойче Банка","descriptionHtml":null,"imageUrl":"\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fcompany\u002F1e4\u002F18d\u002Fbef\u002F1e418dbef4665cf4ff7034b6b3568fa5.jpg","relatedData":null,"statistics":{"subscribersCount":677,"rating":0,"invest":null},"commonHubs":[]},"JetBrains":{"id":"559","alias":"JetBrains","titleHtml":"JetBrains","descriptionHtml":"Делаем эффективные инструменты для разработчиков","imageUrl":"\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fcompany\u002F8dc\u002F19c\u002Fa06\u002F8dc19ca065174d2bc9027bbd2a47f072.png","relatedData":null,"statistics":{"subscribersCount":101730,"rating":0,"invest":null},"commonHubs":[]},"microsoft":{"id":"68","alias":"microsoft","titleHtml":"Microsoft","descriptionHtml":"Microsoft — мировой лидер в области ПО и ИТ-услуг","imageUrl":"\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fcompany\u002Fe98\u002F5cf\u002F6a0\u002Fe985cf6a01b15006350561f26c70a41f.png","relatedData":null,"statistics":{"subscribersCount":163238,"rating":0,"invest":null},"commonHubs":[]},"zfort":{"id":"1174","alias":"zfort","titleHtml":"Zfort Group","descriptionHtml":null,"imageUrl":"\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fcompany\u002F8ae\u002F45f\u002F093\u002F8ae45f09309baaffc5ce39535b4a3163.jpg","relatedData":null,"statistics":{"subscribersCount":8466,"rating":0,"invest":null},"commonHubs":[]}}}}},"userHubs":{},"userInvitations":{},"authorFollowers":{},"authorFollowed":{},"userSpecialization":{},"karmaStats":[],"statistics":null,"isLoading":false,"authorFollowersLoading":false,"authorFollowedLoading":false,"userHubsLoading":false,"userInvitationsLoading":false,"route":{}},"viewport":{"prevScrollY":{},"scrollY":0,"width":0},"tracker":{"notificationsLoading":false,"notificationsList":[],"notificationsPageCount":0,"pendingMarkNotificationsRead":[],"publicationsLoading":true,"publicationsList":[],"publicationsPageCount":0,"pendingDeletePublications":false,"pendingMarkPublicationsRead":false},"events":{"eventRefs":{},"eventIds":[],"pagesCount":0,"categories":[],"cities":[],"actualEvents":null,"currentEvent":null,"eventsFilter":{"city":"all","timeStarted":null,"timeEnded":null}},"wysiwyg":{"WYSIWYGRulesRefs":null}};(function(){var s;(s=document.currentScript||document.scripts[document.scripts.length-1]).parentNode.removeChild(s);}());</script><script src="https://assets.habr.com/habr-web/js/chunk-vendors.3b11d41f.js" defer></script><script src="https://assets.habr.com/habr-web/js/app.7a97ea6d.js" defer></script></div>
    <div id="overlays"><!----><!--teleport anchor--><!----><!--teleport anchor--><!----><!--teleport anchor--><!----><!--teleport anchor--><!----><!--teleport anchor--><!----><!--teleport anchor--></div>
    
    
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-S28W1WC23F"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());
    </script>
  
  <script type="text/javascript" >
    (function(m,e,t,r,i,k,a){m[i]=m[i]||function(){(m[i].a=m[i].a||[]).push(arguments)};
    m[i].l=1*new Date();k=e.createElement(t),a=e.getElementsByTagName(t)[0],k.async=1,k.src=r,a.parentNode.insertBefore(k,a)})
    (window, document, "script", "https://mc.yandex.ru/metrika/tag.js", "ym");

  </script>
    <script type="text/javascript">
      window.addEventListener('load', function () {
        setTimeout(() => {
          const img = new Image();
          img.src = 'https://vk.com/rtrg?p=VK-RTRG-421343-57vKE';
        }, 0);
      });
    </script>
  
    </body>

    </html>
