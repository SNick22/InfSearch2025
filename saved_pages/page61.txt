<!DOCTYPE html>
<html lang="ru">

  <head>
    <title>Переезд из Java в Kotlin: как забрать коллекции с собой &#x2F; Хабр</title>
<meta property="fb:app_id" content="444736788986613">
<meta property="fb:pages" content="472597926099084">
<meta name="twitter:card" content="summary_large_image">
<meta name="twitter:site" content="@habr_com">
<meta property="og:site_name" content="Хабр">
<link href="https://habr.com/ru/rss/post/526374/?fl=ru" type="application/rss+xml" title rel="alternate" name="rss">
<link href="https://habr.com/ru/companies/raiffeisenbank/articles/526374/" rel="canonical" data-hid="e3fa780">
<link rel="image_src" href="https://habrastorage.org/webt/jz/xk/8l/jzxk8lyp1jjss_6wpq647vcjkcy.png" data-hid="2a79c45">
<meta property="og:title" content="Переезд из Java в Kotlin: как забрать коллекции с собой">
<meta name="twitter:title" content="Переезд из Java в Kotlin: как забрать коллекции с собой">
<meta name="aiturec:title" content="Переезд из Java в Kotlin: как забрать коллекции с собой">
<meta name="description" content="Меня зовут Борис Николаев, и в первой статье на Хабре хочу сравнить Java и Kotlin при работе с коллекциями. Она будет полезна всем, кто планирует перебираться в Kotlin и не хочет долго осваиваться. В...">
<meta itemprop="description" content="Меня зовут Борис Николаев, и в первой статье на Хабре хочу сравнить Java и Kotlin при работе с коллекциями. Она будет полезна всем, кто планирует перебираться в Kotlin и не хочет долго осваиваться. В...">
<meta property="og:description" content="Меня зовут Борис Николаев, и в первой статье на Хабре хочу сравнить Java и Kotlin при работе с коллекциями. Она будет полезна всем, кто планирует перебираться в Kotlin и не хочет долго осваиваться. В...">
<meta name="twitter:description" content="Меня зовут Борис Николаев, и в первой статье на Хабре хочу сравнить Java и Kotlin при работе с коллекциями. Она будет полезна всем, кто планирует перебираться в Kotlin и не хочет долго осваиваться. В...">
<meta property="aiturec:description" content="Меня зовут Борис Николаев, и в первой статье на Хабре хочу сравнить Java и Kotlin при работе с коллекциями. Она будет полезна всем, кто планирует перебираться в Kotlin и не хочет долго осваиваться. В...">
<meta itemprop="image" content="https://habrastorage.org/webt/jz/xk/8l/jzxk8lyp1jjss_6wpq647vcjkcy.png">
<meta property="og:image" content="https://habrastorage.org/webt/jz/xk/8l/jzxk8lyp1jjss_6wpq647vcjkcy.png">
<meta property="og:image:width" content="1200">
<meta property="og:image:height" content="630">
<meta property="aiturec:image" content="https://habrastorage.org/webt/jz/xk/8l/jzxk8lyp1jjss_6wpq647vcjkcy.png">
<meta name="twitter:image" content="https://habrastorage.org/webt/jz/xk/8l/jzxk8lyp1jjss_6wpq647vcjkcy.png">
<meta property="vk:image" content="https://habrastorage.org/webt/jz/xk/8l/jzxk8lyp1jjss_6wpq647vcjkcy.png?format=vk">
<meta property="vk:image" content="https://habrastorage.org/webt/jz/xk/8l/jzxk8lyp1jjss_6wpq647vcjkcy.png?format=vk">
<meta property="aiturec:item_id" content="526374">
<meta property="aiturec:datetime" content="2020-11-11T13:52:05.000Z">
<meta content="https://habr.com/ru/companies/raiffeisenbank/articles/526374/" property="og:url">
<meta property="og:type" content="article">
<meta property="og:locale" content="ru_RU">
<meta property="og:image:width" content="1200">
<meta property="og:image:height" content="630">
<meta name="keywords" content="kotlin, java, коллекции, collections, Stream API, raiffeisendgtl">
<script type="application/ld+json" data-hid="1e0f0a2">{"@context":"http:\/\/schema.org","@type":"Article","mainEntityOfPage":{"@type":"WebPage","@id":"https:\/\/habr.com\/ru\/companies\/raiffeisenbank\/articles\/526374\/"},"headline":"Переезд из Java в Kotlin: как забрать коллекции с собой","datePublished":"2020-11-11T16:52:05+03:00","dateModified":"2020-11-11T23:44:22+03:00","author":{"@type":"Person","name":"Борис Николаев"},"publisher":{"@type":"Organization","name":"Habr","logo":{"@type":"ImageObject","url":"https:\/\/habrastorage.org\/webt\/a_\/lk\/9m\/a_lk9mjkccjox-zccjrpfolmkmq.png"}},"description":"Меня зовут Борис Николаев, и в первой статье на Хабре хочу сравнить Java и Kotlin при работе с коллекциями. Она будет полезна всем, кто планирует перебираться в...","url":"https:\/\/habr.com\/ru\/companies\/raiffeisenbank\/articles\/526374\/#post-content-body","about":["c_raiffeisenbank","h_java","h_kotlin","h_programming","f_develop"],"image":["https:\/\/habr.com\/share\/publication\/526374\/5f817747fa8718226ef26dfaf7cddce1\/","https:\/\/habrastorage.org\/webt\/jz\/xk\/8l\/jzxk8lyp1jjss_6wpq647vcjkcy.png"]}</script>
    <meta charset="UTF-8">
    <meta name="viewport"
      content="width=device-width,initial-scale=1.0,viewport-fit=cover,maximum-scale=1,user-scalable=0">
    <meta name="referrer" content="unsafe-url">
    <style>
      /* cyrillic-ext */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 400;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9E4kDNxMZdWfMOD5VvmojLazX3dGTP.woff2) format('woff2');
        unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;
      }

      /* cyrillic */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 400;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9E4kDNxMZdWfMOD5Vvk4jLazX3dGTP.woff2) format('woff2');
        unicode-range: U+0301, U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;
      }

      /* latin-ext */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 400;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9E4kDNxMZdWfMOD5VvmYjLazX3dGTP.woff2) format('woff2');
        unicode-range: U+0100-02AF, U+0304, U+0308, U+0329, U+1E00-1E9F, U+1EF2-1EFF, U+2020, U+20A0-20AB, U+20AD-20C0, U+2113, U+2C60-2C7F, U+A720-A7FF;
      }

      /* latin */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 400;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9E4kDNxMZdWfMOD5Vvl4jLazX3dA.woff2) format('woff2');
        unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+0304, U+0308, U+0329, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
      }

      /* cyrillic-ext */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 500;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnZKveSxf6Xl7Gl3LX.woff2) format('woff2');
        unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;
      }

      /* cyrillic */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 500;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnZKveQhf6Xl7Gl3LX.woff2) format('woff2');
        unicode-range: U+0301, U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;
      }

      /* latin-ext */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 500;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnZKveSBf6Xl7Gl3LX.woff2) format('woff2');
        unicode-range: U+0100-02AF, U+0304, U+0308, U+0329, U+1E00-1E9F, U+1EF2-1EFF, U+2020, U+20A0-20AB, U+20AD-20C0, U+2113, U+2C60-2C7F, U+A720-A7FF;
      }

      /* latin */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 500;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnZKveRhf6Xl7Glw.woff2) format('woff2');
        unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+0304, U+0308, U+0329, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
      }

      /* cyrillic-ext */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 700;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnLK3eSxf6Xl7Gl3LX.woff2) format('woff2');
        unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;
      }

      /* cyrillic */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 700;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnLK3eQhf6Xl7Gl3LX.woff2) format('woff2');
        unicode-range: U+0301, U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;
      }

      /* latin-ext */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 700;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnLK3eSBf6Xl7Gl3LX.woff2) format('woff2');
        unicode-range: U+0100-02AF, U+0304, U+0308, U+0329, U+1E00-1E9F, U+1EF2-1EFF, U+2020, U+20A0-20AB, U+20AD-20C0, U+2113, U+2C60-2C7F, U+A720-A7FF;
      }

      /* latin */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 700;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnLK3eRhf6Xl7Glw.woff2) format('woff2');
        unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+0304, U+0308, U+0329, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
      }
    </style>
    <link rel="preload" href="https://assets.habr.com/habr-web/css/theme/light-v1.css" as="style" media="(prefers-color-scheme: light)" /><link rel="preload" href="https://assets.habr.com/habr-web/css/theme/dark-v1.css" as="style" media="(prefers-color-scheme: dark)" /><link id="light-colors" rel="stylesheet" href="https://assets.habr.com/habr-web/css/theme/light-v1.css" media="(prefers-color-scheme: light)" /><link id="dark-colors" rel="stylesheet" href="https://assets.habr.com/habr-web/css/theme/dark-v1.css" media="(prefers-color-scheme: dark)" />
    <script>window.i18nFetch = new Promise((res, rej) => {
          const xhr = new XMLHttpRequest();
          xhr.open('GET', '/js/i18n/ru-compiled.35b2fec11bb79a62419ab67779c2dd82.json');
          xhr.responseType = 'json';
          xhr.onload = function(e) {
            if (this.status === 200) {
              res({ru: xhr.response});
            } else {
              rej(e);
            }
          };
          xhr.send();
        });</script>
    <style>
      .grecaptcha-badge {
        visibility: hidden;
      }
    </style>
    <meta name="habr-version" content="2.233.0">
    
    <meta name="apple-mobile-web-app-status-bar-style" content="#303b44">
    <meta name="msapplication-TileColor" content="#629FBC">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="mobile-web-app-capable" content="yes">
    <link rel="shortcut icon" type="image/png" sizes="16x16" href="https://assets.habr.com/habr-web/img/favicons/favicon-16.png">
    <link rel="shortcut icon" type="image/png" sizes="32x32" href="https://assets.habr.com/habr-web/img/favicons/favicon-32.png">
    <link rel="apple-touch-icon" type="image/png" sizes="76x76" href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-76.png">
    <link rel="apple-touch-icon" type="image/png" sizes="120x120" href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-120.png">
    <link rel="apple-touch-icon" type="image/png" sizes="152x152" href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-152.png">
    <link rel="apple-touch-icon" type="image/png" sizes="180x180" href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-180.png">
    <link rel="apple-touch-icon" type="image/png" sizes="256x256" href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-256.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 320px) and (device-height: 568px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1136x640.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 375px) and (device-height: 812px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2436x1125.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1792x828.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_828x1792.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 375px) and (device-height: 667px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1334x750.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1242x2668.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 414px) and (device-height: 736px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2208x1242.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 375px) and (device-height: 812px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1125x2436.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 414px) and (device-height: 736px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1242x2208.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 1024px) and (device-height: 1366px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2732x2048.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2688x1242.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 834px) and (device-height: 1112px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2224x1668.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 375px) and (device-height: 667px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_750x1334.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 1024px) and (device-height: 1366px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2048x2732.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 834px) and (device-height: 1194px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2388x1668.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 834px) and (device-height: 1112px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1668x2224.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 320px) and (device-height: 568px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_640x1136.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 834px) and (device-height: 1194px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1668x2388.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 768px) and (device-height: 1024px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2048x1536.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 768px) and (device-height: 1024px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1536x2048.png">
    <link rel="mask-icon" color="#77a2b6" href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-120.svg">
    <link crossorigin="use-credentials" href="/manifest.webmanifest" rel="manifest">
    <script async src="https://unpkg.com/pwacompat" crossorigin="anonymous"></script>
    <script>window.yaContextCb = window.yaContextCb || []</script>
    <script src="https://yandex.ru/ads/system/context.js" async></script>
  <link rel="preload" href="https://assets.habr.com/habr-web/css/chunk-vendors.04465f7c.css" as="style"><link rel="preload" href="https://assets.habr.com/habr-web/js/chunk-vendors.3b11d41f.js" as="script"><link rel="preload" href="https://assets.habr.com/habr-web/css/app.20959a76.css" as="style"><link rel="preload" href="https://assets.habr.com/habr-web/js/app.7a97ea6d.js" as="script"><link rel="stylesheet" href="https://assets.habr.com/habr-web/css/chunk-vendors.04465f7c.css"><link rel="stylesheet" href="https://assets.habr.com/habr-web/css/app.20959a76.css"></head>
  <body>
    
    <div id="mount"><div id="app" data-async-called="true"><div class="tm-layout__wrapper"><!--[--><!----><div></div><div class="tm-feature tm-feature"><!----></div><header class="tm-header" data-test-id="header"><div class="tm-page-width"><!--[--><div class="tm-header__container"><div class="tm-header__burger-nav" data-test-id="burger-nav"><button class="tm-header__button tm-header__button_burger" type="button"><svg class="tm-svg-img tm-header__icon tm-header__icon-burger" height="16" width="16"><title>Меню</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#header-burger"></use></svg></button></div><span class="tm-header__logo-wrap"><a class="tm-header__logo tm-header__logo_hl-ru tm-header__logo" href="/ru/"><svg class="tm-svg-img tm-header__icon" height="16" width="16"><title>Хабр</title><use xlink:href="/img/habr-logo-ru.svg#logo"></use></svg></a><span style="display:none;" class="tm-header__beta-sign">β</span></span><!----><div class="tm-header-user-menu tm-header_user-menu"><a href="/ru/search/" class="tm-header-user-menu__item tm-header-user-menu__search" data-test-id="search-button"><svg class="tm-svg-img tm-header-user-menu__icon tm-header-user-menu__icon_search" height="24" width="24"><title>Поиск</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#search"></use></svg></a><!----><!----><div class="tm-header-user-menu__item tm-header-user-menu__write"><div><svg class="tm-svg-img tm-header-user-menu__icon tm-header-user-menu__icon_write" height="24" width="24"><title>Написать публикацию</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#write"></use></svg></div><!----></div><!--[--><div class="tm-header-user-menu__item"><button class="tm-header-user-menu__toggle" data-test-id="user-menu-settings"><svg class="tm-svg-img tm-header-user-menu__icon" height="24" width="24"><title>Настройки</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#page-settings"></use></svg></button></div><a href="https://habr.com/kek/v1/auth/habrahabr/?back=/ru/companies/raiffeisenbank/articles/526374/&amp;hl=ru" rel="nofollow" class="tm-header-user-menu__item"><!--[--><button class="btn btn_solid btn_small tm-header-user-menu__login" type="button"><!--[-->Войти<!--]--></button><!--]--></a><!--]--><!----><!--teleport start--><!--teleport end--><!----></div></div><!--]--></div></header><div class="tm-layout"><div class="tm-page-progress-bar"></div><!----><!----><div class="tm-page-width"><!--[--><!--]--></div><main class="tm-layout__container"><div class="tm-page" hl="ru" companyname="raiffeisenbank" data-async-called="true" style="--0c809c5a:16px;--a086013e:100%;--7c457026:0;"><div class="tm-page-width"><!--[--><div class="tm-page__header"><!--[--><!--]--></div><div class="tm-page__wrapper"><div class="tm-page__main_has-sidebar tm-page__main"><div class="pull-down"><!----><div class="pull-down__header" style="height:0px;"><div class="pull-down__content" style="bottom:10px;"><svg class="tm-svg-img pull-down__icon pull-down__arrow" height="24" width="24"><title>Обновить</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#pull-arrow"></use></svg></div></div><!--[--><!--[--><div class="tm-article-presenter"><!--[--><!--]--><div class="tm-article-presenter__body" data-test-id="article-body"><div class="tm-misprint-area"><div class="tm-misprint-area__wrapper"><!--[--><article class="tm-article-presenter__content tm-article-presenter__content_narrow"><!--[--><div class="tm-article-presenter__header"><!--[--><!--]--><div class="tm-article-snippet tm-article-snippet tm-article-presenter__snippet"><!--[--><!--]--><div class="tm-article-snippet__meta-container"><div class="tm-article-snippet__meta"><span class="tm-user-info tm-article-snippet__author"><a href="/ru/users/devmark/" class="tm-user-info__userpic" data-test-id="user-info-pic" title="devmark"><div class="tm-entity-image"><img alt="" class="tm-entity-image__pic" height="32" src="//habrastorage.org/r/w64/getpro/habr/avatars/d19/815/c3c/d19815c3c71ebecc8f09253b174681fc.jpg" width="32"></div></a><span class="tm-user-info__user tm-user-info__user_appearance-default" data-test-id="user-info-description"><a href="/ru/users/devmark/" class="tm-user-info__username">devmark <!----></a><!--[--><span class="tm-article-datetime-published"><time datetime="2020-11-11T13:52:05.000Z" title="2020-11-11, 16:52">11  ноя  2020 в 16:52</time></span><!--]--></span></span></div><!----></div><h1 class="tm-title tm-title_h1" lang="ru" data-test-id="articleTitle"><span>Переезд из Java в Kotlin: как забрать коллекции с собой</span></h1><div class="tm-article-snippet__stats" data-test-id="articleStats"><!----><div class="tm-article-reading-time"><span class="tm-svg-icon__wrapper tm-article-reading-time__icon"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Время на прочтение</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#clock"></use></svg></span><span class="tm-article-reading-time__label">12 мин</span></div><span class="tm-icon-counter tm-data-icons__item"><svg class="tm-svg-img tm-icon-counter__icon" height="24" width="24"><title>Количество просмотров</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-views"></use></svg><span class="tm-icon-counter__value" title="17209">17K</span></span></div><div class="tm-publication-hubs__container" data-test-id="articleHubsList"><div class="tm-publication-hubs"><!--[--><span class="tm-publication-hub__link-container"><a href="/ru/companies/raiffeisenbank/articles/" class="tm-publication-hub__link"><!--[--><span>Блог компании Райффайзен Банк</span><!----><!--]--></a></span><span class="tm-publication-hub__link-container"><a href="/ru/hubs/java/" class="tm-publication-hub__link"><!--[--><span>Java</span><span class="tm-article-snippet__profiled-hub" title="Профильный хаб">*</span><!--]--></a></span><span class="tm-publication-hub__link-container"><a href="/ru/hubs/kotlin/" class="tm-publication-hub__link"><!--[--><span>Kotlin</span><span class="tm-article-snippet__profiled-hub" title="Профильный хаб">*</span><!--]--></a></span><span class="tm-publication-hub__link-container"><a href="/ru/hubs/programming/" class="tm-publication-hub__link"><!--[--><span>Программирование</span><span class="tm-article-snippet__profiled-hub" title="Профильный хаб">*</span><!--]--></a></span><!--]--></div></div><div class="tm-article-labels" data-test-id="articleLabels"><div class="tm-article-labels__container"><div class="tm-publication-label tm-publication-label_variant-tutorial"><span>Туториал</span></div><!--[--><!--]--></div></div><!----><!----></div></div><!--[--><!----><div class="tm-article-body" data-gallery-root lang="ru"><div><!--[--><!--]--></div><div id="post-content-body"><div><div class="article-formatted-body article-formatted-body article-formatted-body_version-1"><div xmlns="http://www.w3.org/1999/xhtml">Меня зовут Борис Николаев, и в первой статье на Хабре хочу сравнить Java и Kotlin при работе с коллекциями. Она будет полезна всем, кто планирует перебираться в Kotlin и не хочет долго осваиваться.<br/>
<br/>
В течение последних лет Kotlin становится всё более и более популярным. Многие начинают осваивать его, уже имея за плечами какой-то бэкграунд на Java, поэтому в данной статье мне хотелось бы привести сравнение кода на Java и на Kotlin. Чтобы наши примеры были более наглядными, рассмотрим различные операции над коллекциями, потому что без них не обходится ни одно приложение.<br/>
<br/>
<a href="https://habr.com/ru/company/raiffeisenbank/blog/526374/"><img src="https://habrastorage.org/r/w1560/webt/jz/xk/8l/jzxk8lyp1jjss_6wpq647vcjkcy.png" data-src="https://habrastorage.org/webt/jz/xk/8l/jzxk8lyp1jjss_6wpq647vcjkcy.png"/></a><a name="habracut"></a><br/>
<br/>
<div class="spoiler" role="button" tabindex="0">
                        <b class="spoiler_title">Что в статье</b>
                        <div class="spoiler_text"><ul>
<li><a href="#1">Создание класса-сущности</a></li>
<li><a href="#2">Создание коллекции</a></li>
<li><a href="#3">Перебор всех элементов коллекции</a></li>
<li><a href="#4">Преобразование элементов списка</a></li>
<li><a href="#5">Фильтрация элементов списка</a></li>
<li><a href="#6">Первый и последний элемент списка</a></li>
<li><a href="#7">Прямая и обратная сортировка элементов</a></li>
<li><a href="#8">Объединение нескольких строк в одну</a></li>
<li><a href="#9">Поиск максимальных и минимальных значений</a></li>
<li><a href="#10">Вычисление суммы и среднего значения</a></li>
<li><a href="#11">Преобразование List в Map</a></li>
<li><a href="#12">Группировка элементов</a></li>
<li><a href="#13">Преобразование двумерного списка в одномерный</a></li>
<li><a href="#14">Преобразование List в Set</a></li>
<li><a href="#15">Поиск элементов в коллекции</a></li>
<li><a href="#16">Групповая проверка условий</a></li>
</ul></div>
                    </div> <br/>
<a name="1"></a><h3>Пункт отправления: «класс-сущность» </h3><br/>
Чтобы нам было над чем производить манипуляции, создадим класс-сущность — он предназначен для хранения данных. Часто такие классы точно соответствуют полям таблицы. Например, возьмём сущность «Город», у которой есть два поля — название и количество жителей.<br/>
<br/>
На <b>Java</b> такая сущность выглядит следующим образом:<br/>
<br/>
<pre><code class="java">public class City {

    private final String name;
    private final int population;

    public City(String name, int population) {
        this.name = name;
        this.population = population;
    }

    public String getName() {
        return name;
    }

    public int getPopulation() {
        return population;
    }

    @Override
    public String toString() {
        return "City{" +
                "name='" + name + '\'' +
                ", population=" + population +
                '}';
    }
}</code></pre><br/>
Данный класс неизменяемый, то есть значения его полей можно установить только в момент инициализации объекта, а затем все эти значения доступны лишь для чтения. Это имеет особое значение при работе с коллекциями в функциональном стиле.<br/>
<br/>
На <b>Kotlin</b> подобный класс может быть объявлен так:<br/>
<br/>
<pre><code class="kotlin">data class City(
    val name: String,
    val population: Int
)</code></pre><br/>
Все классы, которые пишутся на Kotlin, полностью совместимы на уровне байт-кода с Java-классами. Такие классы автоматически определяют помимо геттеров также методы<b><code> equals(), hashCode() и toString().</code></b> <br/>
<br/>
<a name="2"></a><h3>Следующая остановка — «создание коллекции»</h3><br/>
В качестве примера используем коллекцию типа «список» (List) из четырёх экземпляров класса City. На <b>Java</b>, начиная с 9-ой версии, это делается с помощью метода <b><code>List.of()</code></b>:<br/>
<br/>
<pre><code class="java">var cities = List.of(
        new City("Париж", 2_148_327),
        new City("Москва", 12_678_079),
        new City("Берлин", 3_644_826),
        new City("Мадрид", 3_266_126)
);</code></pre><br/>
А на <b>Kotlin</b> можно сделать вот так:<br/>
<br/>
<pre><code class="kotlin">val cities = listOf(
    City("Париж", 2_148_327),
    City("Москва", 12_678_079),
    City("Берлин", 3_644_826),
    City("Мадрид", 3_266_126)
)</code></pre><br/>
Метод <b><code>listOf()</code></b> относится к стандартной библиотеке Kotlin и упрощает создание коллекций. Данный метод добавлен к интерфейсу List. Причём сам список — опять-таки неизменяемый объект: в него нельзя добавлять или удалять из него элементы. Если же нам требуется менять содержимое списка, то мы могли бы воспользоваться методом <b><code>mutableListOf()</code></b>, который вернёт нам объект типа <b>MutableList</b>.<br/>
<br/>
<a name="3"></a><h3>Перебор всех элементов коллекции</h3><br/>
Помимо стандартного перебора элементов через цикл <b>foreach</b> (например, в целях логирования), <b>Java</b> позволяет делать это в функциональном стиле через метод <b><code>forEach()</code>:</b><br/>
<br/>
<pre><code class="java">cities.forEach(c -&gt; System.out.println(c.getName())); </code></pre><br/>
При помощи лямбда-выражения мы выводим название каждого города. В <b>Kotlin</b> это делается похожим образом:<br/>
<br/>
<pre><code class="kotlin">cities.forEach { println(it.name) }</code></pre><br/>
Имя переменной <b>it</b> автоматически доступно по умолчанию для параметра лямбда-выражения. По аналогии с Java вы также можете задать имя этой переменной в явном виде. Если же у вас несколько вложенных лямбда-выражений, тогда явное именование параметров становится необходимостью.<br/>
<br/>
Если помимо самого элемента нужен ещё и его порядковый номер в коллекции (разумеется, начинающийся с нуля), то используйте метод <b><code>forEachIndexed()</code></b>. Тогда в лямбде нужно в явном виде указывать два параметра вместо одного дефолтного it — индекс и элемент.<br/>
<br/>
<pre><code class="java">cities.forEachIndexed { index, city -&gt; println("$index: ${city.name}") }  </code></pre><br/>
Тут мы выводим порядковый номер элемента, а затем, после двоеточия, название города. В Kotlin подстановка значения переменной в строку производится с помощью знака доллара. Если нужно встроить не объект целиком, а одно из его полей или вычисляемое значение, тогда помимо символа доллара такое выражение нужно взять в фигурные скобки.<br/>
<br/>
<a name="4"></a><h3>Преобразование элементов списка</h3><br/>
Теперь преобразуем созданный нами список городов в список их названий с сохранением порядка следования. На <b>Java</b> нам помогут стримы:<br/>
<br/>
<pre><code class="java">var cityNames = cities.stream()
        .map(City::getName)
        .collect(Collectors.toList());</code></pre><br/>
Для этого сначала преобразуем нашу коллекцию в стрим, затем сделаем преобразование («перемаппинг») с помощью метода<b> <code>map()</code></b> и после этого преобразуем стрим в новый список с помощью метода <b><code>collect()</code></b>. <br/>
<br/>
На <b>Kotlin</b> то же самое действие делается в одну строку:<br/>
<br/>
<pre><code class="kotlin">val cityNames = cities.map { c -&gt; c.name } 
// более краткая запись: cities.map { it.name }</code></pre><br/>
Котлиновский метод также называется <b><code>map()</code></b>.<br/>
<br/>
<a name="5"></a><h3>Фильтрация элементов списка</h3><br/>
Давайте создадим новый список, в котором будут только мегаполисы с населением более трёх миллионов человек. Код на <b>Java</b>:<br/>
<br/>
<pre><code class="java">cities.stream()
        .filter(c -&gt; c.getPopulation() &gt;= 3_000_000)
        .collect(Collectors.toList());</code></pre><br/>
То же, но на <b>Kotlin</b>:<br/>
<br/>
<pre><code class="kotlin">cities.filter { it.population &gt;= 3_000_000 }</code></pre><br/>
В обоих случаях всю работу делает метод <b><code>filter()</code></b>. Только в Kotlin он уже возвращает готовую коллекцию, тогда как на Java возвращается стрим, который затем мы преобразуем с помощью <b><code>collect()</code></b>.<br/>
<br/>
<a name="6"></a><h3>Первый и последний элемент списка</h3><br/>
По аналогии с фильтрацией можно выбрать первый элемент из списка. В <b>Java-стримах</b> для этого есть метод <b><code>findFirst()</code></b>:<br/>
<br/>
<pre><code class="java">var first = cities.stream().findFirst(); 
// возвращает тип Optional&lt;City&gt;</code></pre><br/>
Он возвращает объект класса <b>Optional</b>, так как коллекция может быть пустой, и тогда Optional также будет пустым. В Kotlin нет Optional, а вместо этого можно использовать nullable-тип: котлиновский компилятор проверит, может ли наш тип когда-либо принять значение <b>null</b> или не может. Признаком допустимости null с точки зрения синтаксиса является знак вопроса после имени класса. Ниже для наглядности тип возвращаемого значения указан в явном виде после двоеточия. Обычно компилятор <b>Kotlin</b> сам выводит тип, поэтому в реальных системах явное указание типа излишне.<br/>
<br/>
<pre><code class="kotlin">// возвращает null в случае пустого списка
val nullableFirst: City? = cities.firstOrNull() 

// выбрасывает исключение для пустого списка
val nonNullableFirst: City = cities.first() </code></pre><br/>
Для пустого списка <b><code>firstOrNull()</code></b> вернёт null, а метод <b><code>first()</code></b> выбросит исключение. Поэтому метод <b><code>firstOrNull()</code></b> в общем случае использовать предпочтительнее.<br/>
<br/>
Кроме получения самого первого элемента списка можно получить первый элемент, удовлетворяющий некоторым условиям. Например, первый город, имя которого начинается на букву «М». На <b>Java</b> мы просто совместим два уже известных нам метода:<br/>
<br/>
<pre><code class="java">cities.stream()
        .filter(c -&gt; c.getName().startsWith("М"))
        .findFirst();</code></pre><br/>
А на <b>Kotlin</b> метод <b><code>firstOrNull()</code></b> и другие ему подобные принимают условие фильтрации в виде лямбда-выражения:<br/>
<br/>
<pre><code class="kotlin">cities.firstOrNull { it.name.startsWith("М") }</code></pre><br/>
Как видите, код получается более компактным. Kotlin также предоставляет методы <b><code>last() и lastOrNull()</code></b>, которые возвращают не первый, а последний элемент списка. В остальном логика их работы точно такая же, как и у выше рассмотренных методов.<br/>
<br/>
<a name="7"></a><h3>Прямая и обратная сортировка элементов</h3><br/>
Теперь давайте расположим наши города по названию в обратном алфавитном порядке. То есть от «Я» до «А». Код на <b>Java</b>:<br/>
<br/>
<pre><code class="java">var sortedCities = cities.stream()
        .sorted(Comparator.comparing(City::getName, Comparator.reverseOrder()))
        .collect(Collectors.toList()); 
// Париж, Москва, Мадрид, Берлин</code></pre><br/>
В метод <b><code>sorted()</code></b> мы передаем компаратор, который содержит в себе информацию, по какому полю надо выполнить сортировку (по name) и каков её порядок (обратный). Для прямой сортировки нужно использовать <b><code>Comparator.naturalOrder()</code></b> или второй параметр можно вообще не указывать. После создаем новый отсортированный список. <br/>
<br/>
То же самое на <b>Kotlin</b> записывается более компактно:<br/>
<br/>
<pre><code class="kotlin">val sortedCities = cities.sortedByDescending { it.name } 
// Париж, Москва, Мадрид, Берлин</code></pre><br/>
Для удобства есть специальный метод расширения <b><code>sortedByDescending()</code></b>. В него нужно лишь передать в виде лямбды поле, по которому производится сортировка. Для прямой сортировки используйте метод <b><code>sortedBy()</code></b>.<br/>
<br/>
<a name="8"></a><h3>Объединение нескольких строк в одну</h3><br/>
Относительно частой задачей бывает объединение нескольких строк в одну с разделителем в виде запятой. Давайте перечислим через запятую названия городов. В <b>Java</b> для этого есть метод <b><code>String.join()</code></b>.<br/>
<br/>
<pre><code class="java">var citiesString = String.join(", ", cityNames); 
// строка "Париж, Москва, Берлин, Мадрид"</code></pre><br/>
В <b>Kotlin</b> есть похожий метод <b><code>joinToString()</code></b>:<br/>
<br/>
<pre><code class="kotlin">val citiesString = cityNames.joinToString(separator = ", ") 
// строка "Париж, Москва, Берлин, Мадрид"</code></pre> <br/>
В параметрах можно указывать не только разделитель, но и:<br/>
<br/>
<ul>
<li>префикс (строка, добавляемая перед первым элементом); </li>
<li>постфикс (строка, добавляемая после последнего элемента); </li>
<li>ограничение на максимальное количество элементов, которые будут включены в результирующую строку;</li>
<li>а также специальную строку, которая будет сигнализировать о том, что в результат поместились не все элементы (по умолчанию это многоточие). </li>
</ul><br/>
Все эти параметры имеют удобные дефолтные значения, поэтому в явном виде их вообще не приходится указывать.<br/>
<br/>
<a name="9"></a><h3>Поиск максимальных и минимальных значений</h3><br/>
Теперь найдём самый крупный мегаполис. Как вы уже догадываетесь, среди наших исходных данных имеем в виду Москву. В <b>Java</b> мы воспользуемся методом <b><code>max()</code></b> и методом <b><code>Comparator.comparing()</code></b> для указания того поля, по которому надо делать сравнение:<br/>
<br/>
<pre><code class="java">var mostPopulatedCity = cities.stream()
        .max(Comparator.comparing(City::getPopulation)); // Москва</code></pre><br/>
В <b>Kotlin</b> эквивалентная выборка делается с помощью метода <b><code>maxByOrNull()</code></b>:<br/>
<br/>
<pre><code class="kotlin">val mostPopulatedCity = cities.maxByOrNull { it.population } // Москва</code></pre><br/>
Для поиска минимального элемента в обоих случаях нужно поменять «max» на «min», то есть воспользоваться методами <b><code>min() и minByOrNull()</code></b>. В нашем наборе данных самый маленький мегаполис — Париж.<br/>
<br/>
<a name="10"></a><h3>Вычисление суммы и среднего значения</h3><br/>
Теперь давайте узнаем, сколько всего людей живёт в наших городах вместе взятых. То есть посчитаем сумму по полю population. В <b>Java</b> нам нужно будет получить <b>IntStream</b> при помощи метода <b><code>mapToInt()</code></b>:<br/>
<br/>
<pre><code class="java">var totalPopulation = cities.stream().mapToInt(City::getPopulation).sum(); // int</code></pre><br/>
Метод <b><code>IntStream.sum()</code></b> всегда возвращает целочисленное значение, так как даже в случае пустой коллекции сумма просто будет равна нулю.<br/>
<br/>
Теперь давайте вычислим среднее значение населения. Тут уже чуть сложнее, потому что, во-первых, среднее значение имеет тип Double, а во-вторых, его может и не быть в случае, если коллекция пуста:<br/>
<br/>
<pre><code class="java">var averagePopulation = cities.stream().mapToInt(City::getPopulation).average(); 
// OptionalDouble</code></pre><br/>
Кроме того, класс IntStream предлагает метод <b><code>summaryStatistics()</code></b>, который позволяет получить все основные статистические параметры разом:<br/>
<br/>
<pre><code class="java">var statistics = cities.stream().mapToInt(City::getPopulation).summaryStatistics();
// IntSummaryStatistics{count=4, sum=21737358, min=2148327, average=5434339.500000, max=12678079}</code></pre><br/>
Объект класса <b>IntSummaryStatistics</b> содержит пять полей: количество элементов, сумма элементов, минимальное, максимальное и среднее значения.<br/>
<br/>
Давайте вычислим суммарное и среднее население с использованием <b>Kotlin</b>:<br/>
<br/>
<pre><code class="kotlin">val totalPopulation = cities.sumBy { it.population } 
// или cities.map { it.population }.sum()
val averagePopulation = cities.map { it.population }.average() 
// среднее значение</code></pre><br/>
Метод <b><code>sumBy()</code></b> принимает в качестве параметра поле, по которому нужно выполнить суммирование и возвращает целочисленную сумму. Этот метод равносилен комбинации методов<b> <code>map() и sum()</code></b>. Метод <b><code>average()</code></b> возвращает среднее значение в виде <b>Double</b>, причём в случае пустого списка метод вернёт специальное значение <b>Double.NAN</b> («not a number»).<br/>
<br/>
<a name="11"></a><h3>Преобразование List в Map</h3><br/>
Давайте превратим наш список городов в мапу, где ключом будет название города. После этого мы сможем быстро находить нужный город в нашей коллекции по его имени. На <b>Java</b> это делается через метод <b><code>Collectors.toMap()</code></b>:<br/>
<br/>
<pre><code class="java">var citiesByName = cities.stream()
        .collect(Collectors.toMap(City::getName, Function.identity()));</code></pre><br/>
В первом параметре мы указываем, какое поле должно стать ключом, а вторым параметром — что брать в качестве значения. <b><code>Function.identity()</code></b> возвращает элемент списка целиком. <br/>
<br/>
На <b>Kotlin</b> для этого есть специальный метод <b><code>associateBy()</code></b>:<br/>
<br/>
<pre><code class="kotlin">val citiesByName = cities.associateBy { it.name }</code></pre><br/>
Если же мы хотим, чтобы ключом мапы было название города, а значением — кол-во его жителей, тогда на <b>Java</b> код будет выглядеть так:<br/>
<br/>
<pre><code class="java">var nameToPopulation = cities.stream()
        .collect(Collectors.toMap(City::getName, City::getPopulation));</code></pre><br/>
А на <b>Kotlin</b> вот так:<br/>
<br/>
<pre><code class="kotlin">val nameToPopulation = cities.associate { it.name to it.population }</code></pre><br/>
Важно отметить, что <b>to</b> в данном случае не ключевое слово языка, а лишь обычная функция, помеченная ключевым словом <b>infix</b>. Этот модификатор позволяет записывать вызов функций в таком красивом виде, а по факту данный вызов полностью эквивалентен вызову <b>it.name.to(it.population)</b>. Механизм инфиксной записи открывает довольно широкие возможности для создания синтаксисов, ориентированных на конкретную предметную область (<b>domain specific language</b>, или DSL).<br/>
<br/>
Функция <b><code>to()</code></b> возвращает объект <b>Pair</b>, который состоит из двух полей: <b>first и second</b>. После этого метод <b><code>associate()</code></b> преобразует список таких объектов в мапу.<br/>
<br/>
<a name="12"></a><h3>Группировка элементов</h3><br/>
Теперь давайте создадим мапу, в которой ключом будет первая буква имени города, а значением — список всех городов, начинающихся с этой буквы. То есть сделаем группировку по первой букве имени города. В наших исходных данных есть два города, начинающихся на одну букву, следовательно по ключу «М» у нас должен быть список из двух элементов.<br/>
<br/>
<pre><code class="java">var citiesByFirstLetter = cities.stream()
        .collect(Collectors.groupingBy(c -&gt; c.getName().charAt(0)));</code></pre><br/>
В <b>Java</b> мы используем метод <b><code>Collectors.groupingBy()</code></b>, в который при помощи лямбды передаем правило формирования ключа будущей мапы. Логика её заключается в том, чтобы брать первый символ в названии города. <br/>
<br/>
На <b>Kotlin</b> это записывается с помощью метода <b><code>groupBy()</code></b>:<br/>
<br/>
<pre><code class="kotlin">val citiesByFirstLetter = cities.groupBy { it.name.first() }</code></pre><br/>
Уже знакомый нам метод <b><code>first()</code></b>, примененный к строке, возвращает её первый символ.<br/>
<br/>
<a name="13"></a><h3>Преобразование двумерного списка в одномерный</h3><br/>
Теперь выполним обратную задачу: объединим несколько списков разного размера в один общий список. Предположим, у нас имеется список, каждый элемент которого является списком строк. Тогда мы можем получить один «плоский» список с помощью метода <b><code>flatMap()</code></b>. Код на <b>Java</b>:<br/>
<br/>
<pre><code class="java">var letterLists = List.of(
        List.of("a", "b", "c"),
        List.of("d"),
        List.of("e", "f")
);
var plainLetters = letterLists.stream()
        .flatMap(Collection::stream)
        .collect(Collectors.toList()); // [a, b, c, d, e, f]</code></pre><br/>
Каждый элемент, являющийся вложенным списком, мы преобразуем в стрим. Эти стримы объединяются в один общий, и затем результирующий стрим преобразуется в новый список.<br/>
<br/>
В <b>Kotlin</b> также есть метод <b><code>flatMap()</code></b>, но если нам не требуется выполнять дополнительных преобразований над элементами, то воспользуемся его более кратким эквивалентом <b><code>flatten()</code></b>:<br/>
<br/>
<pre><code class="kotlin">val letterLists = listOf(
    listOf("a", "b", "c"),
    listOf("d"),
    listOf("e", "f")
)
val plainLetters = letterLists.flatten() // [a, b, c, d, e, f]</code></pre><br/>
<a name="14"></a><h3>Преобразование List в Set</h3><br/>
Коллекция типа «множество» (set) отличается от простого списка тем, что в нём содержатся только уникальные значения. Если мы сначала создадим список с дублями, а затем преобразуем его в <b>Set</b>, то в результате получим новую коллекцию с меньшим количеством элементов, и все они будут уникальными.<br/>
<br/>
Давайте создадим сначала список из дней недели, в котором будут дубли. Затем преобразуем его в множество с уникальными элементами (множество дней недели, которые считаются выходными). В <b>Java</b> это можно сделать так:<br/>
<br/>
<pre><code class="java">// список с дублями 
var days = List.of("суббота", "воскресенье", "суббота"); 

// быстрый поиск
var fastHolidays = new HashSet&lt;&gt;(days); 

// сохранение порядка элементов
var orderedHolidays = new LinkedHashSet&lt;&gt;(days); </code></pre><br/>
<br/>
В Java (а значит, и в Kotlin) есть несколько реализаций интерфейса Set. В данном случае я привёл две из них: <b>HashSet</b> и <b>LinkedHashSet</b>. Первую реализацию следует использовать тогда, когда нам требуется искать в ней элементы и порядок нам не важен, а вторую — когда мы будем где-либо отображать это множество, так как в нём сохранится порядок следования элементов из исходной коллекции.<br/>
<br/>
На <b>Kotlin</b> создание этих множеств будет выглядеть следующим образом:<br/>
<br/>
<pre><code class="kotlin">// список с дублями 
val days = listOf("суббота", "воскресенье", "суббота") 

// быстрый поиск
val fastHolidays = days.toHashSet() 

// сохранение порядка элементов
val orderedHolidays = days.toSet() </code></pre><br/>
Метод <b><code>toHashSet()</code></b> ожидаемо возвращает именно <b>HashSet</b>, оптимизированный для быстрого поиска значений. А метод <b><code>toSet()</code></b> по факту возвращает именно <b>LinkedHashSet</b>, если в исходной коллекции было больше одного элемента. То есть он возвращает множество, которое сохранит порядок следования элементов из исходной коллекции.<br/>
<br/>
<a name="15"></a><h3>Поиск элементов в коллекции</h3><br/>
Поиск элементов по значению можно выполнять в любом виде коллекций (list, set, map). Сказанное далее технически применимо к любой коллекции, но быстрее всего будет работать именно в <b>HashSet</b>. Поэтому возьмём коллекцию <b>fastHolidays</b> из предыдущего примера и проверим, является ли понедельник выходным днём.<br/>
<br/>
В <b>Java</b> для таких проверок используется метод <b><code>contains()</code></b>:<br/>
<br/>
<pre><code class="java">var isHoliday = fastHolidays.contains("понедельник"); 
// false</code></pre><br/>
В результате мы ожидаемо получим false, ведь «понедельник — день тяжёлый», и выходным не является. <br/>
<br/>
В <b>Kotlin</b> эквивалентная проверка выглядит следующим образом:<br/>
<br/>
<pre><code class="kotlin">val isHoliday = fastHolidays.contains("понедельник")
// или более краткая форма
val isHoliday = "понедельник" in fastHolidays</code></pre><br/>
Вторая форма использует выражение <b>in</b>, но это не более чем синтаксический сахар, так как благодаря соглашениям об именовании методов Kotlin всегда будет вызывать метод <b><code>contains()</code></b>, когда встречает выражение in. На мой взгляд, второй вариант гораздо более читаемый и понятный.<br/>
<br/>
<a name="16"></a><h3>Групповая проверка условий</h3><br/>
Иногда бывает необходимо проверить какое-то условие над всеми элементами коллекции сразу. Например, у нас есть множество целых чисел, и мы хотим узнать, есть ли среди них положительные числа? Все ли они положительны? И наконец, мы хотим убедиться, что среди них нет нуля. Пример на <b>Java</b>:<br/>
<br/>
<pre><code class="java">var numbers = Set.of(-2, -1, 3, 4, 5);
var hasPositive = numbers.stream().anyMatch(n -&gt; n &gt; 0); // true
var allPositive = numbers.stream().allMatch(n -&gt; n &gt; 0); // false
var withoutZero = numbers.stream().noneMatch(n -&gt; n == 0); // true</code></pre><br/>
В этом нам помогают методы стримов <b><code>anyMatch(), allMatch() и noneMatch()</code></b>, которые принимают условия проверки в виде лямбды. В результате этих проверок мы узнаём, что среди наших чисел есть положительные, однако не все, и среди них действительно нет нуля.<br/>
<br/>
То же самое можно написать и на <b>Kotlin</b> с использованием методов <b><code>any(), all() и none()</code> </b>соответственно:<br/>
<br/>
<pre><code class="kotlin">val numbers = setOf(-2, -1, 3, 4, 5)
val hasPositive = numbers.any { it &gt; 0 } // true
val allPositive = numbers.all { it &gt; 0 } // false
val withoutZero = numbers.none { it == 0} // true</code></pre><br/>
Важно также отметить, что и в случае метода <b><code>allMatch()</code></b>, и в случае <b><code>метода all()</code></b>, вызов на пустой коллекции с любым предикатом всегда вернёт <b>true</b>.<br/>
<br/>
<h3>Конечный пункт, или чем хорош Kotlin при работе с коллекциями</h3><br/>
Как видите, с точки зрения синтаксиса, операции над коллекциями в Kotlin всегда гораздо более компактны и читаемы, нежели на Java. Важно заметить, что при этом нет накладных расходов в плане производительности, потому что в Kotlin используются те же классы коллекций из Java, но при этом они дополнены большим количеством вспомогательных методов расширения. В результате работать с коллекциями в Kotlin всегда легко и приятно.<br/>
<br/>
Если вы можете предложить более оптимальные решения для примеров, рассмотренных в статье, пишите об этом в комментариях. Обсудим вместе!</div></div></div><!----><!----></div><!----><!----></div><!--]--><!----><div class="tm-article-presenter__meta" data-test-id="article-meta-links"><div class="tm-separated-list tm-article-presenter__meta-list"><span class="tm-separated-list__title">Теги:</span><ul class="tm-separated-list__list"><!--[--><li class="tm-separated-list__item"><!--[--><a href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[kotlin]" class="tm-tags-list__link"><span>kotlin</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[java]" class="tm-tags-list__link"><span>java</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[%D0%BA%D0%BE%D0%BB%D0%BB%D0%B5%D0%BA%D1%86%D0%B8%D0%B8]" class="tm-tags-list__link"><span>коллекции</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[collections]" class="tm-tags-list__link"><span>collections</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[Stream+API]" class="tm-tags-list__link"><span>Stream API</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[raiffeisendgtl]" class="tm-tags-list__link"><span>raiffeisendgtl</span></a><!--]--></li><!--]--><!----></ul></div><div class="tm-separated-list tm-article-presenter__meta-list"><span class="tm-separated-list__title">Хабы:</span><ul class="tm-separated-list__list"><!--[--><li class="tm-separated-list__item"><!--[--><a href="/ru/companies/raiffeisenbank/articles/" class="tm-hubs-list__link"><!--[--><span>Блог компании Райффайзен Банк</span><!--]--></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a href="/ru/hubs/java/" class="tm-hubs-list__link"><!--[--><span>Java</span><!--]--></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a href="/ru/hubs/kotlin/" class="tm-hubs-list__link"><!--[--><span>Kotlin</span><!--]--></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a href="/ru/hubs/programming/" class="tm-hubs-list__link"><!--[--><span>Программирование</span><!--]--></a><!--]--></li><!--]--><!----></ul></div></div><!----><!--]--></article><!--]--></div><!----></div><div style="" class="tm-article-sticky-panel" data-test-id="article-sticky-panel"><div class="tm-data-icons tm-data-icons tm-data-icons_space-big tm-article-sticky-panel__icons" data-test-id="article-stats-icons"><div class="tm-article-rating tm-data-icons__item"><div class="tm-votes-meter tm-article-rating__votes-switcher"><svg class="tm-svg-img tm-votes-meter__icon tm-votes-meter__icon tm-votes-meter__icon_appearance-article" height="24" width="24"><title>Всего голосов 21: ↑17 и ↓4</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-rating"></use></svg><span class="tm-votes-meter__value tm-votes-meter__value_positive tm-votes-meter__value_appearance-article tm-votes-meter__value_rating tm-votes-meter__value" data-test-id="votes-meter-value" title="Всего голосов 21: ↑17 и ↓4">+18</span></div><!--teleport start--><!--teleport end--><!----></div><!----><!----><button class="bookmarks-button tm-data-icons__item" title="Добавить в закладки" type="button"><span class="tm-svg-icon__wrapper bookmarks-button__icon"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Добавить в закладки</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-favorite"></use></svg></span><span class="bookmarks-button__counter" title="Количество пользователей, добавивших публикацию в закладки">65</span></button><div class="tm-sharing tm-data-icons__item" title="Поделиться"><button class="tm-sharing__button" type="button"><svg viewbox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" class="tm-sharing__icon"><path fill="currentColor" d="M13.8 13.8V18l7.2-6.6L13.8 5v3.9C5 8.9 3 18.6 3 18.6c2.5-4.4 6-4.8 10.8-4.8z"></path></svg></button><!--teleport start--><!--teleport end--></div><div class="tm-article-comments-counter-link tm-data-icons__item" title="Читать комментарии"><a href="/ru/companies/raiffeisenbank/articles/526374/comments/" class="tm-article-comments-counter-link__link" data-test-id="counter-comments"><!--[--><svg class="tm-svg-img tm-article-comments-counter-link__icon" height="24" width="24"><title>Комментарии</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-comments"></use></svg><span class="tm-article-comments-counter-link__value">19</span><!--]--></a><!----></div><!--[--><!--[--><!--[--><!----><!--]--><!--]--><!--]--><!--teleport start--><!--teleport end--><!----></div></div></div><!--[--><!--]--><div class="tm-article-presenter__footer"><!--[--><!--[--><div class="tm-article-blocks"><!----><!--[--><section class="tm-block tm-block tm-block_spacing-bottom"><!----><!--[--><div class="tm-block__body tm-block__body tm-block__body_variant-balanced"><!--[--><div class="tm-article-author" data-test-id="article-author-info" data-async-called="true"><!--[--><!--[--><div class="tm-article-author__company"><div class="tm-article-author__company-card"><div class="tm-company-snippet"><a href="/ru/companies/raiffeisenbank/profile/" class="tm-company-snippet__logo-link"><div class="tm-entity-image"><img alt="" class="tm-entity-image__pic" height="40" src="//habrastorage.org/getpro/habr/company/3fb/cc5/68a/3fbcc568ac145a39ae52ab2c45c16eaa.png" width="40"></div></a><div class="tm-company-snippet__info"><a href="/ru/companies/raiffeisenbank/profile/" class="tm-company-snippet__title" data-test-id="company-title"><span>Райффайзен Банк</span></a><div class="tm-company-snippet__description">Развеиваем мифы об IT в банках</div></div></div><div class="tm-article-author__buttons"><!----><!----></div></div><div class="tm-article-author__company-contacts"><!--[--><a class="tm-article-author__contact" href="http://www.raiffeisen.ru/" rel="noopener" target="_blank">Сайт</a><!--]--></div><div class="tm-article-author__separator"></div></div><!--]--><!--]--><div class="tm-user-card tm-user-card tm-user-card_variant-article tm-article-author__user-card" data-async-called="true"><div class="tm-user-card__info-container"><div class="tm-user-card__header"><div class="tm-user-card__header-data"><a href="/ru/users/devmark/" class="tm-user-card__userpic tm-user-card__userpic_size-40"><div class="tm-entity-image"><img alt="" class="tm-entity-image__pic" src="//habrastorage.org/getpro/habr/avatars/d19/815/c3c/d19815c3c71ebecc8f09253b174681fc.jpg"></div></a><div class="tm-user-card__meta"><div class="tm-counter-container tm-karma tm-karma" title=" 39 голосов "><div class="tm-counter-container__header"><!--[--><div class="karma-display positive" data-v-7635202e>33</div><!----><!--]--></div><div class="tm-counter-container__footer"><!--[--><div class="tm-karma__text">Карма</div><!--teleport start--><!--teleport end--><!--]--></div></div><div class="tm-counter-container" title="Рейтинг пользователя"><div class="tm-counter-container__header"><!--[--><!--[--><!--]--><div class="tm-votes-lever tm-votes-lever tm-votes-lever_appearance-rating"><!----><div class="tm-votes-lever__score tm-votes-lever__score_appearance-rating tm-votes-lever__score"><!--[--><span><span class="tm-votes-lever__score-counter tm-votes-lever__score-counter_rating tm-votes-lever__score-counter" data-test-id="votes-score-counter">11</span></span><!--]--></div><!----></div><!--]--></div><div class="tm-counter-container__footer"><!--[--><span class="tm-rating__text tm-rating__text">Рейтинг</span><!--]--></div></div></div></div></div><div class="tm-user-card__info tm-user-card__info_variant-article tm-user-card__info"><div class="tm-user-card__title tm-user-card__title_variant-article tm-user-card__title"><span class="tm-user-card__name tm-user-card__name_variant-article tm-user-card__name">Борис Николаев</span><a href="/ru/users/devmark/" class="tm-user-card__nickname tm-user-card__nickname tm-user-card__nickname_variant-article"> @devmark</a><!----></div><p class="tm-user-card__short-info tm-user-card__short-info_variant-article tm-user-card__short-info" data-test-id="user-card-speciality">Backend developer</p></div></div><!----><div class="tm-user-card__buttons tm-user-card__buttons_variant-article tm-user-card__buttons"><!----><div class="tm-user-card__button"><div class="tm-button-follow tm-user-card__button-follow"><!----><button class="tm-button-follow__button tm-button-follow__button_big" data-test-id="follow-button" type="button">Подписаться</button></div></div><!----><div class="tm-user-card__button tm-user-card__button_write" data-test-id="user-card-conversations"><svg class="tm-svg-img tm-user-card__button-icon" height="16" width="16"><title>Отправить сообщение</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#mail"></use></svg></div><!----></div><!----></div><div class="tm-article-author__user-contacts" data-test-id="author-contacts"><!----><!----><!--[--><a class="tm-article-author__contact" data-test-id="author-contact-link" href="https://devmark.ru/" rel="noopener" target="_blank">Сайт</a><a class="tm-article-author__contact" data-test-id="author-contact-link" href="https://github.com/devmarkru/" rel="noopener" target="_blank">Github</a><a class="tm-article-author__contact" data-test-id="author-contact-link" href="https://telegram.me/devmark_ru" rel="noopener" target="_blank">Telegram</a><!--]--></div></div><!--]--></div><!--]--><!----></section><!----><!--[--><!--]--><!--]--><div class="tm-article-blocks__comments"><div id="publication-comments" class="tm-article-page-comments"><div><!--[--><div class="tm-article-comments-counter-link tm-article-comments-counter-button"><a href="/ru/companies/raiffeisenbank/articles/526374/comments/" class="tm-article-comments-counter-link__link tm-article-comments-counter-link__link_button-style" data-test-id="counter-comments"><!--[--><svg class="tm-svg-img tm-article-comments-counter-link__icon tm-article-comments-counter-link__icon_contrasted" height="24" width="24"><title>Комментарии</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-comments"></use></svg><span class="tm-article-comments-counter-link__value tm-article-comments-counter-link__value_contrasted"> Комментарии 19 </span><!--]--></a><!----></div><!--]--></div></div></div><!--[--><!--[--><!--]--><section class="tm-block tm-block tm-block_spacing-bottom"><header class="tm-block__header tm-block__header tm-block__header_variant-borderless"><div class="tm-block__header-container"><h2 class="tm-block__title tm-block__title tm-block__title_variant-large">Публикации</h2><!--[--><!--]--></div><!----></header><!--[--><div class="tm-block__body tm-block__body tm-block__body_variant-condensed-slim"><!--[--><!--[--><div class="tm-tabs tm-tabs"><div class=""><!--[--><span class="tm-tabs__tab-item"><button class="tm-tabs__tab-link tm-tabs__tab-link_active tm-tabs__tab-link_slim tm-tabs__tab-link">Лучшие за сутки</button></span><span class="tm-tabs__tab-item"><button class="tm-tabs__tab-link tm-tabs__tab-link_slim tm-tabs__tab-link">Похожие</button></span><!--]--></div><!----></div><div class="similar-and-daily__tab-view"><div class="placeholder-wrapper"><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><div class="tm-placeholder-article-cards"><!--[--><div class="tm-placeholder-article-card"><div class="tm-placeholder__user"><div class="tm-placeholder__user-pic loads"></div><div class="tm-placeholder__user-date loads"></div></div><div class="tm-placeholder-article-card__title"><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div></div><div class="tm-placeholder-article-card__icons tm-placeholder__counters"><!--[--><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><!--]--></div></div><div class="tm-placeholder-article-card"><div class="tm-placeholder__user"><div class="tm-placeholder__user-pic loads"></div><div class="tm-placeholder__user-date loads"></div></div><div class="tm-placeholder-article-card__title"><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div></div><div class="tm-placeholder-article-card__icons tm-placeholder__counters"><!--[--><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><!--]--></div></div><div class="tm-placeholder-article-card"><div class="tm-placeholder__user"><div class="tm-placeholder__user-pic loads"></div><div class="tm-placeholder__user-date loads"></div></div><div class="tm-placeholder-article-card__title"><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div></div><div class="tm-placeholder-article-card__icons tm-placeholder__counters"><!--[--><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><!--]--></div></div><div class="tm-placeholder-article-card"><div class="tm-placeholder__user"><div class="tm-placeholder__user-pic loads"></div><div class="tm-placeholder__user-date loads"></div></div><div class="tm-placeholder-article-card__title"><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div></div><div class="tm-placeholder-article-card__icons tm-placeholder__counters"><!--[--><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><!--]--></div></div><div class="tm-placeholder-article-card"><div class="tm-placeholder__user"><div class="tm-placeholder__user-pic loads"></div><div class="tm-placeholder__user-date loads"></div></div><div class="tm-placeholder-article-card__title"><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div></div><div class="tm-placeholder-article-card__icons tm-placeholder__counters"><!--[--><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><!--]--></div></div><!--]--></div><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----></div><!----></div><!--]--><!--]--></div><!--]--><!----></section><!--[--><!--[--><div class="placeholder-wrapper"><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><div class="tm-placeholder-inset tm-placeholder-vacancies"><div class="tm-placeholder-inset__header"><div class="tm-placeholder__line tm-placeholder__line_inset-header loads"></div></div><div class="tm-placeholder-inset__body"><ul class="tm-placeholder-list"><!--[--><li class="tm-placeholder-list__item tm-placeholder-list__item_inset"><div class="tm-placeholder-list__title-container"><div class="tm-placeholder__line tm-placeholder__line_item-title loads"></div></div><div class="tm-project-block-items__properties"><!--[--><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><!--]--></div></li><li class="tm-placeholder-list__item tm-placeholder-list__item_inset"><div class="tm-placeholder-list__title-container"><div class="tm-placeholder__line tm-placeholder__line_item-title loads"></div></div><div class="tm-project-block-items__properties"><!--[--><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><!--]--></div></li><li class="tm-placeholder-list__item tm-placeholder-list__item_inset"><div class="tm-placeholder-list__title-container"><div class="tm-placeholder__line tm-placeholder__line_item-title loads"></div></div><div class="tm-project-block-items__properties"><!--[--><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><!--]--></div></li><li class="tm-placeholder-list__item tm-placeholder-list__item_inset"><div class="tm-placeholder-list__title-container"><div class="tm-placeholder__line tm-placeholder__line_item-title loads"></div></div><div class="tm-project-block-items__properties"><!--[--><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><!--]--></div></li><li class="tm-placeholder-list__item tm-placeholder-list__item_inset"><div class="tm-placeholder-list__title-container"><div class="tm-placeholder__line tm-placeholder__line_item-title loads"></div></div><div class="tm-project-block-items__properties"><!--[--><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><!--]--></div></li><!--]--></ul></div><div class="tm-placeholder-inset__footer"><div class="tm-placeholder__line tm-placeholder__line_inset-footer loads"></div></div></div><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----></div><!--]--><!--]--><!----><!--[--><!--]--><!--]--></div><!--]--><!--]--></div></div><!--]--><!--]--></div></div><div class="tm-page__sidebar"><!--[--><!----><!--]--></div></div><!----><!--]--></div></div></main><!----></div><!----><div class="tm-footer"><div class="tm-page-width"><!--[--><div class="tm-footer__container"><div class="tm-footer__title"><a class="tm-svg-icon__wrapper tm-footer__title-link" href="/ru/"><svg class="tm-svg-img tm-svg-icon" height="16" width="16"><title>Хабр</title><use xlink:href="/img/habr-logo-ru.svg#logo"></use></svg></a></div><div class="tm-footer__social"><!--[--><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://www.facebook.com/habrahabr.ru" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="36" width="36"><title>Facebook</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-facebook"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://twitter.com/habr_com" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="36" width="36"><title>Twitter</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-twitter"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://vk.com/habr" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="36" width="36"><title>VK</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-vk"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://telegram.me/habr_com" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="36" width="36"><title>Telegram</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-telegram"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://www.youtube.com/channel/UCd_sTwKqVrweTt4oAKY5y4w" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="36" width="36"><title>Youtube</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-youtube"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://dzen.ru/habr" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="36" width="36"><title>Яндекс Дзен</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-dzen"></use></svg></a><!--]--></div><!--teleport start--><!--teleport end--><button class="tm-footer__link"><svg class="tm-svg-img tm-footer__icon" height="16" width="16"><title>Язык</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#lang"></use></svg> Настройка языка</button><a href="/ru/feedback/" class="tm-footer__link">Техническая поддержка</a><div class="tm-footer-copyright"><span class="tm-copyright"><span class="tm-copyright__years">© 2006–2025, </span><span class="tm-copyright__name"><a class="tm-copyright__link" href="https://company.habr.com/" rel="noopener" target="_blank">Habr</a></span></span></div></div><!--]--></div></div><!----><!--]--></div><!----></div><script>window.__INITIAL_STATE__={"adblock":{"hasAcceptableAdsFilter":false,"hasAdblock":false},"articlesList":{"articlesList":{"526374":{"id":"526374","timePublished":"2020-11-11T13:52:05+00:00","isCorporative":true,"lang":"ru","titleHtml":"Переезд из Java в Kotlin: как забрать коллекции с собой","leadData":{"textHtml":"Меня зовут Борис Николаев, и в первой статье на Хабре хочу сравнить Java и Kotlin при работе с коллекциями. Она будет полезна всем, кто планирует перебираться в Kotlin и не хочет долго осваиваться.\u003Cbr\u003E\r\n\u003Cbr\u003E\r\nВ течение последних лет Kotlin становится всё более и более популярным. Многие начинают осваивать его, уже имея за плечами какой-то бэкграунд на Java, поэтому в данной статье мне хотелось бы привести сравнение кода на Java и на Kotlin. Чтобы наши примеры были более наглядными, рассмотрим различные операции над коллекциями, потому что без них не обходится ни одно приложение.\u003Cbr\u003E\r\n\u003Cbr\u003E\r\n\u003Ca href=\"https:\u002F\u002Fhabr.com\u002Fru\u002Fcompany\u002Fraiffeisenbank\u002Fblog\u002F526374\u002F\"\u003E\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fwebt\u002Fjz\u002Fxk\u002F8l\u002Fjzxk8lyp1jjss_6wpq647vcjkcy.png\"\u003E\u003C\u002Fa\u003E","imageUrl":null,"buttonTextHtml":"Читать дальше &rarr;","image":null},"editorVersion":"1.0","postType":"article","postLabels":[],"author":{"id":"2504527","alias":"devmark","fullname":"Борис Николаев","avatarUrl":"\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Favatars\u002Fd19\u002F815\u002Fc3c\u002Fd19815c3c71ebecc8f09253b174681fc.jpg","speciality":"Backend developer","scoreStats":{"score":33,"votesCount":39},"rating":11,"relatedData":null,"contacts":[{"title":"Сайт","url":"https:\u002F\u002Fdevmark.ru\u002F","value":"https:\u002F\u002Fdevmark.ru\u002F","siteTitle":null,"favicon":null},{"title":"Github","url":"https:\u002F\u002Fgithub.com\u002Fdevmarkru\u002F","value":"devmarkru","siteTitle":null,"favicon":null},{"title":"Telegram","url":"https:\u002F\u002Ftelegram.me\u002Fdevmark_ru","value":"devmark_ru","siteTitle":null,"favicon":null}],"authorContacts":[{"title":"Сайт","url":"https:\u002F\u002Fdevmark.ru\u002F","value":"https:\u002F\u002Fdevmark.ru\u002F","siteTitle":null,"favicon":null},{"title":"Github","url":"https:\u002F\u002Fgithub.com\u002Fdevmarkru\u002F","value":"devmarkru","siteTitle":null,"favicon":null},{"title":"Telegram","url":"https:\u002F\u002Ftelegram.me\u002Fdevmark_ru","value":"devmark_ru","siteTitle":null,"favicon":null}],"paymentDetails":{"paymentYandexMoney":null,"paymentPayPalMe":null,"paymentWebmoney":null},"donationsMethod":null,"isInBlacklist":null,"careerProfile":null},"statistics":{"commentsCount":19,"favoritesCount":65,"readingCount":17209,"score":18,"votesCount":21,"votesCountPlus":17,"votesCountMinus":4},"hubs":[{"id":"21086","alias":"raiffeisenbank","type":"corporative","title":"Блог компании Райффайзен Банк","titleHtml":"Блог компании Райффайзен Банк","isProfiled":false,"relatedData":null},{"id":"375","alias":"java","type":"collective","title":"Java","titleHtml":"Java","isProfiled":true,"relatedData":null},{"id":"19441","alias":"kotlin","type":"collective","title":"Kotlin","titleHtml":"Kotlin","isProfiled":true,"relatedData":null},{"id":"359","alias":"programming","type":"collective","title":"Программирование","titleHtml":"Программирование","isProfiled":true,"relatedData":null}],"flows":[{"id":"1","alias":"develop","title":"Разработка","titleHtml":"Разработка"}],"relatedData":{"vote":null,"unreadCommentsCount":0,"bookmarked":false,"canComment":false,"canEdit":false,"canViewVotes":false,"votePlus":{"canVote":false,"isChargeEnough":false,"isKarmaEnough":false,"isVotingOver":true,"isPublicationLimitEnough":false},"voteMinus":{"canVote":false,"isChargeEnough":false,"isKarmaEnough":false,"isVotingOver":true,"isPublicationLimitEnough":false},"canModerateComments":false,"trackerSubscribed":false,"emailSubscribed":false},"textHtml":"\u003Cdiv xmlns=\"http:\u002F\u002Fwww.w3.org\u002F1999\u002Fxhtml\"\u003EМеня зовут Борис Николаев, и в первой статье на Хабре хочу сравнить Java и Kotlin при работе с коллекциями. Она будет полезна всем, кто планирует перебираться в Kotlin и не хочет долго осваиваться.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nВ течение последних лет Kotlin становится всё более и более популярным. Многие начинают осваивать его, уже имея за плечами какой-то бэкграунд на Java, поэтому в данной статье мне хотелось бы привести сравнение кода на Java и на Kotlin. Чтобы наши примеры были более наглядными, рассмотрим различные операции над коллекциями, потому что без них не обходится ни одно приложение.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Ca href=\"https:\u002F\u002Fhabr.com\u002Fru\u002Fcompany\u002Fraiffeisenbank\u002Fblog\u002F526374\u002F\"\u003E\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw1560\u002Fwebt\u002Fjz\u002Fxk\u002F8l\u002Fjzxk8lyp1jjss_6wpq647vcjkcy.png\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fwebt\u002Fjz\u002Fxk\u002F8l\u002Fjzxk8lyp1jjss_6wpq647vcjkcy.png\"\u002F\u003E\u003C\u002Fa\u003E\u003Ca name=\"habracut\"\u003E\u003C\u002Fa\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cdiv class=\"spoiler\" role=\"button\" tabindex=\"0\"\u003E\n                        \u003Cb class=\"spoiler_title\"\u003EЧто в статье\u003C\u002Fb\u003E\n                        \u003Cdiv class=\"spoiler_text\"\u003E\u003Cul\u003E\n\u003Cli\u003E\u003Ca href=\"#1\"\u003EСоздание класса-сущности\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#2\"\u003EСоздание коллекции\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#3\"\u003EПеребор всех элементов коллекции\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#4\"\u003EПреобразование элементов списка\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#5\"\u003EФильтрация элементов списка\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#6\"\u003EПервый и последний элемент списка\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#7\"\u003EПрямая и обратная сортировка элементов\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#8\"\u003EОбъединение нескольких строк в одну\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#9\"\u003EПоиск максимальных и минимальных значений\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#10\"\u003EВычисление суммы и среднего значения\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#11\"\u003EПреобразование List в Map\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#12\"\u003EГруппировка элементов\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#13\"\u003EПреобразование двумерного списка в одномерный\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#14\"\u003EПреобразование List в Set\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#15\"\u003EПоиск элементов в коллекции\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#16\"\u003EГрупповая проверка условий\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\u003C\u002Fdiv\u003E\n                    \u003C\u002Fdiv\u003E \u003Cbr\u002F\u003E\n\u003Ca name=\"1\"\u003E\u003C\u002Fa\u003E\u003Ch3\u003EПункт отправления: «класс-сущность» \u003C\u002Fh3\u003E\u003Cbr\u002F\u003E\nЧтобы нам было над чем производить манипуляции, создадим класс-сущность — он предназначен для хранения данных. Часто такие классы точно соответствуют полям таблицы. Например, возьмём сущность «Город», у которой есть два поля — название и количество жителей.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nНа \u003Cb\u003EJava\u003C\u002Fb\u003E такая сущность выглядит следующим образом:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode class=\"java\"\u003Epublic class City {\n\n    private final String name;\n    private final int population;\n\n    public City(String name, int population) {\n        this.name = name;\n        this.population = population;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getPopulation() {\n        return population;\n    }\n\n    @Override\n    public String toString() {\n        return \"City{\" +\n                \"name='\" + name + '\\'' +\n                \", population=\" + population +\n                '}';\n    }\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nДанный класс неизменяемый, то есть значения его полей можно установить только в момент инициализации объекта, а затем все эти значения доступны лишь для чтения. Это имеет особое значение при работе с коллекциями в функциональном стиле.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nНа \u003Cb\u003EKotlin\u003C\u002Fb\u003E подобный класс может быть объявлен так:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Edata class City(\n    val name: String,\n    val population: Int\n)\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nВсе классы, которые пишутся на Kotlin, полностью совместимы на уровне байт-кода с Java-классами. Такие классы автоматически определяют помимо геттеров также методы\u003Cb\u003E\u003Ccode\u003E equals(), hashCode() и toString().\u003C\u002Fcode\u003E\u003C\u002Fb\u003E \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Ca name=\"2\"\u003E\u003C\u002Fa\u003E\u003Ch3\u003EСледующая остановка — «создание коллекции»\u003C\u002Fh3\u003E\u003Cbr\u002F\u003E\nВ качестве примера используем коллекцию типа «список» (List) из четырёх экземпляров класса City. На \u003Cb\u003EJava\u003C\u002Fb\u003E, начиная с 9-ой версии, это делается с помощью метода \u003Cb\u003E\u003Ccode\u003EList.of()\u003C\u002Fcode\u003E\u003C\u002Fb\u003E:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode class=\"java\"\u003Evar cities = List.of(\n        new City(\"Париж\", 2_148_327),\n        new City(\"Москва\", 12_678_079),\n        new City(\"Берлин\", 3_644_826),\n        new City(\"Мадрид\", 3_266_126)\n);\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nА на \u003Cb\u003EKotlin\u003C\u002Fb\u003E можно сделать вот так:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Eval cities = listOf(\n    City(\"Париж\", 2_148_327),\n    City(\"Москва\", 12_678_079),\n    City(\"Берлин\", 3_644_826),\n    City(\"Мадрид\", 3_266_126)\n)\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nМетод \u003Cb\u003E\u003Ccode\u003ElistOf()\u003C\u002Fcode\u003E\u003C\u002Fb\u003E относится к стандартной библиотеке Kotlin и упрощает создание коллекций. Данный метод добавлен к интерфейсу List. Причём сам список — опять-таки неизменяемый объект: в него нельзя добавлять или удалять из него элементы. Если же нам требуется менять содержимое списка, то мы могли бы воспользоваться методом \u003Cb\u003E\u003Ccode\u003EmutableListOf()\u003C\u002Fcode\u003E\u003C\u002Fb\u003E, который вернёт нам объект типа \u003Cb\u003EMutableList\u003C\u002Fb\u003E.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Ca name=\"3\"\u003E\u003C\u002Fa\u003E\u003Ch3\u003EПеребор всех элементов коллекции\u003C\u002Fh3\u003E\u003Cbr\u002F\u003E\nПомимо стандартного перебора элементов через цикл \u003Cb\u003Eforeach\u003C\u002Fb\u003E (например, в целях логирования), \u003Cb\u003EJava\u003C\u002Fb\u003E позволяет делать это в функциональном стиле через метод \u003Cb\u003E\u003Ccode\u003EforEach()\u003C\u002Fcode\u003E:\u003C\u002Fb\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode class=\"java\"\u003Ecities.forEach(c -&gt; System.out.println(c.getName())); \u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nПри помощи лямбда-выражения мы выводим название каждого города. В \u003Cb\u003EKotlin\u003C\u002Fb\u003E это делается похожим образом:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Ecities.forEach { println(it.name) }\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nИмя переменной \u003Cb\u003Eit\u003C\u002Fb\u003E автоматически доступно по умолчанию для параметра лямбда-выражения. По аналогии с Java вы также можете задать имя этой переменной в явном виде. Если же у вас несколько вложенных лямбда-выражений, тогда явное именование параметров становится необходимостью.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nЕсли помимо самого элемента нужен ещё и его порядковый номер в коллекции (разумеется, начинающийся с нуля), то используйте метод \u003Cb\u003E\u003Ccode\u003EforEachIndexed()\u003C\u002Fcode\u003E\u003C\u002Fb\u003E. Тогда в лямбде нужно в явном виде указывать два параметра вместо одного дефолтного it — индекс и элемент.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode class=\"java\"\u003Ecities.forEachIndexed { index, city -&gt; println(\"$index: ${city.name}\") }  \u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nТут мы выводим порядковый номер элемента, а затем, после двоеточия, название города. В Kotlin подстановка значения переменной в строку производится с помощью знака доллара. Если нужно встроить не объект целиком, а одно из его полей или вычисляемое значение, тогда помимо символа доллара такое выражение нужно взять в фигурные скобки.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Ca name=\"4\"\u003E\u003C\u002Fa\u003E\u003Ch3\u003EПреобразование элементов списка\u003C\u002Fh3\u003E\u003Cbr\u002F\u003E\nТеперь преобразуем созданный нами список городов в список их названий с сохранением порядка следования. На \u003Cb\u003EJava\u003C\u002Fb\u003E нам помогут стримы:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode class=\"java\"\u003Evar cityNames = cities.stream()\n        .map(City::getName)\n        .collect(Collectors.toList());\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nДля этого сначала преобразуем нашу коллекцию в стрим, затем сделаем преобразование («перемаппинг») с помощью метода\u003Cb\u003E \u003Ccode\u003Emap()\u003C\u002Fcode\u003E\u003C\u002Fb\u003E и после этого преобразуем стрим в новый список с помощью метода \u003Cb\u003E\u003Ccode\u003Ecollect()\u003C\u002Fcode\u003E\u003C\u002Fb\u003E. \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nНа \u003Cb\u003EKotlin\u003C\u002Fb\u003E то же самое действие делается в одну строку:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Eval cityNames = cities.map { c -&gt; c.name } \n\u002F\u002F более краткая запись: cities.map { it.name }\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nКотлиновский метод также называется \u003Cb\u003E\u003Ccode\u003Emap()\u003C\u002Fcode\u003E\u003C\u002Fb\u003E.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Ca name=\"5\"\u003E\u003C\u002Fa\u003E\u003Ch3\u003EФильтрация элементов списка\u003C\u002Fh3\u003E\u003Cbr\u002F\u003E\nДавайте создадим новый список, в котором будут только мегаполисы с населением более трёх миллионов человек. Код на \u003Cb\u003EJava\u003C\u002Fb\u003E:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode class=\"java\"\u003Ecities.stream()\n        .filter(c -&gt; c.getPopulation() &gt;= 3_000_000)\n        .collect(Collectors.toList());\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nТо же, но на \u003Cb\u003EKotlin\u003C\u002Fb\u003E:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Ecities.filter { it.population &gt;= 3_000_000 }\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nВ обоих случаях всю работу делает метод \u003Cb\u003E\u003Ccode\u003Efilter()\u003C\u002Fcode\u003E\u003C\u002Fb\u003E. Только в Kotlin он уже возвращает готовую коллекцию, тогда как на Java возвращается стрим, который затем мы преобразуем с помощью \u003Cb\u003E\u003Ccode\u003Ecollect()\u003C\u002Fcode\u003E\u003C\u002Fb\u003E.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Ca name=\"6\"\u003E\u003C\u002Fa\u003E\u003Ch3\u003EПервый и последний элемент списка\u003C\u002Fh3\u003E\u003Cbr\u002F\u003E\nПо аналогии с фильтрацией можно выбрать первый элемент из списка. В \u003Cb\u003EJava-стримах\u003C\u002Fb\u003E для этого есть метод \u003Cb\u003E\u003Ccode\u003EfindFirst()\u003C\u002Fcode\u003E\u003C\u002Fb\u003E:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode class=\"java\"\u003Evar first = cities.stream().findFirst(); \n\u002F\u002F возвращает тип Optional&lt;City&gt;\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nОн возвращает объект класса \u003Cb\u003EOptional\u003C\u002Fb\u003E, так как коллекция может быть пустой, и тогда Optional также будет пустым. В Kotlin нет Optional, а вместо этого можно использовать nullable-тип: котлиновский компилятор проверит, может ли наш тип когда-либо принять значение \u003Cb\u003Enull\u003C\u002Fb\u003E или не может. Признаком допустимости null с точки зрения синтаксиса является знак вопроса после имени класса. Ниже для наглядности тип возвращаемого значения указан в явном виде после двоеточия. Обычно компилятор \u003Cb\u003EKotlin\u003C\u002Fb\u003E сам выводит тип, поэтому в реальных системах явное указание типа излишне.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003E\u002F\u002F возвращает null в случае пустого списка\nval nullableFirst: City? = cities.firstOrNull() \n\n\u002F\u002F выбрасывает исключение для пустого списка\nval nonNullableFirst: City = cities.first() \u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nДля пустого списка \u003Cb\u003E\u003Ccode\u003EfirstOrNull()\u003C\u002Fcode\u003E\u003C\u002Fb\u003E вернёт null, а метод \u003Cb\u003E\u003Ccode\u003Efirst()\u003C\u002Fcode\u003E\u003C\u002Fb\u003E выбросит исключение. Поэтому метод \u003Cb\u003E\u003Ccode\u003EfirstOrNull()\u003C\u002Fcode\u003E\u003C\u002Fb\u003E в общем случае использовать предпочтительнее.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nКроме получения самого первого элемента списка можно получить первый элемент, удовлетворяющий некоторым условиям. Например, первый город, имя которого начинается на букву «М». На \u003Cb\u003EJava\u003C\u002Fb\u003E мы просто совместим два уже известных нам метода:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode class=\"java\"\u003Ecities.stream()\n        .filter(c -&gt; c.getName().startsWith(\"М\"))\n        .findFirst();\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nА на \u003Cb\u003EKotlin\u003C\u002Fb\u003E метод \u003Cb\u003E\u003Ccode\u003EfirstOrNull()\u003C\u002Fcode\u003E\u003C\u002Fb\u003E и другие ему подобные принимают условие фильтрации в виде лямбда-выражения:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Ecities.firstOrNull { it.name.startsWith(\"М\") }\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nКак видите, код получается более компактным. Kotlin также предоставляет методы \u003Cb\u003E\u003Ccode\u003Elast() и lastOrNull()\u003C\u002Fcode\u003E\u003C\u002Fb\u003E, которые возвращают не первый, а последний элемент списка. В остальном логика их работы точно такая же, как и у выше рассмотренных методов.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Ca name=\"7\"\u003E\u003C\u002Fa\u003E\u003Ch3\u003EПрямая и обратная сортировка элементов\u003C\u002Fh3\u003E\u003Cbr\u002F\u003E\nТеперь давайте расположим наши города по названию в обратном алфавитном порядке. То есть от «Я» до «А». Код на \u003Cb\u003EJava\u003C\u002Fb\u003E:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode class=\"java\"\u003Evar sortedCities = cities.stream()\n        .sorted(Comparator.comparing(City::getName, Comparator.reverseOrder()))\n        .collect(Collectors.toList()); \n\u002F\u002F Париж, Москва, Мадрид, Берлин\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nВ метод \u003Cb\u003E\u003Ccode\u003Esorted()\u003C\u002Fcode\u003E\u003C\u002Fb\u003E мы передаем компаратор, который содержит в себе информацию, по какому полю надо выполнить сортировку (по name) и каков её порядок (обратный). Для прямой сортировки нужно использовать \u003Cb\u003E\u003Ccode\u003EComparator.naturalOrder()\u003C\u002Fcode\u003E\u003C\u002Fb\u003E или второй параметр можно вообще не указывать. После создаем новый отсортированный список. \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nТо же самое на \u003Cb\u003EKotlin\u003C\u002Fb\u003E записывается более компактно:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Eval sortedCities = cities.sortedByDescending { it.name } \n\u002F\u002F Париж, Москва, Мадрид, Берлин\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nДля удобства есть специальный метод расширения \u003Cb\u003E\u003Ccode\u003EsortedByDescending()\u003C\u002Fcode\u003E\u003C\u002Fb\u003E. В него нужно лишь передать в виде лямбды поле, по которому производится сортировка. Для прямой сортировки используйте метод \u003Cb\u003E\u003Ccode\u003EsortedBy()\u003C\u002Fcode\u003E\u003C\u002Fb\u003E.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Ca name=\"8\"\u003E\u003C\u002Fa\u003E\u003Ch3\u003EОбъединение нескольких строк в одну\u003C\u002Fh3\u003E\u003Cbr\u002F\u003E\nОтносительно частой задачей бывает объединение нескольких строк в одну с разделителем в виде запятой. Давайте перечислим через запятую названия городов. В \u003Cb\u003EJava\u003C\u002Fb\u003E для этого есть метод \u003Cb\u003E\u003Ccode\u003EString.join()\u003C\u002Fcode\u003E\u003C\u002Fb\u003E.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode class=\"java\"\u003Evar citiesString = String.join(\", \", cityNames); \n\u002F\u002F строка \"Париж, Москва, Берлин, Мадрид\"\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nВ \u003Cb\u003EKotlin\u003C\u002Fb\u003E есть похожий метод \u003Cb\u003E\u003Ccode\u003EjoinToString()\u003C\u002Fcode\u003E\u003C\u002Fb\u003E:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Eval citiesString = cityNames.joinToString(separator = \", \") \n\u002F\u002F строка \"Париж, Москва, Берлин, Мадрид\"\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E \u003Cbr\u002F\u003E\nВ параметрах можно указывать не только разделитель, но и:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cul\u003E\n\u003Cli\u003Eпрефикс (строка, добавляемая перед первым элементом); \u003C\u002Fli\u003E\n\u003Cli\u003Eпостфикс (строка, добавляемая после последнего элемента); \u003C\u002Fli\u003E\n\u003Cli\u003Eограничение на максимальное количество элементов, которые будут включены в результирующую строку;\u003C\u002Fli\u003E\n\u003Cli\u003Eа также специальную строку, которая будет сигнализировать о том, что в результат поместились не все элементы (по умолчанию это многоточие). \u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\u003Cbr\u002F\u003E\nВсе эти параметры имеют удобные дефолтные значения, поэтому в явном виде их вообще не приходится указывать.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Ca name=\"9\"\u003E\u003C\u002Fa\u003E\u003Ch3\u003EПоиск максимальных и минимальных значений\u003C\u002Fh3\u003E\u003Cbr\u002F\u003E\nТеперь найдём самый крупный мегаполис. Как вы уже догадываетесь, среди наших исходных данных имеем в виду Москву. В \u003Cb\u003EJava\u003C\u002Fb\u003E мы воспользуемся методом \u003Cb\u003E\u003Ccode\u003Emax()\u003C\u002Fcode\u003E\u003C\u002Fb\u003E и методом \u003Cb\u003E\u003Ccode\u003EComparator.comparing()\u003C\u002Fcode\u003E\u003C\u002Fb\u003E для указания того поля, по которому надо делать сравнение:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode class=\"java\"\u003Evar mostPopulatedCity = cities.stream()\n        .max(Comparator.comparing(City::getPopulation)); \u002F\u002F Москва\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nВ \u003Cb\u003EKotlin\u003C\u002Fb\u003E эквивалентная выборка делается с помощью метода \u003Cb\u003E\u003Ccode\u003EmaxByOrNull()\u003C\u002Fcode\u003E\u003C\u002Fb\u003E:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Eval mostPopulatedCity = cities.maxByOrNull { it.population } \u002F\u002F Москва\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nДля поиска минимального элемента в обоих случаях нужно поменять «max» на «min», то есть воспользоваться методами \u003Cb\u003E\u003Ccode\u003Emin() и minByOrNull()\u003C\u002Fcode\u003E\u003C\u002Fb\u003E. В нашем наборе данных самый маленький мегаполис — Париж.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Ca name=\"10\"\u003E\u003C\u002Fa\u003E\u003Ch3\u003EВычисление суммы и среднего значения\u003C\u002Fh3\u003E\u003Cbr\u002F\u003E\nТеперь давайте узнаем, сколько всего людей живёт в наших городах вместе взятых. То есть посчитаем сумму по полю population. В \u003Cb\u003EJava\u003C\u002Fb\u003E нам нужно будет получить \u003Cb\u003EIntStream\u003C\u002Fb\u003E при помощи метода \u003Cb\u003E\u003Ccode\u003EmapToInt()\u003C\u002Fcode\u003E\u003C\u002Fb\u003E:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode class=\"java\"\u003Evar totalPopulation = cities.stream().mapToInt(City::getPopulation).sum(); \u002F\u002F int\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nМетод \u003Cb\u003E\u003Ccode\u003EIntStream.sum()\u003C\u002Fcode\u003E\u003C\u002Fb\u003E всегда возвращает целочисленное значение, так как даже в случае пустой коллекции сумма просто будет равна нулю.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nТеперь давайте вычислим среднее значение населения. Тут уже чуть сложнее, потому что, во-первых, среднее значение имеет тип Double, а во-вторых, его может и не быть в случае, если коллекция пуста:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode class=\"java\"\u003Evar averagePopulation = cities.stream().mapToInt(City::getPopulation).average(); \n\u002F\u002F OptionalDouble\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nКроме того, класс IntStream предлагает метод \u003Cb\u003E\u003Ccode\u003EsummaryStatistics()\u003C\u002Fcode\u003E\u003C\u002Fb\u003E, который позволяет получить все основные статистические параметры разом:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode class=\"java\"\u003Evar statistics = cities.stream().mapToInt(City::getPopulation).summaryStatistics();\n\u002F\u002F IntSummaryStatistics{count=4, sum=21737358, min=2148327, average=5434339.500000, max=12678079}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nОбъект класса \u003Cb\u003EIntSummaryStatistics\u003C\u002Fb\u003E содержит пять полей: количество элементов, сумма элементов, минимальное, максимальное и среднее значения.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nДавайте вычислим суммарное и среднее население с использованием \u003Cb\u003EKotlin\u003C\u002Fb\u003E:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Eval totalPopulation = cities.sumBy { it.population } \n\u002F\u002F или cities.map { it.population }.sum()\nval averagePopulation = cities.map { it.population }.average() \n\u002F\u002F среднее значение\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nМетод \u003Cb\u003E\u003Ccode\u003EsumBy()\u003C\u002Fcode\u003E\u003C\u002Fb\u003E принимает в качестве параметра поле, по которому нужно выполнить суммирование и возвращает целочисленную сумму. Этот метод равносилен комбинации методов\u003Cb\u003E \u003Ccode\u003Emap() и sum()\u003C\u002Fcode\u003E\u003C\u002Fb\u003E. Метод \u003Cb\u003E\u003Ccode\u003Eaverage()\u003C\u002Fcode\u003E\u003C\u002Fb\u003E возвращает среднее значение в виде \u003Cb\u003EDouble\u003C\u002Fb\u003E, причём в случае пустого списка метод вернёт специальное значение \u003Cb\u003EDouble.NAN\u003C\u002Fb\u003E («not a number»).\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Ca name=\"11\"\u003E\u003C\u002Fa\u003E\u003Ch3\u003EПреобразование List в Map\u003C\u002Fh3\u003E\u003Cbr\u002F\u003E\nДавайте превратим наш список городов в мапу, где ключом будет название города. После этого мы сможем быстро находить нужный город в нашей коллекции по его имени. На \u003Cb\u003EJava\u003C\u002Fb\u003E это делается через метод \u003Cb\u003E\u003Ccode\u003ECollectors.toMap()\u003C\u002Fcode\u003E\u003C\u002Fb\u003E:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode class=\"java\"\u003Evar citiesByName = cities.stream()\n        .collect(Collectors.toMap(City::getName, Function.identity()));\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nВ первом параметре мы указываем, какое поле должно стать ключом, а вторым параметром — что брать в качестве значения. \u003Cb\u003E\u003Ccode\u003EFunction.identity()\u003C\u002Fcode\u003E\u003C\u002Fb\u003E возвращает элемент списка целиком. \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nНа \u003Cb\u003EKotlin\u003C\u002Fb\u003E для этого есть специальный метод \u003Cb\u003E\u003Ccode\u003EassociateBy()\u003C\u002Fcode\u003E\u003C\u002Fb\u003E:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Eval citiesByName = cities.associateBy { it.name }\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nЕсли же мы хотим, чтобы ключом мапы было название города, а значением — кол-во его жителей, тогда на \u003Cb\u003EJava\u003C\u002Fb\u003E код будет выглядеть так:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode class=\"java\"\u003Evar nameToPopulation = cities.stream()\n        .collect(Collectors.toMap(City::getName, City::getPopulation));\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nА на \u003Cb\u003EKotlin\u003C\u002Fb\u003E вот так:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Eval nameToPopulation = cities.associate { it.name to it.population }\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nВажно отметить, что \u003Cb\u003Eto\u003C\u002Fb\u003E в данном случае не ключевое слово языка, а лишь обычная функция, помеченная ключевым словом \u003Cb\u003Einfix\u003C\u002Fb\u003E. Этот модификатор позволяет записывать вызов функций в таком красивом виде, а по факту данный вызов полностью эквивалентен вызову \u003Cb\u003Eit.name.to(it.population)\u003C\u002Fb\u003E. Механизм инфиксной записи открывает довольно широкие возможности для создания синтаксисов, ориентированных на конкретную предметную область (\u003Cb\u003Edomain specific language\u003C\u002Fb\u003E, или DSL).\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nФункция \u003Cb\u003E\u003Ccode\u003Eto()\u003C\u002Fcode\u003E\u003C\u002Fb\u003E возвращает объект \u003Cb\u003EPair\u003C\u002Fb\u003E, который состоит из двух полей: \u003Cb\u003Efirst и second\u003C\u002Fb\u003E. После этого метод \u003Cb\u003E\u003Ccode\u003Eassociate()\u003C\u002Fcode\u003E\u003C\u002Fb\u003E преобразует список таких объектов в мапу.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Ca name=\"12\"\u003E\u003C\u002Fa\u003E\u003Ch3\u003EГруппировка элементов\u003C\u002Fh3\u003E\u003Cbr\u002F\u003E\nТеперь давайте создадим мапу, в которой ключом будет первая буква имени города, а значением — список всех городов, начинающихся с этой буквы. То есть сделаем группировку по первой букве имени города. В наших исходных данных есть два города, начинающихся на одну букву, следовательно по ключу «М» у нас должен быть список из двух элементов.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode class=\"java\"\u003Evar citiesByFirstLetter = cities.stream()\n        .collect(Collectors.groupingBy(c -&gt; c.getName().charAt(0)));\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nВ \u003Cb\u003EJava\u003C\u002Fb\u003E мы используем метод \u003Cb\u003E\u003Ccode\u003ECollectors.groupingBy()\u003C\u002Fcode\u003E\u003C\u002Fb\u003E, в который при помощи лямбды передаем правило формирования ключа будущей мапы. Логика её заключается в том, чтобы брать первый символ в названии города. \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nНа \u003Cb\u003EKotlin\u003C\u002Fb\u003E это записывается с помощью метода \u003Cb\u003E\u003Ccode\u003EgroupBy()\u003C\u002Fcode\u003E\u003C\u002Fb\u003E:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Eval citiesByFirstLetter = cities.groupBy { it.name.first() }\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nУже знакомый нам метод \u003Cb\u003E\u003Ccode\u003Efirst()\u003C\u002Fcode\u003E\u003C\u002Fb\u003E, примененный к строке, возвращает её первый символ.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Ca name=\"13\"\u003E\u003C\u002Fa\u003E\u003Ch3\u003EПреобразование двумерного списка в одномерный\u003C\u002Fh3\u003E\u003Cbr\u002F\u003E\nТеперь выполним обратную задачу: объединим несколько списков разного размера в один общий список. Предположим, у нас имеется список, каждый элемент которого является списком строк. Тогда мы можем получить один «плоский» список с помощью метода \u003Cb\u003E\u003Ccode\u003EflatMap()\u003C\u002Fcode\u003E\u003C\u002Fb\u003E. Код на \u003Cb\u003EJava\u003C\u002Fb\u003E:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode class=\"java\"\u003Evar letterLists = List.of(\n        List.of(\"a\", \"b\", \"c\"),\n        List.of(\"d\"),\n        List.of(\"e\", \"f\")\n);\nvar plainLetters = letterLists.stream()\n        .flatMap(Collection::stream)\n        .collect(Collectors.toList()); \u002F\u002F [a, b, c, d, e, f]\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nКаждый элемент, являющийся вложенным списком, мы преобразуем в стрим. Эти стримы объединяются в один общий, и затем результирующий стрим преобразуется в новый список.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nВ \u003Cb\u003EKotlin\u003C\u002Fb\u003E также есть метод \u003Cb\u003E\u003Ccode\u003EflatMap()\u003C\u002Fcode\u003E\u003C\u002Fb\u003E, но если нам не требуется выполнять дополнительных преобразований над элементами, то воспользуемся его более кратким эквивалентом \u003Cb\u003E\u003Ccode\u003Eflatten()\u003C\u002Fcode\u003E\u003C\u002Fb\u003E:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Eval letterLists = listOf(\n    listOf(\"a\", \"b\", \"c\"),\n    listOf(\"d\"),\n    listOf(\"e\", \"f\")\n)\nval plainLetters = letterLists.flatten() \u002F\u002F [a, b, c, d, e, f]\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\n\u003Ca name=\"14\"\u003E\u003C\u002Fa\u003E\u003Ch3\u003EПреобразование List в Set\u003C\u002Fh3\u003E\u003Cbr\u002F\u003E\nКоллекция типа «множество» (set) отличается от простого списка тем, что в нём содержатся только уникальные значения. Если мы сначала создадим список с дублями, а затем преобразуем его в \u003Cb\u003ESet\u003C\u002Fb\u003E, то в результате получим новую коллекцию с меньшим количеством элементов, и все они будут уникальными.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nДавайте создадим сначала список из дней недели, в котором будут дубли. Затем преобразуем его в множество с уникальными элементами (множество дней недели, которые считаются выходными). В \u003Cb\u003EJava\u003C\u002Fb\u003E это можно сделать так:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode class=\"java\"\u003E\u002F\u002F список с дублями \nvar days = List.of(\"суббота\", \"воскресенье\", \"суббота\"); \n\n\u002F\u002F быстрый поиск\nvar fastHolidays = new HashSet&lt;&gt;(days); \n\n\u002F\u002F сохранение порядка элементов\nvar orderedHolidays = new LinkedHashSet&lt;&gt;(days); \u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nВ Java (а значит, и в Kotlin) есть несколько реализаций интерфейса Set. В данном случае я привёл две из них: \u003Cb\u003EHashSet\u003C\u002Fb\u003E и \u003Cb\u003ELinkedHashSet\u003C\u002Fb\u003E. Первую реализацию следует использовать тогда, когда нам требуется искать в ней элементы и порядок нам не важен, а вторую — когда мы будем где-либо отображать это множество, так как в нём сохранится порядок следования элементов из исходной коллекции.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nНа \u003Cb\u003EKotlin\u003C\u002Fb\u003E создание этих множеств будет выглядеть следующим образом:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003E\u002F\u002F список с дублями \nval days = listOf(\"суббота\", \"воскресенье\", \"суббота\") \n\n\u002F\u002F быстрый поиск\nval fastHolidays = days.toHashSet() \n\n\u002F\u002F сохранение порядка элементов\nval orderedHolidays = days.toSet() \u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nМетод \u003Cb\u003E\u003Ccode\u003EtoHashSet()\u003C\u002Fcode\u003E\u003C\u002Fb\u003E ожидаемо возвращает именно \u003Cb\u003EHashSet\u003C\u002Fb\u003E, оптимизированный для быстрого поиска значений. А метод \u003Cb\u003E\u003Ccode\u003EtoSet()\u003C\u002Fcode\u003E\u003C\u002Fb\u003E по факту возвращает именно \u003Cb\u003ELinkedHashSet\u003C\u002Fb\u003E, если в исходной коллекции было больше одного элемента. То есть он возвращает множество, которое сохранит порядок следования элементов из исходной коллекции.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Ca name=\"15\"\u003E\u003C\u002Fa\u003E\u003Ch3\u003EПоиск элементов в коллекции\u003C\u002Fh3\u003E\u003Cbr\u002F\u003E\nПоиск элементов по значению можно выполнять в любом виде коллекций (list, set, map). Сказанное далее технически применимо к любой коллекции, но быстрее всего будет работать именно в \u003Cb\u003EHashSet\u003C\u002Fb\u003E. Поэтому возьмём коллекцию \u003Cb\u003EfastHolidays\u003C\u002Fb\u003E из предыдущего примера и проверим, является ли понедельник выходным днём.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nВ \u003Cb\u003EJava\u003C\u002Fb\u003E для таких проверок используется метод \u003Cb\u003E\u003Ccode\u003Econtains()\u003C\u002Fcode\u003E\u003C\u002Fb\u003E:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode class=\"java\"\u003Evar isHoliday = fastHolidays.contains(\"понедельник\"); \n\u002F\u002F false\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nВ результате мы ожидаемо получим false, ведь «понедельник — день тяжёлый», и выходным не является. \u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nВ \u003Cb\u003EKotlin\u003C\u002Fb\u003E эквивалентная проверка выглядит следующим образом:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Eval isHoliday = fastHolidays.contains(\"понедельник\")\n\u002F\u002F или более краткая форма\nval isHoliday = \"понедельник\" in fastHolidays\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nВторая форма использует выражение \u003Cb\u003Ein\u003C\u002Fb\u003E, но это не более чем синтаксический сахар, так как благодаря соглашениям об именовании методов Kotlin всегда будет вызывать метод \u003Cb\u003E\u003Ccode\u003Econtains()\u003C\u002Fcode\u003E\u003C\u002Fb\u003E, когда встречает выражение in. На мой взгляд, второй вариант гораздо более читаемый и понятный.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Ca name=\"16\"\u003E\u003C\u002Fa\u003E\u003Ch3\u003EГрупповая проверка условий\u003C\u002Fh3\u003E\u003Cbr\u002F\u003E\nИногда бывает необходимо проверить какое-то условие над всеми элементами коллекции сразу. Например, у нас есть множество целых чисел, и мы хотим узнать, есть ли среди них положительные числа? Все ли они положительны? И наконец, мы хотим убедиться, что среди них нет нуля. Пример на \u003Cb\u003EJava\u003C\u002Fb\u003E:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode class=\"java\"\u003Evar numbers = Set.of(-2, -1, 3, 4, 5);\nvar hasPositive = numbers.stream().anyMatch(n -&gt; n &gt; 0); \u002F\u002F true\nvar allPositive = numbers.stream().allMatch(n -&gt; n &gt; 0); \u002F\u002F false\nvar withoutZero = numbers.stream().noneMatch(n -&gt; n == 0); \u002F\u002F true\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nВ этом нам помогают методы стримов \u003Cb\u003E\u003Ccode\u003EanyMatch(), allMatch() и noneMatch()\u003C\u002Fcode\u003E\u003C\u002Fb\u003E, которые принимают условия проверки в виде лямбды. В результате этих проверок мы узнаём, что среди наших чисел есть положительные, однако не все, и среди них действительно нет нуля.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nТо же самое можно написать и на \u003Cb\u003EKotlin\u003C\u002Fb\u003E с использованием методов \u003Cb\u003E\u003Ccode\u003Eany(), all() и none()\u003C\u002Fcode\u003E \u003C\u002Fb\u003Eсоответственно:\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Eval numbers = setOf(-2, -1, 3, 4, 5)\nval hasPositive = numbers.any { it &gt; 0 } \u002F\u002F true\nval allPositive = numbers.all { it &gt; 0 } \u002F\u002F false\nval withoutZero = numbers.none { it == 0} \u002F\u002F true\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\nВажно также отметить, что и в случае метода \u003Cb\u003E\u003Ccode\u003EallMatch()\u003C\u002Fcode\u003E\u003C\u002Fb\u003E, и в случае \u003Cb\u003E\u003Ccode\u003Eметода all()\u003C\u002Fcode\u003E\u003C\u002Fb\u003E, вызов на пустой коллекции с любым предикатом всегда вернёт \u003Cb\u003Etrue\u003C\u002Fb\u003E.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\n\u003Ch3\u003EКонечный пункт, или чем хорош Kotlin при работе с коллекциями\u003C\u002Fh3\u003E\u003Cbr\u002F\u003E\nКак видите, с точки зрения синтаксиса, операции над коллекциями в Kotlin всегда гораздо более компактны и читаемы, нежели на Java. Важно заметить, что при этом нет накладных расходов в плане производительности, потому что в Kotlin используются те же классы коллекций из Java, но при этом они дополнены большим количеством вспомогательных методов расширения. В результате работать с коллекциями в Kotlin всегда легко и приятно.\u003Cbr\u002F\u003E\n\u003Cbr\u002F\u003E\nЕсли вы можете предложить более оптимальные решения для примеров, рассмотренных в статье, пишите об этом в комментариях. Обсудим вместе!\u003C\u002Fdiv\u003E","tags":[{"titleHtml":"kotlin"},{"titleHtml":"java"},{"titleHtml":"коллекции"},{"titleHtml":"collections"},{"titleHtml":"Stream API"},{"titleHtml":"raiffeisendgtl"}],"metadata":{"stylesUrls":[],"scriptUrls":[],"shareImageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fwebt\u002Fjz\u002Fxk\u002F8l\u002Fjzxk8lyp1jjss_6wpq647vcjkcy.png","shareImageWidth":1200,"shareImageHeight":630,"vkShareImageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fwebt\u002Fjz\u002Fxk\u002F8l\u002Fjzxk8lyp1jjss_6wpq647vcjkcy.png","schemaJsonLd":"{\"@context\":\"http:\\\u002F\\\u002Fschema.org\",\"@type\":\"Article\",\"mainEntityOfPage\":{\"@type\":\"WebPage\",\"@id\":\"https:\\\u002F\\\u002Fhabr.com\\\u002Fru\\\u002Fcompanies\\\u002Fraiffeisenbank\\\u002Farticles\\\u002F526374\\\u002F\"},\"headline\":\"Переезд из Java в Kotlin: как забрать коллекции с собой\",\"datePublished\":\"2020-11-11T16:52:05+03:00\",\"dateModified\":\"2020-11-11T23:44:22+03:00\",\"author\":{\"@type\":\"Person\",\"name\":\"Борис Николаев\"},\"publisher\":{\"@type\":\"Organization\",\"name\":\"Habr\",\"logo\":{\"@type\":\"ImageObject\",\"url\":\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fwebt\\\u002Fa_\\\u002Flk\\\u002F9m\\\u002Fa_lk9mjkccjox-zccjrpfolmkmq.png\"}},\"description\":\"Меня зовут Борис Николаев, и в первой статье на Хабре хочу сравнить Java и Kotlin при работе с коллекциями. Она будет полезна всем, кто планирует перебираться в...\",\"url\":\"https:\\\u002F\\\u002Fhabr.com\\\u002Fru\\\u002Fcompanies\\\u002Fraiffeisenbank\\\u002Farticles\\\u002F526374\\\u002F#post-content-body\",\"about\":[\"c_raiffeisenbank\",\"h_java\",\"h_kotlin\",\"h_programming\",\"f_develop\"],\"image\":[\"https:\\\u002F\\\u002Fhabr.com\\\u002Fshare\\\u002Fpublication\\\u002F526374\\\u002F5f817747fa8718226ef26dfaf7cddce1\\\u002F\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fwebt\\\u002Fjz\\\u002Fxk\\\u002F8l\\\u002Fjzxk8lyp1jjss_6wpq647vcjkcy.png\"]}","metaDescription":"Меня зовут Борис Николаев, и в первой статье на Хабре хочу сравнить Java и Kotlin при работе с коллекциями. Она будет полезна всем, кто планирует перебираться в Kotlin и не хочет долго осваиваться. В...","mainImageUrl":null,"amp":false,"customTrackerLinks":[]},"polls":[],"commentsEnabled":{"status":true,"reason":null},"rulesRemindEnabled":false,"votesEnabled":true,"status":"published","plannedPublishTime":null,"checked":null,"hasPinnedComments":false,"format":"tutorial","banner":null,"multiwidget":null,"multiwidgetUuid":null,"readingTime":12,"complexity":null,"isEditorial":false,"allowedFeatures":{"isTestTargetAllow":false}}},"articlesIds":{},"isLoading":false,"pagesCount":{},"route":{},"reasonsList":null,"postReasonsList":null,"view":"list","lastVisitedRoute":{},"ssrCommentsArticleIds":[""],"viewedPosts":[],"myFeedFilter":{"complexity":"all","score":"all","types":["articles","posts","news"]},"myFeedIsApplyFilters":false,"myFeedIsForce":false,"karma":{"userReasonsList":null}},"authorContribution":{"authors":{}},"betaTest":{"currentAnnouncement":null,"announcements":{},"announcementCards":null,"announcementComments":{},"announcementCommentThreads":{},"announcementCommentingStatuses":{},"archivedList":[]},"authorStatistics":{"articleRefs":{},"articleIds":{},"pagesCount":{},"route":{},"viewsCount":[],"maxStatsCount":{}},"career":{"seoLandings":[],"hubs":""},"comments":{"articleComments":{},"articlePinnedComments":{},"searchCommentsResults":null,"pagesCount":null,"commentAccess":{},"scrollParents":{},"pageArticleComments":{"lastViewedComment":0,"postId":null,"lastCommentTimestamp":"","moderated":[],"moderatedIds":[],"commentRoute":"","idempotenceKey":""}},"companies":{"companyRefs":{"raiffeisenbank":{"alias":"raiffeisenbank","imageUrl":"\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fcompany\u002F3fb\u002Fcc5\u002F68a\u002F3fbcc568ac145a39ae52ab2c45c16eaa.png","titleHtml":"Райффайзен Банк","descriptionHtml":"Развеиваем мифы об IT в банках","relatedData":null,"statistics":{"subscribersCount":51576,"rating":145.17,"invest":null,"postsCount":203,"threadsCount":0,"newsCount":18,"vacanciesCount":0,"employeesCount":40,"careerRating":null},"foundationDate":{"year":"1996","month":null,"day":null},"location":{"city":{"id":"447159","title":"Москва"},"region":{"id":"1885","title":"Москва и Московская обл."},"country":{"id":"168","title":"Россия"}},"siteUrl":"http:\u002F\u002Fwww.raiffeisen.ru\u002F","staffNumber":"5 001–10 000 человек","registrationDate":"2017-04-28T11:45:06+00:00","representativeUser":null,"contacts":[{"title":"Сайт","url":"http:\u002F\u002Fwww.raiffeisen.ru\u002F","siteTitle":"Райффайзен Банк – банковские услуги для жизни и бизнеса","favicon":"https:\u002F\u002Fwww.raiffeisen.ru\u002Ffav\u002Ficon32.ico"}],"settings":{"analyticsSettings":[{"type":"ym","trackingId":"62812537"}],"branding":null,"status":"active","isStartup":false,"hasActivePolls":false,"shouldShowHabrAds":false},"metadata":{"titleHtml":"Райффайзен Банк, Москва - Развеиваем мифы об IT в банках с 1996 год","title":"Райффайзен Банк, Москва - Развеиваем мифы об IT в банках с 1996 год","keywords":["raiffeisendgtl","meetup","raiffeisenbank","python","javascript","райффайзенбанк","highload","дизайн","demo day","java","pytest"],"descriptionHtml":"203 статьи от авторов компании Райффайзен Банк","description":"203 статьи от авторов компании Райффайзен Банк"},"aDeskSettings":null,"careerAlias":"raiffeisen","schoolAlias":null}},"companyIds":{},"companyTopIds":{},"pagesCount":{},"companyProfiles":{},"companiesCategories":[],"companiesCategoriesTotalCount":0,"companiesWidgets":{},"companiesWorkers":{},"companiesFans":{},"multiwidgets":{},"route":{},"isLoading":false,"companyWorkersLoading":false,"companyFansLoading":false,"multiwidgetLoading":false,"vacancies":{},"companiesGalleries":{},"companiesBanners":{},"companiesLandingVacancies":{},"companiesTechnologies":{},"workplaceInfo":null},"companyAdmin":{"companyInfo":null,"companyInfoLoading":false,"faqArticles":null,"brandingPreviewImageUrl":null,"jivoStatus":0,"adminNotifications":null,"availableInvitesCount":{}},"companyAdd":{"currentStep":"","stepsData":{},"uncompletedSteps":[],"isStepLoading":true,"isStepCommitting":false,"isInitialized":false,"agreementContent":""},"companiesContribution":{"hubs":{},"flows":{},"companyRefs":{}},"companyHubsContribution":{"contributionRefs":{"hubRefs":{},"hubIds":{}}},"conversation":{"messages":[],"respondent":null,"isLoadMore":false},"conversations":{"conversations":[],"pagesCount":0},"docs":{"menu":{},"articles":{},"mainMenu":[],"loading":{"main":false,"dropdown":false,"article":false}},"feature":{"isProbablyVisible":true},"fixedBanner":{"isArticleStickyPanelVisible":false,"isArticleStickyPanelAtTheBottom":false,"isFixedBannerVisible":false,"isStickyPanelIconsHidden":false},"flows":{"flows":[{"id":"1","alias":"develop","title":"Разработка","titleHtml":"Разработка","route":{"name":"FLOW_PAGE","params":{"flowName":"develop"}}},{"id":"6","alias":"admin","title":"Администрирование","titleHtml":"Администрирование","route":{"name":"FLOW_PAGE","params":{"flowName":"admin"}}},{"id":"2","alias":"design","title":"Дизайн","titleHtml":"Дизайн","route":{"name":"FLOW_PAGE","params":{"flowName":"design"}}},{"id":"3","alias":"management","title":"Менеджмент","titleHtml":"Менеджмент","route":{"name":"FLOW_PAGE","params":{"flowName":"management"}}},{"id":"4","alias":"marketing","title":"Маркетинг","titleHtml":"Маркетинг","route":{"name":"FLOW_PAGE","params":{"flowName":"marketing"}}},{"id":"7","alias":"popsci","title":"Научпоп","titleHtml":"Научпоп","route":{"name":"FLOW_PAGE","params":{"flowName":"popsci"}}}],"updates":{}},"global":{"isPwa":false,"device":"mobile","isHabrCom":true,"requestId":"e5c1cf22eedd173cdc323c68a19f447e"},"hubs":{"hubRefs":{},"hubIds":{},"pagesCount":{},"isLoading":false,"route":{}},"hubsBlock":{"hubRefs":{},"hubIds":{}},"i18n":{"fl":"ru","hl":"ru"},"info":{"welcomePage":{},"isLoading":true},"location":{"urlStruct":{"protocol":null,"slashes":null,"auth":null,"host":null,"port":null,"hostname":null,"hash":null,"query":{},"pathname":"\u002Fru\u002Fcompanies\u002Fraiffeisenbank\u002Farticles\u002F526374\u002F","path":"\u002Fru\u002Fcompanies\u002Fraiffeisenbank\u002Farticles\u002F526374\u002F","href":"\u002Fru\u002Fcompanies\u002Fraiffeisenbank\u002Farticles\u002F526374\u002F"}},"me":{"user":null,"uuid":null,"ppgDemanded":false,"karmaResetInfo":{"canReincarnate":null,"wasReincarnated":null,"currentScore":null},"notes":null,"userUpdates":{"feeds":{"newPostsCount":null,"newThreadsCount":null,"newNewsCount":null,"newCount":null},"conversationUnreadCount":0}},"mostReadingList":{"mostReadingListIds":[],"mostReadingListRefs":null,"promoPost":null},"onboarding":{"currentStep":null,"stepsData":{},"stepsErrors":{},"completedSteps":[],"isStepCommitting":false,"isCommitDisabled":true},"ppa":{"articles":{},"card":null,"transactions":null,"totalTransactions":null,"isAccessible":null},"projectsBlocks":{"activeBlocks":{"vacancies":"project-block-company-article"}},"promoData":{"isLoading":false,"hasLoaded":false,"featurer":null,"megaposts":null,"promoLinks":null,"promoPosts":null,"sticker":null},"publicationStatistics":{"statsInfo":{},"statsFunnels":{},"statsGraph":{},"defaultSuggest":{},"suggest":{},"timeTracker":{},"isTrackingActivity":false,"isUserActive":true,"otherPublicationStats":{}},"pullRefresh":{"shouldRefresh":false},"sandbox":{"articleIds":[],"articleRefs":{},"pagesCount":null,"route":{},"lastVisitedRoute":{},"isLoading":false},"search":{"searchQueryError":null},"settingsOther":{"inputs":{"uiLang":{"errors":[],"ref":null,"value":""},"articlesLangEnglish":{"errors":[],"ref":null,"value":false},"articlesLangRussian":{"errors":[],"ref":null,"value":false},"agreement":{"errors":[],"ref":null,"value":false},"email":{"errors":[],"ref":null,"value":true},"digest":{"errors":[],"ref":null,"value":true}}},"similarList":{"similarListIds":[],"similarListRefs":null},"ssr":{"error":null,"isDataLoaded":true,"isDataLoading":false,"isHydrationFailed":false,"isServer":false},"stories":{"stories":[{"id":"story-998","author":{"logo":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F91a\u002F166\u002F49f\u002F91a16649f9ef89302a5a56cfa22a451d.png","title":"Яндекс Практикум","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up"},"title":"Как расти на работе?","lang":"ru","startTime":"2025-03-18T18:45:00+03:00","finishTime":"2025-03-31T19:00:00+03:00","slides":[{"id":"story-998_1","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fbf4\u002F911\u002F7e6\u002Fbf49117e637ff2099b3944f8803cd7a3.png","button":null},{"id":"story-998_2","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F3e3\u002Fc84\u002Fe83\u002F3e3c84e8330ea1ddf72e9d310457ed2f.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_3","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F84b\u002F533\u002F3c3\u002F84b5333c3e77e8dac62a8b50d042acb9.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_4","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F257\u002Feb0\u002F2be\u002F257eb02bea1777e13f3e647cae6e06cd.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_5","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F858\u002F086\u002F0ed\u002F8580860ed3497c043c04f9a42054d74f.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_6","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fcdf\u002F32f\u002F387\u002Fcdf32f38777f046c063b5182f4125e14.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_7","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fd48\u002Ff2d\u002F0e2\u002Fd48f2d0e2ecd7d746d738191bb913d8f.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_8","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fb38\u002Ffd7\u002Fee0\u002Fb38fd7ee04848bf3b058be7403438bd1.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_9","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F79e\u002Feaa\u002F9d8\u002F79eeaa9d8af5a288ad42bd9d63b5793a.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_10","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fcdc\u002F17e\u002F385\u002Fcdc17e38582dc67838b9abfb200d982e.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}}]},{"id":"story-996","author":{"logo":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fe63\u002F36d\u002Fa24\u002Fe6336da24460ab6b9fbc347d03eb263a.png","title":"Хабр","link":null},"title":"Здоровье айтишника","lang":"ru","startTime":"2025-03-17T10:22:00+03:00","finishTime":"2025-04-13T10:22:00+03:00","slides":[{"id":"story-996_1","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fb7c\u002F6de\u002F8ea\u002Fb7c6de8ea6789dbc30f071716172b6dd.jpg","button":null},{"id":"story-996_2","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F2e7\u002F88a\u002F0fe\u002F2e788a0fe61729ca8b23eb59069c844f.jpg","button":{"title":"Личный опыт","link":"https:\u002F\u002Fu.habr.com\u002Fzd-1","colorType":"light"}},{"id":"story-996_3","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fb93\u002F6f4\u002F256\u002Fb936f425653b84fa60ab00d09f78c543.jpg","button":{"title":"Как это было","link":"https:\u002F\u002Fu.habr.com\u002Fzd-2","colorType":"light"}},{"id":"story-996_4","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fc10\u002Fd14\u002Ff5a\u002Fc10d14f5a4859fe10baecbcc2bcb8828.jpg","button":{"title":"Шея в фокусе","link":"https:\u002F\u002Fu.habr.com\u002Fzd-3","colorType":"dark"}},{"id":"story-996_5","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F535\u002Fe1b\u002F77a\u002F535e1b77a9eb896262ad73321f2ad99f.jpg","button":{"title":"Фотоинструкция","link":"https:\u002F\u002Fu.habr.com\u002Fzd-4","colorType":"light"}},{"id":"story-996_6","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F569\u002Fc39\u002F49f\u002F569c3949f5b330ea85d4a1864f481c3d.jpg","button":{"title":"Сидите (не)правильно","link":"https:\u002F\u002Fu.habr.com\u002Fzd-5","colorType":"dark"}},{"id":"story-996_7","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F1f2\u002F1de\u002Fdbf\u002F1f21dedbf2902bc4061a75b839b63595.jpg","button":{"title":"Журнал изменений","link":"https:\u002F\u002Fu.habr.com\u002Fzd-6","colorType":"dark"}},{"id":"story-996_8","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F95a\u002F164\u002F21b\u002F95a16421badc3a9f1135309ab0c42c41.jpg","button":{"title":"Альтернатива","link":"https:\u002F\u002Fu.habr.com\u002Fzd-7","colorType":"light"}},{"id":"story-996_9","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F624\u002F027\u002F54d\u002F62402754d311798af44bcfe7f9abfedc.jpg","button":{"title":"Хроника поисков","link":"https:\u002F\u002Fu.habr.com\u002Fzd-8","colorType":"dark"}}]},{"id":"story-992","author":{"logo":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F3fe\u002F2fc\u002Fb05\u002F3fe2fcb05df852d7e1e00d44e54e39ae.png","title":"Сезоны Хабра","link":"https:\u002F\u002Fu.habr.com\u002Ffnstories"},"title":"Угадайте будущее в новом сезоне","lang":"ru","startTime":"2025-03-12T19:15:00+03:00","finishTime":"2025-03-31T23:56:00+03:00","slides":[{"id":"story-992_1","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fc56\u002Faf5\u002Fc43\u002Fc56af5c4377f7f7b94f7b6ad20fc92c3.png","button":{"title":"А что за сезон?","link":"https:\u002F\u002Fu.habr.com\u002Ffnstories","colorType":"light"}},{"id":"story-992_2","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F8fa\u002Fde7\u002F65d\u002F8fade765d99207f31c597283ae6ce912.png","button":{"title":"Какие темы нужны","link":"https:\u002F\u002Fu.habr.com\u002Ffnstories","colorType":"dark"}},{"id":"story-992_3","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F23e\u002F7b9\u002Fb24\u002F23e7b9b24cb056d1a42e8d31ccea16ce.png","button":{"title":"Сезон будущего ИИ","link":"https:\u002F\u002Fu.habr.com\u002Ffnstories","colorType":"dark"}},{"id":"story-992_4","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F27b\u002Fbfc\u002Fa18\u002F27bbfca18e656ee0122b5cb8eb2cb502.png","button":{"title":"Все правила сезона","link":"https:\u002F\u002Fu.habr.com\u002Ffnstories","colorType":"dark"}},{"id":"story-992_5","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F1e0\u002F6c6\u002Ff33\u002F1e06c6f33e703bbd2b2ae3baee3376fd.png","button":{"title":"Как участвовать","link":"https:\u002F\u002Fu.habr.com\u002Ffnstories","colorType":"dark"}}]},{"id":"story-990","author":{"logo":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F282\u002Fe80\u002Fbf1\u002F282e80bf1b73484126ed53c6f3e42692.png","title":"Aeza","link":"https:\u002F\u002Fu.habr.com\u002FI72qi"},"title":"С праздником весны!","lang":"ru","startTime":"2025-03-09T10:15:00+03:00","finishTime":"2025-03-30T23:59:00+03:00","slides":[{"id":"story-990_1","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F064\u002F9dd\u002Ff59\u002F0649ddf5949cae6c9342fb62034a36ac.png","button":null},{"id":"story-990_2","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F05f\u002F96b\u002F25e\u002F05f96b25e910c32256ee0b1916f21380.png","button":{"title":"Семейная история","link":"https:\u002F\u002Fu.habr.com\u002Fey2bY","colorType":"light"}},{"id":"story-990_3","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fcd1\u002Ff5d\u002F921\u002Fcd1f5d921bb9489ac11727272660bdb6.png","button":{"title":"Движущиеся картинки","link":"https:\u002F\u002Fu.habr.com\u002FWLKXU","colorType":"light"}},{"id":"story-990_4","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fb55\u002Fd45\u002Fec5\u002Fb55d45ec50e53275c60d16ea886a0672.png","button":{"title":"Личный опыт","link":"https:\u002F\u002Fu.habr.com\u002FSxrki","colorType":"light"}},{"id":"story-990_5","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Ffa7\u002F1ce\u002Ffca\u002Ffa71cefca5ed0a3fe8b50bd703b3605f.png","button":{"title":"Алгоритм","link":"https:\u002F\u002Fu.habr.com\u002Ftbz2p","colorType":"light"}},{"id":"story-990_6","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F435\u002F89d\u002Ff90\u002F43589df9018846cc6a8eed986226b252.png","button":{"title":"Выбрать сценарий","link":"https:\u002F\u002Fu.habr.com\u002F0RCPk","colorType":"light"}},{"id":"story-990_7","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F514\u002F5f8\u002F619\u002F5145f86194ad48dad48a846b42af0f93.png","button":{"title":"Jiraзамещение","link":"https:\u002F\u002Fu.habr.com\u002FEwhYq","colorType":"light"}},{"id":"story-990_8","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F439\u002Fa83\u002Fae7\u002F439a83ae78f7ef711e3b9bbed1ec26c5.png","button":{"title":"8 вещей","link":"https:\u002F\u002Fu.habr.com\u002FVTv2r","colorType":"light"}},{"id":"story-990_9","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F02d\u002F783\u002F2f7\u002F02d7832f7b1c95d88bff9f34209e204a.png","button":{"title":"Интерфейсы","link":"https:\u002F\u002Fu.habr.com\u002FUFOMZ","colorType":"light"}},{"id":"story-990_10","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F0cb\u002Ff7f\u002F0d9\u002F0cbf7f0d905d486ce4ff82bc939b21d5.png","button":{"title":"Стикеры ваши","link":"https:\u002F\u002Fu.habr.com\u002FoA1K7","colorType":"light"}}]},{"id":"story-984","author":{"logo":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F648\u002F61b\u002F9ae\u002F64861b9aecb7c474cd94063f98045541.png","title":"Хабр","link":null},"title":"Всегда котов!","lang":"ru","startTime":"2025-03-01T00:01:09+03:00","finishTime":"2025-03-23T16:21:00+03:00","slides":[{"id":"story-984_1","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fc06\u002Fc21\u002F93f\u002Fc06c2193ff34362ac2af782cf2571f55.png","button":null},{"id":"story-984_2","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fb68\u002F15f\u002F763\u002Fb6815f7630b9c015b1e67efb5bdf12d4.jpg","button":{"title":"Сделать purrrr","link":"https:\u002F\u002Fu.habr.com\u002Fj4DN1","colorType":"light"}},{"id":"story-984_3","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F550\u002F76e\u002Fd7a\u002F55076ed7a0954e243f944fc2f330623a.png","button":{"title":"Тыгыдык","link":"https:\u002F\u002Fu.habr.com\u002Fya360_kotov","colorType":"dark"}},{"id":"story-984_4","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F2fb\u002F23b\u002F06c\u002F2fb23b06cf294c2050104b2aef589788.jpg","button":{"title":"Исследование","link":"https:\u002F\u002Fu.habr.com\u002FbO3r0","colorType":"light"}},{"id":"story-984_5","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Ff50\u002F50f\u002F0ae\u002Ff5050f0aeea1335c4f0544c1863f8342.jpg","button":{"title":"Детали проекта","link":"https:\u002F\u002Fu.habr.com\u002FQJmhe","colorType":"light"}},{"id":"story-984_6","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F825\u002F3dd\u002F5f5\u002F8253dd5f5c19dd061578f1d09310a45f.jpg","button":{"title":"Эксперименты","link":"https:\u002F\u002Fu.habr.com\u002FVaOdo","colorType":"light"}},{"id":"story-984_7","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F3fb\u002Fc92\u002F0f9\u002F3fbc920f9ea81eca2c1c027ff77fc659.jpg","button":{"title":"Это не мем","link":"https:\u002F\u002Fu.habr.com\u002F0Wb3p","colorType":"light"}},{"id":"story-984_8","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F2b4\u002F794\u002Fc33\u002F2b4794c33844e60aad9468018fd132cd.jpg","button":{"title":"В засаде","link":"https:\u002F\u002Fu.habr.com\u002FnasCD","colorType":"dark"}}]}]},"technotext":{"years":[],"technotextDocForNominees":null,"technotextDocForWinners":null,"technotextInfo":{},"technotextInfoLoading":false,"technotextWinners":{},"technotextWinnersLoading":false},"userHubsContribution":{"contributionRefs":{"hubRefs":{},"hubIds":{}}},"userInvites":{"availableInvites":0,"usedInvitesIds":[],"usedInvitesRefs":{},"usedInvitesPagesCount":0,"unusedInvitesIds":[],"unusedInvitesRefs":{},"unusedInvitesPagesCount":0},"userVotes":{"karmaVotesList":[],"karmaVotesPagesCount":null,"karmaVotesListLoading":false,"commentsVotesList":[],"commentsVotesPagesCount":null,"commentsVotesListLoading":false,"postsVotesList":[],"postsVotesPagesCount":null,"postsVotesListLoading":false,"userVotesList":[],"userVotesPagesCount":null,"userVotesListLoading":false},"users":{"authorRefs":{},"authorIds":{},"pagesCount":{},"authorProfiles":{"devmark":{"alias":"devmark","badgets":[{"title":"Захабренный","description":"Пользователь с кармой \u003E0","url":null,"isRemovable":false},{"title":"Хорошая реакция","description":"Успел активировать дополнительный набор реакций до того, как реакции убрали с Хабра","url":null,"isRemovable":false}],"aboutHtml":"","contacts":[],"invitedBy":{"issuerLogin":"Raiffeisenbank","timeCreated":"2020-11-03T12:48:20+00:00"},"careerProfile":null,"companies":{"pagesCount":1,"companyIds":["dockhost","raiffeisenbank"],"companyRefs":{"dockhost":{"id":"8692","alias":"dockhost","titleHtml":"Dockhost","descriptionHtml":"Платформа для хостинга приложений","imageUrl":"\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fcompany\u002F844\u002F00e\u002Fec8\u002F84400eec8154cb3a8750160e61398041.jpg","relatedData":null,"statistics":{"subscribersCount":20,"rating":98.63,"invest":null},"commonHubs":[]},"raiffeisenbank":{"id":"4790","alias":"raiffeisenbank","titleHtml":"Райффайзен Банк","descriptionHtml":"Развеиваем мифы об IT в банках","imageUrl":"\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fcompany\u002F3fb\u002Fcc5\u002F68a\u002F3fbcc568ac145a39ae52ab2c45c16eaa.png","relatedData":null,"statistics":{"subscribersCount":51576,"rating":145.17,"invest":null},"commonHubs":[]}}}}},"userHubs":{},"userInvitations":{},"authorFollowers":{},"authorFollowed":{},"userSpecialization":{},"karmaStats":[],"statistics":null,"isLoading":false,"authorFollowersLoading":false,"authorFollowedLoading":false,"userHubsLoading":false,"userInvitationsLoading":false,"route":{}},"viewport":{"prevScrollY":{},"scrollY":0,"width":0},"tracker":{"notificationsLoading":false,"notificationsList":[],"notificationsPageCount":0,"pendingMarkNotificationsRead":[],"publicationsLoading":true,"publicationsList":[],"publicationsPageCount":0,"pendingDeletePublications":false,"pendingMarkPublicationsRead":false},"events":{"eventRefs":{},"eventIds":[],"pagesCount":0,"categories":[],"cities":[],"actualEvents":null,"currentEvent":null,"eventsFilter":{"city":"all","timeStarted":null,"timeEnded":null}},"wysiwyg":{"WYSIWYGRulesRefs":null}};(function(){var s;(s=document.currentScript||document.scripts[document.scripts.length-1]).parentNode.removeChild(s);}());</script><script src="https://assets.habr.com/habr-web/js/chunk-vendors.3b11d41f.js" defer></script><script src="https://assets.habr.com/habr-web/js/app.7a97ea6d.js" defer></script></div>
    <div id="overlays"><!----><!--teleport anchor--><!----><!--teleport anchor--><!----><!--teleport anchor--><!----><!--teleport anchor--><!----><!--teleport anchor--><!----><!--teleport anchor--></div>
    
    
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-S28W1WC23F"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());
    </script>
  
  <script type="text/javascript" >
    (function(m,e,t,r,i,k,a){m[i]=m[i]||function(){(m[i].a=m[i].a||[]).push(arguments)};
    m[i].l=1*new Date();k=e.createElement(t),a=e.getElementsByTagName(t)[0],k.async=1,k.src=r,a.parentNode.insertBefore(k,a)})
    (window, document, "script", "https://mc.yandex.ru/metrika/tag.js", "ym");

  </script>
    <script type="text/javascript">
      window.addEventListener('load', function () {
        setTimeout(() => {
          const img = new Image();
          img.src = 'https://vk.com/rtrg?p=VK-RTRG-421343-57vKE';
        }, 0);
      });
    </script>
  
    </body>

    </html>
