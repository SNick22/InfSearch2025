<!DOCTYPE html>
<html lang="ru">

  <head>
    <title>Вопросы и ответы для собеседования по Kotlin. Часть 3 &#x2F; Хабр</title>
<meta property="fb:app_id" content="444736788986613">
<meta property="fb:pages" content="472597926099084">
<meta name="twitter:card" content="summary_large_image">
<meta name="twitter:site" content="@habr_com">
<meta property="og:site_name" content="Хабр">
<link href="https://habr.com/ru/rss/post/728742/?fl=ru" type="application/rss+xml" title rel="alternate" name="rss">
<link href="https://habr.com/ru/articles/728742/" rel="canonical" data-hid="e3fa780">
<link rel="image_src" href="https://habrastorage.org/getpro/habr/upload_files/80c/337/c14/80c337c1467b29382240a6db7b752cf1.png" data-hid="2a79c45">
<link rel="amphtml" href="https://habr.com/ru/amp/publications/728742/">
<meta property="og:title" content="Вопросы и ответы для собеседования по Kotlin. Часть 3">
<meta name="twitter:title" content="Вопросы и ответы для собеседования по Kotlin. Часть 3">
<meta name="aiturec:title" content="Вопросы и ответы для собеседования по Kotlin. Часть 3">
<meta name="description" content="Вопросы и ответы для собеседования по Kotlin. Часть 1 Вопросы и ответы для собеседования по Kotlin. Часть 2 &nbsp; Вопросы и ответы для собеседования по Kotlin. Часть 3 — вы находитесь здесь Вопросы и...">
<meta itemprop="description" content="Вопросы и ответы для собеседования по Kotlin. Часть 1 Вопросы и ответы для собеседования по Kotlin. Часть 2 &nbsp; Вопросы и ответы для собеседования по Kotlin. Часть 3 — вы находитесь здесь Вопросы и...">
<meta property="og:description" content="Вопросы и ответы для собеседования по Kotlin. Часть 1 Вопросы и ответы для собеседования по Kotlin. Часть 2 &nbsp; Вопросы и ответы для собеседования по Kotlin. Часть 3 — вы находитесь здесь Вопросы и...">
<meta name="twitter:description" content="Вопросы и ответы для собеседования по Kotlin. Часть 1 Вопросы и ответы для собеседования по Kotlin. Часть 2 &nbsp; Вопросы и ответы для собеседования по Kotlin. Часть 3 — вы находитесь здесь Вопросы и...">
<meta property="aiturec:description" content="Вопросы и ответы для собеседования по Kotlin. Часть 1 Вопросы и ответы для собеседования по Kotlin. Часть 2 &nbsp; Вопросы и ответы для собеседования по Kotlin. Часть 3 — вы находитесь здесь Вопросы и...">
<meta itemprop="image" content="https://habrastorage.org/getpro/habr/upload_files/80c/337/c14/80c337c1467b29382240a6db7b752cf1.png">
<meta property="og:image" content="https://habrastorage.org/getpro/habr/upload_files/80c/337/c14/80c337c1467b29382240a6db7b752cf1.png">
<meta property="og:image:width" content="1200">
<meta property="og:image:height" content="630">
<meta property="aiturec:image" content="https://habrastorage.org/getpro/habr/upload_files/80c/337/c14/80c337c1467b29382240a6db7b752cf1.png">
<meta name="twitter:image" content="https://habrastorage.org/getpro/habr/upload_files/80c/337/c14/80c337c1467b29382240a6db7b752cf1.png">
<meta property="vk:image" content="https://habrastorage.org/getpro/habr/upload_files/80c/337/c14/80c337c1467b29382240a6db7b752cf1.png?format=vk">
<meta property="vk:image" content="https://habrastorage.org/getpro/habr/upload_files/80c/337/c14/80c337c1467b29382240a6db7b752cf1.png?format=vk">
<meta property="aiturec:item_id" content="728742">
<meta property="aiturec:datetime" content="2023-04-28T08:55:37.000Z">
<meta content="https://habr.com/ru/articles/728742/" property="og:url">
<meta property="og:type" content="article">
<meta property="og:locale" content="ru_RU">
<meta property="og:image:width" content="1200">
<meta property="og:image:height" content="630">
<meta name="keywords" content="kotlin, собеседование вопросы, подготовка к собеседованию, котлин, андроид, faq, учебные материалы, android development, вопросы для собеседования, android">
<script type="application/ld+json" data-hid="1e0f0a2">{"@context":"http:\/\/schema.org","@type":"Article","mainEntityOfPage":{"@type":"WebPage","@id":"https:\/\/habr.com\/ru\/articles\/728742\/"},"headline":"Вопросы и ответы для собеседования по Kotlin. Часть 3","datePublished":"2023-04-28T11:55:37+03:00","dateModified":"2024-01-25T12:38:51+03:00","author":{"@type":"Person","name":"Дмитрий"},"publisher":{"@type":"Organization","name":"Habr","logo":{"@type":"ImageObject","url":"https:\/\/habrastorage.org\/webt\/a_\/lk\/9m\/a_lk9mjkccjox-zccjrpfolmkmq.png"}},"description":"Вопросы и ответы для собеседования по Kotlin. Часть 1Вопросы и ответы для собеседования по Kotlin. Часть 2&nbsp;Вопросы и ответы для собеседования по Kotlin. Часть 3...","url":"https:\/\/habr.com\/ru\/articles\/728742\/#post-content-body","about":["h_programming","h_java","h_android_dev","h_kotlin","h_study","f_develop","f_management"],"image":["https:\/\/habr.com\/share\/publication\/728742\/b56f2f5aaf4498bb7ac01bd6ac9be1c2\/","https:\/\/habrastorage.org\/getpro\/habr\/upload_files\/ba3\/94c\/742\/ba394c742e1cee6fbaf17ffa02af0e09.png","https:\/\/habrastorage.org\/getpro\/habr\/upload_files\/471\/232\/032\/4712320326f3181bc5e9ef0ea07a943f.png","https:\/\/habrastorage.org\/getpro\/habr\/upload_files\/23d\/a0e\/fba\/23da0efba9d5fb49921b3e3c760f4d1d.png"]}</script>
    <meta charset="UTF-8">
    <meta name="viewport"
      content="width=device-width,initial-scale=1.0,viewport-fit=cover,maximum-scale=1,user-scalable=0">
    <meta name="referrer" content="unsafe-url">
    <style>
      /* cyrillic-ext */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 400;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9E4kDNxMZdWfMOD5VvmojLazX3dGTP.woff2) format('woff2');
        unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;
      }

      /* cyrillic */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 400;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9E4kDNxMZdWfMOD5Vvk4jLazX3dGTP.woff2) format('woff2');
        unicode-range: U+0301, U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;
      }

      /* latin-ext */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 400;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9E4kDNxMZdWfMOD5VvmYjLazX3dGTP.woff2) format('woff2');
        unicode-range: U+0100-02AF, U+0304, U+0308, U+0329, U+1E00-1E9F, U+1EF2-1EFF, U+2020, U+20A0-20AB, U+20AD-20C0, U+2113, U+2C60-2C7F, U+A720-A7FF;
      }

      /* latin */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 400;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9E4kDNxMZdWfMOD5Vvl4jLazX3dA.woff2) format('woff2');
        unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+0304, U+0308, U+0329, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
      }

      /* cyrillic-ext */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 500;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnZKveSxf6Xl7Gl3LX.woff2) format('woff2');
        unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;
      }

      /* cyrillic */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 500;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnZKveQhf6Xl7Gl3LX.woff2) format('woff2');
        unicode-range: U+0301, U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;
      }

      /* latin-ext */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 500;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnZKveSBf6Xl7Gl3LX.woff2) format('woff2');
        unicode-range: U+0100-02AF, U+0304, U+0308, U+0329, U+1E00-1E9F, U+1EF2-1EFF, U+2020, U+20A0-20AB, U+20AD-20C0, U+2113, U+2C60-2C7F, U+A720-A7FF;
      }

      /* latin */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 500;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnZKveRhf6Xl7Glw.woff2) format('woff2');
        unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+0304, U+0308, U+0329, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
      }

      /* cyrillic-ext */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 700;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnLK3eSxf6Xl7Gl3LX.woff2) format('woff2');
        unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;
      }

      /* cyrillic */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 700;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnLK3eQhf6Xl7Gl3LX.woff2) format('woff2');
        unicode-range: U+0301, U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;
      }

      /* latin-ext */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 700;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnLK3eSBf6Xl7Gl3LX.woff2) format('woff2');
        unicode-range: U+0100-02AF, U+0304, U+0308, U+0329, U+1E00-1E9F, U+1EF2-1EFF, U+2020, U+20A0-20AB, U+20AD-20C0, U+2113, U+2C60-2C7F, U+A720-A7FF;
      }

      /* latin */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 700;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnLK3eRhf6Xl7Glw.woff2) format('woff2');
        unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+0304, U+0308, U+0329, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
      }
    </style>
    <link rel="preload" href="https://assets.habr.com/habr-web/css/theme/light-v1.css" as="style" media="(prefers-color-scheme: light)" /><link rel="preload" href="https://assets.habr.com/habr-web/css/theme/dark-v1.css" as="style" media="(prefers-color-scheme: dark)" /><link id="light-colors" rel="stylesheet" href="https://assets.habr.com/habr-web/css/theme/light-v1.css" media="(prefers-color-scheme: light)" /><link id="dark-colors" rel="stylesheet" href="https://assets.habr.com/habr-web/css/theme/dark-v1.css" media="(prefers-color-scheme: dark)" />
    <script>window.i18nFetch = new Promise((res, rej) => {
          const xhr = new XMLHttpRequest();
          xhr.open('GET', '/js/i18n/ru-compiled.35b2fec11bb79a62419ab67779c2dd82.json');
          xhr.responseType = 'json';
          xhr.onload = function(e) {
            if (this.status === 200) {
              res({ru: xhr.response});
            } else {
              rej(e);
            }
          };
          xhr.send();
        });</script>
    <style>
      .grecaptcha-badge {
        visibility: hidden;
      }
    </style>
    <meta name="habr-version" content="2.233.0">
    
    <meta name="apple-mobile-web-app-status-bar-style" content="#303b44">
    <meta name="msapplication-TileColor" content="#629FBC">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="mobile-web-app-capable" content="yes">
    <link rel="shortcut icon" type="image/png" sizes="16x16" href="https://assets.habr.com/habr-web/img/favicons/favicon-16.png">
    <link rel="shortcut icon" type="image/png" sizes="32x32" href="https://assets.habr.com/habr-web/img/favicons/favicon-32.png">
    <link rel="apple-touch-icon" type="image/png" sizes="76x76" href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-76.png">
    <link rel="apple-touch-icon" type="image/png" sizes="120x120" href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-120.png">
    <link rel="apple-touch-icon" type="image/png" sizes="152x152" href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-152.png">
    <link rel="apple-touch-icon" type="image/png" sizes="180x180" href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-180.png">
    <link rel="apple-touch-icon" type="image/png" sizes="256x256" href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-256.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 320px) and (device-height: 568px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1136x640.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 375px) and (device-height: 812px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2436x1125.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1792x828.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_828x1792.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 375px) and (device-height: 667px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1334x750.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1242x2668.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 414px) and (device-height: 736px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2208x1242.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 375px) and (device-height: 812px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1125x2436.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 414px) and (device-height: 736px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1242x2208.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 1024px) and (device-height: 1366px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2732x2048.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2688x1242.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 834px) and (device-height: 1112px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2224x1668.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 375px) and (device-height: 667px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_750x1334.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 1024px) and (device-height: 1366px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2048x2732.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 834px) and (device-height: 1194px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2388x1668.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 834px) and (device-height: 1112px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1668x2224.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 320px) and (device-height: 568px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_640x1136.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 834px) and (device-height: 1194px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1668x2388.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 768px) and (device-height: 1024px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2048x1536.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 768px) and (device-height: 1024px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1536x2048.png">
    <link rel="mask-icon" color="#77a2b6" href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-120.svg">
    <link crossorigin="use-credentials" href="/manifest.webmanifest" rel="manifest">
    <script async src="https://unpkg.com/pwacompat" crossorigin="anonymous"></script>
    <script>window.yaContextCb = window.yaContextCb || []</script>
    <script src="https://yandex.ru/ads/system/context.js" async></script>
  <link rel="preload" href="https://assets.habr.com/habr-web/css/chunk-vendors.04465f7c.css" as="style"><link rel="preload" href="https://assets.habr.com/habr-web/js/chunk-vendors.3b11d41f.js" as="script"><link rel="preload" href="https://assets.habr.com/habr-web/css/app.20959a76.css" as="style"><link rel="preload" href="https://assets.habr.com/habr-web/js/app.7a97ea6d.js" as="script"><link rel="stylesheet" href="https://assets.habr.com/habr-web/css/chunk-vendors.04465f7c.css"><link rel="stylesheet" href="https://assets.habr.com/habr-web/css/app.20959a76.css"></head>
  <body>
    
    <div id="mount"><div id="app" data-async-called="true"><div class="tm-layout__wrapper"><!--[--><!----><div></div><div class="tm-feature tm-feature"><!----></div><header class="tm-header" data-test-id="header"><div class="tm-page-width"><!--[--><div class="tm-header__container"><div class="tm-header__burger-nav" data-test-id="burger-nav"><button class="tm-header__button tm-header__button_burger" type="button"><svg class="tm-svg-img tm-header__icon tm-header__icon-burger" height="16" width="16"><title>Меню</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#header-burger"></use></svg></button></div><span class="tm-header__logo-wrap"><a class="tm-header__logo tm-header__logo_hl-ru tm-header__logo" href="/ru/"><svg class="tm-svg-img tm-header__icon" height="16" width="16"><title>Хабр</title><use xlink:href="/img/habr-logo-ru.svg#logo"></use></svg></a><span style="display:none;" class="tm-header__beta-sign">β</span></span><!----><div class="tm-header-user-menu tm-header_user-menu"><a href="/ru/search/" class="tm-header-user-menu__item tm-header-user-menu__search" data-test-id="search-button"><svg class="tm-svg-img tm-header-user-menu__icon tm-header-user-menu__icon_search" height="24" width="24"><title>Поиск</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#search"></use></svg></a><!----><!----><div class="tm-header-user-menu__item tm-header-user-menu__write"><div><svg class="tm-svg-img tm-header-user-menu__icon tm-header-user-menu__icon_write" height="24" width="24"><title>Написать публикацию</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#write"></use></svg></div><!----></div><!--[--><div class="tm-header-user-menu__item"><button class="tm-header-user-menu__toggle" data-test-id="user-menu-settings"><svg class="tm-svg-img tm-header-user-menu__icon" height="24" width="24"><title>Настройки</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#page-settings"></use></svg></button></div><a href="https://habr.com/kek/v1/auth/habrahabr/?back=/ru/articles/728742/&amp;hl=ru" rel="nofollow" class="tm-header-user-menu__item"><!--[--><button class="btn btn_solid btn_small tm-header-user-menu__login" type="button"><!--[-->Войти<!--]--></button><!--]--></a><!--]--><!----><!--teleport start--><!--teleport end--><!----></div></div><!--]--></div></header><div class="tm-layout"><div class="tm-page-progress-bar"></div><!----><!----><div class="tm-page-width"><!--[--><!--]--></div><main class="tm-layout__container"><div class="tm-page" hl="ru" data-async-called="true" style="--0c809c5a:16px;--a086013e:100%;--7c457026:0;"><div class="tm-page-width"><!--[--><!----><div class="tm-page__wrapper"><div class="tm-page__main_has-sidebar tm-page__main"><div class="pull-down"><!----><div class="pull-down__header" style="height:0px;"><div class="pull-down__content" style="bottom:10px;"><svg class="tm-svg-img pull-down__icon pull-down__arrow" height="24" width="24"><title>Обновить</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#pull-arrow"></use></svg></div></div><!--[--><!--[--><div class="banner-wrapper narrow" style="--467224fc:100px;--58ff5eba:auto;" data-v-ad758baa><!--[--><div class="placeholder-wrapper placeholder" data-v-ad758baa><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><div class="adfox-banner-placeholder narrow" data-v-12f7bcca><div class="image loads" data-v-12f7bcca></div><div class="lines" data-v-12f7bcca><div class="line loads" data-v-12f7bcca></div><div class="line loads" data-v-12f7bcca></div><div class="line loads" data-v-12f7bcca></div></div></div><!----></div><div id="adfox_169815559787254866" class="tm-adfox-banner" data-v-ad758baa></div><!--]--></div><div class="tm-article-presenter"><!--[--><!--]--><div class="tm-article-presenter__body" data-test-id="article-body"><div class="tm-misprint-area"><div class="tm-misprint-area__wrapper"><!--[--><article class="tm-article-presenter__content tm-article-presenter__content_narrow"><!--[--><div class="tm-article-presenter__header"><!--[--><!--]--><div class="tm-article-snippet tm-article-snippet tm-article-presenter__snippet"><!--[--><!--]--><div class="tm-article-snippet__meta-container"><div class="tm-article-snippet__meta"><span class="tm-user-info tm-article-snippet__author"><a href="/ru/users/dmt_ovs/" class="tm-user-info__userpic" data-test-id="user-info-pic" title="dmt_ovs"><div class="tm-entity-image"><img alt="" class="tm-entity-image__pic" height="32" src="//habrastorage.org/r/w64/getpro/habr/avatars/84b/afb/1c1/84bafb1c17208f6b124be4429e2a8104.png" width="32"></div></a><span class="tm-user-info__user tm-user-info__user_appearance-default" data-test-id="user-info-description"><a href="/ru/users/dmt_ovs/" class="tm-user-info__username">dmt_ovs <!----></a><!--[--><span class="tm-article-datetime-published"><time datetime="2023-04-28T08:55:37.000Z" title="2023-04-28, 11:55">28  апр  2023 в 11:55</time></span><!--]--></span></span></div><!----></div><h1 class="tm-title tm-title_h1" lang="ru" data-test-id="articleTitle"><span>Вопросы и ответы для собеседования по Kotlin. Часть 3</span></h1><div class="tm-article-snippet__stats" data-test-id="articleStats"><div class="tm-article-complexity tm-article-complexity_complexity-medium"><span class="tm-svg-icon__wrapper tm-article-complexity__icon"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Уровень сложности</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#complexity-medium"></use></svg></span><span class="tm-article-complexity__label">Средний</span></div><div class="tm-article-reading-time"><span class="tm-svg-icon__wrapper tm-article-reading-time__icon"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Время на прочтение</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#clock"></use></svg></span><span class="tm-article-reading-time__label">21 мин</span></div><span class="tm-icon-counter tm-data-icons__item"><svg class="tm-svg-img tm-icon-counter__icon" height="24" width="24"><title>Количество просмотров</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-views"></use></svg><span class="tm-icon-counter__value" title="48065">48K</span></span></div><div class="tm-publication-hubs__container" data-test-id="articleHubsList"><div class="tm-publication-hubs"><!--[--><span class="tm-publication-hub__link-container"><a href="/ru/hubs/programming/" class="tm-publication-hub__link"><!--[--><span>Программирование</span><span class="tm-article-snippet__profiled-hub" title="Профильный хаб">*</span><!--]--></a></span><span class="tm-publication-hub__link-container"><a href="/ru/hubs/java/" class="tm-publication-hub__link"><!--[--><span>Java</span><span class="tm-article-snippet__profiled-hub" title="Профильный хаб">*</span><!--]--></a></span><span class="tm-publication-hub__link-container"><a href="/ru/hubs/android_dev/" class="tm-publication-hub__link"><!--[--><span>Разработка под Android</span><span class="tm-article-snippet__profiled-hub" title="Профильный хаб">*</span><!--]--></a></span><span class="tm-publication-hub__link-container"><a href="/ru/hubs/kotlin/" class="tm-publication-hub__link"><!--[--><span>Kotlin</span><span class="tm-article-snippet__profiled-hub" title="Профильный хаб">*</span><!--]--></a></span><span class="tm-publication-hub__link-container"><a href="/ru/hubs/study/" class="tm-publication-hub__link"><!--[--><span>Учебный процесс в IT</span><!----><!--]--></a></span><!--]--></div></div><div class="tm-article-labels" data-test-id="articleLabels"><div class="tm-article-labels__container"><div class="tm-publication-label tm-publication-label_variant-faq"><span>FAQ</span></div><!--[--><!--]--></div></div><!----><!----></div></div><!--[--><!----><div class="tm-article-body" data-gallery-root lang="ru"><div><!--[--><!--]--></div><div id="post-content-body"><div><div class="article-formatted-body article-formatted-body article-formatted-body_version-2"><div xmlns="http://www.w3.org/1999/xhtml"><p><a href="https://habr.com/ru/post/721084/" rel="noopener noreferrer nofollow">Вопросы и ответы для собеседования по Kotlin. Часть 1</a><br/><a href="https://habr.com/ru/post/722686/" rel="noopener noreferrer nofollow">Вопросы и ответы для собеседования по Kotlin. Часть 2</a> <br/><a href="https://habr.com/ru/articles/728742/" rel="noopener noreferrer nofollow">Вопросы и ответы для собеседования по Kotlin. Часть 3</a> — вы находитесь здесь<br/><a href="https://habr.com/ru/articles/736392/" rel="noopener noreferrer nofollow">Вопросы и ответы для собеседования по Kotlin. Часть 4</a>   </p><a class="anchor" name="%D0%A1%D0%BF%D0%B8%D1%81%D0%BE%D0%BA%20%D1%82%D0%B5%D0%BC%20%D0%B8%20%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81%D0%BE%D0%B2" id="Список тем и вопросов"></a><h2>Список тем и вопросов:</h2><h4>1. Классы и интерфейсы</h4><ul><li><p><a href="#%D0%A7%D1%82%D0%BE%20%D1%82%D0%B0%D0%BA%D0%BE%D0%B5%20%D0%B0%D0%B1%D1%81%D1%82%D1%80%D0%B0%D0%BA%D1%82%D0%BD%D1%8B%D0%B5%20%D0%BA%D0%BB%D0%B0%D1%81%D1%81%D1%8B%20%D0%B8%20%D0%B8%D0%BD%D1%82%D0%B5%D1%80%D1%84%D0%B5%D0%B9%D1%81%D1%8B?" rel="noopener noreferrer nofollow">Что такое абстрактные классы и интерфейсы?</a></p></li><li><p><a href="#%D0%9F%D0%BE%D1%87%D0%B5%D0%BC%D1%83%20%D0%BA%D0%BB%D0%B0%D1%81%D1%81%D1%8B%20%D0%B2%20Kotlin%20%D0%BF%D0%BE%20%D1%83%D0%BC%D0%BE%D0%BB%D1%87%D0%B0%D0%BD%D0%B8%D1%8E%20final?" rel="noopener noreferrer nofollow">Почему классы в Kotlin по умолчанию final?</a></p></li><li><p><a href="#%D0%A7%D1%82%D0%BE%20%D0%BD%D1%83%D0%B6%D0%BD%D0%BE%20%D1%81%D0%B4%D0%B5%D0%BB%D0%B0%D1%82%D1%8C,%20%D1%87%D1%82%D0%BE%D0%B1%D1%8B%20%D0%BA%D0%BB%D0%B0%D1%81%D1%81%20%D0%BC%D0%BE%D0%B6%D0%BD%D0%BE%20%D0%B1%D1%8B%D0%BB%D0%BE%20%D0%BD%D0%B0%D1%81%D0%BB%D0%B5%D0%B4%D0%BE%D0%B2%D0%B0%D1%82%D1%8C?%20(open)" rel="noopener noreferrer nofollow">Что нужно сделать, чтобы класс можно было наследовать? (open)</a></p></li><li><p><a href="#%D0%9A%D0%B0%D0%BA%20%D0%BC%D0%BE%D0%B6%D0%BD%D0%BE%20%D0%BF%D0%BE%D0%BB%D1%83%D1%87%D0%B8%D1%82%D1%8C%20%D1%82%D0%B8%D0%BF%20%D0%BA%D0%BB%D0%B0%D1%81%D1%81%D0%B0?" rel="noopener noreferrer nofollow">Как можно получить тип класса?</a></p></li><li><p><a href="#%D0%A7%D1%82%D0%BE%20%D1%82%D0%B0%D0%BA%D0%BE%D0%B5%20enum%20%D0%BA%D0%BB%D0%B0%D1%81%D1%81%20(%D0%BF%D0%B5%D1%80%D0%B5%D1%87%D0%B8%D1%81%D0%BB%D0%B5%D0%BD%D0%B8%D0%B9)?" rel="noopener noreferrer nofollow">Что такое enum класс (перечислений)?</a></p></li><li><p><a href="#%D0%A7%D1%82%D0%BE%20%D1%82%D0%B0%D0%BA%D0%BE%D0%B5%20sealed%20%D0%BA%D0%BB%D0%B0%D1%81%D1%81%20(%D0%B8%D0%B7%D0%BE%D0%BB%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%BD%D1%8B%D0%B9)?" rel="noopener noreferrer nofollow">Что такое sealed класс (изолированный)?</a></p></li><li><p><a href="#%D0%9A%D0%B0%D0%BA%D0%B0%D1%8F%20%D1%80%D0%B0%D0%B7%D0%BD%D0%B8%D1%86%D0%B0%20%D0%BC%D0%B5%D0%B6%D0%B4%D1%83%20sealed%20class%20%D0%B8%20enum?" rel="noopener noreferrer nofollow">Какая разница между sealed class и enum?</a></p></li><li><p><a href="#%D0%A7%D1%82%D0%BE%20%D1%82%D0%B0%D0%BA%D0%BE%D0%B5%20inner%20(%D0%B2%D0%BD%D1%83%D1%82%D1%80%D0%B5%D0%BD%D0%BD%D0%B8%D0%B5)%20%D0%B8%20nested%20(%D0%B2%D0%BB%D0%BE%D0%B6%D0%B5%D0%BD%D0%BD%D1%8B%D0%B5)%20%D0%BA%D0%BB%D0%B0%D1%81%D1%81%D1%8B?" rel="noopener noreferrer nofollow">Что такое inner (внутренние) и nested (вложенные) классы?</a></p></li><li><p><a href="#Value%20(%D0%B1%D1%8B%D0%B2%D1%88%D0%B8%D0%B5%20inline)%20%D0%BA%D0%BB%D0%B0%D1%81%D1%81%D1%8B" rel="noopener noreferrer nofollow">Value (бывшие inline) классы</a></p></li><li><p><a href="#%D0%9A%D0%B0%D0%BA%D0%B0%D1%8F%20%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%B0%20%D0%BE%D1%82%20typealias?%20%D0%92%D0%BE%20%D1%87%D1%82%D0%BE%20%D0%BE%D0%BD%20%D0%BA%D0%BE%D0%BC%D0%BF%D0%B8%D0%BB%D0%B8%D1%80%D1%83%D0%B5%D1%82%D1%81%D1%8F?" rel="noopener noreferrer nofollow">Какая польза от typealias? Во что он компилируется?</a></p></li></ul><h4>2. Коллекции и последовательности (Sequences)</h4><ul><li><p><a href="#%D0%9A%D0%B0%D0%BA%D0%B8%D0%B5%20%D0%BA%D0%BE%D0%BB%D0%BB%D0%B5%D0%BA%D1%86%D0%B8%D0%B8%20%D0%B5%D1%81%D1%82%D1%8C%20%D0%B2%20Kotlin?" rel="noopener noreferrer nofollow">Какие коллекции есть в Kotlin?</a></p></li><li><p><a href="#List" rel="noopener noreferrer nofollow">List</a></p></li><li><p><a href="#Set" rel="noopener noreferrer nofollow">Set</a></p></li><li><p><a href="#Map" rel="noopener noreferrer nofollow">Map</a></p></li><li><p><a href="#%D0%9A%D0%B0%D0%BA%D0%B0%D1%8F%20%D0%B8%D0%B7%20%D0%BA%D0%BE%D0%BB%D0%BB%D0%B5%D0%BA%D1%86%D0%B8%D0%B9%20%D0%BD%D0%B5%20%D1%8F%D0%B2%D0%BB%D1%8F%D0%B5%D1%82%D1%81%D1%8F%20%D0%B8%D0%BC%D0%BF%D0%BB%D0%B5%D0%BC%D0%B5%D0%BD%D1%82%D0%B0%D1%86%D0%B8%D0%B5%D0%B9%20Collection?" rel="noopener noreferrer nofollow">Какая из коллекций не является имплементацией Collection?</a></p></li><li><p><a href="#Sequences%20%D0%B8%20%D0%B8%D1%85%20%D0%BE%D1%82%D0%BB%D0%B8%D1%87%D0%B8%D1%8F%20%D0%BE%D1%82%20%D0%BA%D0%BE%D0%BB%D0%BB%D0%B5%D0%BA%D1%86%D0%B8%D0%B9" rel="noopener noreferrer nofollow">Sequences и их отличия от коллекций</a></p></li><li><p><a href="#%D0%9F%D1%80%D0%BE%D0%BC%D0%B5%D0%B6%D1%83%D1%82%D0%BE%D1%87%D0%BD%D1%8B%D0%B5%20(intermediate)%20%D0%B8%20%D1%82%D0%B5%D1%80%D0%BC%D0%B8%D0%BD%D0%B0%D0%BB%D1%8C%D0%BD%D1%8B%D0%B5%20(terminal)%20%D0%BE%D0%BF%D0%B5%D1%80%D0%B0%D1%86%D0%B8%D0%B8%20%D0%B2%20Sequences" rel="noopener noreferrer nofollow">Промежуточные (intermediate) и терминальные (terminal) операции в Sequences</a></p></li></ul><figure class="full-width "><img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/ba3/94c/742/ba394c742e1cee6fbaf17ffa02af0e09.png" width="1587" height="753" data-src="https://habrastorage.org/getpro/habr/upload_files/ba3/94c/742/ba394c742e1cee6fbaf17ffa02af0e09.png"/></figure><a class="anchor" name="%D0%A7%D1%82%D0%BE%20%D1%82%D0%B0%D0%BA%D0%BE%D0%B5%20%D0%B0%D0%B1%D1%81%D1%82%D1%80%D0%B0%D0%BA%D1%82%D0%BD%D1%8B%D0%B5%20%D0%BA%D0%BB%D0%B0%D1%81%D1%81%D1%8B%20%D0%B8%20%D0%B8%D0%BD%D1%82%D0%B5%D1%80%D1%84%D0%B5%D0%B9%D1%81%D1%8B?" id="Что такое абстрактные классы и интерфейсы?"></a><h2>Что такое абстрактные классы и интерфейсы? </h2><p>Абстрактные классы и интерфейсы используются для описания абстрактных концепций, не имеющих реализации.</p><p><strong>1. Абстрактный класс</strong> — это класс, представляющий из себя "заготовку" для целого семейства классов, который описывает для них <strong>общий шаблон поведения</strong>. Экземпляр такого класса не может быть создан. Абстрактному классу не нужен модификатор <code>open</code>, потому что он "открыт" для наследования по умолчанию.</p><p>В теле класса можно объявлять абстрактные свойства и функции. Это полезно, когда часть поведения класса не имеет смысла без реализации в более конкретном подклассе.</p><pre><code class="kotlin">abstract class Tree {
  abstract val name: String
  abstract val description: String
  abstract fun info()
}</code></pre><p>Каждый наследник обязан переопределять их все.</p><pre><code class="kotlin">class Pine : Tree() {
  override val name = "Сосна"
  override val description = "Хвойное дерево с длинными иглами и округлыми шишками"
  override fun info() = "$name - ${description.toLowerCase()}."  
}</code></pre><p>Свойства и функции необязательно должны быть абстрактными. У них может быть обобщенная реализация, которая будет с пользой наследоваться всеми подклассами. В этом случае для них в абстрактном классе объявляется конкретная реализация, к которой имеют доступ все наследники.</p><pre><code class="kotlin">abstract class Tree {
  abstract val name: String
  abstract val description: String
  fun info(): String = "$name - ${description.toLowerCase()}."
}

...

class Pine : Tree() {
  override val name = "Сосна"
  override val description = "Хвойное дерево с длинными иглами и округлыми шишками"
}

...

val pine = Pine()
println(pine.info())</code></pre><p>Так как этот компонент класса уже не будет абстрактным, наследники не смогут его переопределить.</p><pre><code class="kotlin">class Pine : Tree() {
  override val name = "Сосна"
  override val description = "Хвойное дерево с длинными иглами и округлыми шишками"

  // ошибка: функция "info" является "final" и не может быть переопределена
  override fun info() = description  
}</code></pre><p>Чтобы это исправить, нужно явно задать модификатор <code>open</code> для функции с конкретной реализацией. Тогда у наследников появляется выбор: либо не переопределять функцию и использовать реализацию суперкласса, либо переопределить и указать свою собственную реализацию.</p><pre><code class="kotlin">abstract class Tree {
  abstract val name: String
  abstract val description: String

  open fun info(): String = "$name - ${description.toLowerCase()}."
}</code></pre><p>У абстрактного класса может быть конструктор.</p><pre><code class="kotlin">abstract class Tree(val name: String, val description: String) {
  open fun info(): String = "$name - ${description.toLowerCase()}."
}</code></pre><p>Тогда каждый наследник должен предоставить для него значения.</p><pre><code class="kotlin">class Pine(name: String, description: String) : Tree(name, description)

...

val pine = Pine("Сосна", "Хвойное дерево с длинными иглами и округлыми шишками")
println(pine.info())</code></pre><p><strong>2. Интерфейс</strong> — это совокупность методов и правил, которые определяют <strong>поведение класса</strong> или <strong>общее поведение</strong> для группы независимых друг от друга классов. Интерфейсы похожи на абстрактные классы тем, что нельзя создать их экземпляры и они могут определять абстрактные или конкретные функции и свойства. Отличие в том, что интерфейсу не важна связь "родитель-наследник", он задаёт лишь правила поведения.</p><p>Интерфейсы в Kotlin могут содержать объявления абстрактных методов, а также методы с реализацией. Главное отличие интерфейсов от абстрактных классов заключается в невозможности хранения переменных экземпляров. Они могут иметь свойства, но те должны быть либо абстрактными, либо предоставлять реализацию методов доступа.</p><p>В теле интерфейса можно определять абстрактные свойства и функции. Для этого не требуется использовать ключевое слово <code>abstract</code>, так как Kotlin способен сам понять, что свойство и функция без реализации должны быть абстрактными. Также обратите внимание, что единственный способ определить свойство — это определить его в теле интерфейса, так как у <strong>интерфейса не бывает конструкторов</strong>.</p><pre><code class="kotlin">interface Cultivable {
  val bloom: Boolean
  fun startPhotosynthesis()
}</code></pre><p>Класс должен реализовывать все абстрактные свойства и функции, определённые в интерфейсе.</p><pre><code class="kotlin">abstract class Tree : Cultivable {
  abstract val name: String
  abstract val description: String
  open fun info(): String = "$name - ${description.toLowerCase()}."

  override val bloom = false
  override fun startPhotosynthesis() {
    ...
  }
}</code></pre><p>При этом если интерфейс реализовывается в абстрактном классе, то свойства и функции интерфейса могут быть в нём опущены. Тогда все наследники абстрактного класса должны будут их переопределять.</p><pre><code class="kotlin">abstract class Tree : Cultivable {
  abstract val name: String
  abstract val description: String
  open fun info(): String = "$name - ${description.toLowerCase()}."

  override fun startPhotosynthesis() {
    ...
  }
}

class Pine : Tree() {
  override val name = "Сосна"
  override val description = "Хвойное дерево с длинными иглами и округлыми шишками"

  override val bloom = false
}</code></pre><p>В интерфейсе можно определять свойства и функции с конкретной реализацией (по умолчанию). Классы, реализующие этот интерфейс, могут использовать реализацию по умолчанию или определить свою. При этом реализация свойств осуществляется с помощью метода доступа <code>get()</code>.</p><pre><code class="kotlin">interface Cultivable {
  val bloom: Boolean
    get() = false

  fun startPhotosynthesis() {
    ...
  }
}</code></pre><p>Один интерфейс может реализовать другой интерфейс, при этом будет иметь доступ к его свойствам и функциям.</p><pre><code class="kotlin">interface Fruitable {
  val fruit: String
    get() = "неплодоносный"
}

interface Cultivable : Fruitable {
  ...

  fun isFruitable() : Boolean {
    if(fruit == "неплодоносный") return false
    return true
  }
}</code></pre><p>Каждый класс, реализующий интерфейс <code>Cultivable</code> может использовать свойства и функции интерфейса <code>Fruitable</code>, если в этом есть необходимость.</p><pre><code class="kotlin">class AppleTree() : Tree() {
  override val name = "Яблоня"
  override val description = "Фруктовое дерево"
  override val fruit = "яблоко"
}

...

val appleTree = AppleTree()
if(appleTree.isFruitable()) {
  println("Плод - ${appleTree.fruit}.")
} else {
  println("${appleTree.name} не плодоносит.")
}</code></pre><p><strong>3. Как выбрать, что применять — абстрактный класс или интерфейс?</strong></p><ul><li><p>У вас есть семейство классов, из которых можно выделить общую сущность? Определите эту сущность в качестве абстрактного класса и она будет “заготовкой” для всего семейства.</p></li><li><p>Вам нужно создать более конкретную версию класса? Создайте подкласс этого класса и добавьте недостающее поведение.</p></li><li><p>Требуется определить общее поведение для группы независимых друг от друга классов? Создайте интерфейс и реализуйте его теми классами, которым необходимо это поведение.</p></li></ul><p><strong>4. Ключевые моменты:</strong></p><blockquote><p>Абстрактный класс — это "заготовка" для целого семейства классов. Нельзя создать экземпляр абстрактного класса. Абстрактный класс может содержать как абстрактные, так и конкретные реализации свойств и функций. Класс, который содержит абстрактное свойство или функцию, должен быть объявлен абстрактным. Абстрактный класс может быть без единого абстрактного свойства или функции. У класса может быть только один суперкласс. Наследники абстрактного класса должны переопределять все его абстрактные свойства и функции. Чтобы наследники могли переопределять конкретные реализации свойств и функций, для них в абстрактном классе должен быть явно указан модификатор <code>open</code>. У абстрактного класса может быть конструктор.  </p></blockquote><blockquote><p>Интерфейс определяет поведение класса или общее поведение для группы независимых друг от друга классов. Нельзя создать экземпляр интерфейса. Интерфейс может содержать как абстрактные, так и конкретные реализации функций. Свойства интерфейсов могут быть абстрактными, а могут иметь <code>get()</code> методы. Класс может реализовывать несколько интерфейсов. Класс должен реализовывать все абстрактные свойства и функции, определённые в интерфейсе. Если интерфейс реализовывается абстрактным классом, то переопределение его абстрактных свойств и функций может быть передано наследникам абстрактного класса. Интерфейс может реализовывать другой интерфейс.  </p></blockquote><p><strong>Подробнее:</strong> <a href="https://kotlinlang.ru/docs/reference/interfaces.html" rel="noopener noreferrer nofollow">kotlinlang.ru</a> и <a href="https://bimlibik.github.io/posts/kotlin-abstract-classes-and-interfaces/" rel="noopener noreferrer nofollow">bimlibik.github.io</a></p><a class="anchor" name="%D0%9F%D0%BE%D1%87%D0%B5%D0%BC%D1%83%20%D0%BA%D0%BB%D0%B0%D1%81%D1%81%D1%8B%20%D0%B2%20Kotlin%20%D0%BF%D0%BE%20%D1%83%D0%BC%D0%BE%D0%BB%D1%87%D0%B0%D0%BD%D0%B8%D1%8E%20final?" id="Почему классы в Kotlin по умолчанию final?"></a><p><a href="#%D0%A1%D0%BF%D0%B8%D1%81%D0%BE%D0%BA%20%D1%82%D0%B5%D0%BC%20%D0%B8%20%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81%D0%BE%D0%B2" rel="noopener noreferrer nofollow">—————— ↑↑↑ к списку вопросов ↑↑↑ ——————</a></p><h2>Почему классы в Kotlin по умолчанию final?</h2><p>Классы в Kotlin по умолчанию являются <code>final</code> для того, чтобы избежать случайного наследования и переопределения методов. Это сделано для повышения безопасности кода и уменьшения сложности программы, так как ограничение наследования помогает избежать ошибок, связанных с неожиданным изменением поведения унаследованных методов.</p><p>В Kotlin рекомендуется использовать <strong>композицию вместо наследования</strong> для повторного использования кода и расширения функциональности.</p><a class="anchor" name="%D0%A7%D1%82%D0%BE%20%D0%BD%D1%83%D0%B6%D0%BD%D0%BE%20%D1%81%D0%B4%D0%B5%D0%BB%D0%B0%D1%82%D1%8C,%20%D1%87%D1%82%D0%BE%D0%B1%D1%8B%20%D0%BA%D0%BB%D0%B0%D1%81%D1%81%20%D0%BC%D0%BE%D0%B6%D0%BD%D0%BE%20%D0%B1%D1%8B%D0%BB%D0%BE%20%D0%BD%D0%B0%D1%81%D0%BB%D0%B5%D0%B4%D0%BE%D0%B2%D0%B0%D1%82%D1%8C?%20(open)" id="Что нужно сделать, чтобы класс можно было наследовать? (open)"></a><p><a href="#%D0%A1%D0%BF%D0%B8%D1%81%D0%BE%D0%BA%20%D1%82%D0%B5%D0%BC%20%D0%B8%20%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81%D0%BE%D0%B2" rel="noopener noreferrer nofollow">—————— ↑↑↑ к списку вопросов ↑↑↑ ——————</a></p><h2>Что нужно сделать, чтобы класс можно было наследовать? (open)</h2><p>По умолчанию, классы в Kotlin объявляются как <code>final</code>, то есть их нельзя наследовать. Если мы всё же попытаемся наследоваться от такого класса, то получим ошибку: <em>“This type is final, so it cannot be inherited from”</em>.</p><p>Чтобы класс можно было наследовать, его нужно объявить с модификатором <code>open</code>.</p><pre><code class="kotlin">open class Fraction {
  ...
}</code></pre><p>Не только классы, но и функции в Kotlin по умолчанию имеют статус <code>final</code>. Поэтому те функции, которые находятся в родительском классе и которые вы хотите переопределить в дочерних классах, также должны быть отмечены <code>open</code>.</p><pre><code class="kotlin">open class Fraction {

  open fun toAttack() {
    ...
  }

}</code></pre><p>Свойства класса также по умолчанию являются <code>final</code>. Для возможности переопределения таких свойств в дочерних классах, не забудьте и их отметить ключевым словом <code>open</code>.</p><pre><code class="kotlin">open class Fraction {

  open val name: String = "default"

  open fun toAttack() {
    ...
  }

}
</code></pre><p>При этом, если в открытом классе будут присутствовать функции и свойства, которые не отмечены словом <code>open</code>, то переопределяться они не будут. Но дочерний класс сможет к ним обращаться.</p><pre><code class="kotlin">open class Fraction {

  open val name: String = "default"

  fun toAttack() {
    ...
  }

}

class Horde : Fraction() {
  override val name = "Horde"
}

class SomeClass() {
  val horde = Horde()
  horde.toAttack()
}
</code></pre><p><strong>Подробнее:</strong> <a href="https://bimlibik.github.io/posts/kotlin-open-keyword/" rel="noopener noreferrer nofollow">bimlibik.github.io</a>, <a href="https://kotlinlang.ru/docs/reference/classes.html" rel="noopener noreferrer nofollow">kotlinlang.ru</a>.</p><a class="anchor" name="%D0%9A%D0%B0%D0%BA%20%D0%BC%D0%BE%D0%B6%D0%BD%D0%BE%20%D0%BF%D0%BE%D0%BB%D1%83%D1%87%D0%B8%D1%82%D1%8C%20%D1%82%D0%B8%D0%BF%20%D0%BA%D0%BB%D0%B0%D1%81%D1%81%D0%B0?" id="Как можно получить тип класса?"></a><p><a href="#%D0%A1%D0%BF%D0%B8%D1%81%D0%BE%D0%BA%20%D1%82%D0%B5%D0%BC%20%D0%B8%20%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81%D0%BE%D0%B2" rel="noopener noreferrer nofollow">—————— ↑↑↑ к списку вопросов ↑↑↑ ——————</a></p><h2>Как можно получить тип класса?</h2><p><strong>1. Получение типа класса через функцию </strong><code>::class</code></p><p>Функция <code>::class</code> возвращает объект <code>KClass</code>, который содержит информацию о типе класса во время выполнения.</p><pre><code class="kotlin">class Person(val name: String, val age: Int)

fun main() {
    val person = Person("John", 30)
    println(person::class) // выводит "class Person"
}</code></pre><p><strong>2. Получение типа класса через функцию </strong><code>javaClass</code></p><p>Функция <code>javaClass</code> возвращает объект <code>Class</code>, который содержит информацию о типе класса во время выполнения.</p><pre><code class="kotlin">class Person(val name: String, val age: Int)

fun main() {
    val person = Person("John", 30)
    println(person.javaClass) // выводит "class Person"
}</code></pre><p><strong>3. Получение типа класса через функцию </strong><code>::class.java</code></p><p>Вызов функции <code>::class.java</code> на объекте типа <code>KClass</code> возвращает объект <code>Class</code>, который содержит информацию о типе класса во время выполнения.</p><pre><code class="kotlin">class Person(val name: String, val age: Int)

fun main() {
    val person = Person("John", 30)
    println(person::class.java) // выводит "class Person"
}</code></pre><p><strong>Подробнее:</strong> <a href="https://kotlinlang.ru/docs/reference/reflection.html#function-references" rel="noopener noreferrer nofollow">kotlinlang.ru</a></p><a class="anchor" name="%D0%A7%D1%82%D0%BE%20%D1%82%D0%B0%D0%BA%D0%BE%D0%B5%20enum%20%D0%BA%D0%BB%D0%B0%D1%81%D1%81%20(%D0%BF%D0%B5%D1%80%D0%B5%D1%87%D0%B8%D1%81%D0%BB%D0%B5%D0%BD%D0%B8%D0%B9)?" id="Что такое enum класс (перечислений)?"></a><p><a href="#%D0%A1%D0%BF%D0%B8%D1%81%D0%BE%D0%BA%20%D1%82%D0%B5%D0%BC%20%D0%B8%20%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81%D0%BE%D0%B2" rel="noopener noreferrer nofollow">—————— ↑↑↑ к списку вопросов ↑↑↑ ——————</a></p><h2>Что такое enum класс (перечислений)?</h2><p>Если в процессе разработки возникает ситуация, когда переменная должна иметь определённые (заранее известные) значения — <strong>константы</strong>, то вместо того, чтобы плодить список констант, их все можно перечислить в классе, который был придуман специально для этого — <strong>enum</strong> (класс перечислений). Он позволяет создать набор значений, которые могут быть использованы как единственно допустимые значения переменной. Каждая константа в классе перечислений является экземпляром этого класса и отделяется от другой константы запятой.</p><pre><code class="kotlin">enum class ColorType {
  RED,
  BLUE,
  GREEN
}</code></pre><p>Чтобы ограничить переменную одним из значений класса перечислений, нужно назначить ей тип объявленного класса перечислений.</p><pre><code class="kotlin">var color: ColorType
color = ColorType.RED</code></pre><p>Помимо самих констант в класс перечислений можно добавить свойства и функции. Их необходимо отделять от констант <em>точкой с запятой</em>. <strong>Это единственное место в Kotlin, где используется точка с запятой.</strong></p><pre><code class="kotlin">enum class ColorType {
  RED,
  BLUE,
  GREEN;

  fun names() = "Красный, Голубой, Зелёный"
  val rgb = "0xFFFFFF"
}</code></pre><p>При этом каждая константа сможет обращаться к этому свойству или функции.</p><pre><code class="kotlin">var color: ColorType = ColorType.RED
println(color.names()) // выведет "Красный, Голубой, Зелёный"
println(color.rgb) // выведет "0xFFFFFF"
</code></pre><p>Классы перечислений как и обычные классы также могут иметь конструктор. Так как константы являются экземплярами enum-класса, они могут быть инициализированы.</p><pre><code class="kotlin">enum class Color(val rgb: Int) {
    RED(0xFF0000),
    GREEN(0x00FF00),
    BLUE(0x0000FF)
}</code></pre><p>Enum-константы также могут объявлять свои собственные анонимные классы как с их собственными методами, так и с перегруженными методами базового класса. Напоминаю, что при объявлении в enum-классе каких-либо членов, необходимо <strong>отделять их от объявления констант точкой с запятой</strong>.</p><pre><code class="kotlin">enum class ProtocolState {
    WAITING {
        override fun signal() = TALKING
    },

    TALKING {
        override fun signal() = WAITING
    };

    abstract fun signal(): ProtocolState
}</code></pre><p><strong>Подробнее:</strong> <a href="https://kotlinlang.ru/docs/reference/enum-classes.html" rel="noopener noreferrer nofollow">kotlinlang.ru</a> и <a href="https://metanit.com/kotlin/tutorial/4.13.php" rel="noopener noreferrer nofollow">metanit.com</a></p><a class="anchor" name="%D0%A7%D1%82%D0%BE%20%D1%82%D0%B0%D0%BA%D0%BE%D0%B5%20sealed%20%D0%BA%D0%BB%D0%B0%D1%81%D1%81%20(%D0%B8%D0%B7%D0%BE%D0%BB%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%BD%D1%8B%D0%B9)?" id="Что такое sealed класс (изолированный)?"></a><p><a href="#%D0%A1%D0%BF%D0%B8%D1%81%D0%BE%D0%BA%20%D1%82%D0%B5%D0%BC%20%D0%B8%20%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81%D0%BE%D0%B2" rel="noopener noreferrer nofollow">—————— ↑↑↑ к списку вопросов ↑↑↑ ——————</a></p><h2>Что такое sealed класс (изолированный)?</h2><p><strong>Sealed class</strong> (изолированный класс) — это класс, который является абстрактным и используется в Kotlin для ограничения классов, которые могут наследоваться от него.</p><p>Основная идея заключается в том, что <code>sealed class</code> позволяет определить ограниченный и известный заранее набор подклассов, которые могут быть использованы.</p><ul><li><p>Конструктор изолированного класса всегда приватен, и это нельзя изменить.</p></li><li><p>У <code>sealed</code> класса могут быть наследники, но все они должны находиться в одном пакете с изолированным классом. Изолированный класс "открыт" для наследования по умолчанию, указывать слово <code>open</code> не требуется.</p></li><li><p>Наследники <code>sealed</code> класса могут быть классами любого типа: <code>data class</code>, объектом, обычным классом, другим <code>sealed</code> классом. Классы, которые расширяют наследников <code>sealed</code> класса могут находиться где угодно.</p></li><li><p>Изолированные классы абстрактны и могут содержать в себе абстрактные компоненты.</p></li><li><p>Изолированные классы нельзя инициализировать.</p></li><li><p>При использовании <code>when</code>, все подклассы, которые не были проверены  в конструкции, будут подсвечены <strong>IDE</strong>.</p></li><li><p>Не объявляется с ключевым словом <code>inner</code>.</p></li></ul><p><strong>Пример sealed класса:</strong></p><pre><code class="kotlin">sealed class Shape {
    class Circle(val radius: Double) : Shape()
    class Rectangle(val width: Double, val height: Double) : Shape()
    class Triangle(val base: Double, val height: Double) : Shape()
}

fun calculateArea(shape: Shape): Double {
    return when (shape) {
        is Shape.Circle -&gt; Math.PI * shape.radius * shape.radius
        is Shape.Rectangle -&gt; shape.width * shape.height
        is Shape.Triangle -&gt; 0.5 * shape.base * shape.height
    }
}

fun main() {
    val circle = Shape.Circle(5.0)
    val rectangle = Shape.Rectangle(2.0, 3.0)
    val triangle = Shape.Triangle(4.0, 5.0)

    println(calculateArea(circle))     // Output: 78.53981633974483
    println(calculateArea(rectangle))  // Output: 6.0
    println(calculateArea(triangle))   // Output: 10.0
}</code></pre><p>В этом примере мы определили <code>sealed class Shape</code>, который содержит три класса: <code>Circle</code>, <code>Rectangle</code> и <code>Triangle</code>. Эти классы наследуются от <code>Shape</code>. Это означает, что мы можем создавать объекты этих классов и использовать их, как объекты типа <code>Shape</code>.</p><p>В функции <code>calculateArea</code> мы используем выражение <code>when</code>, чтобы определить тип фигуры и вернуть ее площадь. Таким образом, если мы передадим <code>Shape.Circle</code> в <code>calculateArea</code>, то будет вычислена площадь круга.</p><p>В функции main мы создали объекты <code>Circle</code>, <code>Rectangle</code> и <code>Triangle</code> и передали их в <code>calculateArea</code>, чтобы вычислить их площади.</p><p><strong>Подробнее:</strong> <a href="https://kotlinlang.ru/docs/reference/sealed-classes.html" rel="noopener noreferrer nofollow">kotlinlang.ru</a> и <a href="https://bimlibik.github.io/posts/kotlin-sealed-classes/" rel="noopener noreferrer nofollow">bimlibik.github.io</a></p><a class="anchor" name="%D0%9A%D0%B0%D0%BA%D0%B0%D1%8F%20%D1%80%D0%B0%D0%B7%D0%BD%D0%B8%D1%86%D0%B0%20%D0%BC%D0%B5%D0%B6%D0%B4%D1%83%20sealed%20class%20%D0%B8%20enum?" id="Какая разница между sealed class и enum?"></a><p><a href="#%D0%A1%D0%BF%D0%B8%D1%81%D0%BE%D0%BA%20%D1%82%D0%B5%D0%BC%20%D0%B8%20%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81%D0%BE%D0%B2" rel="noopener noreferrer nofollow">—————— ↑↑↑ к списку вопросов ↑↑↑ ——————</a></p><h2>Какая разница между sealed class и enum?</h2><p><code>Sealed class</code> и <code>Enum</code> это два разных концепта в Kotlin, хотя их часто используют для ограничения набора возможных значений. Основная разница между ними:</p><ul><li><p><code>enum</code> представляет собой конечный список значений, которые объявляются заранее в момент компиляции, и <strong>не могут быть расширены или изменены</strong> во время выполнения программы</p></li><li><p><code>sealed class</code> позволяет определять ограниченный набор значений, но эти значения <strong>могут быть расширены в будущем</strong></p></li></ul><p>В общем, <code>enum class</code> используется для представления конечного списка опций или состояний, тогда как <code>sealed class</code> используется для определения ограниченного набора значений, которые могут быть произвольными объектами.</p><a class="anchor" name="%D0%A7%D1%82%D0%BE%20%D1%82%D0%B0%D0%BA%D0%BE%D0%B5%20inner%20(%D0%B2%D0%BD%D1%83%D1%82%D1%80%D0%B5%D0%BD%D0%BD%D0%B8%D0%B5)%20%D0%B8%20nested%20(%D0%B2%D0%BB%D0%BE%D0%B6%D0%B5%D0%BD%D0%BD%D1%8B%D0%B5)%20%D0%BA%D0%BB%D0%B0%D1%81%D1%81%D1%8B?" id="Что такое inner (внутренние) и nested (вложенные) классы?"></a><p><a href="#%D0%A1%D0%BF%D0%B8%D1%81%D0%BE%D0%BA%20%D1%82%D0%B5%D0%BC%20%D0%B8%20%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81%D0%BE%D0%B2" rel="noopener noreferrer nofollow">—————— ↑↑↑ к списку вопросов ↑↑↑ ——————</a></p><h2>Что такое inner (внутренние) и nested (вложенные) классы?</h2><p>В Kotlin можно объявить один класс внутри другого. Это может быть полезно в тех случаях, когда вам нужно организовать код и логически связать классы между собой. Подобные классы разделяются на <strong>внутренние (inner)</strong> и <strong>вложенные (nested)</strong>.</p><p><strong>1. Внутренние классы (inner classes)</strong> имеют доступ к членам внешнего класса, даже если они объявлены как <code>private</code>. Внутренний класс является частью внешнего класса и имеет доступ к его свойствам и методам. В Kotlin внутренний класс объявляется с помощью ключевого слова <code>inner</code>. Например:</p><pre><code class="kotlin">class Outer {
    private val outerProperty = "Outer Property"
    
    inner class Inner {
        fun innerMethod() {
            println("Accessing outer property: $outerProperty")
        }
    }
}</code></pre><p>В этом примере <code>Inner</code> является внутренним классом, а <code>Outer</code> является внешним классом. <code>Inner</code> имеет доступ к членам <code>Outer</code>, в том числе к приватным свойствам и методам, таким как <code>outerProperty</code>.</p><p><strong>2. Вложенные классы (nested classes)</strong> не имеют доступа к членам внешнего класса по умолчанию. Они имеют свои собственные члены, которые могут быть использованы только внутри класса. Например:</p><pre><code class="kotlin">class Outer {
    private val outerProperty = "Outer Property"
    
    class Nested {
        fun nestedMethod() {
            println("Accessing nested property")
        }
    }
}</code></pre><p>Здесь <code>Nested</code> является вложенным классом. Он не имеет доступа к свойству <code>outerProperty</code>, но может использовать свои собственные члены, такие как <code>nestedMethod</code>.</p><p><strong>3. Ключевое отличие:</strong> внутренний (<code>inner</code>) класс — это вложенный (<code>nested</code>) класс, который может обращаться к компонентам внешнего класса.</p><p><strong>Подробнее:</strong> <a href="https://kotlinlang.ru/docs/reference/nested-classes.html" rel="noopener noreferrer nofollow">kotlinlang.ru</a> и <a href="https://bimlibik.github.io/posts/kotlin-nested-and-inner-clesses/" rel="noopener noreferrer nofollow">bimlibik.github.io</a></p><a class="anchor" name="Value%20(%D0%B1%D1%8B%D0%B2%D1%88%D0%B8%D0%B5%20inline)%20%D0%BA%D0%BB%D0%B0%D1%81%D1%81%D1%8B" id="Value (бывшие inline) классы"></a><p><a href="#%D0%A1%D0%BF%D0%B8%D1%81%D0%BE%D0%BA%20%D1%82%D0%B5%D0%BC%20%D0%B8%20%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81%D0%BE%D0%B2" rel="noopener noreferrer nofollow">—————— ↑↑↑ к списку вопросов ↑↑↑ ——————</a></p><h2>Value (бывшие inline) классы</h2><p>Тем, кто хочет подробно узнать историю создания <code>inline</code> классов в Kotlin и почему было принято решение переименовать модификатор <code>inline</code> в <code>value</code> — лучше прочитать KEEP от первоисточника <a href="https://github.com/Kotlin/KEEP/blob/master/notes/value-classes.md#inline-classes-are-user-defined-value-classes" rel="noopener noreferrer nofollow">Романа Елизарова</a>.</p><p><strong>Кратко:</strong> в Kotlin версии 1.2.30 была добавлена функциональность <code>inline</code> (встраиваемых) классов. Это позволило создавать классы, которые компилируются в обычные примитивы (<code>Int</code>, <code>Long</code> и другие), но при этом могли содержать дополнительные методы и свойства.</p><p>В Kotlin 1.5 были добавлены <code>value</code> классы (классы значений), которые заменили <code>inline</code> классы. Классы значений предоставляют те же преимущества, что и <code>inline</code> классы, но с улучшенным синтаксисом и дополнительными возможностями.</p><p>В отли­чие от обыч­ного клас­са, <code>value</code> класс инлай­новый. Он не будет существо­вать в резуль­тиру­ющем байт‑коде при­ложе­ния. Ком­пилятор раз­вернет все <code>value</code> клас­сы и будет исполь­зовать вмес­то них сох­ранен­ные внут­ри зна­чения.</p><p><strong>Преимущества </strong><code>value</code> классов в Kotlin:</p><ol><li><p>Экономия памяти за счет уменьшения количества объектов, которые создаются в программе.</p></li><li><p>Улучшение производительности за счет уменьшения количества операций копирования объектов.</p></li><li><p>Улучшение безопасности за счет возможности установки ограничений на значения свойств <code>value</code> класса.</p></li></ol><p><strong>При использовании </strong><code>value</code> классов необходимо учитывать следующие ограничения и условия:</p><ol><li><p>Класс должен быть помечен аннотацией <code>@JvmInline</code>, чтобы быть оптимизированным компилятором.</p></li><li><p><code>Value</code> класс не может иметь перегруженных конструкторов или конструкторов без параметров.</p></li><li><p>Класс должен иметь одно свойство (только <code>val</code>), инициализированное в основном конструкторе.</p></li><li><p><code>Value</code> класс не может быть наследником или наследоваться от другого класса.</p></li><li><p><code>Value</code> класс может наследоваться от интерфейсов.</p></li><li><p><code>Value</code> класс не может быть аннотирован как <code>open</code>, <code>abstract</code>, <code>inner</code> или <code>sealed</code>.</p></li></ol><p><strong>Сравнение и преимущества </strong><code>value</code> над <code>data</code> классами и <code>typealias</code> подробно описаны в статье: <a href="https://habr.com/ru/post/691152/" rel="noopener noreferrer nofollow">https://habr.com/ru/post/691152</a><br/><br/> Краткие выводы из статьи про классы значений:</p><ul><li><p>Делают объявление переменных и сигнатуры функций более выразительными.</p></li><li><p>Сохраняют производительность примитивных типов.</p></li><li><p>Несовместимы по присваиванию с их базовым типом, предотвращая пользователя от совершения глупых вещей.</p></li><li><p>Поддерживают множество особенностей <code>data</code> классов, таких как конструкторы, <code>init</code>, методы и даже дополнительные свойства (но только через геттеры).</p></li></ul><p>По словам автора (точнее переводчика <a href="https://quickbirdstudios.com/blog/kotlin-value-classes/" rel="noopener noreferrer nofollow">оригинала</a>): единственное оставшееся применение для <code>data</code> классов — это когда вам нужно обернуть несколько параметров. <code>Value</code> классы ограничены одним параметром в их конструкторе.</p><p>Простой пример использования <code>value</code> класса:</p><pre><code class="kotlin">@JvmInline
value class Age(val age: Int) {
    init {
        require(age &gt;= 0) { "Age cannot be negative" }
    }
}

data class Person(val name: String, val age: Age)

fun main() {
    val person = Person("Alice", Age(30))
    println("Name: ${person.name}, Age: ${person.age.age}")
}</code></pre><p>В этом примере <code>Age</code> — это <code>value</code> класс, описывающий возраст человека. Он имеет один параметр <code>age</code>, который передается в конструктор. Затем <code>Age</code> используется в качестве свойства в классе <code>Person</code>. Таким образом, мы можем гарантировать, что возраст всегда будет неотрицательным, потому что в конструкторе <code>Age</code> используется блок <code>init</code>, проверяющий, что переданный возраст не меньше нуля.</p><p>Возможно, что у вас возникнет вопрос: "Так можно же заменить <code>value</code> класс <code>Age</code> на <code>data</code> класс и все будет работать также. В чем тогда преимущество в применении здесь <code>value</code> класса?"</p><p>Преимущество использования <code>value</code> класса здесь заключается в том, что он позволяет явно выразить намерение разработчика создать класс, который будет использоваться в качестве значения. Это может помочь в дальнейшей оптимизации кода, так как компилятор может производить дополнительные оптимизации для <code>value</code> классов, которые недоступны для обычных или <code>data</code> классов. Также использование <code>value</code> класса <code>Age</code> с аннотацией <code>@JvmInline</code> позволяет избежать создания объекта при обращении к значению возраста, что может ускорить выполнение кода. Несмотря на то, что в данном примере это не так очевидно, но для более сложных и вычислительно затратных операций это может оказаться значительным преимуществом.</p><p><strong>Подробнее:</strong> <a href="https://kotlinlang.ru/docs/inline-classes.html" rel="noopener noreferrer nofollow">kotlinlang.ru</a>, <a href="https://www.manusobles.com/posts/inline-value-classes-kotlin" rel="noopener noreferrer nofollow">manusobles.com</a>, <a href="https://habr.com/ru/post/691152/" rel="noopener noreferrer nofollow">habr.com</a>.</p><a class="anchor" name="%D0%9A%D0%B0%D0%BA%D0%B0%D1%8F%20%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%B0%20%D0%BE%D1%82%20typealias?%20%D0%92%D0%BE%20%D1%87%D1%82%D0%BE%20%D0%BE%D0%BD%20%D0%BA%D0%BE%D0%BC%D0%BF%D0%B8%D0%BB%D0%B8%D1%80%D1%83%D0%B5%D1%82%D1%81%D1%8F?" id="Какая польза от typealias? Во что он компилируется?"></a><p><a href="#%D0%A1%D0%BF%D0%B8%D1%81%D0%BE%D0%BA%20%D1%82%D0%B5%D0%BC%20%D0%B8%20%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81%D0%BE%D0%B2" rel="noopener noreferrer nofollow">—————— ↑↑↑ к списку вопросов ↑↑↑ ——————</a></p><h2>Какая польза от typealias? Во что он компилируется?</h2><p><code>Typealias</code> — это механизм создания синонимов (псевдонимов) для существующих типов. То есть, можно создать новое имя для уже существующего типа данных.<br/> <br/>Псевдонимы типов полезны, когда вы хотите сократить длинные имена типов, содержащих обобщения. К примеру, можно упрощать названия типов коллекций:</p><pre><code class="kotlin">typealias NodeSet = Set&lt;Network.Node&gt;
typealias FileTable&lt;K&gt; = MutableMap&lt;K, MutableList&lt;File&gt;&gt;</code></pre><p>Польза от использования <code>typealias</code> заключается в том, что он повышает читабельность кода, делает его более выразительным и удобным для работы. Кроме того, он может упростить процесс переписывания кода в случае изменения типов в будущем.</p><p>К примеру, если в проекте используется много <code>Map&lt;String, String&gt;</code> и вместо этого вы хотите использовать более описательное название, например <code>Properties</code>, вы можете определить новый тип для <code>Map&lt;String, String&gt;</code> с помощью следующего кода:</p><pre><code class="kotlin">typealias Properties = Map&lt;String, String&gt;</code></pre><p>Теперь вместо использования <code>Map&lt;String, String&gt;</code> можно использовать <code>Properties</code> для обозначения одного и того же типа данных. Таким образом, код становится более читаемым и понятным.</p><p><strong>Во что компилируется </strong><code>typealias</code><strong>?</strong></p><p><code>Typealias</code> не создает новый тип данных, а только создает псевдоним для существующего типа. При компиляции кода, все <code>typealias</code> заменяются на соответствующий тип, поэтому <code>typealias</code> не приводит к увеличению размера кода.</p><p>Например, <code>typealias IntPredicate = (Int) -&gt; Boolean</code> при компиляции будет заменено на <code>(Int) -&gt; Boolean</code>, то есть функцию, принимающую значение типа <code>Int</code> и возвращающую значение типа <code>Boolean</code>.</p><p><strong>Можно ли использовать </strong><code>typealias</code> <strong>для функциональных типов?</strong></p><p>Да, можно использовать <code>typealias</code> для функциональных типов в Kotlin. Например, вы можете создать псевдоним для типа функции, которая принимает два параметра типа <code>Int</code> и возвращает значение типа <code>String</code>, следующим образом:</p><pre><code class="kotlin">typealias IntToString = (Int, Int) -&gt; String</code></pre><p>Это позволит вам использовать созданный псевдоним вместо полного объявления типа, то есть вместо:</p><pre><code class="kotlin">fun processValues(f: (Int, Int) -&gt; String) {
    // ...
}</code></pre><p>можно использовать:</p><pre><code class="kotlin">fun processValues(f: IntToString) {
    // ...
}</code></pre><p>Как и в случае с другими <code>typealias</code>, компилятор Kotlin просто заменяет псевдоним на соответствующий тип при компиляции кода.</p><p><strong>Подробнее:</strong> <a href="https://kotlinlang.ru/docs/reference/type-aliases.html" rel="noopener noreferrer nofollow">kotlinlang.ru</a>, <a href="https://hr-vector.com/kotlin/type-aliases-psevdonimy-tipov-v-kotlin" rel="noopener noreferrer nofollow">hr-vector.com</a></p><a class="anchor" name="%D0%9A%D0%B0%D0%BA%D0%B8%D0%B5%20%D0%BA%D0%BE%D0%BB%D0%BB%D0%B5%D0%BA%D1%86%D0%B8%D0%B8%20%D0%B5%D1%81%D1%82%D1%8C%20%D0%B2%20Kotlin?" id="Какие коллекции есть в Kotlin?"></a><p><a href="#%D0%A1%D0%BF%D0%B8%D1%81%D0%BE%D0%BA%20%D1%82%D0%B5%D0%BC%20%D0%B8%20%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81%D0%BE%D0%B2" rel="noopener noreferrer nofollow">—————— ↑↑↑ к списку вопросов ↑↑↑ ——————</a></p><h2>Какие коллекции есть в Kotlin?</h2><p><strong>Коллекция</strong> — это объект, содержащий в себе набор значений одного или различных типов, а также позволяющий к этим значениям обращаться и извлекать. Другими словами — это контейнер, в который вы можете помещать то, что вам нужно, а затем каким-либо образом с ним взаимодействовать. В Kotlin есть <strong>три типа коллекций</strong>:</p><ul><li><p><strong>List</strong> (список). Упорядоченная коллекция, в которой к элементам можно обращаться по их индексам. Идентичные элементы (дубликаты) могут встречаться в списке более одного раза. Примером списка является предложение: это группа слов, их порядок важен, и они могут повторяться.</p></li><li><p><strong>Set</strong> (множество/набор). Неупорядоченная коллекция без повторяющихся значений. Примером множества является алфавит.</p></li><li><p><strong>Map</strong> (словарь/ассоциативный список). Набор из пар "ключ-значение". Ключи уникальны и каждый из них соответствует ровно одному значению. В коллекции могут присутствовать повторяющиеся значения, но не повторяющиеся ключи. Пример — ID сотрудников и их должностей. <strong>Map</strong> не является наследником интерфейса <strong>Collection</strong>.</p></li></ul><p>Два типа интерфейсов, на основе которых создаются коллекции:</p><ol><li><p><strong>Неизменяемый (read-only)</strong> — дают доступ только для чтения (<code>Set</code>, <code>List</code>, <code>Map</code>, <code>Collection</code>).</p></li><li><p><strong>Изменяемый (mutable)</strong> — расширяет предыдущий интерфейс и дополнительно даёт доступ к операциям добавления, удаления и обновления элементов коллекции (<code>MutableSet</code>, <code>MutableList</code>, <code>MutableMap</code>, <code>MutableCollection</code>).</p></li></ol><figure class="full-width "><img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/471/232/032/4712320326f3181bc5e9ef0ea07a943f.png" alt="" title="" width="949" height="551" data-src="https://habrastorage.org/getpro/habr/upload_files/471/232/032/4712320326f3181bc5e9ef0ea07a943f.png"/></figure><p><strong>Функции коллекций</strong> в доске <a href="https://trello.com/b/7eWLU7kG" rel="noopener noreferrer nofollow">Trello</a>.</p><p><strong>Подробнее о коллекциях:</strong> <a href="https://tproger.ru/articles/kollekcii-v-kotlin-znakomstvo-i-osnovnye-funkcii/" rel="noopener noreferrer nofollow">tproger.ru</a> и <a href="https://kotlinlang.ru/docs/reference/collections-overview.html" rel="noopener noreferrer nofollow">kotlinlang.ru</a></p><a class="anchor" name="List" id="List"></a><p><a href="#%D0%A1%D0%BF%D0%B8%D1%81%D0%BE%D0%BA%20%D1%82%D0%B5%D0%BC%20%D0%B8%20%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81%D0%BE%D0%B2" rel="noopener noreferrer nofollow">—————— ↑↑↑ к списку вопросов ↑↑↑ ——————</a></p><h2>List</h2><p><strong>Список — это упорядоченная коллекция.</strong> Каждое значение, помещённое в <code>List</code>, называется элементом, к которому можно обращаться по индексу. Индексы начинаются с "0" и заканчиваются индексом последнего элемента в списке — <code>(list.size - 1)</code>. Список может содержать сколько угодно одинаковых элементов — дублей (в том числе <code>null</code>).</p><pre><code class="kotlin">val trees = listOf("Сосна", "Берёза", "Дуб") // неизменяемый список
trees.add("Ясень") // ошибка

val mutableTrees = mutableListOf("Сосна", "Берёза", "Дуб") // изменяемый список
mutableTrees.add("Ясень") // всё ок</code></pre><p>По умолчанию в Kotlin реализацией <code>List</code> является <code>ArrayList</code>, его  можно создать напрямую:</p><pre><code class="kotlin">val mutableTrees = ArrayList&lt;String&gt;()
mutableTrees.add("Ясень")</code></pre><a class="anchor" name="Set" id="Set"></a><p><a href="#%D0%A1%D0%BF%D0%B8%D1%81%D0%BE%D0%BA%20%D1%82%D0%B5%D0%BC%20%D0%B8%20%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81%D0%BE%D0%B2" rel="noopener noreferrer nofollow">—————— ↑↑↑ к списку вопросов ↑↑↑ ——————</a></p><h2>Set</h2><p><strong>Множество — это коллекция уникальных элементов</strong>. Это означает, что <code>Set</code> не может содержать дублей. Обратите внимание, что <code>null</code> — это тоже уникальный элемент.</p><pre><code class="kotlin">val trees = setOf("Сосна", "Берёза", "Дуб") // неизменяемый сет
trees.add("Ясень") // ошибка

val mutableTrees = mutableSetOf("Сосна", "Берёза", "Дуб") // изменяемый сет
mutableTrees.add("Сосна") // проигнорируется</code></pre><p>В отличие от списка, множество не заботится о порядке элементов. Это означает, что при использовании функций, зависящих от порядка элементов, вы можете получить непредсказуемый результат. Но это зависит от реализации сета. Например, по умолчанию реализацией <code>Set</code> является <code>LinkedHashSet</code>, который сохраняет порядок вставки элементов.</p><pre><code class="kotlin">val numbers = setOf(1, 2, 3, 4)  // по умолчанию LinkedHashSet
val numbersBackwards = setOf(4, 3, 2, 1)

println(numbers.first() == numbersBackwards.first()) // false
println(numbers.first() == numbersBackwards.last()) // true</code></pre><p>Но также существует <code>HashSet</code>, который не сохраняет порядок вставки элементов. И <code>LinkedHashSet</code>, и <code>HashSet</code> можно создать напрямую.</p><pre><code class="kotlin">val linkedHashSet = LinkedHashSet&lt;String&gt;()
linkedHashSet.add("Дуб")

val hashSet = HashSet&lt;String&gt;()
hashSet.add("Ясень")</code></pre><a class="anchor" name="Map" id="Map"></a><p><a href="#%D0%A1%D0%BF%D0%B8%D1%81%D0%BE%D0%BA%20%D1%82%D0%B5%D0%BC%20%D0%B8%20%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81%D0%BE%D0%B2" rel="noopener noreferrer nofollow">—————— ↑↑↑ к списку вопросов ↑↑↑ ——————</a></p><h2>Map</h2><p>Ассоциативные списки с уникальными ключами и любыми значениями (дубликаты ключей не допускаются, значения могут быть одинаковыми). Связь между ключами и значениями происходит через специальную форму вызова метода (инфиксный вызов) <strong>to</strong>.</p><pre><code class="kotlin">// числа - это ключи, деревья - значения
val map = mapOf(1 to "Сосна", 2 to "Берёза", 3 to "Дуб") // неизменяемая мапа
map.put(4, "Ясень") // ошибка

val mutableMap = mutableMapOf(1 to "Сосна", 2 to "Берёза", 3 to "Дуб") // изменяемая мапа
mutableMap.put(4, "Ясень")</code></pre><p>По умолчанию реализацией мапы является <code>LinkedHashMap</code>, который сохраняет порядок вставки записей. Есть ещё <code>HashMap</code>, которая не сохраняет порядок вставки записей. Обе реализации можно создать напрямую.</p><pre><code class="kotlin">val linkedHashMap = LinkedHashMap&lt;Int, String&gt;()
linkedHashMap.put(1, "Дуб")

val hashMap = HashMap&lt;Int, String&gt;()
hashMap.put(1, "Ясень")</code></pre><a class="anchor" name="%D0%9A%D0%B0%D0%BA%D0%B0%D1%8F%20%D0%B8%D0%B7%20%D0%BA%D0%BE%D0%BB%D0%BB%D0%B5%D0%BA%D1%86%D0%B8%D0%B9%20%D0%BD%D0%B5%20%D1%8F%D0%B2%D0%BB%D1%8F%D0%B5%D1%82%D1%81%D1%8F%20%D0%B8%D0%BC%D0%BF%D0%BB%D0%B5%D0%BC%D0%B5%D0%BD%D1%82%D0%B0%D1%86%D0%B8%D0%B5%D0%B9%20Collection?" id="Какая из коллекций не является имплементацией Collection?"></a><p><a href="#%D0%A1%D0%BF%D0%B8%D1%81%D0%BE%D0%BA%20%D1%82%D0%B5%D0%BC%20%D0%B8%20%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81%D0%BE%D0%B2" rel="noopener noreferrer nofollow">—————— ↑↑↑ к списку вопросов ↑↑↑ ——————</a></p><h2>Какая из коллекций не является имплементацией Collection?</h2><p>Интерфейс <code>Map</code> не является наследником интерфейса <code>Collection</code>.</p><p>Технически — это не коллекция, так как <code>Map</code> не наследуется от <code>Collection</code>. Но это также структура для хранения данных и ее всегда изучают и рассматривают вместе с коллекциями. В разговоре вполне нормально называть <code>Map</code> коллекцией.</p><a class="anchor" name="Sequences%20%D0%B8%20%D0%B8%D1%85%20%D0%BE%D1%82%D0%BB%D0%B8%D1%87%D0%B8%D1%8F%20%D0%BE%D1%82%20%D0%BA%D0%BE%D0%BB%D0%BB%D0%B5%D0%BA%D1%86%D0%B8%D0%B9" id="Sequences и их отличия от коллекций"></a><p><a href="#%D0%A1%D0%BF%D0%B8%D1%81%D0%BE%D0%BA%20%D1%82%D0%B5%D0%BC%20%D0%B8%20%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81%D0%BE%D0%B2" rel="noopener noreferrer nofollow">—————— ↑↑↑ к списку вопросов ↑↑↑ ——————</a></p><h2>Sequences и их отличия от коллекций</h2><p><code>Sequences</code> или последовательности — ещё один тип контейнера в Kotlin, но он <strong>не является коллекцией</strong>. Последовательности очень похожи на коллекции, они предоставляют те же функции. Ключевая разница в том, что они применяют другой подход с многоэтапной обработкой элементов (например, когда вы последовательно вызываете некую цепочку вызовов к коллекции).</p><p>Последовательность — это итерируемый тип, с которым можно работать, не создавая ненужных промежуточных коллекций, выполняя все применимые операции над каждым элементом перед переходом к следующему.</p><p><strong>Отличия коллекции от последовательности:</strong></p><ol><li><p>Если обработка <code>Iterable</code> состоит из нескольких шагов, то они выполняются <strong>немедленно</strong>: при завершении обработки каждый шаг возвращает свой результат — <strong>промежуточную коллекцию</strong>. Следующий шаг выполняется для этой промежуточной коллекции. <code>Sequence</code> же по возможности выполняет обработку <strong>"лениво"</strong> — фактически вычисления происходят только тогда, когда запрашивается результат выполнения всех шагов.</p></li><li><p><code>Iterable</code> завершает каждый шаг для всей коллекции, а затем переходит к следующему шагу. <code>Sequence</code> выполняет все шаги один за другим для каждого отдельного элемента.</p></li><li><p><code>Iterable</code> могут занимать больше памяти, чем последовательности, так как они вычисляют все элементы сразу и хранят их в памяти. <code>Sequence</code> вычисляют элементы при необходимости и не хранят все элементы в памяти.</p></li></ol><p><strong>Зачем вообще нужны Sequences?</strong></p><p>Для оптимизации производительности в работе с большими коллекциями (от 1000). Фишка в том, что значения в таких коллекциях создаются только по мере необходимости, не инициализируя их заранее. Из-за этого нет доступа к содержимому по индексу, а также не контролируется размер.</p><p>Последовательности позволяют избежать создания промежуточных результатов для каждого шага, тем самым повышая производительность всей цепочки вызовов. Однако "ленивый" характер последовательностей добавляет некоторые накладные расходы, которые могут быть значительными при обработке небольших коллекций или при выполнении более простых вычислений. Следовательно, вы должны рассмотреть, а затем самостоятельно решить, что вам подходит больше — <code>Sequence</code> или <code>Iterable</code>.</p><p>Статья о разнице между <code>Sequences</code> и <code>Iterable</code> на примере сортировки карандашей (с разъяснениями и картинками): <a href="https://typealias.com/guides/kotlin-sequences-illustrated-guide/" rel="noopener noreferrer nofollow">typealias.com</a></p><figure class="full-width "><img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/23d/a0e/fba/23da0efba9d5fb49921b3e3c760f4d1d.png" alt="" title="" width="1200" height="699" data-src="https://habrastorage.org/getpro/habr/upload_files/23d/a0e/fba/23da0efba9d5fb49921b3e3c760f4d1d.png"/></figure><p>Создать последовательность можно через функцию <code>sequenceOf()</code>:</p><pre><code class="kotlin">val cats = sequenceOf("Барсик", "Мурзик", "Рыжик", "Васька")</code></pre><p>Если у вас есть уже готовые списки <code>List</code> или множества <code>Set</code>, то их можно преобразовать в последовательность через <code>asSequence()</code>.</p><pre><code class="kotlin">val cats = listOf("Барсик", "Мурзик", "Рыжик", "Васька")
val catsSequence = cats.asSequence()</code></pre><p><strong>Подробнее о Sequences:</strong> <a href="http://developer.alexanderklimov.ru/android/kotlin/sequence.php" rel="noopener noreferrer nofollow">alexanderklimov.ru</a>, <a href="https://bimlibik.github.io/posts/kotlin-collections/#sequences" rel="noopener noreferrer nofollow">bimlibik.github.io</a>, <a href="https://metanit.com/kotlin/tutorial/7.6.php" rel="noopener noreferrer nofollow">metanit.com</a></p><a class="anchor" name="%D0%9F%D1%80%D0%BE%D0%BC%D0%B5%D0%B6%D1%83%D1%82%D0%BE%D1%87%D0%BD%D1%8B%D0%B5%20(intermediate)%20%D0%B8%20%D1%82%D0%B5%D1%80%D0%BC%D0%B8%D0%BD%D0%B0%D0%BB%D1%8C%D0%BD%D1%8B%D0%B5%20(terminal)%20%D0%BE%D0%BF%D0%B5%D1%80%D0%B0%D1%86%D0%B8%D0%B8%20%D0%B2%20Sequences" id="Промежуточные (intermediate) и терминальные (terminal) операции в Sequences"></a><p><a href="#%D0%A1%D0%BF%D0%B8%D1%81%D0%BE%D0%BA%20%D1%82%D0%B5%D0%BC%20%D0%B8%20%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81%D0%BE%D0%B2" rel="noopener noreferrer nofollow">—————— ↑↑↑ к списку вопросов ↑↑↑ ——————</a></p><h2>Промежуточные (intermediate) и терминальные (terminal) операции в Sequences</h2><p><code>Sequence</code> представляет собой последовательность элементов, которые можно обрабатывать по одному или несколько штук сразу. Обработка элементов <code>Sequence</code> происходит с помощью функций высшего порядка, которые называются операциями.</p><p>Операции над <code>Sequence</code> можно разделить на две категории: промежуточные (<strong>intermediate</strong>) и терминальные (<strong>terminal</strong>).</p><p><strong>Промежуточные операции (intermediate)</strong> — это операции, которые <strong>возвращают новую </strong><code>Sequence</code>.</p><p>Они не выполняются немедленно, а лишь формируют новую последовательность элементов на основе исходной. Промежуточные операции не приводят к запуску вычислений, а готовят данные для последующих операций. Примеры:</p><ul><li><p><code>filter(predicate: (T) -&gt; Boolean)</code>: фильтрует элементы по заданному условию и возвращает новую <code>Sequence</code></p></li><li><p><code>map(transform: (T) -&gt; R)</code>: преобразует каждый элемент в новый элемент типа <code>R</code> и возвращает новую <code>Sequence</code></p></li><li><p><code>sortedBy(selector: (T) -&gt; R?)</code>: сортирует элементы по заданному ключу и возвращает новую <code>Sequence</code></p></li></ul><p><strong>Терминальные операции (terminal)</strong> — это операции, которые выполняются немедленно и <strong>возвращают результат (не </strong><code>Sequence</code>).</p><p>Терминальные операции могут быть вызваны только <strong>после всех промежуточных операций</strong>, так как они завершают последовательность и начинают вычисление результатов на основе всей последовательности, полученной после выполнения всех промежуточных операций. Если же терминальная операция вызывается до выполнения всех промежуточных операций, то она не будет иметь доступа к полной последовательности и вернет неполный результат. Примеры:</p><ul><li><p><code>toList()</code>: преобразует <code>Sequence</code> в список</p></li><li><p><code>toSet()</code>: преобразует <code>Sequence</code> в множество</p></li><li><p><code>count()</code>: возвращает количество элементов в <code>Sequence</code></p></li><li><p><code>forEach(action: (T) -&gt; Unit)</code>: выполняет действие для каждого элемента <code>Sequence</code></p></li></ul><p><strong>ВАЖНО:</strong> вычисления запускаются только при вызове терминальной функции (до этого момента никаких вычислений не производится).</p><p><a href="https://habr.com/ru/post/721084/" rel="noopener noreferrer nofollow">Вопросы и ответы для собеседования по Kotlin. Часть 1</a><br/><a href="https://habr.com/ru/post/722686/" rel="noopener noreferrer nofollow">Вопросы и ответы для собеседования по Kotlin. Часть 2</a> <br/><a href="https://habr.com/ru/articles/728742/" rel="noopener noreferrer nofollow">Вопросы и ответы для собеседования по Kotlin. Часть 3</a> — вы находитесь здесь<br/><a href="https://habr.com/ru/articles/736392/" rel="noopener noreferrer nofollow">Вопросы и ответы для собеседования по Kotlin. Часть 4</a>   </p></div></div></div><!----><!----></div><!----><!----></div><!--]--><!----><div class="tm-article-presenter__meta" data-test-id="article-meta-links"><div class="tm-separated-list tm-article-presenter__meta-list"><span class="tm-separated-list__title">Теги:</span><ul class="tm-separated-list__list"><!--[--><li class="tm-separated-list__item"><!--[--><a href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[kotlin]" class="tm-tags-list__link"><span>kotlin</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[%D1%81%D0%BE%D0%B1%D0%B5%D1%81%D0%B5%D0%B4%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5+%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81%D1%8B]" class="tm-tags-list__link"><span>собеседование вопросы</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[%D0%BF%D0%BE%D0%B4%D0%B3%D0%BE%D1%82%D0%BE%D0%B2%D0%BA%D0%B0+%D0%BA+%D1%81%D0%BE%D0%B1%D0%B5%D1%81%D0%B5%D0%B4%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8E]" class="tm-tags-list__link"><span>подготовка к собеседованию</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[%D0%BA%D0%BE%D1%82%D0%BB%D0%B8%D0%BD]" class="tm-tags-list__link"><span>котлин</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[%D0%B0%D0%BD%D0%B4%D1%80%D0%BE%D0%B8%D0%B4]" class="tm-tags-list__link"><span>андроид</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[faq]" class="tm-tags-list__link"><span>faq</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[%D1%83%D1%87%D0%B5%D0%B1%D0%BD%D1%8B%D0%B5+%D0%BC%D0%B0%D1%82%D0%B5%D1%80%D0%B8%D0%B0%D0%BB%D1%8B]" class="tm-tags-list__link"><span>учебные материалы</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[android+development]" class="tm-tags-list__link"><span>android development</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81%D1%8B+%D0%B4%D0%BB%D1%8F+%D1%81%D0%BE%D0%B1%D0%B5%D1%81%D0%B5%D0%B4%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F]" class="tm-tags-list__link"><span>вопросы для собеседования</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[android]" class="tm-tags-list__link"><span>android</span></a><!--]--></li><!--]--><!----></ul></div><div class="tm-separated-list tm-article-presenter__meta-list"><span class="tm-separated-list__title">Хабы:</span><ul class="tm-separated-list__list"><!--[--><li class="tm-separated-list__item"><!--[--><a href="/ru/hubs/programming/" class="tm-hubs-list__link"><!--[--><span>Программирование</span><!--]--></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a href="/ru/hubs/java/" class="tm-hubs-list__link"><!--[--><span>Java</span><!--]--></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a href="/ru/hubs/android_dev/" class="tm-hubs-list__link"><!--[--><span>Разработка под Android</span><!--]--></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a href="/ru/hubs/kotlin/" class="tm-hubs-list__link"><!--[--><span>Kotlin</span><!--]--></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a href="/ru/hubs/study/" class="tm-hubs-list__link"><!--[--><span>Учебный процесс в IT</span><!--]--></a><!--]--></li><!--]--><!----></ul></div></div><!----><!--]--></article><!--]--></div><!----></div><div style="" class="tm-article-sticky-panel" data-test-id="article-sticky-panel"><div class="tm-data-icons tm-data-icons tm-data-icons_space-big tm-article-sticky-panel__icons" data-test-id="article-stats-icons"><div class="tm-article-rating tm-data-icons__item"><div class="tm-votes-meter tm-article-rating__votes-switcher"><svg class="tm-svg-img tm-votes-meter__icon tm-votes-meter__icon tm-votes-meter__icon_appearance-article" height="24" width="24"><title>Всего голосов 7: ↑7 и ↓0</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-rating"></use></svg><span class="tm-votes-meter__value tm-votes-meter__value_positive tm-votes-meter__value_appearance-article tm-votes-meter__value_rating tm-votes-meter__value" data-test-id="votes-meter-value" title="Всего голосов 7: ↑7 и ↓0">+7</span></div><!--teleport start--><!--teleport end--><!----></div><!----><!----><button class="bookmarks-button tm-data-icons__item" title="Добавить в закладки" type="button"><span class="tm-svg-icon__wrapper bookmarks-button__icon"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Добавить в закладки</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-favorite"></use></svg></span><span class="bookmarks-button__counter" title="Количество пользователей, добавивших публикацию в закладки">97</span></button><div class="tm-sharing tm-data-icons__item" title="Поделиться"><button class="tm-sharing__button" type="button"><svg viewbox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" class="tm-sharing__icon"><path fill="currentColor" d="M13.8 13.8V18l7.2-6.6L13.8 5v3.9C5 8.9 3 18.6 3 18.6c2.5-4.4 6-4.8 10.8-4.8z"></path></svg></button><!--teleport start--><!--teleport end--></div><div class="tm-article-comments-counter-link tm-data-icons__item" title="Читать комментарии"><a href="/ru/articles/728742/comments/" class="tm-article-comments-counter-link__link" data-test-id="counter-comments"><!--[--><svg class="tm-svg-img tm-article-comments-counter-link__icon" height="24" width="24"><title>Комментарии</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-comments"></use></svg><span class="tm-article-comments-counter-link__value">3</span><!--]--></a><!----></div><!--[--><!--[--><!--[--><!----><!--]--><!--]--><!--]--><!--teleport start--><!--teleport end--><!----></div></div></div><!--[--><!--]--><div class="tm-article-presenter__footer"><!--[--><!--[--><div class="tm-article-blocks"><!----><!--[--><section class="tm-block tm-block tm-block_spacing-bottom"><!----><!--[--><div class="tm-block__body tm-block__body tm-block__body_variant-balanced"><!--[--><div class="tm-article-author" data-test-id="article-author-info" data-async-called="true"><!--[--><!--]--><div class="tm-user-card tm-user-card tm-user-card_variant-article tm-article-author__user-card" data-async-called="true"><div class="tm-user-card__info-container"><div class="tm-user-card__header"><div class="tm-user-card__header-data"><a href="/ru/users/dmt_ovs/" class="tm-user-card__userpic tm-user-card__userpic_size-40"><div class="tm-entity-image"><img alt="" class="tm-entity-image__pic" src="//habrastorage.org/getpro/habr/avatars/84b/afb/1c1/84bafb1c17208f6b124be4429e2a8104.png"></div></a><div class="tm-user-card__meta"><div class="tm-counter-container tm-karma tm-karma" title=" 32 голоса "><div class="tm-counter-container__header"><!--[--><div class="karma-display positive" data-v-7635202e>24</div><!----><!--]--></div><div class="tm-counter-container__footer"><!--[--><div class="tm-karma__text">Карма</div><!--teleport start--><!--teleport end--><!--]--></div></div><div class="tm-counter-container" title="Рейтинг пользователя"><div class="tm-counter-container__header"><!--[--><!--[--><!--]--><div class="tm-votes-lever tm-votes-lever tm-votes-lever_appearance-rating"><!----><div class="tm-votes-lever__score tm-votes-lever__score_appearance-rating tm-votes-lever__score"><!--[--><span><span class="tm-votes-lever__score-counter tm-votes-lever__score-counter_rating tm-votes-lever__score-counter" data-test-id="votes-score-counter">0</span></span><!--]--></div><!----></div><!--]--></div><div class="tm-counter-container__footer"><!--[--><span class="tm-rating__text tm-rating__text">Рейтинг</span><!--]--></div></div></div></div></div><div class="tm-user-card__info tm-user-card__info_variant-article tm-user-card__info"><div class="tm-user-card__title tm-user-card__title_variant-article tm-user-card__title"><span class="tm-user-card__name tm-user-card__name_variant-article tm-user-card__name">Дмитрий</span><a href="/ru/users/dmt_ovs/" class="tm-user-card__nickname tm-user-card__nickname tm-user-card__nickname_variant-article"> @dmt_ovs</a><!----></div><p class="tm-user-card__short-info tm-user-card__short-info_variant-article tm-user-card__short-info" data-test-id="user-card-speciality">(-_-)</p></div></div><!----><div class="tm-user-card__buttons tm-user-card__buttons_variant-article tm-user-card__buttons"><!----><div class="tm-user-card__button"><div class="tm-button-follow tm-user-card__button-follow"><!----><button class="tm-button-follow__button tm-button-follow__button_big" data-test-id="follow-button" type="button">Подписаться</button></div></div><!----><div class="tm-user-card__button tm-user-card__button_write" data-test-id="user-card-conversations"><svg class="tm-svg-img tm-user-card__button-icon" height="16" width="16"><title>Отправить сообщение</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#mail"></use></svg></div><!----></div><!----></div><div class="tm-article-author__user-contacts" data-test-id="author-contacts"><!----><!----><!----></div></div><!--]--></div><!--]--><!----></section><!----><!--[--><div class="banner-wrapper leaderboard tm-page-article__banner" style="--467224fc:200px;--58ff5eba:auto;" data-v-ad758baa><!--[--><div class="placeholder-wrapper placeholder" data-v-ad758baa><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><div class="adfox-banner-placeholder leaderboard" data-v-12f7bcca><div class="image loads" data-v-12f7bcca></div><div class="lines" data-v-12f7bcca><div class="line loads" data-v-12f7bcca></div><div class="line loads" data-v-12f7bcca></div><div class="line loads" data-v-12f7bcca></div></div></div><!----></div><div id="adfox_164725660339535756" class="tm-adfox-banner" data-v-ad758baa></div><!--]--></div><!--]--><!--]--><div class="tm-article-blocks__comments"><div id="publication-comments" class="tm-article-page-comments"><div><!--[--><div class="tm-article-comments-counter-link tm-article-comments-counter-button"><a href="/ru/articles/728742/comments/" class="tm-article-comments-counter-link__link tm-article-comments-counter-link__link_button-style" data-test-id="counter-comments"><!--[--><svg class="tm-svg-img tm-article-comments-counter-link__icon tm-article-comments-counter-link__icon_contrasted" height="24" width="24"><title>Комментарии</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-comments"></use></svg><span class="tm-article-comments-counter-link__value tm-article-comments-counter-link__value_contrasted"> Комментарии 3 </span><!--]--></a><!----></div><!--]--></div></div></div><!--[--><!--[--><!--]--><section class="tm-block tm-block tm-block_spacing-bottom"><header class="tm-block__header tm-block__header tm-block__header_variant-borderless"><div class="tm-block__header-container"><h2 class="tm-block__title tm-block__title tm-block__title_variant-large">Публикации</h2><!--[--><!--]--></div><!----></header><!--[--><div class="tm-block__body tm-block__body tm-block__body_variant-condensed-slim"><!--[--><!--[--><div class="tm-tabs tm-tabs"><div class=""><!--[--><span class="tm-tabs__tab-item"><button class="tm-tabs__tab-link tm-tabs__tab-link_active tm-tabs__tab-link_slim tm-tabs__tab-link">Лучшие за сутки</button></span><span class="tm-tabs__tab-item"><button class="tm-tabs__tab-link tm-tabs__tab-link_slim tm-tabs__tab-link">Похожие</button></span><!--]--></div><!----></div><div class="similar-and-daily__tab-view"><div class="daily-articles-list"><ul class="tm-article-card-list"><!--[--><!--]--><div class="tm-bordered-card"><!----><!--[--><!--]--></div></ul><div class="daily-articles-block__button-container"><button class="btn btn_transparent btn_small tm-button tm-button_color-horizon" type="button"><!--[--><!--[-->Показать лучшие за всё время<!--]--><!--]--></button></div></div><!----></div><!--]--><!--]--></div><!--]--><!----></section><!--[--><section class="tm-block tm-block tm-block_spacing-around tm-stories-block" data-navigatable tabindex="0" data-async-called="true"><header class="tm-block__header tm-block__header"><div class="tm-block__header-container"><h2 class="tm-block__title tm-block__title">Истории</h2><!--[--><!--]--></div><!----></header><!--[--><div class="tm-block__body tm-block__body tm-block__body_variant-equal"><!--[--><div class="tm-stories-empty"><!--[--><div class="tm-stories-card-empty"><div class="tm-stories-card-empty__image"></div><div class="tm-stories-card-empty__title"><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div></div></div><div class="tm-stories-card-empty"><div class="tm-stories-card-empty__image"></div><div class="tm-stories-card-empty__title"><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div></div></div><div class="tm-stories-card-empty"><div class="tm-stories-card-empty__image"></div><div class="tm-stories-card-empty__title"><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div></div></div><div class="tm-stories-card-empty"><div class="tm-stories-card-empty__image"></div><div class="tm-stories-card-empty__title"><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div></div></div><div class="tm-stories-card-empty"><div class="tm-stories-card-empty__image"></div><div class="tm-stories-card-empty__title"><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div></div></div><div class="tm-stories-card-empty"><div class="tm-stories-card-empty__image"></div><div class="tm-stories-card-empty__title"><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div></div></div><!--]--></div><!----><!--]--></div><!--]--><!----></section><div class="placeholder-wrapper"><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><div class="tm-placeholder-inset tm-placeholder-courses"><div class="tm-placeholder-inset__header"><div class="tm-placeholder__line tm-placeholder__line_inset-header loads"></div></div><div class="tm-placeholder-inset__body"><ul class="tm-placeholder-list"><!--[--><li class="tm-placeholder-list__item tm-placeholder-list__item_inset"><div class="tm-placeholder-list__title-container"><div class="tm-placeholder__company-avatar"></div><div class="tm-placeholder__line tm-placeholder__line_item-title loads"></div></div><div class="tm-project-block-items__properties"><!--[--><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><!--]--></div></li><li class="tm-placeholder-list__item tm-placeholder-list__item_inset"><div class="tm-placeholder-list__title-container"><div class="tm-placeholder__company-avatar"></div><div class="tm-placeholder__line tm-placeholder__line_item-title loads"></div></div><div class="tm-project-block-items__properties"><!--[--><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><!--]--></div></li><li class="tm-placeholder-list__item tm-placeholder-list__item_inset"><div class="tm-placeholder-list__title-container"><div class="tm-placeholder__company-avatar"></div><div class="tm-placeholder__line tm-placeholder__line_item-title loads"></div></div><div class="tm-project-block-items__properties"><!--[--><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><!--]--></div></li><li class="tm-placeholder-list__item tm-placeholder-list__item_inset"><div class="tm-placeholder-list__title-container"><div class="tm-placeholder__company-avatar"></div><div class="tm-placeholder__line tm-placeholder__line_item-title loads"></div></div><div class="tm-project-block-items__properties"><!--[--><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><!--]--></div></li><li class="tm-placeholder-list__item tm-placeholder-list__item_inset"><div class="tm-placeholder-list__title-container"><div class="tm-placeholder__company-avatar"></div><div class="tm-placeholder__line tm-placeholder__line_item-title loads"></div></div><div class="tm-project-block-items__properties"><!--[--><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><!--]--></div></li><!--]--></ul></div><div class="tm-placeholder-inset__footer"><div class="tm-placeholder__line tm-placeholder__line_inset-footer loads"></div></div></div><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----></div><!--]--><!----><!--[--><div><div class="placeholder-wrapper"><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><div class="tm-placeholder-promo"><div class="tm-placeholder-promo__header"><div class="tm-placeholder__line tm-placeholder__line_promo-title"></div></div><div class="tm-placeholder-promo__body"><div class="tm-placeholder-promo__posts"><div class="tm-placeholder-promo__post"><div class="tm-placeholder-promo__image"></div><div class="tm-placeholder__line tm-placeholder__line_post-title"></div></div><div class="tm-placeholder-promo__post"><div class="tm-placeholder-promo__image"></div><div class="tm-placeholder__line tm-placeholder__line_post-title"></div></div><div class="tm-placeholder-promo__post"><div class="tm-placeholder-promo__image"></div><div class="tm-placeholder__line tm-placeholder__line_post-title"></div></div></div><div class="tm-placeholder-promo__dots"><div class="tm-placeholder-promo__dot"></div><div class="tm-placeholder-promo__dot"></div><div class="tm-placeholder-promo__dot"></div></div></div></div><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----></div></div><section class="tm-block tm-block tm-block_spacing-top" data-async-called="true"><header class="tm-block__header tm-block__header"><div class="tm-block__header-container"><h2 class="tm-block__title tm-block__title">Работа</h2><!--[--><!--]--></div><!----></header><!--[--><div class="tm-block__body tm-block__body"><!--[--><!--[--><div class="tm-vacancies-block__item"><a class="tm-vacancies-block__vacancy-title" href="https://career.habr.com/vacancies/java_developer" target="_blank">Java разработчик</a><div class="tm-vacancies-block__vacancies-count">211
    вакансий</div></div><div class="tm-vacancies-block__item"><a class="tm-vacancies-block__vacancy-title" href="https://career.habr.com/vacancies/android_developer" target="_blank">Android разработчик </a><div class="tm-vacancies-block__vacancies-count">10
    вакансий</div></div><!--]--><!--]--></div><!--]--><footer class="tm-block__footer"><!--[--><a class="tm-block-extralink" href="https://career.habr.com/catalog">Все вакансии</a><!--]--></footer></section><section class="tm-block tm-block tm-block_spacing-around tm-events-block" data-navigatable tabindex="0" data-async-called="true"><header class="tm-block__header tm-block__header tm-block__header_variant-borderless-large"><div class="tm-block__header-container"><h2 class="tm-block__title tm-block__title">Ближайшие события</h2><!--[--><!--]--></div><!----></header><!--[--><div class="tm-block__body tm-block__body tm-block__body_variant-equal"><!--[--><div class="swiper-container tm-events-widget" style="--swiper-space-between:22px;"><div class="swiper-wrapper"><!--[--><!--[--><div class="swiper-slide"><!--[--><section class="tm-block tm-block tm-block_spacing-none" id="588" tabindex="-1"><!----><!--[--><div class="tm-event-card tm-event-card_is-widget tm-event-card_responsive"><a href="/ru/events/588/" class=""><img alt class="tm-event-card__image" data-src="https://habrastorage.org/getpro/habr/upload_files/f79/1fc/79d/f791fc79d0d9fdda84397ed0c0717764.png" loading="lazy" src="https://habrastorage.org/r/w390/getpro/habr/upload_files/f79/1fc/79d/f791fc79d0d9fdda84397ed0c0717764.png" srcset="https://habrastorage.org/r/w390/getpro/habr/upload_files/f79/1fc/79d/f791fc79d0d9fdda84397ed0c0717764.png, https://habrastorage.org/getpro/habr/upload_files/f79/1fc/79d/f791fc79d0d9fdda84397ed0c0717764.png 2x"></a><!----><div class="tm-event-card__info"><div class="tm-event-card__date"><!----><div class="tm-event-card__day"><span>17  февраля   – 24  марта  </span></div></div><a href="/ru/events/588/" class="tm-event-card__title-link"><span>Конкурс «Снежный код» от Хекслета. Три гранта на бесплатное 10-месячное обучение</span></a><div class="tm-event-card__places"><div class="tm-event-card__places-list"><!--[--><span class="tm-event-card__places-item"><span>Онлайн</span><!----></span><!--]--></div></div></div><div class="tm-event-card__footer tm-event-card__footer_widget"><a href="/ru/events/#588" class="tm-event-card__link">Больше событий в календаре</a><div class="tm-event-card__categories"><!--[--><div class="event-category__label event-category__label_type-development"><span>Разработка</span></div><!--]--></div></div></div><!--]--><!----></section><!--]--></div><div class="swiper-slide"><!--[--><section class="tm-block tm-block tm-block_spacing-none" id="596" tabindex="-1"><!----><!--[--><div class="tm-event-card tm-event-card_is-widget tm-event-card_responsive"><a href="/ru/events/596/" class=""><img alt class="tm-event-card__image" data-src="https://habrastorage.org/getpro/habr/upload_files/b14/cd3/772/b14cd3772bc67698c8fbfd846e23824a.png" loading="lazy" src="https://habrastorage.org/r/w390/getpro/habr/upload_files/b14/cd3/772/b14cd3772bc67698c8fbfd846e23824a.png" srcset="https://habrastorage.org/r/w390/getpro/habr/upload_files/b14/cd3/772/b14cd3772bc67698c8fbfd846e23824a.png, https://habrastorage.org/getpro/habr/upload_files/b14/cd3/772/b14cd3772bc67698c8fbfd846e23824a.png 2x"></a><!----><div class="tm-event-card__info"><div class="tm-event-card__date"><!----><div class="tm-event-card__day"><span>20  марта  </span></div></div><a href="/ru/events/596/" class="tm-event-card__title-link"><span>Офлайн-конференция Хабр х K-team: как удерживать таланты в 2025 году</span></a><div class="tm-event-card__places"><div class="tm-event-card__places-list"><!--[--><span class="tm-event-card__places-item"><span>Москва</span><!----></span><!--]--></div></div></div><div class="tm-event-card__footer tm-event-card__footer_widget"><a href="/ru/events/#596" class="tm-event-card__link">Больше событий в календаре</a><div class="tm-event-card__categories"><!--[--><div class="event-category__label event-category__label_type-other"><span>Другое</span></div><!--]--></div></div></div><!--]--><!----></section><!--]--></div><div class="swiper-slide"><!--[--><section class="tm-block tm-block tm-block_spacing-none" id="604" tabindex="-1"><!----><!--[--><div class="tm-event-card tm-event-card_is-widget tm-event-card_responsive"><a href="/ru/events/604/" class=""><img alt class="tm-event-card__image" data-src="https://habrastorage.org/getpro/habr/upload_files/733/9ef/194/7339ef1945f3ee6906daf89db79829d4.png" loading="lazy" src="https://habrastorage.org/r/w390/getpro/habr/upload_files/733/9ef/194/7339ef1945f3ee6906daf89db79829d4.png" srcset="https://habrastorage.org/r/w390/getpro/habr/upload_files/733/9ef/194/7339ef1945f3ee6906daf89db79829d4.png, https://habrastorage.org/getpro/habr/upload_files/733/9ef/194/7339ef1945f3ee6906daf89db79829d4.png 2x"></a><!----><div class="tm-event-card__info"><div class="tm-event-card__date"><!----><div class="tm-event-card__day"><span>20  марта  </span></div></div><a href="/ru/events/604/" class="tm-event-card__title-link"><span>IX HappyWorkForum | Аутентичность и ментальное здоровье персонала</span></a><div class="tm-event-card__places"><div class="tm-event-card__places-list"><!--[--><span class="tm-event-card__places-item"><span>Москва</span><span class="tm-event-card__places-separator"> • </span></span><span class="tm-event-card__places-item"><span>Онлайн</span><!----></span><!--]--></div></div></div><div class="tm-event-card__footer tm-event-card__footer_widget"><a href="/ru/events/#604" class="tm-event-card__link">Больше событий в календаре</a><div class="tm-event-card__categories"><!--[--><div class="event-category__label event-category__label_type-other"><span>Другое</span></div><!--]--></div></div></div><!--]--><!----></section><!--]--></div><div class="swiper-slide"><!--[--><section class="tm-block tm-block tm-block_spacing-none" id="612" tabindex="-1"><!----><!--[--><div class="tm-event-card tm-event-card_is-widget tm-event-card_responsive"><a href="/ru/events/612/" class=""><img alt class="tm-event-card__image" data-src="https://habrastorage.org/getpro/habr/upload_files/38f/10d/f4c/38f10df4c7f9d7c5d4610fe426af0ab4.png" loading="lazy" src="https://habrastorage.org/r/w390/getpro/habr/upload_files/38f/10d/f4c/38f10df4c7f9d7c5d4610fe426af0ab4.png" srcset="https://habrastorage.org/r/w390/getpro/habr/upload_files/38f/10d/f4c/38f10df4c7f9d7c5d4610fe426af0ab4.png, https://habrastorage.org/getpro/habr/upload_files/38f/10d/f4c/38f10df4c7f9d7c5d4610fe426af0ab4.png 2x"></a><!----><div class="tm-event-card__info"><div class="tm-event-card__date"><!----><div class="tm-event-card__day"><span>20  марта  </span></div></div><a href="/ru/events/612/" class="tm-event-card__title-link"><span>Вебинар «Мастерская бюджета: как управлять затратами на облачные ресурсы»</span></a><div class="tm-event-card__places"><div class="tm-event-card__places-list"><!--[--><span class="tm-event-card__places-item"><span>Онлайн</span><!----></span><!--]--></div></div></div><div class="tm-event-card__footer tm-event-card__footer_widget"><a href="/ru/events/#612" class="tm-event-card__link">Больше событий в календаре</a><div class="tm-event-card__categories"><!--[--><div class="event-category__label event-category__label_type-development"><span>Разработка</span></div><div class="event-category__label event-category__label_type-admin"><span>Администрирование</span></div><!--]--></div></div></div><!--]--><!----></section><!--]--></div><div class="swiper-slide"><!--[--><section class="tm-block tm-block tm-block_spacing-none" id="616" tabindex="-1"><!----><!--[--><div class="tm-event-card tm-event-card_is-widget tm-event-card_responsive"><a href="/ru/events/616/" class=""><img alt class="tm-event-card__image" data-src="https://habrastorage.org/getpro/habr/upload_files/523/7fb/13a/5237fb13ad7fb6fb483c49691aaec836.png" loading="lazy" src="https://habrastorage.org/r/w390/getpro/habr/upload_files/523/7fb/13a/5237fb13ad7fb6fb483c49691aaec836.png" srcset="https://habrastorage.org/r/w390/getpro/habr/upload_files/523/7fb/13a/5237fb13ad7fb6fb483c49691aaec836.png, https://habrastorage.org/getpro/habr/upload_files/523/7fb/13a/5237fb13ad7fb6fb483c49691aaec836.png 2x"></a><!----><div class="tm-event-card__info"><div class="tm-event-card__date"><!----><div class="tm-event-card__day"><span>21  марта  </span></div></div><a href="/ru/events/616/" class="tm-event-card__title-link"><span>Бизнес-конференция «Digital Brand Day 2025: Орбита 2025»</span></a><div class="tm-event-card__places"><div class="tm-event-card__places-list"><!--[--><span class="tm-event-card__places-item"><span>Москва</span><!----></span><!--]--></div></div></div><div class="tm-event-card__footer tm-event-card__footer_widget"><a href="/ru/events/#616" class="tm-event-card__link">Больше событий в календаре</a><div class="tm-event-card__categories"><!--[--><div class="event-category__label event-category__label_type-marketing"><span>Маркетинг</span></div><div class="event-category__label event-category__label_type-other"><span>Другое</span></div><!--]--></div></div></div><!--]--><!----></section><!--]--></div><div class="swiper-slide"><!--[--><section class="tm-block tm-block tm-block_spacing-none" id="608" tabindex="-1"><!----><!--[--><div class="tm-event-card tm-event-card_is-widget tm-event-card_responsive"><a href="/ru/events/608/" class=""><img alt class="tm-event-card__image" data-src="https://habrastorage.org/getpro/habr/upload_files/8fd/e04/ddd/8fde04ddd9ba3f6bcd515aa6209f96b7.png" loading="lazy" src="https://habrastorage.org/r/w390/getpro/habr/upload_files/8fd/e04/ddd/8fde04ddd9ba3f6bcd515aa6209f96b7.png" srcset="https://habrastorage.org/r/w390/getpro/habr/upload_files/8fd/e04/ddd/8fde04ddd9ba3f6bcd515aa6209f96b7.png, https://habrastorage.org/getpro/habr/upload_files/8fd/e04/ddd/8fde04ddd9ba3f6bcd515aa6209f96b7.png 2x"></a><!----><div class="tm-event-card__info"><div class="tm-event-card__date"><!----><div class="tm-event-card__day"><span>27  марта  </span></div></div><a href="/ru/events/608/" class="tm-event-card__title-link"><span>Вебинар «Контент-маркетинг здорового человека: как привлечь внимание аудитории»</span></a><div class="tm-event-card__places"><div class="tm-event-card__places-list"><!--[--><span class="tm-event-card__places-item"><span>Онлайн</span><!----></span><!--]--></div></div></div><div class="tm-event-card__footer tm-event-card__footer_widget"><a href="/ru/events/#608" class="tm-event-card__link">Больше событий в календаре</a><div class="tm-event-card__categories"><!--[--><div class="event-category__label event-category__label_type-marketing"><span>Маркетинг</span></div><div class="event-category__label event-category__label_type-other"><span>Другое</span></div><!--]--></div></div></div><!--]--><!----></section><!--]--></div><div class="swiper-slide"><!--[--><section class="tm-block tm-block tm-block_spacing-none" id="606" tabindex="-1"><!----><!--[--><div class="tm-event-card tm-event-card_is-widget tm-event-card_responsive"><a href="/ru/events/606/" class=""><img alt class="tm-event-card__image" data-src="https://habrastorage.org/getpro/habr/upload_files/b99/62a/b24/b9962ab2439c6edc80f96d7f0a847c72.png" loading="lazy" src="https://habrastorage.org/r/w390/getpro/habr/upload_files/b99/62a/b24/b9962ab2439c6edc80f96d7f0a847c72.png" srcset="https://habrastorage.org/r/w390/getpro/habr/upload_files/b99/62a/b24/b9962ab2439c6edc80f96d7f0a847c72.png, https://habrastorage.org/getpro/habr/upload_files/b99/62a/b24/b9962ab2439c6edc80f96d7f0a847c72.png 2x"></a><!----><div class="tm-event-card__info"><div class="tm-event-card__date"><!----><div class="tm-event-card__day"><span>31  марта  </span></div></div><a href="/ru/events/606/" class="tm-event-card__title-link"><span>Серия вебинаров «DevOps Middle: AvitoTech vs ecom.tech»</span></a><div class="tm-event-card__places"><div class="tm-event-card__places-list"><!--[--><span class="tm-event-card__places-item"><span>Онлайн</span><!----></span><!--]--></div></div></div><div class="tm-event-card__footer tm-event-card__footer_widget"><a href="/ru/events/#606" class="tm-event-card__link">Больше событий в календаре</a><div class="tm-event-card__categories"><!--[--><div class="event-category__label event-category__label_type-development"><span>Разработка</span></div><div class="event-category__label event-category__label_type-admin"><span>Администрирование</span></div><!--]--></div></div></div><!--]--><!----></section><!--]--></div><div class="swiper-slide"><!--[--><section class="tm-block tm-block tm-block_spacing-none" id="618" tabindex="-1"><!----><!--[--><div class="tm-event-card tm-event-card_is-widget tm-event-card_responsive"><a href="/ru/events/618/" class=""><img alt class="tm-event-card__image" data-src="https://habrastorage.org/getpro/habr/upload_files/f76/0f9/a82/f760f9a827b851a5eeca4802c643a91d.png" loading="lazy" src="https://habrastorage.org/r/w390/getpro/habr/upload_files/f76/0f9/a82/f760f9a827b851a5eeca4802c643a91d.png" srcset="https://habrastorage.org/r/w390/getpro/habr/upload_files/f76/0f9/a82/f760f9a827b851a5eeca4802c643a91d.png, https://habrastorage.org/getpro/habr/upload_files/f76/0f9/a82/f760f9a827b851a5eeca4802c643a91d.png 2x"></a><!----><div class="tm-event-card__info"><div class="tm-event-card__date"><!----><div class="tm-event-card__day"><span>3  апреля  </span></div></div><a href="/ru/events/618/" class="tm-event-card__title-link"><span>Реалити для разработчиков: узнайте, как строится новое публичное облако MWS</span></a><div class="tm-event-card__places"><div class="tm-event-card__places-list"><!--[--><span class="tm-event-card__places-item"><span>Онлайн</span><!----></span><!--]--></div></div></div><div class="tm-event-card__footer tm-event-card__footer_widget"><a href="/ru/events/#618" class="tm-event-card__link">Больше событий в календаре</a><div class="tm-event-card__categories"><!--[--><div class="event-category__label event-category__label_type-development"><span>Разработка</span></div><!--]--></div></div></div><!--]--><!----></section><!--]--></div><div class="swiper-slide"><!--[--><section class="tm-block tm-block tm-block_spacing-none" id="620" tabindex="-1"><!----><!--[--><div class="tm-event-card tm-event-card_is-widget tm-event-card_responsive"><a href="/ru/events/620/" class=""><img alt class="tm-event-card__image" data-src="https://habrastorage.org/getpro/habr/upload_files/eba/c37/879/ebac378793b959ebce42f41713e7b67f.jpg" loading="lazy" src="https://habrastorage.org/r/w390/getpro/habr/upload_files/eba/c37/879/ebac378793b959ebce42f41713e7b67f.jpg" srcset="https://habrastorage.org/r/w390/getpro/habr/upload_files/eba/c37/879/ebac378793b959ebce42f41713e7b67f.jpg, https://habrastorage.org/getpro/habr/upload_files/eba/c37/879/ebac378793b959ebce42f41713e7b67f.jpg 2x"></a><!----><div class="tm-event-card__info"><div class="tm-event-card__date"><!----><div class="tm-event-card__day"><span>3  апреля  </span></div></div><a href="/ru/events/620/" class="tm-event-card__title-link"><span>Открытая встреча «System Analysis Meetup SberHealth»</span></a><div class="tm-event-card__places"><div class="tm-event-card__places-list"><!--[--><span class="tm-event-card__places-item"><span>Москва</span><span class="tm-event-card__places-separator"> • </span></span><span class="tm-event-card__places-item"><span>Онлайн</span><!----></span><!--]--></div></div></div><div class="tm-event-card__footer tm-event-card__footer_widget"><a href="/ru/events/#620" class="tm-event-card__link">Больше событий в календаре</a><div class="tm-event-card__categories"><!--[--><div class="event-category__label event-category__label_type-analytics"><span>Аналитика</span></div><!--]--></div></div></div><!--]--><!----></section><!--]--></div><div class="swiper-slide"><!--[--><section class="tm-block tm-block tm-block_spacing-none" id="590" tabindex="-1"><!----><!--[--><div class="tm-event-card tm-event-card_is-widget tm-event-card_responsive"><a href="/ru/events/590/" class=""><img alt class="tm-event-card__image" data-src="https://habrastorage.org/getpro/habr/upload_files/31b/e68/295/31be6829578e7934fbc944396eb330b1.png" loading="lazy" src="https://habrastorage.org/r/w390/getpro/habr/upload_files/31b/e68/295/31be6829578e7934fbc944396eb330b1.png" srcset="https://habrastorage.org/r/w390/getpro/habr/upload_files/31b/e68/295/31be6829578e7934fbc944396eb330b1.png, https://habrastorage.org/getpro/habr/upload_files/31b/e68/295/31be6829578e7934fbc944396eb330b1.png 2x"></a><!----><div class="tm-event-card__info"><div class="tm-event-card__date"><!----><div class="tm-event-card__day"><span>10  апреля  </span></div></div><a href="/ru/events/590/" class="tm-event-card__title-link"><span>«GoCloud 2025» — масштабная IT-конференция про облака и AI</span></a><div class="tm-event-card__places"><div class="tm-event-card__places-list"><!--[--><span class="tm-event-card__places-item"><span>Москва</span><span class="tm-event-card__places-separator"> • </span></span><span class="tm-event-card__places-item"><span>Онлайн</span><!----></span><!--]--></div></div></div><div class="tm-event-card__footer tm-event-card__footer_widget"><a href="/ru/events/#590" class="tm-event-card__link">Больше событий в календаре</a><div class="tm-event-card__categories"><!--[--><div class="event-category__label event-category__label_type-development"><span>Разработка</span></div><div class="event-category__label event-category__label_type-admin"><span>Администрирование</span></div><div class="event-category__label event-category__label_type-management"><span>Менеджмент</span></div><!--]--></div></div></div><!--]--><!----></section><!--]--></div><div class="swiper-slide"><!--[--><section class="tm-block tm-block tm-block_spacing-none" id="516" tabindex="-1"><!----><!--[--><div class="tm-event-card tm-event-card_is-widget tm-event-card_responsive"><a href="/ru/events/516/" class=""><img alt class="tm-event-card__image" data-src="https://habrastorage.org/getpro/habr/upload_files/0e9/3a8/3ec/0e93a83ecea09f806d1df907ddb036a4.jpg" loading="lazy" src="https://habrastorage.org/r/w390/getpro/habr/upload_files/0e9/3a8/3ec/0e93a83ecea09f806d1df907ddb036a4.jpg" srcset="https://habrastorage.org/r/w390/getpro/habr/upload_files/0e9/3a8/3ec/0e93a83ecea09f806d1df907ddb036a4.jpg, https://habrastorage.org/getpro/habr/upload_files/0e9/3a8/3ec/0e93a83ecea09f806d1df907ddb036a4.jpg 2x"></a><!----><div class="tm-event-card__info"><div class="tm-event-card__date"><!----><div class="tm-event-card__day"><span>25 – 26  апреля  </span></div></div><a href="/ru/events/516/" class="tm-event-card__title-link"><span>IT-конференция Merge Tatarstan 2025</span></a><div class="tm-event-card__places"><div class="tm-event-card__places-list"><!--[--><span class="tm-event-card__places-item"><span>Казань</span><!----></span><!--]--></div></div></div><div class="tm-event-card__footer tm-event-card__footer_widget"><a href="/ru/events/#516" class="tm-event-card__link">Больше событий в календаре</a><div class="tm-event-card__categories"><!--[--><div class="event-category__label event-category__label_type-development"><span>Разработка</span></div><div class="event-category__label event-category__label_type-marketing"><span>Маркетинг</span></div><div class="event-category__label event-category__label_type-other"><span>Другое</span></div><!--]--></div></div></div><!--]--><!----></section><!--]--></div><div class="swiper-slide"><!--[--><section class="tm-block tm-block tm-block_spacing-none" id="610" tabindex="-1"><!----><!--[--><div class="tm-event-card tm-event-card_is-widget tm-event-card_responsive"><a href="/ru/events/610/" class=""><img alt class="tm-event-card__image" data-src="https://habrastorage.org/getpro/habr/upload_files/652/12d/998/65212d998fb4939d9787bd9c726d2acb.png" loading="lazy" src="https://habrastorage.org/r/w390/getpro/habr/upload_files/652/12d/998/65212d998fb4939d9787bd9c726d2acb.png" srcset="https://habrastorage.org/r/w390/getpro/habr/upload_files/652/12d/998/65212d998fb4939d9787bd9c726d2acb.png, https://habrastorage.org/getpro/habr/upload_files/652/12d/998/65212d998fb4939d9787bd9c726d2acb.png 2x"></a><!----><div class="tm-event-card__info"><div class="tm-event-card__date"><!----><div class="tm-event-card__day"><span>20 – 22  июня  </span></div></div><a href="/ru/events/610/" class="tm-event-card__title-link"><span>Летняя айти-тусовка Summer Merge</span></a><div class="tm-event-card__places"><div class="tm-event-card__places-list"><!--[--><span class="tm-event-card__places-item"><span>Ульяновская область</span><!----></span><!--]--></div></div></div><div class="tm-event-card__footer tm-event-card__footer_widget"><a href="/ru/events/#610" class="tm-event-card__link">Больше событий в календаре</a><div class="tm-event-card__categories"><!--[--><div class="event-category__label event-category__label_type-development"><span>Разработка</span></div><div class="event-category__label event-category__label_type-other"><span>Другое</span></div><!--]--></div></div></div><!--]--><!----></section><!--]--></div><!--]--><!--]--></div><!----><!--[--><button class="swiper-button-prev"><span class="tm-svg-icon__wrapper swiper-button-icon"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Влево</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#arrow-back"></use></svg></span></button><button class="swiper-button-next"><span class="tm-svg-icon__wrapper swiper-button-icon"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Вправо</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#arrow-back"></use></svg></span></button><!--]--></div><!--]--></div><!--]--><!----></section><!--]--><!--]--></div><!--]--><!--]--></div></div><!--]--><!--]--></div></div><div class="tm-page__sidebar"><!--[--><!----><!--]--></div></div><!----><!--]--></div></div></main><!----></div><!----><div class="tm-footer"><div class="tm-page-width"><!--[--><div class="tm-footer__container"><div class="tm-footer__title"><a class="tm-svg-icon__wrapper tm-footer__title-link" href="/ru/"><svg class="tm-svg-img tm-svg-icon" height="16" width="16"><title>Хабр</title><use xlink:href="/img/habr-logo-ru.svg#logo"></use></svg></a></div><div class="tm-footer__social"><!--[--><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://www.facebook.com/habrahabr.ru" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="36" width="36"><title>Facebook</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-facebook"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://twitter.com/habr_com" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="36" width="36"><title>Twitter</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-twitter"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://vk.com/habr" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="36" width="36"><title>VK</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-vk"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://telegram.me/habr_com" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="36" width="36"><title>Telegram</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-telegram"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://www.youtube.com/channel/UCd_sTwKqVrweTt4oAKY5y4w" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="36" width="36"><title>Youtube</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-youtube"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://dzen.ru/habr" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="36" width="36"><title>Яндекс Дзен</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-dzen"></use></svg></a><!--]--></div><!--teleport start--><!--teleport end--><button class="tm-footer__link"><svg class="tm-svg-img tm-footer__icon" height="16" width="16"><title>Язык</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#lang"></use></svg> Настройка языка</button><a href="/ru/feedback/" class="tm-footer__link">Техническая поддержка</a><div class="tm-footer-copyright"><span class="tm-copyright"><span class="tm-copyright__years">© 2006–2025, </span><span class="tm-copyright__name"><a class="tm-copyright__link" href="https://company.habr.com/" rel="noopener" target="_blank">Habr</a></span></span></div></div><!--]--></div></div><!----><!--]--></div><!----></div><script>window.__INITIAL_STATE__={"adblock":{"hasAcceptableAdsFilter":false,"hasAdblock":false},"articlesList":{"articlesList":{"728742":{"id":"728742","timePublished":"2023-04-28T08:55:37+00:00","isCorporative":false,"lang":"ru","titleHtml":"Вопросы и ответы для собеседования по Kotlin. Часть 3","leadData":{"textHtml":"\u003Cp\u003EЦикл статей с вопросами по \u003Cstrong\u003EKotlin\u003C\u002Fstrong\u003E, которые могут задать на собеседованиях. \u003C\u002Fp\u003E\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fhabr.com\u002Fru\u002Fpost\u002F721084\u002F\" rel=\"noopener noreferrer nofollow\"\u003EВопросы и ответы для собеседования по Kotlin. Часть 1\u003C\u002Fa\u003E\u003Cbr\u003E\u003Ca href=\"https:\u002F\u002Fhabr.com\u002Fru\u002Fpost\u002F722686\u002F\" rel=\"noopener noreferrer nofollow\"\u003EВопросы и ответы для собеседования по Kotlin. Часть 2\u003C\u002Fa\u003E&nbsp;\u003Cbr\u003E\u003Ca href=\"https:\u002F\u002Fhabr.com\u002Fru\u002Farticles\u002F728742\u002F\" rel=\"noopener noreferrer nofollow\"\u003EВопросы и ответы для собеседования по Kotlin. Часть 3\u003C\u002Fa\u003E — вы находитесь здесь\u003Cbr\u003E\u003Ca href=\"https:\u002F\u002Fhabr.com\u002Fru\u002Farticles\u002F736392\u002F\" rel=\"noopener noreferrer nofollow\"\u003EВопросы и ответы для собеседования по Kotlin. Часть 4\u003C\u002Fa\u003E&nbsp;\u003C\u002Fp\u003E","imageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F80c\u002F337\u002Fc14\u002F80c337c1467b29382240a6db7b752cf1.png","buttonTextHtml":"Читать далее","image":{"url":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F80c\u002F337\u002Fc14\u002F80c337c1467b29382240a6db7b752cf1.png","fit":"cover","positionY":0,"positionX":0}},"editorVersion":"2.0","postType":"article","postLabels":[],"author":{"id":"3223285","alias":"dmt_ovs","fullname":"Дмитрий","avatarUrl":"\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Favatars\u002F84b\u002Fafb\u002F1c1\u002F84bafb1c17208f6b124be4429e2a8104.png","speciality":"(-_-)","scoreStats":{"score":24,"votesCount":32},"rating":0,"relatedData":null,"contacts":[],"authorContacts":[],"paymentDetails":{"paymentYandexMoney":null,"paymentPayPalMe":null,"paymentWebmoney":null},"donationsMethod":null,"isInBlacklist":null,"careerProfile":null},"statistics":{"commentsCount":3,"favoritesCount":97,"readingCount":48065,"score":7,"votesCount":7,"votesCountPlus":7,"votesCountMinus":0},"hubs":[{"id":"359","alias":"programming","type":"collective","title":"Программирование","titleHtml":"Программирование","isProfiled":true,"relatedData":null},{"id":"375","alias":"java","type":"collective","title":"Java","titleHtml":"Java","isProfiled":true,"relatedData":null},{"id":"17107","alias":"android_dev","type":"collective","title":"Разработка под Android","titleHtml":"Разработка под Android","isProfiled":true,"relatedData":null},{"id":"19441","alias":"kotlin","type":"collective","title":"Kotlin","titleHtml":"Kotlin","isProfiled":true,"relatedData":null},{"id":"20696","alias":"study","type":"collective","title":"Учебный процесс в IT","titleHtml":"Учебный процесс в IT","isProfiled":false,"relatedData":null}],"flows":[{"id":"1","alias":"develop","title":"Разработка","titleHtml":"Разработка"},{"id":"3","alias":"management","title":"Менеджмент","titleHtml":"Менеджмент"}],"relatedData":{"vote":null,"unreadCommentsCount":0,"bookmarked":false,"canComment":false,"canEdit":false,"canViewVotes":false,"votePlus":{"canVote":false,"isChargeEnough":false,"isKarmaEnough":false,"isVotingOver":true,"isPublicationLimitEnough":false},"voteMinus":{"canVote":false,"isChargeEnough":false,"isKarmaEnough":false,"isVotingOver":true,"isPublicationLimitEnough":false},"canModerateComments":false,"trackerSubscribed":false,"emailSubscribed":false},"textHtml":"\u003Cdiv xmlns=\"http:\u002F\u002Fwww.w3.org\u002F1999\u002Fxhtml\"\u003E\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fhabr.com\u002Fru\u002Fpost\u002F721084\u002F\" rel=\"noopener noreferrer nofollow\"\u003EВопросы и ответы для собеседования по Kotlin. Часть 1\u003C\u002Fa\u003E\u003Cbr\u002F\u003E\u003Ca href=\"https:\u002F\u002Fhabr.com\u002Fru\u002Fpost\u002F722686\u002F\" rel=\"noopener noreferrer nofollow\"\u003EВопросы и ответы для собеседования по Kotlin. Часть 2\u003C\u002Fa\u003E \u003Cbr\u002F\u003E\u003Ca href=\"https:\u002F\u002Fhabr.com\u002Fru\u002Farticles\u002F728742\u002F\" rel=\"noopener noreferrer nofollow\"\u003EВопросы и ответы для собеседования по Kotlin. Часть 3\u003C\u002Fa\u003E — вы находитесь здесь\u003Cbr\u002F\u003E\u003Ca href=\"https:\u002F\u002Fhabr.com\u002Fru\u002Farticles\u002F736392\u002F\" rel=\"noopener noreferrer nofollow\"\u003EВопросы и ответы для собеседования по Kotlin. Часть 4\u003C\u002Fa\u003E   \u003C\u002Fp\u003E\u003Ca class=\"anchor\" name=\"%D0%A1%D0%BF%D0%B8%D1%81%D0%BE%D0%BA%20%D1%82%D0%B5%D0%BC%20%D0%B8%20%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81%D0%BE%D0%B2\" id=\"Список тем и вопросов\"\u003E\u003C\u002Fa\u003E\u003Ch2\u003EСписок тем и вопросов:\u003C\u002Fh2\u003E\u003Ch4\u003E1. Классы и интерфейсы\u003C\u002Fh4\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003E\u003Ca href=\"#%D0%A7%D1%82%D0%BE%20%D1%82%D0%B0%D0%BA%D0%BE%D0%B5%20%D0%B0%D0%B1%D1%81%D1%82%D1%80%D0%B0%D0%BA%D1%82%D0%BD%D1%8B%D0%B5%20%D0%BA%D0%BB%D0%B0%D1%81%D1%81%D1%8B%20%D0%B8%20%D0%B8%D0%BD%D1%82%D0%B5%D1%80%D1%84%D0%B5%D0%B9%D1%81%D1%8B?\" rel=\"noopener noreferrer nofollow\"\u003EЧто такое абстрактные классы и интерфейсы?\u003C\u002Fa\u003E\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003E\u003Ca href=\"#%D0%9F%D0%BE%D1%87%D0%B5%D0%BC%D1%83%20%D0%BA%D0%BB%D0%B0%D1%81%D1%81%D1%8B%20%D0%B2%20Kotlin%20%D0%BF%D0%BE%20%D1%83%D0%BC%D0%BE%D0%BB%D1%87%D0%B0%D0%BD%D0%B8%D1%8E%20final?\" rel=\"noopener noreferrer nofollow\"\u003EПочему классы в Kotlin по умолчанию final?\u003C\u002Fa\u003E\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003E\u003Ca href=\"#%D0%A7%D1%82%D0%BE%20%D0%BD%D1%83%D0%B6%D0%BD%D0%BE%20%D1%81%D0%B4%D0%B5%D0%BB%D0%B0%D1%82%D1%8C,%20%D1%87%D1%82%D0%BE%D0%B1%D1%8B%20%D0%BA%D0%BB%D0%B0%D1%81%D1%81%20%D0%BC%D0%BE%D0%B6%D0%BD%D0%BE%20%D0%B1%D1%8B%D0%BB%D0%BE%20%D0%BD%D0%B0%D1%81%D0%BB%D0%B5%D0%B4%D0%BE%D0%B2%D0%B0%D1%82%D1%8C?%20(open)\" rel=\"noopener noreferrer nofollow\"\u003EЧто нужно сделать, чтобы класс можно было наследовать? (open)\u003C\u002Fa\u003E\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003E\u003Ca href=\"#%D0%9A%D0%B0%D0%BA%20%D0%BC%D0%BE%D0%B6%D0%BD%D0%BE%20%D0%BF%D0%BE%D0%BB%D1%83%D1%87%D0%B8%D1%82%D1%8C%20%D1%82%D0%B8%D0%BF%20%D0%BA%D0%BB%D0%B0%D1%81%D1%81%D0%B0?\" rel=\"noopener noreferrer nofollow\"\u003EКак можно получить тип класса?\u003C\u002Fa\u003E\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003E\u003Ca href=\"#%D0%A7%D1%82%D0%BE%20%D1%82%D0%B0%D0%BA%D0%BE%D0%B5%20enum%20%D0%BA%D0%BB%D0%B0%D1%81%D1%81%20(%D0%BF%D0%B5%D1%80%D0%B5%D1%87%D0%B8%D1%81%D0%BB%D0%B5%D0%BD%D0%B8%D0%B9)?\" rel=\"noopener noreferrer nofollow\"\u003EЧто такое enum класс (перечислений)?\u003C\u002Fa\u003E\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003E\u003Ca href=\"#%D0%A7%D1%82%D0%BE%20%D1%82%D0%B0%D0%BA%D0%BE%D0%B5%20sealed%20%D0%BA%D0%BB%D0%B0%D1%81%D1%81%20(%D0%B8%D0%B7%D0%BE%D0%BB%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%BD%D1%8B%D0%B9)?\" rel=\"noopener noreferrer nofollow\"\u003EЧто такое sealed класс (изолированный)?\u003C\u002Fa\u003E\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003E\u003Ca href=\"#%D0%9A%D0%B0%D0%BA%D0%B0%D1%8F%20%D1%80%D0%B0%D0%B7%D0%BD%D0%B8%D1%86%D0%B0%20%D0%BC%D0%B5%D0%B6%D0%B4%D1%83%20sealed%20class%20%D0%B8%20enum?\" rel=\"noopener noreferrer nofollow\"\u003EКакая разница между sealed class и enum?\u003C\u002Fa\u003E\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003E\u003Ca href=\"#%D0%A7%D1%82%D0%BE%20%D1%82%D0%B0%D0%BA%D0%BE%D0%B5%20inner%20(%D0%B2%D0%BD%D1%83%D1%82%D1%80%D0%B5%D0%BD%D0%BD%D0%B8%D0%B5)%20%D0%B8%20nested%20(%D0%B2%D0%BB%D0%BE%D0%B6%D0%B5%D0%BD%D0%BD%D1%8B%D0%B5)%20%D0%BA%D0%BB%D0%B0%D1%81%D1%81%D1%8B?\" rel=\"noopener noreferrer nofollow\"\u003EЧто такое inner (внутренние) и nested (вложенные) классы?\u003C\u002Fa\u003E\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003E\u003Ca href=\"#Value%20(%D0%B1%D1%8B%D0%B2%D1%88%D0%B8%D0%B5%20inline)%20%D0%BA%D0%BB%D0%B0%D1%81%D1%81%D1%8B\" rel=\"noopener noreferrer nofollow\"\u003EValue (бывшие inline) классы\u003C\u002Fa\u003E\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003E\u003Ca href=\"#%D0%9A%D0%B0%D0%BA%D0%B0%D1%8F%20%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%B0%20%D0%BE%D1%82%20typealias?%20%D0%92%D0%BE%20%D1%87%D1%82%D0%BE%20%D0%BE%D0%BD%20%D0%BA%D0%BE%D0%BC%D0%BF%D0%B8%D0%BB%D0%B8%D1%80%D1%83%D0%B5%D1%82%D1%81%D1%8F?\" rel=\"noopener noreferrer nofollow\"\u003EКакая польза от typealias? Во что он компилируется?\u003C\u002Fa\u003E\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Ch4\u003E2. Коллекции и последовательности (Sequences)\u003C\u002Fh4\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003E\u003Ca href=\"#%D0%9A%D0%B0%D0%BA%D0%B8%D0%B5%20%D0%BA%D0%BE%D0%BB%D0%BB%D0%B5%D0%BA%D1%86%D0%B8%D0%B8%20%D0%B5%D1%81%D1%82%D1%8C%20%D0%B2%20Kotlin?\" rel=\"noopener noreferrer nofollow\"\u003EКакие коллекции есть в Kotlin?\u003C\u002Fa\u003E\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003E\u003Ca href=\"#List\" rel=\"noopener noreferrer nofollow\"\u003EList\u003C\u002Fa\u003E\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003E\u003Ca href=\"#Set\" rel=\"noopener noreferrer nofollow\"\u003ESet\u003C\u002Fa\u003E\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003E\u003Ca href=\"#Map\" rel=\"noopener noreferrer nofollow\"\u003EMap\u003C\u002Fa\u003E\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003E\u003Ca href=\"#%D0%9A%D0%B0%D0%BA%D0%B0%D1%8F%20%D0%B8%D0%B7%20%D0%BA%D0%BE%D0%BB%D0%BB%D0%B5%D0%BA%D1%86%D0%B8%D0%B9%20%D0%BD%D0%B5%20%D1%8F%D0%B2%D0%BB%D1%8F%D0%B5%D1%82%D1%81%D1%8F%20%D0%B8%D0%BC%D0%BF%D0%BB%D0%B5%D0%BC%D0%B5%D0%BD%D1%82%D0%B0%D1%86%D0%B8%D0%B5%D0%B9%20Collection?\" rel=\"noopener noreferrer nofollow\"\u003EКакая из коллекций не является имплементацией Collection?\u003C\u002Fa\u003E\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003E\u003Ca href=\"#Sequences%20%D0%B8%20%D0%B8%D1%85%20%D0%BE%D1%82%D0%BB%D0%B8%D1%87%D0%B8%D1%8F%20%D0%BE%D1%82%20%D0%BA%D0%BE%D0%BB%D0%BB%D0%B5%D0%BA%D1%86%D0%B8%D0%B9\" rel=\"noopener noreferrer nofollow\"\u003ESequences и их отличия от коллекций\u003C\u002Fa\u003E\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003E\u003Ca href=\"#%D0%9F%D1%80%D0%BE%D0%BC%D0%B5%D0%B6%D1%83%D1%82%D0%BE%D1%87%D0%BD%D1%8B%D0%B5%20(intermediate)%20%D0%B8%20%D1%82%D0%B5%D1%80%D0%BC%D0%B8%D0%BD%D0%B0%D0%BB%D1%8C%D0%BD%D1%8B%D0%B5%20(terminal)%20%D0%BE%D0%BF%D0%B5%D1%80%D0%B0%D1%86%D0%B8%D0%B8%20%D0%B2%20Sequences\" rel=\"noopener noreferrer nofollow\"\u003EПромежуточные (intermediate) и терминальные (terminal) операции в Sequences\u003C\u002Fa\u003E\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cfigure class=\"full-width \"\u003E\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw1560\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fba3\u002F94c\u002F742\u002Fba394c742e1cee6fbaf17ffa02af0e09.png\" width=\"1587\" height=\"753\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fba3\u002F94c\u002F742\u002Fba394c742e1cee6fbaf17ffa02af0e09.png\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Ca class=\"anchor\" name=\"%D0%A7%D1%82%D0%BE%20%D1%82%D0%B0%D0%BA%D0%BE%D0%B5%20%D0%B0%D0%B1%D1%81%D1%82%D1%80%D0%B0%D0%BA%D1%82%D0%BD%D1%8B%D0%B5%20%D0%BA%D0%BB%D0%B0%D1%81%D1%81%D1%8B%20%D0%B8%20%D0%B8%D0%BD%D1%82%D0%B5%D1%80%D1%84%D0%B5%D0%B9%D1%81%D1%8B?\" id=\"Что такое абстрактные классы и интерфейсы?\"\u003E\u003C\u002Fa\u003E\u003Ch2\u003EЧто такое абстрактные классы и интерфейсы? \u003C\u002Fh2\u003E\u003Cp\u003EАбстрактные классы и интерфейсы используются для описания абстрактных концепций, не имеющих реализации.\u003C\u002Fp\u003E\u003Cp\u003E\u003Cstrong\u003E1. Абстрактный класс\u003C\u002Fstrong\u003E — это класс, представляющий из себя \"заготовку\" для целого семейства классов, который описывает для них \u003Cstrong\u003Eобщий шаблон поведения\u003C\u002Fstrong\u003E. Экземпляр такого класса не может быть создан. Абстрактному классу не нужен модификатор \u003Ccode\u003Eopen\u003C\u002Fcode\u003E, потому что он \"открыт\" для наследования по умолчанию.\u003C\u002Fp\u003E\u003Cp\u003EВ теле класса можно объявлять абстрактные свойства и функции. Это полезно, когда часть поведения класса не имеет смысла без реализации в более конкретном подклассе.\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Eabstract class Tree {\n  abstract val name: String\n  abstract val description: String\n  abstract fun info()\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EКаждый наследник обязан переопределять их все.\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Eclass Pine : Tree() {\n  override val name = \"Сосна\"\n  override val description = \"Хвойное дерево с длинными иглами и округлыми шишками\"\n  override fun info() = \"$name - ${description.toLowerCase()}.\"  \n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EСвойства и функции необязательно должны быть абстрактными. У них может быть обобщенная реализация, которая будет с пользой наследоваться всеми подклассами. В этом случае для них в абстрактном классе объявляется конкретная реализация, к которой имеют доступ все наследники.\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Eabstract class Tree {\n  abstract val name: String\n  abstract val description: String\n  fun info(): String = \"$name - ${description.toLowerCase()}.\"\n}\n\n...\n\nclass Pine : Tree() {\n  override val name = \"Сосна\"\n  override val description = \"Хвойное дерево с длинными иглами и округлыми шишками\"\n}\n\n...\n\nval pine = Pine()\nprintln(pine.info())\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EТак как этот компонент класса уже не будет абстрактным, наследники не смогут его переопределить.\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Eclass Pine : Tree() {\n  override val name = \"Сосна\"\n  override val description = \"Хвойное дерево с длинными иглами и округлыми шишками\"\n\n  \u002F\u002F ошибка: функция \"info\" является \"final\" и не может быть переопределена\n  override fun info() = description  \n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EЧтобы это исправить, нужно явно задать модификатор \u003Ccode\u003Eopen\u003C\u002Fcode\u003E для функции с конкретной реализацией. Тогда у наследников появляется выбор: либо не переопределять функцию и использовать реализацию суперкласса, либо переопределить и указать свою собственную реализацию.\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Eabstract class Tree {\n  abstract val name: String\n  abstract val description: String\n\n  open fun info(): String = \"$name - ${description.toLowerCase()}.\"\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EУ абстрактного класса может быть конструктор.\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Eabstract class Tree(val name: String, val description: String) {\n  open fun info(): String = \"$name - ${description.toLowerCase()}.\"\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EТогда каждый наследник должен предоставить для него значения.\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Eclass Pine(name: String, description: String) : Tree(name, description)\n\n...\n\nval pine = Pine(\"Сосна\", \"Хвойное дерево с длинными иглами и округлыми шишками\")\nprintln(pine.info())\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E\u003Cstrong\u003E2. Интерфейс\u003C\u002Fstrong\u003E — это совокупность методов и правил, которые определяют \u003Cstrong\u003Eповедение класса\u003C\u002Fstrong\u003E или \u003Cstrong\u003Eобщее поведение\u003C\u002Fstrong\u003E для группы независимых друг от друга классов. Интерфейсы похожи на абстрактные классы тем, что нельзя создать их экземпляры и они могут определять абстрактные или конкретные функции и свойства. Отличие в том, что интерфейсу не важна связь \"родитель-наследник\", он задаёт лишь правила поведения.\u003C\u002Fp\u003E\u003Cp\u003EИнтерфейсы в Kotlin могут содержать объявления абстрактных методов, а также методы с реализацией. Главное отличие интерфейсов от абстрактных классов заключается в невозможности хранения переменных экземпляров. Они могут иметь свойства, но те должны быть либо абстрактными, либо предоставлять реализацию методов доступа.\u003C\u002Fp\u003E\u003Cp\u003EВ теле интерфейса можно определять абстрактные свойства и функции. Для этого не требуется использовать ключевое слово \u003Ccode\u003Eabstract\u003C\u002Fcode\u003E, так как Kotlin способен сам понять, что свойство и функция без реализации должны быть абстрактными. Также обратите внимание, что единственный способ определить свойство — это определить его в теле интерфейса, так как у \u003Cstrong\u003Eинтерфейса не бывает конструкторов\u003C\u002Fstrong\u003E.\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Einterface Cultivable {\n  val bloom: Boolean\n  fun startPhotosynthesis()\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EКласс должен реализовывать все абстрактные свойства и функции, определённые в интерфейсе.\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Eabstract class Tree : Cultivable {\n  abstract val name: String\n  abstract val description: String\n  open fun info(): String = \"$name - ${description.toLowerCase()}.\"\n\n  override val bloom = false\n  override fun startPhotosynthesis() {\n    ...\n  }\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EПри этом если интерфейс реализовывается в абстрактном классе, то свойства и функции интерфейса могут быть в нём опущены. Тогда все наследники абстрактного класса должны будут их переопределять.\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Eabstract class Tree : Cultivable {\n  abstract val name: String\n  abstract val description: String\n  open fun info(): String = \"$name - ${description.toLowerCase()}.\"\n\n  override fun startPhotosynthesis() {\n    ...\n  }\n}\n\nclass Pine : Tree() {\n  override val name = \"Сосна\"\n  override val description = \"Хвойное дерево с длинными иглами и округлыми шишками\"\n\n  override val bloom = false\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EВ интерфейсе можно определять свойства и функции с конкретной реализацией (по умолчанию). Классы, реализующие этот интерфейс, могут использовать реализацию по умолчанию или определить свою. При этом реализация свойств осуществляется с помощью метода доступа \u003Ccode\u003Eget()\u003C\u002Fcode\u003E.\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Einterface Cultivable {\n  val bloom: Boolean\n    get() = false\n\n  fun startPhotosynthesis() {\n    ...\n  }\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EОдин интерфейс может реализовать другой интерфейс, при этом будет иметь доступ к его свойствам и функциям.\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Einterface Fruitable {\n  val fruit: String\n    get() = \"неплодоносный\"\n}\n\ninterface Cultivable : Fruitable {\n  ...\n\n  fun isFruitable() : Boolean {\n    if(fruit == \"неплодоносный\") return false\n    return true\n  }\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EКаждый класс, реализующий интерфейс \u003Ccode\u003ECultivable\u003C\u002Fcode\u003E может использовать свойства и функции интерфейса \u003Ccode\u003EFruitable\u003C\u002Fcode\u003E, если в этом есть необходимость.\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Eclass AppleTree() : Tree() {\n  override val name = \"Яблоня\"\n  override val description = \"Фруктовое дерево\"\n  override val fruit = \"яблоко\"\n}\n\n...\n\nval appleTree = AppleTree()\nif(appleTree.isFruitable()) {\n  println(\"Плод - ${appleTree.fruit}.\")\n} else {\n  println(\"${appleTree.name} не плодоносит.\")\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E\u003Cstrong\u003E3. Как выбрать, что применять — абстрактный класс или интерфейс?\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003EУ вас есть семейство классов, из которых можно выделить общую сущность? Определите эту сущность в качестве абстрактного класса и она будет “заготовкой” для всего семейства.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EВам нужно создать более конкретную версию класса? Создайте подкласс этого класса и добавьте недостающее поведение.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EТребуется определить общее поведение для группы независимых друг от друга классов? Создайте интерфейс и реализуйте его теми классами, которым необходимо это поведение.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003E\u003Cstrong\u003E4. Ключевые моменты:\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\u003Cblockquote\u003E\u003Cp\u003EАбстрактный класс — это \"заготовка\" для целого семейства классов. Нельзя создать экземпляр абстрактного класса. Абстрактный класс может содержать как абстрактные, так и конкретные реализации свойств и функций. Класс, который содержит абстрактное свойство или функцию, должен быть объявлен абстрактным. Абстрактный класс может быть без единого абстрактного свойства или функции. У класса может быть только один суперкласс. Наследники абстрактного класса должны переопределять все его абстрактные свойства и функции. Чтобы наследники могли переопределять конкретные реализации свойств и функций, для них в абстрактном классе должен быть явно указан модификатор \u003Ccode\u003Eopen\u003C\u002Fcode\u003E. У абстрактного класса может быть конструктор.  \u003C\u002Fp\u003E\u003C\u002Fblockquote\u003E\u003Cblockquote\u003E\u003Cp\u003EИнтерфейс определяет поведение класса или общее поведение для группы независимых друг от друга классов. Нельзя создать экземпляр интерфейса. Интерфейс может содержать как абстрактные, так и конкретные реализации функций. Свойства интерфейсов могут быть абстрактными, а могут иметь \u003Ccode\u003Eget()\u003C\u002Fcode\u003E методы. Класс может реализовывать несколько интерфейсов. Класс должен реализовывать все абстрактные свойства и функции, определённые в интерфейсе. Если интерфейс реализовывается абстрактным классом, то переопределение его абстрактных свойств и функций может быть передано наследникам абстрактного класса. Интерфейс может реализовывать другой интерфейс.  \u003C\u002Fp\u003E\u003C\u002Fblockquote\u003E\u003Cp\u003E\u003Cstrong\u003EПодробнее:\u003C\u002Fstrong\u003E \u003Ca href=\"https:\u002F\u002Fkotlinlang.ru\u002Fdocs\u002Freference\u002Finterfaces.html\" rel=\"noopener noreferrer nofollow\"\u003Ekotlinlang.ru\u003C\u002Fa\u003E и \u003Ca href=\"https:\u002F\u002Fbimlibik.github.io\u002Fposts\u002Fkotlin-abstract-classes-and-interfaces\u002F\" rel=\"noopener noreferrer nofollow\"\u003Ebimlibik.github.io\u003C\u002Fa\u003E\u003C\u002Fp\u003E\u003Ca class=\"anchor\" name=\"%D0%9F%D0%BE%D1%87%D0%B5%D0%BC%D1%83%20%D0%BA%D0%BB%D0%B0%D1%81%D1%81%D1%8B%20%D0%B2%20Kotlin%20%D0%BF%D0%BE%20%D1%83%D0%BC%D0%BE%D0%BB%D1%87%D0%B0%D0%BD%D0%B8%D1%8E%20final?\" id=\"Почему классы в Kotlin по умолчанию final?\"\u003E\u003C\u002Fa\u003E\u003Cp\u003E\u003Ca href=\"#%D0%A1%D0%BF%D0%B8%D1%81%D0%BE%D0%BA%20%D1%82%D0%B5%D0%BC%20%D0%B8%20%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81%D0%BE%D0%B2\" rel=\"noopener noreferrer nofollow\"\u003E—————— ↑↑↑ к списку вопросов ↑↑↑ ——————\u003C\u002Fa\u003E\u003C\u002Fp\u003E\u003Ch2\u003EПочему классы в Kotlin по умолчанию final?\u003C\u002Fh2\u003E\u003Cp\u003EКлассы в Kotlin по умолчанию являются \u003Ccode\u003Efinal\u003C\u002Fcode\u003E для того, чтобы избежать случайного наследования и переопределения методов. Это сделано для повышения безопасности кода и уменьшения сложности программы, так как ограничение наследования помогает избежать ошибок, связанных с неожиданным изменением поведения унаследованных методов.\u003C\u002Fp\u003E\u003Cp\u003EВ Kotlin рекомендуется использовать \u003Cstrong\u003Eкомпозицию вместо наследования\u003C\u002Fstrong\u003E для повторного использования кода и расширения функциональности.\u003C\u002Fp\u003E\u003Ca class=\"anchor\" name=\"%D0%A7%D1%82%D0%BE%20%D0%BD%D1%83%D0%B6%D0%BD%D0%BE%20%D1%81%D0%B4%D0%B5%D0%BB%D0%B0%D1%82%D1%8C,%20%D1%87%D1%82%D0%BE%D0%B1%D1%8B%20%D0%BA%D0%BB%D0%B0%D1%81%D1%81%20%D0%BC%D0%BE%D0%B6%D0%BD%D0%BE%20%D0%B1%D1%8B%D0%BB%D0%BE%20%D0%BD%D0%B0%D1%81%D0%BB%D0%B5%D0%B4%D0%BE%D0%B2%D0%B0%D1%82%D1%8C?%20(open)\" id=\"Что нужно сделать, чтобы класс можно было наследовать? (open)\"\u003E\u003C\u002Fa\u003E\u003Cp\u003E\u003Ca href=\"#%D0%A1%D0%BF%D0%B8%D1%81%D0%BE%D0%BA%20%D1%82%D0%B5%D0%BC%20%D0%B8%20%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81%D0%BE%D0%B2\" rel=\"noopener noreferrer nofollow\"\u003E—————— ↑↑↑ к списку вопросов ↑↑↑ ——————\u003C\u002Fa\u003E\u003C\u002Fp\u003E\u003Ch2\u003EЧто нужно сделать, чтобы класс можно было наследовать? (open)\u003C\u002Fh2\u003E\u003Cp\u003EПо умолчанию, классы в Kotlin объявляются как \u003Ccode\u003Efinal\u003C\u002Fcode\u003E, то есть их нельзя наследовать. Если мы всё же попытаемся наследоваться от такого класса, то получим ошибку: \u003Cem\u003E“This type is final, so it cannot be inherited from”\u003C\u002Fem\u003E.\u003C\u002Fp\u003E\u003Cp\u003EЧтобы класс можно было наследовать, его нужно объявить с модификатором \u003Ccode\u003Eopen\u003C\u002Fcode\u003E.\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Eopen class Fraction {\n  ...\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EНе только классы, но и функции в Kotlin по умолчанию имеют статус \u003Ccode\u003Efinal\u003C\u002Fcode\u003E. Поэтому те функции, которые находятся в родительском классе и которые вы хотите переопределить в дочерних классах, также должны быть отмечены \u003Ccode\u003Eopen\u003C\u002Fcode\u003E.\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Eopen class Fraction {\n\n  open fun toAttack() {\n    ...\n  }\n\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EСвойства класса также по умолчанию являются \u003Ccode\u003Efinal\u003C\u002Fcode\u003E. Для возможности переопределения таких свойств в дочерних классах, не забудьте и их отметить ключевым словом \u003Ccode\u003Eopen\u003C\u002Fcode\u003E.\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Eopen class Fraction {\n\n  open val name: String = \"default\"\n\n  open fun toAttack() {\n    ...\n  }\n\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EПри этом, если в открытом классе будут присутствовать функции и свойства, которые не отмечены словом \u003Ccode\u003Eopen\u003C\u002Fcode\u003E, то переопределяться они не будут. Но дочерний класс сможет к ним обращаться.\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Eopen class Fraction {\n\n  open val name: String = \"default\"\n\n  fun toAttack() {\n    ...\n  }\n\n}\n\nclass Horde : Fraction() {\n  override val name = \"Horde\"\n}\n\nclass SomeClass() {\n  val horde = Horde()\n  horde.toAttack()\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E\u003Cstrong\u003EПодробнее:\u003C\u002Fstrong\u003E \u003Ca href=\"https:\u002F\u002Fbimlibik.github.io\u002Fposts\u002Fkotlin-open-keyword\u002F\" rel=\"noopener noreferrer nofollow\"\u003Ebimlibik.github.io\u003C\u002Fa\u003E, \u003Ca href=\"https:\u002F\u002Fkotlinlang.ru\u002Fdocs\u002Freference\u002Fclasses.html\" rel=\"noopener noreferrer nofollow\"\u003Ekotlinlang.ru\u003C\u002Fa\u003E.\u003C\u002Fp\u003E\u003Ca class=\"anchor\" name=\"%D0%9A%D0%B0%D0%BA%20%D0%BC%D0%BE%D0%B6%D0%BD%D0%BE%20%D0%BF%D0%BE%D0%BB%D1%83%D1%87%D0%B8%D1%82%D1%8C%20%D1%82%D0%B8%D0%BF%20%D0%BA%D0%BB%D0%B0%D1%81%D1%81%D0%B0?\" id=\"Как можно получить тип класса?\"\u003E\u003C\u002Fa\u003E\u003Cp\u003E\u003Ca href=\"#%D0%A1%D0%BF%D0%B8%D1%81%D0%BE%D0%BA%20%D1%82%D0%B5%D0%BC%20%D0%B8%20%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81%D0%BE%D0%B2\" rel=\"noopener noreferrer nofollow\"\u003E—————— ↑↑↑ к списку вопросов ↑↑↑ ——————\u003C\u002Fa\u003E\u003C\u002Fp\u003E\u003Ch2\u003EКак можно получить тип класса?\u003C\u002Fh2\u003E\u003Cp\u003E\u003Cstrong\u003E1. Получение типа класса через функцию \u003C\u002Fstrong\u003E\u003Ccode\u003E::class\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\u003Cp\u003EФункция \u003Ccode\u003E::class\u003C\u002Fcode\u003E возвращает объект \u003Ccode\u003EKClass\u003C\u002Fcode\u003E, который содержит информацию о типе класса во время выполнения.\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Eclass Person(val name: String, val age: Int)\n\nfun main() {\n    val person = Person(\"John\", 30)\n    println(person::class) \u002F\u002F выводит \"class Person\"\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E\u003Cstrong\u003E2. Получение типа класса через функцию \u003C\u002Fstrong\u003E\u003Ccode\u003EjavaClass\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\u003Cp\u003EФункция \u003Ccode\u003EjavaClass\u003C\u002Fcode\u003E возвращает объект \u003Ccode\u003EClass\u003C\u002Fcode\u003E, который содержит информацию о типе класса во время выполнения.\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Eclass Person(val name: String, val age: Int)\n\nfun main() {\n    val person = Person(\"John\", 30)\n    println(person.javaClass) \u002F\u002F выводит \"class Person\"\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E\u003Cstrong\u003E3. Получение типа класса через функцию \u003C\u002Fstrong\u003E\u003Ccode\u003E::class.java\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\u003Cp\u003EВызов функции \u003Ccode\u003E::class.java\u003C\u002Fcode\u003E на объекте типа \u003Ccode\u003EKClass\u003C\u002Fcode\u003E возвращает объект \u003Ccode\u003EClass\u003C\u002Fcode\u003E, который содержит информацию о типе класса во время выполнения.\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Eclass Person(val name: String, val age: Int)\n\nfun main() {\n    val person = Person(\"John\", 30)\n    println(person::class.java) \u002F\u002F выводит \"class Person\"\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E\u003Cstrong\u003EПодробнее:\u003C\u002Fstrong\u003E \u003Ca href=\"https:\u002F\u002Fkotlinlang.ru\u002Fdocs\u002Freference\u002Freflection.html#function-references\" rel=\"noopener noreferrer nofollow\"\u003Ekotlinlang.ru\u003C\u002Fa\u003E\u003C\u002Fp\u003E\u003Ca class=\"anchor\" name=\"%D0%A7%D1%82%D0%BE%20%D1%82%D0%B0%D0%BA%D0%BE%D0%B5%20enum%20%D0%BA%D0%BB%D0%B0%D1%81%D1%81%20(%D0%BF%D0%B5%D1%80%D0%B5%D1%87%D0%B8%D1%81%D0%BB%D0%B5%D0%BD%D0%B8%D0%B9)?\" id=\"Что такое enum класс (перечислений)?\"\u003E\u003C\u002Fa\u003E\u003Cp\u003E\u003Ca href=\"#%D0%A1%D0%BF%D0%B8%D1%81%D0%BE%D0%BA%20%D1%82%D0%B5%D0%BC%20%D0%B8%20%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81%D0%BE%D0%B2\" rel=\"noopener noreferrer nofollow\"\u003E—————— ↑↑↑ к списку вопросов ↑↑↑ ——————\u003C\u002Fa\u003E\u003C\u002Fp\u003E\u003Ch2\u003EЧто такое enum класс (перечислений)?\u003C\u002Fh2\u003E\u003Cp\u003EЕсли в процессе разработки возникает ситуация, когда переменная должна иметь определённые (заранее известные) значения — \u003Cstrong\u003Eконстанты\u003C\u002Fstrong\u003E, то вместо того, чтобы плодить список констант, их все можно перечислить в классе, который был придуман специально для этого — \u003Cstrong\u003Eenum\u003C\u002Fstrong\u003E (класс перечислений). Он позволяет создать набор значений, которые могут быть использованы как единственно допустимые значения переменной. Каждая константа в классе перечислений является экземпляром этого класса и отделяется от другой константы запятой.\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Eenum class ColorType {\n  RED,\n  BLUE,\n  GREEN\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EЧтобы ограничить переменную одним из значений класса перечислений, нужно назначить ей тип объявленного класса перечислений.\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Evar color: ColorType\ncolor = ColorType.RED\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EПомимо самих констант в класс перечислений можно добавить свойства и функции. Их необходимо отделять от констант \u003Cem\u003Eточкой с запятой\u003C\u002Fem\u003E. \u003Cstrong\u003EЭто единственное место в Kotlin, где используется точка с запятой.\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Eenum class ColorType {\n  RED,\n  BLUE,\n  GREEN;\n\n  fun names() = \"Красный, Голубой, Зелёный\"\n  val rgb = \"0xFFFFFF\"\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EПри этом каждая константа сможет обращаться к этому свойству или функции.\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Evar color: ColorType = ColorType.RED\nprintln(color.names()) \u002F\u002F выведет \"Красный, Голубой, Зелёный\"\nprintln(color.rgb) \u002F\u002F выведет \"0xFFFFFF\"\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EКлассы перечислений как и обычные классы также могут иметь конструктор. Так как константы являются экземплярами enum-класса, они могут быть инициализированы.\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Eenum class Color(val rgb: Int) {\n    RED(0xFF0000),\n    GREEN(0x00FF00),\n    BLUE(0x0000FF)\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EEnum-константы также могут объявлять свои собственные анонимные классы как с их собственными методами, так и с перегруженными методами базового класса. Напоминаю, что при объявлении в enum-классе каких-либо членов, необходимо \u003Cstrong\u003Eотделять их от объявления констант точкой с запятой\u003C\u002Fstrong\u003E.\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Eenum class ProtocolState {\n    WAITING {\n        override fun signal() = TALKING\n    },\n\n    TALKING {\n        override fun signal() = WAITING\n    };\n\n    abstract fun signal(): ProtocolState\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E\u003Cstrong\u003EПодробнее:\u003C\u002Fstrong\u003E \u003Ca href=\"https:\u002F\u002Fkotlinlang.ru\u002Fdocs\u002Freference\u002Fenum-classes.html\" rel=\"noopener noreferrer nofollow\"\u003Ekotlinlang.ru\u003C\u002Fa\u003E и \u003Ca href=\"https:\u002F\u002Fmetanit.com\u002Fkotlin\u002Ftutorial\u002F4.13.php\" rel=\"noopener noreferrer nofollow\"\u003Emetanit.com\u003C\u002Fa\u003E\u003C\u002Fp\u003E\u003Ca class=\"anchor\" name=\"%D0%A7%D1%82%D0%BE%20%D1%82%D0%B0%D0%BA%D0%BE%D0%B5%20sealed%20%D0%BA%D0%BB%D0%B0%D1%81%D1%81%20(%D0%B8%D0%B7%D0%BE%D0%BB%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%BD%D1%8B%D0%B9)?\" id=\"Что такое sealed класс (изолированный)?\"\u003E\u003C\u002Fa\u003E\u003Cp\u003E\u003Ca href=\"#%D0%A1%D0%BF%D0%B8%D1%81%D0%BE%D0%BA%20%D1%82%D0%B5%D0%BC%20%D0%B8%20%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81%D0%BE%D0%B2\" rel=\"noopener noreferrer nofollow\"\u003E—————— ↑↑↑ к списку вопросов ↑↑↑ ——————\u003C\u002Fa\u003E\u003C\u002Fp\u003E\u003Ch2\u003EЧто такое sealed класс (изолированный)?\u003C\u002Fh2\u003E\u003Cp\u003E\u003Cstrong\u003ESealed class\u003C\u002Fstrong\u003E (изолированный класс) — это класс, который является абстрактным и используется в Kotlin для ограничения классов, которые могут наследоваться от него.\u003C\u002Fp\u003E\u003Cp\u003EОсновная идея заключается в том, что \u003Ccode\u003Esealed class\u003C\u002Fcode\u003E позволяет определить ограниченный и известный заранее набор подклассов, которые могут быть использованы.\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003EКонструктор изолированного класса всегда приватен, и это нельзя изменить.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EУ \u003Ccode\u003Esealed\u003C\u002Fcode\u003E класса могут быть наследники, но все они должны находиться в одном пакете с изолированным классом. Изолированный класс \"открыт\" для наследования по умолчанию, указывать слово \u003Ccode\u003Eopen\u003C\u002Fcode\u003E не требуется.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EНаследники \u003Ccode\u003Esealed\u003C\u002Fcode\u003E класса могут быть классами любого типа: \u003Ccode\u003Edata class\u003C\u002Fcode\u003E, объектом, обычным классом, другим \u003Ccode\u003Esealed\u003C\u002Fcode\u003E классом. Классы, которые расширяют наследников \u003Ccode\u003Esealed\u003C\u002Fcode\u003E класса могут находиться где угодно.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EИзолированные классы абстрактны и могут содержать в себе абстрактные компоненты.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EИзолированные классы нельзя инициализировать.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EПри использовании \u003Ccode\u003Ewhen\u003C\u002Fcode\u003E, все подклассы, которые не были проверены  в конструкции, будут подсвечены \u003Cstrong\u003EIDE\u003C\u002Fstrong\u003E.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EНе объявляется с ключевым словом \u003Ccode\u003Einner\u003C\u002Fcode\u003E.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003E\u003Cstrong\u003EПример sealed класса:\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Esealed class Shape {\n    class Circle(val radius: Double) : Shape()\n    class Rectangle(val width: Double, val height: Double) : Shape()\n    class Triangle(val base: Double, val height: Double) : Shape()\n}\n\nfun calculateArea(shape: Shape): Double {\n    return when (shape) {\n        is Shape.Circle -&gt; Math.PI * shape.radius * shape.radius\n        is Shape.Rectangle -&gt; shape.width * shape.height\n        is Shape.Triangle -&gt; 0.5 * shape.base * shape.height\n    }\n}\n\nfun main() {\n    val circle = Shape.Circle(5.0)\n    val rectangle = Shape.Rectangle(2.0, 3.0)\n    val triangle = Shape.Triangle(4.0, 5.0)\n\n    println(calculateArea(circle))     \u002F\u002F Output: 78.53981633974483\n    println(calculateArea(rectangle))  \u002F\u002F Output: 6.0\n    println(calculateArea(triangle))   \u002F\u002F Output: 10.0\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EВ этом примере мы определили \u003Ccode\u003Esealed class Shape\u003C\u002Fcode\u003E, который содержит три класса: \u003Ccode\u003ECircle\u003C\u002Fcode\u003E, \u003Ccode\u003ERectangle\u003C\u002Fcode\u003E и \u003Ccode\u003ETriangle\u003C\u002Fcode\u003E. Эти классы наследуются от \u003Ccode\u003EShape\u003C\u002Fcode\u003E. Это означает, что мы можем создавать объекты этих классов и использовать их, как объекты типа \u003Ccode\u003EShape\u003C\u002Fcode\u003E.\u003C\u002Fp\u003E\u003Cp\u003EВ функции \u003Ccode\u003EcalculateArea\u003C\u002Fcode\u003E мы используем выражение \u003Ccode\u003Ewhen\u003C\u002Fcode\u003E, чтобы определить тип фигуры и вернуть ее площадь. Таким образом, если мы передадим \u003Ccode\u003EShape.Circle\u003C\u002Fcode\u003E в \u003Ccode\u003EcalculateArea\u003C\u002Fcode\u003E, то будет вычислена площадь круга.\u003C\u002Fp\u003E\u003Cp\u003EВ функции main мы создали объекты \u003Ccode\u003ECircle\u003C\u002Fcode\u003E, \u003Ccode\u003ERectangle\u003C\u002Fcode\u003E и \u003Ccode\u003ETriangle\u003C\u002Fcode\u003E и передали их в \u003Ccode\u003EcalculateArea\u003C\u002Fcode\u003E, чтобы вычислить их площади.\u003C\u002Fp\u003E\u003Cp\u003E\u003Cstrong\u003EПодробнее:\u003C\u002Fstrong\u003E \u003Ca href=\"https:\u002F\u002Fkotlinlang.ru\u002Fdocs\u002Freference\u002Fsealed-classes.html\" rel=\"noopener noreferrer nofollow\"\u003Ekotlinlang.ru\u003C\u002Fa\u003E и \u003Ca href=\"https:\u002F\u002Fbimlibik.github.io\u002Fposts\u002Fkotlin-sealed-classes\u002F\" rel=\"noopener noreferrer nofollow\"\u003Ebimlibik.github.io\u003C\u002Fa\u003E\u003C\u002Fp\u003E\u003Ca class=\"anchor\" name=\"%D0%9A%D0%B0%D0%BA%D0%B0%D1%8F%20%D1%80%D0%B0%D0%B7%D0%BD%D0%B8%D1%86%D0%B0%20%D0%BC%D0%B5%D0%B6%D0%B4%D1%83%20sealed%20class%20%D0%B8%20enum?\" id=\"Какая разница между sealed class и enum?\"\u003E\u003C\u002Fa\u003E\u003Cp\u003E\u003Ca href=\"#%D0%A1%D0%BF%D0%B8%D1%81%D0%BE%D0%BA%20%D1%82%D0%B5%D0%BC%20%D0%B8%20%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81%D0%BE%D0%B2\" rel=\"noopener noreferrer nofollow\"\u003E—————— ↑↑↑ к списку вопросов ↑↑↑ ——————\u003C\u002Fa\u003E\u003C\u002Fp\u003E\u003Ch2\u003EКакая разница между sealed class и enum?\u003C\u002Fh2\u003E\u003Cp\u003E\u003Ccode\u003ESealed class\u003C\u002Fcode\u003E и \u003Ccode\u003EEnum\u003C\u002Fcode\u003E это два разных концепта в Kotlin, хотя их часто используют для ограничения набора возможных значений. Основная разница между ними:\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003E\u003Ccode\u003Eenum\u003C\u002Fcode\u003E представляет собой конечный список значений, которые объявляются заранее в момент компиляции, и \u003Cstrong\u003Eне могут быть расширены или изменены\u003C\u002Fstrong\u003E во время выполнения программы\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003E\u003Ccode\u003Esealed class\u003C\u002Fcode\u003E позволяет определять ограниченный набор значений, но эти значения \u003Cstrong\u003Eмогут быть расширены в будущем\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003EВ общем, \u003Ccode\u003Eenum class\u003C\u002Fcode\u003E используется для представления конечного списка опций или состояний, тогда как \u003Ccode\u003Esealed class\u003C\u002Fcode\u003E используется для определения ограниченного набора значений, которые могут быть произвольными объектами.\u003C\u002Fp\u003E\u003Ca class=\"anchor\" name=\"%D0%A7%D1%82%D0%BE%20%D1%82%D0%B0%D0%BA%D0%BE%D0%B5%20inner%20(%D0%B2%D0%BD%D1%83%D1%82%D1%80%D0%B5%D0%BD%D0%BD%D0%B8%D0%B5)%20%D0%B8%20nested%20(%D0%B2%D0%BB%D0%BE%D0%B6%D0%B5%D0%BD%D0%BD%D1%8B%D0%B5)%20%D0%BA%D0%BB%D0%B0%D1%81%D1%81%D1%8B?\" id=\"Что такое inner (внутренние) и nested (вложенные) классы?\"\u003E\u003C\u002Fa\u003E\u003Cp\u003E\u003Ca href=\"#%D0%A1%D0%BF%D0%B8%D1%81%D0%BE%D0%BA%20%D1%82%D0%B5%D0%BC%20%D0%B8%20%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81%D0%BE%D0%B2\" rel=\"noopener noreferrer nofollow\"\u003E—————— ↑↑↑ к списку вопросов ↑↑↑ ——————\u003C\u002Fa\u003E\u003C\u002Fp\u003E\u003Ch2\u003EЧто такое inner (внутренние) и nested (вложенные) классы?\u003C\u002Fh2\u003E\u003Cp\u003EВ Kotlin можно объявить один класс внутри другого. Это может быть полезно в тех случаях, когда вам нужно организовать код и логически связать классы между собой. Подобные классы разделяются на \u003Cstrong\u003Eвнутренние (inner)\u003C\u002Fstrong\u003E и \u003Cstrong\u003Eвложенные (nested)\u003C\u002Fstrong\u003E.\u003C\u002Fp\u003E\u003Cp\u003E\u003Cstrong\u003E1. Внутренние классы (inner classes)\u003C\u002Fstrong\u003E имеют доступ к членам внешнего класса, даже если они объявлены как \u003Ccode\u003Eprivate\u003C\u002Fcode\u003E. Внутренний класс является частью внешнего класса и имеет доступ к его свойствам и методам. В Kotlin внутренний класс объявляется с помощью ключевого слова \u003Ccode\u003Einner\u003C\u002Fcode\u003E. Например:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Eclass Outer {\n    private val outerProperty = \"Outer Property\"\n    \n    inner class Inner {\n        fun innerMethod() {\n            println(\"Accessing outer property: $outerProperty\")\n        }\n    }\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EВ этом примере \u003Ccode\u003EInner\u003C\u002Fcode\u003E является внутренним классом, а \u003Ccode\u003EOuter\u003C\u002Fcode\u003E является внешним классом. \u003Ccode\u003EInner\u003C\u002Fcode\u003E имеет доступ к членам \u003Ccode\u003EOuter\u003C\u002Fcode\u003E, в том числе к приватным свойствам и методам, таким как \u003Ccode\u003EouterProperty\u003C\u002Fcode\u003E.\u003C\u002Fp\u003E\u003Cp\u003E\u003Cstrong\u003E2. Вложенные классы (nested classes)\u003C\u002Fstrong\u003E не имеют доступа к членам внешнего класса по умолчанию. Они имеют свои собственные члены, которые могут быть использованы только внутри класса. Например:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Eclass Outer {\n    private val outerProperty = \"Outer Property\"\n    \n    class Nested {\n        fun nestedMethod() {\n            println(\"Accessing nested property\")\n        }\n    }\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EЗдесь \u003Ccode\u003ENested\u003C\u002Fcode\u003E является вложенным классом. Он не имеет доступа к свойству \u003Ccode\u003EouterProperty\u003C\u002Fcode\u003E, но может использовать свои собственные члены, такие как \u003Ccode\u003EnestedMethod\u003C\u002Fcode\u003E.\u003C\u002Fp\u003E\u003Cp\u003E\u003Cstrong\u003E3. Ключевое отличие:\u003C\u002Fstrong\u003E внутренний (\u003Ccode\u003Einner\u003C\u002Fcode\u003E) класс — это вложенный (\u003Ccode\u003Enested\u003C\u002Fcode\u003E) класс, который может обращаться к компонентам внешнего класса.\u003C\u002Fp\u003E\u003Cp\u003E\u003Cstrong\u003EПодробнее:\u003C\u002Fstrong\u003E \u003Ca href=\"https:\u002F\u002Fkotlinlang.ru\u002Fdocs\u002Freference\u002Fnested-classes.html\" rel=\"noopener noreferrer nofollow\"\u003Ekotlinlang.ru\u003C\u002Fa\u003E и \u003Ca href=\"https:\u002F\u002Fbimlibik.github.io\u002Fposts\u002Fkotlin-nested-and-inner-clesses\u002F\" rel=\"noopener noreferrer nofollow\"\u003Ebimlibik.github.io\u003C\u002Fa\u003E\u003C\u002Fp\u003E\u003Ca class=\"anchor\" name=\"Value%20(%D0%B1%D1%8B%D0%B2%D1%88%D0%B8%D0%B5%20inline)%20%D0%BA%D0%BB%D0%B0%D1%81%D1%81%D1%8B\" id=\"Value (бывшие inline) классы\"\u003E\u003C\u002Fa\u003E\u003Cp\u003E\u003Ca href=\"#%D0%A1%D0%BF%D0%B8%D1%81%D0%BE%D0%BA%20%D1%82%D0%B5%D0%BC%20%D0%B8%20%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81%D0%BE%D0%B2\" rel=\"noopener noreferrer nofollow\"\u003E—————— ↑↑↑ к списку вопросов ↑↑↑ ——————\u003C\u002Fa\u003E\u003C\u002Fp\u003E\u003Ch2\u003EValue (бывшие inline) классы\u003C\u002Fh2\u003E\u003Cp\u003EТем, кто хочет подробно узнать историю создания \u003Ccode\u003Einline\u003C\u002Fcode\u003E классов в Kotlin и почему было принято решение переименовать модификатор \u003Ccode\u003Einline\u003C\u002Fcode\u003E в \u003Ccode\u003Evalue\u003C\u002Fcode\u003E — лучше прочитать KEEP от первоисточника \u003Ca href=\"https:\u002F\u002Fgithub.com\u002FKotlin\u002FKEEP\u002Fblob\u002Fmaster\u002Fnotes\u002Fvalue-classes.md#inline-classes-are-user-defined-value-classes\" rel=\"noopener noreferrer nofollow\"\u003EРомана Елизарова\u003C\u002Fa\u003E.\u003C\u002Fp\u003E\u003Cp\u003E\u003Cstrong\u003EКратко:\u003C\u002Fstrong\u003E в Kotlin версии 1.2.30 была добавлена функциональность \u003Ccode\u003Einline\u003C\u002Fcode\u003E (встраиваемых) классов. Это позволило создавать классы, которые компилируются в обычные примитивы (\u003Ccode\u003EInt\u003C\u002Fcode\u003E, \u003Ccode\u003ELong\u003C\u002Fcode\u003E и другие), но при этом могли содержать дополнительные методы и свойства.\u003C\u002Fp\u003E\u003Cp\u003EВ Kotlin 1.5 были добавлены \u003Ccode\u003Evalue\u003C\u002Fcode\u003E классы (классы значений), которые заменили \u003Ccode\u003Einline\u003C\u002Fcode\u003E классы. Классы значений предоставляют те же преимущества, что и \u003Ccode\u003Einline\u003C\u002Fcode\u003E классы, но с улучшенным синтаксисом и дополнительными возможностями.\u003C\u002Fp\u003E\u003Cp\u003EВ отли­чие от обыч­ного клас­са, \u003Ccode\u003Evalue\u003C\u002Fcode\u003E класс инлай­новый. Он не будет существо­вать в резуль­тиру­ющем байт‑коде при­ложе­ния. Ком­пилятор раз­вернет все \u003Ccode\u003Evalue\u003C\u002Fcode\u003E клас­сы и будет исполь­зовать вмес­то них сох­ранен­ные внут­ри зна­чения.\u003C\u002Fp\u003E\u003Cp\u003E\u003Cstrong\u003EПреимущества \u003C\u002Fstrong\u003E\u003Ccode\u003Evalue\u003C\u002Fcode\u003E классов в Kotlin:\u003C\u002Fp\u003E\u003Col\u003E\u003Cli\u003E\u003Cp\u003EЭкономия памяти за счет уменьшения количества объектов, которые создаются в программе.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EУлучшение производительности за счет уменьшения количества операций копирования объектов.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EУлучшение безопасности за счет возможности установки ограничений на значения свойств \u003Ccode\u003Evalue\u003C\u002Fcode\u003E класса.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Fol\u003E\u003Cp\u003E\u003Cstrong\u003EПри использовании \u003C\u002Fstrong\u003E\u003Ccode\u003Evalue\u003C\u002Fcode\u003E классов необходимо учитывать следующие ограничения и условия:\u003C\u002Fp\u003E\u003Col\u003E\u003Cli\u003E\u003Cp\u003EКласс должен быть помечен аннотацией \u003Ccode\u003E@JvmInline\u003C\u002Fcode\u003E, чтобы быть оптимизированным компилятором.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003E\u003Ccode\u003EValue\u003C\u002Fcode\u003E класс не может иметь перегруженных конструкторов или конструкторов без параметров.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EКласс должен иметь одно свойство (только \u003Ccode\u003Eval\u003C\u002Fcode\u003E), инициализированное в основном конструкторе.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003E\u003Ccode\u003EValue\u003C\u002Fcode\u003E класс не может быть наследником или наследоваться от другого класса.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003E\u003Ccode\u003EValue\u003C\u002Fcode\u003E класс может наследоваться от интерфейсов.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003E\u003Ccode\u003EValue\u003C\u002Fcode\u003E класс не может быть аннотирован как \u003Ccode\u003Eopen\u003C\u002Fcode\u003E, \u003Ccode\u003Eabstract\u003C\u002Fcode\u003E, \u003Ccode\u003Einner\u003C\u002Fcode\u003E или \u003Ccode\u003Esealed\u003C\u002Fcode\u003E.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Fol\u003E\u003Cp\u003E\u003Cstrong\u003EСравнение и преимущества \u003C\u002Fstrong\u003E\u003Ccode\u003Evalue\u003C\u002Fcode\u003E над \u003Ccode\u003Edata\u003C\u002Fcode\u003E классами и \u003Ccode\u003Etypealias\u003C\u002Fcode\u003E подробно описаны в статье: \u003Ca href=\"https:\u002F\u002Fhabr.com\u002Fru\u002Fpost\u002F691152\u002F\" rel=\"noopener noreferrer nofollow\"\u003Ehttps:\u002F\u002Fhabr.com\u002Fru\u002Fpost\u002F691152\u003C\u002Fa\u003E\u003Cbr\u002F\u003E\u003Cbr\u002F\u003E Краткие выводы из статьи про классы значений:\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003EДелают объявление переменных и сигнатуры функций более выразительными.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EСохраняют производительность примитивных типов.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EНесовместимы по присваиванию с их базовым типом, предотвращая пользователя от совершения глупых вещей.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EПоддерживают множество особенностей \u003Ccode\u003Edata\u003C\u002Fcode\u003E классов, таких как конструкторы, \u003Ccode\u003Einit\u003C\u002Fcode\u003E, методы и даже дополнительные свойства (но только через геттеры).\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003EПо словам автора (точнее переводчика \u003Ca href=\"https:\u002F\u002Fquickbirdstudios.com\u002Fblog\u002Fkotlin-value-classes\u002F\" rel=\"noopener noreferrer nofollow\"\u003Eоригинала\u003C\u002Fa\u003E): единственное оставшееся применение для \u003Ccode\u003Edata\u003C\u002Fcode\u003E классов — это когда вам нужно обернуть несколько параметров. \u003Ccode\u003EValue\u003C\u002Fcode\u003E классы ограничены одним параметром в их конструкторе.\u003C\u002Fp\u003E\u003Cp\u003EПростой пример использования \u003Ccode\u003Evalue\u003C\u002Fcode\u003E класса:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003E@JvmInline\nvalue class Age(val age: Int) {\n    init {\n        require(age &gt;= 0) { \"Age cannot be negative\" }\n    }\n}\n\ndata class Person(val name: String, val age: Age)\n\nfun main() {\n    val person = Person(\"Alice\", Age(30))\n    println(\"Name: ${person.name}, Age: ${person.age.age}\")\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EВ этом примере \u003Ccode\u003EAge\u003C\u002Fcode\u003E — это \u003Ccode\u003Evalue\u003C\u002Fcode\u003E класс, описывающий возраст человека. Он имеет один параметр \u003Ccode\u003Eage\u003C\u002Fcode\u003E, который передается в конструктор. Затем \u003Ccode\u003EAge\u003C\u002Fcode\u003E используется в качестве свойства в классе \u003Ccode\u003EPerson\u003C\u002Fcode\u003E. Таким образом, мы можем гарантировать, что возраст всегда будет неотрицательным, потому что в конструкторе \u003Ccode\u003EAge\u003C\u002Fcode\u003E используется блок \u003Ccode\u003Einit\u003C\u002Fcode\u003E, проверяющий, что переданный возраст не меньше нуля.\u003C\u002Fp\u003E\u003Cp\u003EВозможно, что у вас возникнет вопрос: \"Так можно же заменить \u003Ccode\u003Evalue\u003C\u002Fcode\u003E класс \u003Ccode\u003EAge\u003C\u002Fcode\u003E на \u003Ccode\u003Edata\u003C\u002Fcode\u003E класс и все будет работать также. В чем тогда преимущество в применении здесь \u003Ccode\u003Evalue\u003C\u002Fcode\u003E класса?\"\u003C\u002Fp\u003E\u003Cp\u003EПреимущество использования \u003Ccode\u003Evalue\u003C\u002Fcode\u003E класса здесь заключается в том, что он позволяет явно выразить намерение разработчика создать класс, который будет использоваться в качестве значения. Это может помочь в дальнейшей оптимизации кода, так как компилятор может производить дополнительные оптимизации для \u003Ccode\u003Evalue\u003C\u002Fcode\u003E классов, которые недоступны для обычных или \u003Ccode\u003Edata\u003C\u002Fcode\u003E классов. Также использование \u003Ccode\u003Evalue\u003C\u002Fcode\u003E класса \u003Ccode\u003EAge\u003C\u002Fcode\u003E с аннотацией \u003Ccode\u003E@JvmInline\u003C\u002Fcode\u003E позволяет избежать создания объекта при обращении к значению возраста, что может ускорить выполнение кода. Несмотря на то, что в данном примере это не так очевидно, но для более сложных и вычислительно затратных операций это может оказаться значительным преимуществом.\u003C\u002Fp\u003E\u003Cp\u003E\u003Cstrong\u003EПодробнее:\u003C\u002Fstrong\u003E \u003Ca href=\"https:\u002F\u002Fkotlinlang.ru\u002Fdocs\u002Finline-classes.html\" rel=\"noopener noreferrer nofollow\"\u003Ekotlinlang.ru\u003C\u002Fa\u003E, \u003Ca href=\"https:\u002F\u002Fwww.manusobles.com\u002Fposts\u002Finline-value-classes-kotlin\" rel=\"noopener noreferrer nofollow\"\u003Emanusobles.com\u003C\u002Fa\u003E, \u003Ca href=\"https:\u002F\u002Fhabr.com\u002Fru\u002Fpost\u002F691152\u002F\" rel=\"noopener noreferrer nofollow\"\u003Ehabr.com\u003C\u002Fa\u003E.\u003C\u002Fp\u003E\u003Ca class=\"anchor\" name=\"%D0%9A%D0%B0%D0%BA%D0%B0%D1%8F%20%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%B0%20%D0%BE%D1%82%20typealias?%20%D0%92%D0%BE%20%D1%87%D1%82%D0%BE%20%D0%BE%D0%BD%20%D0%BA%D0%BE%D0%BC%D0%BF%D0%B8%D0%BB%D0%B8%D1%80%D1%83%D0%B5%D1%82%D1%81%D1%8F?\" id=\"Какая польза от typealias? Во что он компилируется?\"\u003E\u003C\u002Fa\u003E\u003Cp\u003E\u003Ca href=\"#%D0%A1%D0%BF%D0%B8%D1%81%D0%BE%D0%BA%20%D1%82%D0%B5%D0%BC%20%D0%B8%20%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81%D0%BE%D0%B2\" rel=\"noopener noreferrer nofollow\"\u003E—————— ↑↑↑ к списку вопросов ↑↑↑ ——————\u003C\u002Fa\u003E\u003C\u002Fp\u003E\u003Ch2\u003EКакая польза от typealias? Во что он компилируется?\u003C\u002Fh2\u003E\u003Cp\u003E\u003Ccode\u003ETypealias\u003C\u002Fcode\u003E — это механизм создания синонимов (псевдонимов) для существующих типов. То есть, можно создать новое имя для уже существующего типа данных.\u003Cbr\u002F\u003E \u003Cbr\u002F\u003EПсевдонимы типов полезны, когда вы хотите сократить длинные имена типов, содержащих обобщения. К примеру, можно упрощать названия типов коллекций:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Etypealias NodeSet = Set&lt;Network.Node&gt;\ntypealias FileTable&lt;K&gt; = MutableMap&lt;K, MutableList&lt;File&gt;&gt;\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EПольза от использования \u003Ccode\u003Etypealias\u003C\u002Fcode\u003E заключается в том, что он повышает читабельность кода, делает его более выразительным и удобным для работы. Кроме того, он может упростить процесс переписывания кода в случае изменения типов в будущем.\u003C\u002Fp\u003E\u003Cp\u003EК примеру, если в проекте используется много \u003Ccode\u003EMap&lt;String, String&gt;\u003C\u002Fcode\u003E и вместо этого вы хотите использовать более описательное название, например \u003Ccode\u003EProperties\u003C\u002Fcode\u003E, вы можете определить новый тип для \u003Ccode\u003EMap&lt;String, String&gt;\u003C\u002Fcode\u003E с помощью следующего кода:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Etypealias Properties = Map&lt;String, String&gt;\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EТеперь вместо использования \u003Ccode\u003EMap&lt;String, String&gt;\u003C\u002Fcode\u003E можно использовать \u003Ccode\u003EProperties\u003C\u002Fcode\u003E для обозначения одного и того же типа данных. Таким образом, код становится более читаемым и понятным.\u003C\u002Fp\u003E\u003Cp\u003E\u003Cstrong\u003EВо что компилируется \u003C\u002Fstrong\u003E\u003Ccode\u003Etypealias\u003C\u002Fcode\u003E\u003Cstrong\u003E?\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\u003Cp\u003E\u003Ccode\u003ETypealias\u003C\u002Fcode\u003E не создает новый тип данных, а только создает псевдоним для существующего типа. При компиляции кода, все \u003Ccode\u003Etypealias\u003C\u002Fcode\u003E заменяются на соответствующий тип, поэтому \u003Ccode\u003Etypealias\u003C\u002Fcode\u003E не приводит к увеличению размера кода.\u003C\u002Fp\u003E\u003Cp\u003EНапример, \u003Ccode\u003Etypealias IntPredicate = (Int) -&gt; Boolean\u003C\u002Fcode\u003E при компиляции будет заменено на \u003Ccode\u003E(Int) -&gt; Boolean\u003C\u002Fcode\u003E, то есть функцию, принимающую значение типа \u003Ccode\u003EInt\u003C\u002Fcode\u003E и возвращающую значение типа \u003Ccode\u003EBoolean\u003C\u002Fcode\u003E.\u003C\u002Fp\u003E\u003Cp\u003E\u003Cstrong\u003EМожно ли использовать \u003C\u002Fstrong\u003E\u003Ccode\u003Etypealias\u003C\u002Fcode\u003E \u003Cstrong\u003Eдля функциональных типов?\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\u003Cp\u003EДа, можно использовать \u003Ccode\u003Etypealias\u003C\u002Fcode\u003E для функциональных типов в Kotlin. Например, вы можете создать псевдоним для типа функции, которая принимает два параметра типа \u003Ccode\u003EInt\u003C\u002Fcode\u003E и возвращает значение типа \u003Ccode\u003EString\u003C\u002Fcode\u003E, следующим образом:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Etypealias IntToString = (Int, Int) -&gt; String\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EЭто позволит вам использовать созданный псевдоним вместо полного объявления типа, то есть вместо:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Efun processValues(f: (Int, Int) -&gt; String) {\n    \u002F\u002F ...\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003Eможно использовать:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Efun processValues(f: IntToString) {\n    \u002F\u002F ...\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EКак и в случае с другими \u003Ccode\u003Etypealias\u003C\u002Fcode\u003E, компилятор Kotlin просто заменяет псевдоним на соответствующий тип при компиляции кода.\u003C\u002Fp\u003E\u003Cp\u003E\u003Cstrong\u003EПодробнее:\u003C\u002Fstrong\u003E \u003Ca href=\"https:\u002F\u002Fkotlinlang.ru\u002Fdocs\u002Freference\u002Ftype-aliases.html\" rel=\"noopener noreferrer nofollow\"\u003Ekotlinlang.ru\u003C\u002Fa\u003E, \u003Ca href=\"https:\u002F\u002Fhr-vector.com\u002Fkotlin\u002Ftype-aliases-psevdonimy-tipov-v-kotlin\" rel=\"noopener noreferrer nofollow\"\u003Ehr-vector.com\u003C\u002Fa\u003E\u003C\u002Fp\u003E\u003Ca class=\"anchor\" name=\"%D0%9A%D0%B0%D0%BA%D0%B8%D0%B5%20%D0%BA%D0%BE%D0%BB%D0%BB%D0%B5%D0%BA%D1%86%D0%B8%D0%B8%20%D0%B5%D1%81%D1%82%D1%8C%20%D0%B2%20Kotlin?\" id=\"Какие коллекции есть в Kotlin?\"\u003E\u003C\u002Fa\u003E\u003Cp\u003E\u003Ca href=\"#%D0%A1%D0%BF%D0%B8%D1%81%D0%BE%D0%BA%20%D1%82%D0%B5%D0%BC%20%D0%B8%20%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81%D0%BE%D0%B2\" rel=\"noopener noreferrer nofollow\"\u003E—————— ↑↑↑ к списку вопросов ↑↑↑ ——————\u003C\u002Fa\u003E\u003C\u002Fp\u003E\u003Ch2\u003EКакие коллекции есть в Kotlin?\u003C\u002Fh2\u003E\u003Cp\u003E\u003Cstrong\u003EКоллекция\u003C\u002Fstrong\u003E — это объект, содержащий в себе набор значений одного или различных типов, а также позволяющий к этим значениям обращаться и извлекать. Другими словами — это контейнер, в который вы можете помещать то, что вам нужно, а затем каким-либо образом с ним взаимодействовать. В Kotlin есть \u003Cstrong\u003Eтри типа коллекций\u003C\u002Fstrong\u003E:\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003E\u003Cstrong\u003EList\u003C\u002Fstrong\u003E (список). Упорядоченная коллекция, в которой к элементам можно обращаться по их индексам. Идентичные элементы (дубликаты) могут встречаться в списке более одного раза. Примером списка является предложение: это группа слов, их порядок важен, и они могут повторяться.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003E\u003Cstrong\u003ESet\u003C\u002Fstrong\u003E (множество\u002Fнабор). Неупорядоченная коллекция без повторяющихся значений. Примером множества является алфавит.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003E\u003Cstrong\u003EMap\u003C\u002Fstrong\u003E (словарь\u002Fассоциативный список). Набор из пар \"ключ-значение\". Ключи уникальны и каждый из них соответствует ровно одному значению. В коллекции могут присутствовать повторяющиеся значения, но не повторяющиеся ключи. Пример — ID сотрудников и их должностей. \u003Cstrong\u003EMap\u003C\u002Fstrong\u003E не является наследником интерфейса \u003Cstrong\u003ECollection\u003C\u002Fstrong\u003E.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003EДва типа интерфейсов, на основе которых создаются коллекции:\u003C\u002Fp\u003E\u003Col\u003E\u003Cli\u003E\u003Cp\u003E\u003Cstrong\u003EНеизменяемый (read-only)\u003C\u002Fstrong\u003E — дают доступ только для чтения (\u003Ccode\u003ESet\u003C\u002Fcode\u003E, \u003Ccode\u003EList\u003C\u002Fcode\u003E, \u003Ccode\u003EMap\u003C\u002Fcode\u003E, \u003Ccode\u003ECollection\u003C\u002Fcode\u003E).\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003E\u003Cstrong\u003EИзменяемый (mutable)\u003C\u002Fstrong\u003E — расширяет предыдущий интерфейс и дополнительно даёт доступ к операциям добавления, удаления и обновления элементов коллекции (\u003Ccode\u003EMutableSet\u003C\u002Fcode\u003E, \u003Ccode\u003EMutableList\u003C\u002Fcode\u003E, \u003Ccode\u003EMutableMap\u003C\u002Fcode\u003E, \u003Ccode\u003EMutableCollection\u003C\u002Fcode\u003E).\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Fol\u003E\u003Cfigure class=\"full-width \"\u003E\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw1560\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F471\u002F232\u002F032\u002F4712320326f3181bc5e9ef0ea07a943f.png\" alt=\"\" title=\"\" width=\"949\" height=\"551\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F471\u002F232\u002F032\u002F4712320326f3181bc5e9ef0ea07a943f.png\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cp\u003E\u003Cstrong\u003EФункции коллекций\u003C\u002Fstrong\u003E в доске \u003Ca href=\"https:\u002F\u002Ftrello.com\u002Fb\u002F7eWLU7kG\" rel=\"noopener noreferrer nofollow\"\u003ETrello\u003C\u002Fa\u003E.\u003C\u002Fp\u003E\u003Cp\u003E\u003Cstrong\u003EПодробнее о коллекциях:\u003C\u002Fstrong\u003E \u003Ca href=\"https:\u002F\u002Ftproger.ru\u002Farticles\u002Fkollekcii-v-kotlin-znakomstvo-i-osnovnye-funkcii\u002F\" rel=\"noopener noreferrer nofollow\"\u003Etproger.ru\u003C\u002Fa\u003E и \u003Ca href=\"https:\u002F\u002Fkotlinlang.ru\u002Fdocs\u002Freference\u002Fcollections-overview.html\" rel=\"noopener noreferrer nofollow\"\u003Ekotlinlang.ru\u003C\u002Fa\u003E\u003C\u002Fp\u003E\u003Ca class=\"anchor\" name=\"List\" id=\"List\"\u003E\u003C\u002Fa\u003E\u003Cp\u003E\u003Ca href=\"#%D0%A1%D0%BF%D0%B8%D1%81%D0%BE%D0%BA%20%D1%82%D0%B5%D0%BC%20%D0%B8%20%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81%D0%BE%D0%B2\" rel=\"noopener noreferrer nofollow\"\u003E—————— ↑↑↑ к списку вопросов ↑↑↑ ——————\u003C\u002Fa\u003E\u003C\u002Fp\u003E\u003Ch2\u003EList\u003C\u002Fh2\u003E\u003Cp\u003E\u003Cstrong\u003EСписок — это упорядоченная коллекция.\u003C\u002Fstrong\u003E Каждое значение, помещённое в \u003Ccode\u003EList\u003C\u002Fcode\u003E, называется элементом, к которому можно обращаться по индексу. Индексы начинаются с \"0\" и заканчиваются индексом последнего элемента в списке — \u003Ccode\u003E(list.size - 1)\u003C\u002Fcode\u003E. Список может содержать сколько угодно одинаковых элементов — дублей (в том числе \u003Ccode\u003Enull\u003C\u002Fcode\u003E).\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Eval trees = listOf(\"Сосна\", \"Берёза\", \"Дуб\") \u002F\u002F неизменяемый список\ntrees.add(\"Ясень\") \u002F\u002F ошибка\n\nval mutableTrees = mutableListOf(\"Сосна\", \"Берёза\", \"Дуб\") \u002F\u002F изменяемый список\nmutableTrees.add(\"Ясень\") \u002F\u002F всё ок\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EПо умолчанию в Kotlin реализацией \u003Ccode\u003EList\u003C\u002Fcode\u003E является \u003Ccode\u003EArrayList\u003C\u002Fcode\u003E, его  можно создать напрямую:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Eval mutableTrees = ArrayList&lt;String&gt;()\nmutableTrees.add(\"Ясень\")\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ca class=\"anchor\" name=\"Set\" id=\"Set\"\u003E\u003C\u002Fa\u003E\u003Cp\u003E\u003Ca href=\"#%D0%A1%D0%BF%D0%B8%D1%81%D0%BE%D0%BA%20%D1%82%D0%B5%D0%BC%20%D0%B8%20%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81%D0%BE%D0%B2\" rel=\"noopener noreferrer nofollow\"\u003E—————— ↑↑↑ к списку вопросов ↑↑↑ ——————\u003C\u002Fa\u003E\u003C\u002Fp\u003E\u003Ch2\u003ESet\u003C\u002Fh2\u003E\u003Cp\u003E\u003Cstrong\u003EМножество — это коллекция уникальных элементов\u003C\u002Fstrong\u003E. Это означает, что \u003Ccode\u003ESet\u003C\u002Fcode\u003E не может содержать дублей. Обратите внимание, что \u003Ccode\u003Enull\u003C\u002Fcode\u003E — это тоже уникальный элемент.\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Eval trees = setOf(\"Сосна\", \"Берёза\", \"Дуб\") \u002F\u002F неизменяемый сет\ntrees.add(\"Ясень\") \u002F\u002F ошибка\n\nval mutableTrees = mutableSetOf(\"Сосна\", \"Берёза\", \"Дуб\") \u002F\u002F изменяемый сет\nmutableTrees.add(\"Сосна\") \u002F\u002F проигнорируется\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EВ отличие от списка, множество не заботится о порядке элементов. Это означает, что при использовании функций, зависящих от порядка элементов, вы можете получить непредсказуемый результат. Но это зависит от реализации сета. Например, по умолчанию реализацией \u003Ccode\u003ESet\u003C\u002Fcode\u003E является \u003Ccode\u003ELinkedHashSet\u003C\u002Fcode\u003E, который сохраняет порядок вставки элементов.\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Eval numbers = setOf(1, 2, 3, 4)  \u002F\u002F по умолчанию LinkedHashSet\nval numbersBackwards = setOf(4, 3, 2, 1)\n\nprintln(numbers.first() == numbersBackwards.first()) \u002F\u002F false\nprintln(numbers.first() == numbersBackwards.last()) \u002F\u002F true\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EНо также существует \u003Ccode\u003EHashSet\u003C\u002Fcode\u003E, который не сохраняет порядок вставки элементов. И \u003Ccode\u003ELinkedHashSet\u003C\u002Fcode\u003E, и \u003Ccode\u003EHashSet\u003C\u002Fcode\u003E можно создать напрямую.\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Eval linkedHashSet = LinkedHashSet&lt;String&gt;()\nlinkedHashSet.add(\"Дуб\")\n\nval hashSet = HashSet&lt;String&gt;()\nhashSet.add(\"Ясень\")\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ca class=\"anchor\" name=\"Map\" id=\"Map\"\u003E\u003C\u002Fa\u003E\u003Cp\u003E\u003Ca href=\"#%D0%A1%D0%BF%D0%B8%D1%81%D0%BE%D0%BA%20%D1%82%D0%B5%D0%BC%20%D0%B8%20%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81%D0%BE%D0%B2\" rel=\"noopener noreferrer nofollow\"\u003E—————— ↑↑↑ к списку вопросов ↑↑↑ ——————\u003C\u002Fa\u003E\u003C\u002Fp\u003E\u003Ch2\u003EMap\u003C\u002Fh2\u003E\u003Cp\u003EАссоциативные списки с уникальными ключами и любыми значениями (дубликаты ключей не допускаются, значения могут быть одинаковыми). Связь между ключами и значениями происходит через специальную форму вызова метода (инфиксный вызов) \u003Cstrong\u003Eto\u003C\u002Fstrong\u003E.\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003E\u002F\u002F числа - это ключи, деревья - значения\nval map = mapOf(1 to \"Сосна\", 2 to \"Берёза\", 3 to \"Дуб\") \u002F\u002F неизменяемая мапа\nmap.put(4, \"Ясень\") \u002F\u002F ошибка\n\nval mutableMap = mutableMapOf(1 to \"Сосна\", 2 to \"Берёза\", 3 to \"Дуб\") \u002F\u002F изменяемая мапа\nmutableMap.put(4, \"Ясень\")\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EПо умолчанию реализацией мапы является \u003Ccode\u003ELinkedHashMap\u003C\u002Fcode\u003E, который сохраняет порядок вставки записей. Есть ещё \u003Ccode\u003EHashMap\u003C\u002Fcode\u003E, которая не сохраняет порядок вставки записей. Обе реализации можно создать напрямую.\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Eval linkedHashMap = LinkedHashMap&lt;Int, String&gt;()\nlinkedHashMap.put(1, \"Дуб\")\n\nval hashMap = HashMap&lt;Int, String&gt;()\nhashMap.put(1, \"Ясень\")\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ca class=\"anchor\" name=\"%D0%9A%D0%B0%D0%BA%D0%B0%D1%8F%20%D0%B8%D0%B7%20%D0%BA%D0%BE%D0%BB%D0%BB%D0%B5%D0%BA%D1%86%D0%B8%D0%B9%20%D0%BD%D0%B5%20%D1%8F%D0%B2%D0%BB%D1%8F%D0%B5%D1%82%D1%81%D1%8F%20%D0%B8%D0%BC%D0%BF%D0%BB%D0%B5%D0%BC%D0%B5%D0%BD%D1%82%D0%B0%D1%86%D0%B8%D0%B5%D0%B9%20Collection?\" id=\"Какая из коллекций не является имплементацией Collection?\"\u003E\u003C\u002Fa\u003E\u003Cp\u003E\u003Ca href=\"#%D0%A1%D0%BF%D0%B8%D1%81%D0%BE%D0%BA%20%D1%82%D0%B5%D0%BC%20%D0%B8%20%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81%D0%BE%D0%B2\" rel=\"noopener noreferrer nofollow\"\u003E—————— ↑↑↑ к списку вопросов ↑↑↑ ——————\u003C\u002Fa\u003E\u003C\u002Fp\u003E\u003Ch2\u003EКакая из коллекций не является имплементацией Collection?\u003C\u002Fh2\u003E\u003Cp\u003EИнтерфейс \u003Ccode\u003EMap\u003C\u002Fcode\u003E не является наследником интерфейса \u003Ccode\u003ECollection\u003C\u002Fcode\u003E.\u003C\u002Fp\u003E\u003Cp\u003EТехнически — это не коллекция, так как \u003Ccode\u003EMap\u003C\u002Fcode\u003E не наследуется от \u003Ccode\u003ECollection\u003C\u002Fcode\u003E. Но это также структура для хранения данных и ее всегда изучают и рассматривают вместе с коллекциями. В разговоре вполне нормально называть \u003Ccode\u003EMap\u003C\u002Fcode\u003E коллекцией.\u003C\u002Fp\u003E\u003Ca class=\"anchor\" name=\"Sequences%20%D0%B8%20%D0%B8%D1%85%20%D0%BE%D1%82%D0%BB%D0%B8%D1%87%D0%B8%D1%8F%20%D0%BE%D1%82%20%D0%BA%D0%BE%D0%BB%D0%BB%D0%B5%D0%BA%D1%86%D0%B8%D0%B9\" id=\"Sequences и их отличия от коллекций\"\u003E\u003C\u002Fa\u003E\u003Cp\u003E\u003Ca href=\"#%D0%A1%D0%BF%D0%B8%D1%81%D0%BE%D0%BA%20%D1%82%D0%B5%D0%BC%20%D0%B8%20%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81%D0%BE%D0%B2\" rel=\"noopener noreferrer nofollow\"\u003E—————— ↑↑↑ к списку вопросов ↑↑↑ ——————\u003C\u002Fa\u003E\u003C\u002Fp\u003E\u003Ch2\u003ESequences и их отличия от коллекций\u003C\u002Fh2\u003E\u003Cp\u003E\u003Ccode\u003ESequences\u003C\u002Fcode\u003E или последовательности — ещё один тип контейнера в Kotlin, но он \u003Cstrong\u003Eне является коллекцией\u003C\u002Fstrong\u003E. Последовательности очень похожи на коллекции, они предоставляют те же функции. Ключевая разница в том, что они применяют другой подход с многоэтапной обработкой элементов (например, когда вы последовательно вызываете некую цепочку вызовов к коллекции).\u003C\u002Fp\u003E\u003Cp\u003EПоследовательность — это итерируемый тип, с которым можно работать, не создавая ненужных промежуточных коллекций, выполняя все применимые операции над каждым элементом перед переходом к следующему.\u003C\u002Fp\u003E\u003Cp\u003E\u003Cstrong\u003EОтличия коллекции от последовательности:\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\u003Col\u003E\u003Cli\u003E\u003Cp\u003EЕсли обработка \u003Ccode\u003EIterable\u003C\u002Fcode\u003E состоит из нескольких шагов, то они выполняются \u003Cstrong\u003Eнемедленно\u003C\u002Fstrong\u003E: при завершении обработки каждый шаг возвращает свой результат — \u003Cstrong\u003Eпромежуточную коллекцию\u003C\u002Fstrong\u003E. Следующий шаг выполняется для этой промежуточной коллекции. \u003Ccode\u003ESequence\u003C\u002Fcode\u003E же по возможности выполняет обработку \u003Cstrong\u003E\"лениво\"\u003C\u002Fstrong\u003E — фактически вычисления происходят только тогда, когда запрашивается результат выполнения всех шагов.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003E\u003Ccode\u003EIterable\u003C\u002Fcode\u003E завершает каждый шаг для всей коллекции, а затем переходит к следующему шагу. \u003Ccode\u003ESequence\u003C\u002Fcode\u003E выполняет все шаги один за другим для каждого отдельного элемента.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003E\u003Ccode\u003EIterable\u003C\u002Fcode\u003E могут занимать больше памяти, чем последовательности, так как они вычисляют все элементы сразу и хранят их в памяти. \u003Ccode\u003ESequence\u003C\u002Fcode\u003E вычисляют элементы при необходимости и не хранят все элементы в памяти.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Fol\u003E\u003Cp\u003E\u003Cstrong\u003EЗачем вообще нужны Sequences?\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\u003Cp\u003EДля оптимизации производительности в работе с большими коллекциями (от 1000). Фишка в том, что значения в таких коллекциях создаются только по мере необходимости, не инициализируя их заранее. Из-за этого нет доступа к содержимому по индексу, а также не контролируется размер.\u003C\u002Fp\u003E\u003Cp\u003EПоследовательности позволяют избежать создания промежуточных результатов для каждого шага, тем самым повышая производительность всей цепочки вызовов. Однако \"ленивый\" характер последовательностей добавляет некоторые накладные расходы, которые могут быть значительными при обработке небольших коллекций или при выполнении более простых вычислений. Следовательно, вы должны рассмотреть, а затем самостоятельно решить, что вам подходит больше — \u003Ccode\u003ESequence\u003C\u002Fcode\u003E или \u003Ccode\u003EIterable\u003C\u002Fcode\u003E.\u003C\u002Fp\u003E\u003Cp\u003EСтатья о разнице между \u003Ccode\u003ESequences\u003C\u002Fcode\u003E и \u003Ccode\u003EIterable\u003C\u002Fcode\u003E на примере сортировки карандашей (с разъяснениями и картинками): \u003Ca href=\"https:\u002F\u002Ftypealias.com\u002Fguides\u002Fkotlin-sequences-illustrated-guide\u002F\" rel=\"noopener noreferrer nofollow\"\u003Etypealias.com\u003C\u002Fa\u003E\u003C\u002Fp\u003E\u003Cfigure class=\"full-width \"\u003E\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw1560\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F23d\u002Fa0e\u002Ffba\u002F23da0efba9d5fb49921b3e3c760f4d1d.png\" alt=\"\" title=\"\" width=\"1200\" height=\"699\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F23d\u002Fa0e\u002Ffba\u002F23da0efba9d5fb49921b3e3c760f4d1d.png\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cp\u003EСоздать последовательность можно через функцию \u003Ccode\u003EsequenceOf()\u003C\u002Fcode\u003E:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Eval cats = sequenceOf(\"Барсик\", \"Мурзик\", \"Рыжик\", \"Васька\")\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EЕсли у вас есть уже готовые списки \u003Ccode\u003EList\u003C\u002Fcode\u003E или множества \u003Ccode\u003ESet\u003C\u002Fcode\u003E, то их можно преобразовать в последовательность через \u003Ccode\u003EasSequence()\u003C\u002Fcode\u003E.\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Eval cats = listOf(\"Барсик\", \"Мурзик\", \"Рыжик\", \"Васька\")\nval catsSequence = cats.asSequence()\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E\u003Cstrong\u003EПодробнее о Sequences:\u003C\u002Fstrong\u003E \u003Ca href=\"http:\u002F\u002Fdeveloper.alexanderklimov.ru\u002Fandroid\u002Fkotlin\u002Fsequence.php\" rel=\"noopener noreferrer nofollow\"\u003Ealexanderklimov.ru\u003C\u002Fa\u003E, \u003Ca href=\"https:\u002F\u002Fbimlibik.github.io\u002Fposts\u002Fkotlin-collections\u002F#sequences\" rel=\"noopener noreferrer nofollow\"\u003Ebimlibik.github.io\u003C\u002Fa\u003E, \u003Ca href=\"https:\u002F\u002Fmetanit.com\u002Fkotlin\u002Ftutorial\u002F7.6.php\" rel=\"noopener noreferrer nofollow\"\u003Emetanit.com\u003C\u002Fa\u003E\u003C\u002Fp\u003E\u003Ca class=\"anchor\" name=\"%D0%9F%D1%80%D0%BE%D0%BC%D0%B5%D0%B6%D1%83%D1%82%D0%BE%D1%87%D0%BD%D1%8B%D0%B5%20(intermediate)%20%D0%B8%20%D1%82%D0%B5%D1%80%D0%BC%D0%B8%D0%BD%D0%B0%D0%BB%D1%8C%D0%BD%D1%8B%D0%B5%20(terminal)%20%D0%BE%D0%BF%D0%B5%D1%80%D0%B0%D1%86%D0%B8%D0%B8%20%D0%B2%20Sequences\" id=\"Промежуточные (intermediate) и терминальные (terminal) операции в Sequences\"\u003E\u003C\u002Fa\u003E\u003Cp\u003E\u003Ca href=\"#%D0%A1%D0%BF%D0%B8%D1%81%D0%BE%D0%BA%20%D1%82%D0%B5%D0%BC%20%D0%B8%20%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81%D0%BE%D0%B2\" rel=\"noopener noreferrer nofollow\"\u003E—————— ↑↑↑ к списку вопросов ↑↑↑ ——————\u003C\u002Fa\u003E\u003C\u002Fp\u003E\u003Ch2\u003EПромежуточные (intermediate) и терминальные (terminal) операции в Sequences\u003C\u002Fh2\u003E\u003Cp\u003E\u003Ccode\u003ESequence\u003C\u002Fcode\u003E представляет собой последовательность элементов, которые можно обрабатывать по одному или несколько штук сразу. Обработка элементов \u003Ccode\u003ESequence\u003C\u002Fcode\u003E происходит с помощью функций высшего порядка, которые называются операциями.\u003C\u002Fp\u003E\u003Cp\u003EОперации над \u003Ccode\u003ESequence\u003C\u002Fcode\u003E можно разделить на две категории: промежуточные (\u003Cstrong\u003Eintermediate\u003C\u002Fstrong\u003E) и терминальные (\u003Cstrong\u003Eterminal\u003C\u002Fstrong\u003E).\u003C\u002Fp\u003E\u003Cp\u003E\u003Cstrong\u003EПромежуточные операции (intermediate)\u003C\u002Fstrong\u003E — это операции, которые \u003Cstrong\u003Eвозвращают новую \u003C\u002Fstrong\u003E\u003Ccode\u003ESequence\u003C\u002Fcode\u003E.\u003C\u002Fp\u003E\u003Cp\u003EОни не выполняются немедленно, а лишь формируют новую последовательность элементов на основе исходной. Промежуточные операции не приводят к запуску вычислений, а готовят данные для последующих операций. Примеры:\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003E\u003Ccode\u003Efilter(predicate: (T) -&gt; Boolean)\u003C\u002Fcode\u003E: фильтрует элементы по заданному условию и возвращает новую \u003Ccode\u003ESequence\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003E\u003Ccode\u003Emap(transform: (T) -&gt; R)\u003C\u002Fcode\u003E: преобразует каждый элемент в новый элемент типа \u003Ccode\u003ER\u003C\u002Fcode\u003E и возвращает новую \u003Ccode\u003ESequence\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003E\u003Ccode\u003EsortedBy(selector: (T) -&gt; R?)\u003C\u002Fcode\u003E: сортирует элементы по заданному ключу и возвращает новую \u003Ccode\u003ESequence\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003E\u003Cstrong\u003EТерминальные операции (terminal)\u003C\u002Fstrong\u003E — это операции, которые выполняются немедленно и \u003Cstrong\u003Eвозвращают результат (не \u003C\u002Fstrong\u003E\u003Ccode\u003ESequence\u003C\u002Fcode\u003E).\u003C\u002Fp\u003E\u003Cp\u003EТерминальные операции могут быть вызваны только \u003Cstrong\u003Eпосле всех промежуточных операций\u003C\u002Fstrong\u003E, так как они завершают последовательность и начинают вычисление результатов на основе всей последовательности, полученной после выполнения всех промежуточных операций. Если же терминальная операция вызывается до выполнения всех промежуточных операций, то она не будет иметь доступа к полной последовательности и вернет неполный результат. Примеры:\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003E\u003Ccode\u003EtoList()\u003C\u002Fcode\u003E: преобразует \u003Ccode\u003ESequence\u003C\u002Fcode\u003E в список\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003E\u003Ccode\u003EtoSet()\u003C\u002Fcode\u003E: преобразует \u003Ccode\u003ESequence\u003C\u002Fcode\u003E в множество\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003E\u003Ccode\u003Ecount()\u003C\u002Fcode\u003E: возвращает количество элементов в \u003Ccode\u003ESequence\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003E\u003Ccode\u003EforEach(action: (T) -&gt; Unit)\u003C\u002Fcode\u003E: выполняет действие для каждого элемента \u003Ccode\u003ESequence\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003E\u003Cstrong\u003EВАЖНО:\u003C\u002Fstrong\u003E вычисления запускаются только при вызове терминальной функции (до этого момента никаких вычислений не производится).\u003C\u002Fp\u003E\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fhabr.com\u002Fru\u002Fpost\u002F721084\u002F\" rel=\"noopener noreferrer nofollow\"\u003EВопросы и ответы для собеседования по Kotlin. Часть 1\u003C\u002Fa\u003E\u003Cbr\u002F\u003E\u003Ca href=\"https:\u002F\u002Fhabr.com\u002Fru\u002Fpost\u002F722686\u002F\" rel=\"noopener noreferrer nofollow\"\u003EВопросы и ответы для собеседования по Kotlin. Часть 2\u003C\u002Fa\u003E \u003Cbr\u002F\u003E\u003Ca href=\"https:\u002F\u002Fhabr.com\u002Fru\u002Farticles\u002F728742\u002F\" rel=\"noopener noreferrer nofollow\"\u003EВопросы и ответы для собеседования по Kotlin. Часть 3\u003C\u002Fa\u003E — вы находитесь здесь\u003Cbr\u002F\u003E\u003Ca href=\"https:\u002F\u002Fhabr.com\u002Fru\u002Farticles\u002F736392\u002F\" rel=\"noopener noreferrer nofollow\"\u003EВопросы и ответы для собеседования по Kotlin. Часть 4\u003C\u002Fa\u003E   \u003C\u002Fp\u003E\u003C\u002Fdiv\u003E","tags":[{"titleHtml":"kotlin"},{"titleHtml":"собеседование вопросы"},{"titleHtml":"подготовка к собеседованию"},{"titleHtml":"котлин"},{"titleHtml":"андроид"},{"titleHtml":"faq"},{"titleHtml":"учебные материалы"},{"titleHtml":"android development"},{"titleHtml":"вопросы для собеседования"},{"titleHtml":"android"}],"metadata":{"stylesUrls":[],"scriptUrls":[],"shareImageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F80c\u002F337\u002Fc14\u002F80c337c1467b29382240a6db7b752cf1.png","shareImageWidth":1200,"shareImageHeight":630,"vkShareImageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F80c\u002F337\u002Fc14\u002F80c337c1467b29382240a6db7b752cf1.png","schemaJsonLd":"{\"@context\":\"http:\\\u002F\\\u002Fschema.org\",\"@type\":\"Article\",\"mainEntityOfPage\":{\"@type\":\"WebPage\",\"@id\":\"https:\\\u002F\\\u002Fhabr.com\\\u002Fru\\\u002Farticles\\\u002F728742\\\u002F\"},\"headline\":\"Вопросы и ответы для собеседования по Kotlin. Часть 3\",\"datePublished\":\"2023-04-28T11:55:37+03:00\",\"dateModified\":\"2024-01-25T12:38:51+03:00\",\"author\":{\"@type\":\"Person\",\"name\":\"Дмитрий\"},\"publisher\":{\"@type\":\"Organization\",\"name\":\"Habr\",\"logo\":{\"@type\":\"ImageObject\",\"url\":\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fwebt\\\u002Fa_\\\u002Flk\\\u002F9m\\\u002Fa_lk9mjkccjox-zccjrpfolmkmq.png\"}},\"description\":\"Вопросы и ответы для собеседования по Kotlin. Часть 1Вопросы и ответы для собеседования по Kotlin. Часть 2&nbsp;Вопросы и ответы для собеседования по Kotlin. Часть 3...\",\"url\":\"https:\\\u002F\\\u002Fhabr.com\\\u002Fru\\\u002Farticles\\\u002F728742\\\u002F#post-content-body\",\"about\":[\"h_programming\",\"h_java\",\"h_android_dev\",\"h_kotlin\",\"h_study\",\"f_develop\",\"f_management\"],\"image\":[\"https:\\\u002F\\\u002Fhabr.com\\\u002Fshare\\\u002Fpublication\\\u002F728742\\\u002Fb56f2f5aaf4498bb7ac01bd6ac9be1c2\\\u002F\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fupload_files\\\u002Fba3\\\u002F94c\\\u002F742\\\u002Fba394c742e1cee6fbaf17ffa02af0e09.png\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fupload_files\\\u002F471\\\u002F232\\\u002F032\\\u002F4712320326f3181bc5e9ef0ea07a943f.png\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fupload_files\\\u002F23d\\\u002Fa0e\\\u002Ffba\\\u002F23da0efba9d5fb49921b3e3c760f4d1d.png\"]}","metaDescription":"Вопросы и ответы для собеседования по Kotlin. Часть 1 Вопросы и ответы для собеседования по Kotlin. Часть 2 &nbsp; Вопросы и ответы для собеседования по Kotlin. Часть 3 — вы находитесь здесь Вопросы и...","mainImageUrl":null,"amp":true,"customTrackerLinks":[]},"polls":[],"commentsEnabled":{"status":true,"reason":null},"rulesRemindEnabled":false,"votesEnabled":true,"status":"published","plannedPublishTime":null,"checked":null,"hasPinnedComments":false,"format":"faq","banner":null,"multiwidget":null,"multiwidgetUuid":null,"readingTime":21,"complexity":"medium","isEditorial":false}},"articlesIds":{},"isLoading":false,"pagesCount":{},"route":{},"reasonsList":null,"postReasonsList":null,"view":"list","lastVisitedRoute":{},"ssrCommentsArticleIds":[""],"viewedPosts":[],"myFeedFilter":{"complexity":"all","score":"all","types":["articles","posts","news"]},"myFeedIsApplyFilters":false,"myFeedIsForce":false,"karma":{"userReasonsList":null}},"authorContribution":{"authors":{}},"betaTest":{"currentAnnouncement":null,"announcements":{},"announcementCards":null,"announcementComments":{},"announcementCommentThreads":{},"announcementCommentingStatuses":{},"archivedList":[]},"authorStatistics":{"articleRefs":{},"articleIds":{},"pagesCount":{},"route":{},"viewsCount":[],"maxStatsCount":{}},"career":{"seoLandings":[{"title":"Java разработчик","vacanciesCount":211,"itemUrl":"https:\u002F\u002Fcareer.habr.com\u002Fvacancies\u002Fjava_developer","itemHubs":["java","javame_dev","gradle"]},{"title":"Android разработчик ","vacanciesCount":10,"itemUrl":"https:\u002F\u002Fcareer.habr.com\u002Fvacancies\u002Fandroid_developer","itemHubs":["android_dev","mobile_dev","flutter"]}],"hubs":"programming,java,android_dev,kotlin,study"},"comments":{"articleComments":{},"articlePinnedComments":{},"searchCommentsResults":null,"pagesCount":null,"commentAccess":{},"scrollParents":{},"pageArticleComments":{"lastViewedComment":0,"postId":null,"lastCommentTimestamp":"","moderated":[],"moderatedIds":[],"commentRoute":"","idempotenceKey":""}},"companies":{"companyRefs":{},"companyIds":{},"companyTopIds":{},"pagesCount":{},"companyProfiles":{},"companiesCategories":[],"companiesCategoriesTotalCount":0,"companiesWidgets":{},"companiesWorkers":{},"companiesFans":{},"multiwidgets":{},"route":{},"isLoading":false,"companyWorkersLoading":false,"companyFansLoading":false,"multiwidgetLoading":false,"vacancies":{},"companiesGalleries":{},"companiesBanners":{},"companiesLandingVacancies":{},"companiesTechnologies":{},"workplaceInfo":null},"companyAdmin":{"companyInfo":null,"companyInfoLoading":false,"faqArticles":null,"brandingPreviewImageUrl":null,"jivoStatus":0,"adminNotifications":null,"availableInvitesCount":{}},"companyAdd":{"currentStep":"","stepsData":{},"uncompletedSteps":[],"isStepLoading":true,"isStepCommitting":false,"isInitialized":false,"agreementContent":""},"companiesContribution":{"hubs":{},"flows":{},"companyRefs":{}},"companyHubsContribution":{"contributionRefs":{"hubRefs":{},"hubIds":{}}},"conversation":{"messages":[],"respondent":null,"isLoadMore":false},"conversations":{"conversations":[],"pagesCount":0},"docs":{"menu":{},"articles":{},"mainMenu":[],"loading":{"main":false,"dropdown":false,"article":false}},"feature":{"isProbablyVisible":true},"fixedBanner":{"isArticleStickyPanelVisible":false,"isArticleStickyPanelAtTheBottom":false,"isFixedBannerVisible":false,"isStickyPanelIconsHidden":false},"flows":{"flows":[{"id":"1","alias":"develop","title":"Разработка","titleHtml":"Разработка","route":{"name":"FLOW_PAGE","params":{"flowName":"develop"}}},{"id":"6","alias":"admin","title":"Администрирование","titleHtml":"Администрирование","route":{"name":"FLOW_PAGE","params":{"flowName":"admin"}}},{"id":"2","alias":"design","title":"Дизайн","titleHtml":"Дизайн","route":{"name":"FLOW_PAGE","params":{"flowName":"design"}}},{"id":"3","alias":"management","title":"Менеджмент","titleHtml":"Менеджмент","route":{"name":"FLOW_PAGE","params":{"flowName":"management"}}},{"id":"4","alias":"marketing","title":"Маркетинг","titleHtml":"Маркетинг","route":{"name":"FLOW_PAGE","params":{"flowName":"marketing"}}},{"id":"7","alias":"popsci","title":"Научпоп","titleHtml":"Научпоп","route":{"name":"FLOW_PAGE","params":{"flowName":"popsci"}}}],"updates":{}},"global":{"isPwa":false,"device":"mobile","isHabrCom":true,"requestId":"2afebe28da7b3f50c6876dc7fd683d3d"},"hubs":{"hubRefs":{},"hubIds":{},"pagesCount":{},"isLoading":false,"route":{}},"hubsBlock":{"hubRefs":{},"hubIds":{}},"i18n":{"fl":"ru","hl":"ru"},"info":{"welcomePage":{},"isLoading":true},"location":{"urlStruct":{"protocol":null,"slashes":null,"auth":null,"host":null,"port":null,"hostname":null,"hash":null,"query":{},"pathname":"\u002Fru\u002Farticles\u002F728742\u002F","path":"\u002Fru\u002Farticles\u002F728742\u002F","href":"\u002Fru\u002Farticles\u002F728742\u002F"}},"me":{"user":null,"uuid":null,"ppgDemanded":false,"karmaResetInfo":{"canReincarnate":null,"wasReincarnated":null,"currentScore":null},"notes":null,"userUpdates":{"feeds":{"newPostsCount":null,"newThreadsCount":null,"newNewsCount":null,"newCount":null},"conversationUnreadCount":0}},"mostReadingList":{"mostReadingListIds":[],"mostReadingListRefs":null,"promoPost":null},"onboarding":{"currentStep":null,"stepsData":{},"stepsErrors":{},"completedSteps":[],"isStepCommitting":false,"isCommitDisabled":true},"ppa":{"articles":{},"card":null,"transactions":null,"totalTransactions":null,"isAccessible":null},"projectsBlocks":{"activeBlocks":{"courses":"project-block-article"}},"promoData":{"isLoading":false,"hasLoaded":false,"featurer":null,"megaposts":null,"promoLinks":null,"promoPosts":null,"sticker":null},"publicationStatistics":{"statsInfo":{},"statsFunnels":{},"statsGraph":{},"defaultSuggest":{},"suggest":{},"timeTracker":{},"isTrackingActivity":false,"isUserActive":true,"otherPublicationStats":{}},"pullRefresh":{"shouldRefresh":false},"sandbox":{"articleIds":[],"articleRefs":{},"pagesCount":null,"route":{},"lastVisitedRoute":{},"isLoading":false},"search":{"searchQueryError":null},"settingsOther":{"inputs":{"uiLang":{"errors":[],"ref":null,"value":""},"articlesLangEnglish":{"errors":[],"ref":null,"value":false},"articlesLangRussian":{"errors":[],"ref":null,"value":false},"agreement":{"errors":[],"ref":null,"value":false},"email":{"errors":[],"ref":null,"value":true},"digest":{"errors":[],"ref":null,"value":true}}},"similarList":{"similarListIds":[],"similarListRefs":null},"ssr":{"error":null,"isDataLoaded":true,"isDataLoading":false,"isHydrationFailed":false,"isServer":false},"stories":{"stories":[{"id":"story-998","author":{"logo":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F91a\u002F166\u002F49f\u002F91a16649f9ef89302a5a56cfa22a451d.png","title":"Яндекс Практикум","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up"},"title":"Как расти на работе?","lang":"ru","startTime":"2025-03-18T18:45:00+03:00","finishTime":"2025-03-31T19:00:00+03:00","slides":[{"id":"story-998_1","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fbf4\u002F911\u002F7e6\u002Fbf49117e637ff2099b3944f8803cd7a3.png","button":null},{"id":"story-998_2","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F3e3\u002Fc84\u002Fe83\u002F3e3c84e8330ea1ddf72e9d310457ed2f.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_3","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F84b\u002F533\u002F3c3\u002F84b5333c3e77e8dac62a8b50d042acb9.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_4","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F257\u002Feb0\u002F2be\u002F257eb02bea1777e13f3e647cae6e06cd.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_5","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F858\u002F086\u002F0ed\u002F8580860ed3497c043c04f9a42054d74f.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_6","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fcdf\u002F32f\u002F387\u002Fcdf32f38777f046c063b5182f4125e14.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_7","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fd48\u002Ff2d\u002F0e2\u002Fd48f2d0e2ecd7d746d738191bb913d8f.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_8","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fb38\u002Ffd7\u002Fee0\u002Fb38fd7ee04848bf3b058be7403438bd1.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_9","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F79e\u002Feaa\u002F9d8\u002F79eeaa9d8af5a288ad42bd9d63b5793a.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_10","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fcdc\u002F17e\u002F385\u002Fcdc17e38582dc67838b9abfb200d982e.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}}]},{"id":"story-996","author":{"logo":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fe63\u002F36d\u002Fa24\u002Fe6336da24460ab6b9fbc347d03eb263a.png","title":"Хабр","link":null},"title":"Здоровье айтишника","lang":"ru","startTime":"2025-03-17T10:22:00+03:00","finishTime":"2025-04-13T10:22:00+03:00","slides":[{"id":"story-996_1","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fb7c\u002F6de\u002F8ea\u002Fb7c6de8ea6789dbc30f071716172b6dd.jpg","button":null},{"id":"story-996_2","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F2e7\u002F88a\u002F0fe\u002F2e788a0fe61729ca8b23eb59069c844f.jpg","button":{"title":"Личный опыт","link":"https:\u002F\u002Fu.habr.com\u002Fzd-1","colorType":"light"}},{"id":"story-996_3","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fb93\u002F6f4\u002F256\u002Fb936f425653b84fa60ab00d09f78c543.jpg","button":{"title":"Как это было","link":"https:\u002F\u002Fu.habr.com\u002Fzd-2","colorType":"light"}},{"id":"story-996_4","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fc10\u002Fd14\u002Ff5a\u002Fc10d14f5a4859fe10baecbcc2bcb8828.jpg","button":{"title":"Шея в фокусе","link":"https:\u002F\u002Fu.habr.com\u002Fzd-3","colorType":"dark"}},{"id":"story-996_5","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F535\u002Fe1b\u002F77a\u002F535e1b77a9eb896262ad73321f2ad99f.jpg","button":{"title":"Фотоинструкция","link":"https:\u002F\u002Fu.habr.com\u002Fzd-4","colorType":"light"}},{"id":"story-996_6","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F569\u002Fc39\u002F49f\u002F569c3949f5b330ea85d4a1864f481c3d.jpg","button":{"title":"Сидите (не)правильно","link":"https:\u002F\u002Fu.habr.com\u002Fzd-5","colorType":"dark"}},{"id":"story-996_7","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F1f2\u002F1de\u002Fdbf\u002F1f21dedbf2902bc4061a75b839b63595.jpg","button":{"title":"Журнал изменений","link":"https:\u002F\u002Fu.habr.com\u002Fzd-6","colorType":"dark"}},{"id":"story-996_8","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F95a\u002F164\u002F21b\u002F95a16421badc3a9f1135309ab0c42c41.jpg","button":{"title":"Альтернатива","link":"https:\u002F\u002Fu.habr.com\u002Fzd-7","colorType":"light"}},{"id":"story-996_9","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F624\u002F027\u002F54d\u002F62402754d311798af44bcfe7f9abfedc.jpg","button":{"title":"Хроника поисков","link":"https:\u002F\u002Fu.habr.com\u002Fzd-8","colorType":"dark"}}]},{"id":"story-992","author":{"logo":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F3fe\u002F2fc\u002Fb05\u002F3fe2fcb05df852d7e1e00d44e54e39ae.png","title":"Сезоны Хабра","link":"https:\u002F\u002Fu.habr.com\u002Ffnstories"},"title":"Угадайте будущее в новом сезоне","lang":"ru","startTime":"2025-03-12T19:15:00+03:00","finishTime":"2025-03-31T23:56:00+03:00","slides":[{"id":"story-992_1","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fc56\u002Faf5\u002Fc43\u002Fc56af5c4377f7f7b94f7b6ad20fc92c3.png","button":{"title":"А что за сезон?","link":"https:\u002F\u002Fu.habr.com\u002Ffnstories","colorType":"light"}},{"id":"story-992_2","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F8fa\u002Fde7\u002F65d\u002F8fade765d99207f31c597283ae6ce912.png","button":{"title":"Какие темы нужны","link":"https:\u002F\u002Fu.habr.com\u002Ffnstories","colorType":"dark"}},{"id":"story-992_3","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F23e\u002F7b9\u002Fb24\u002F23e7b9b24cb056d1a42e8d31ccea16ce.png","button":{"title":"Сезон будущего ИИ","link":"https:\u002F\u002Fu.habr.com\u002Ffnstories","colorType":"dark"}},{"id":"story-992_4","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F27b\u002Fbfc\u002Fa18\u002F27bbfca18e656ee0122b5cb8eb2cb502.png","button":{"title":"Все правила сезона","link":"https:\u002F\u002Fu.habr.com\u002Ffnstories","colorType":"dark"}},{"id":"story-992_5","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F1e0\u002F6c6\u002Ff33\u002F1e06c6f33e703bbd2b2ae3baee3376fd.png","button":{"title":"Как участвовать","link":"https:\u002F\u002Fu.habr.com\u002Ffnstories","colorType":"dark"}}]},{"id":"story-990","author":{"logo":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F282\u002Fe80\u002Fbf1\u002F282e80bf1b73484126ed53c6f3e42692.png","title":"Aeza","link":"https:\u002F\u002Fu.habr.com\u002FI72qi"},"title":"С праздником весны!","lang":"ru","startTime":"2025-03-09T10:15:00+03:00","finishTime":"2025-03-30T23:59:00+03:00","slides":[{"id":"story-990_1","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F064\u002F9dd\u002Ff59\u002F0649ddf5949cae6c9342fb62034a36ac.png","button":null},{"id":"story-990_2","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F05f\u002F96b\u002F25e\u002F05f96b25e910c32256ee0b1916f21380.png","button":{"title":"Семейная история","link":"https:\u002F\u002Fu.habr.com\u002Fey2bY","colorType":"light"}},{"id":"story-990_3","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fcd1\u002Ff5d\u002F921\u002Fcd1f5d921bb9489ac11727272660bdb6.png","button":{"title":"Движущиеся картинки","link":"https:\u002F\u002Fu.habr.com\u002FWLKXU","colorType":"light"}},{"id":"story-990_4","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fb55\u002Fd45\u002Fec5\u002Fb55d45ec50e53275c60d16ea886a0672.png","button":{"title":"Личный опыт","link":"https:\u002F\u002Fu.habr.com\u002FSxrki","colorType":"light"}},{"id":"story-990_5","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Ffa7\u002F1ce\u002Ffca\u002Ffa71cefca5ed0a3fe8b50bd703b3605f.png","button":{"title":"Алгоритм","link":"https:\u002F\u002Fu.habr.com\u002Ftbz2p","colorType":"light"}},{"id":"story-990_6","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F435\u002F89d\u002Ff90\u002F43589df9018846cc6a8eed986226b252.png","button":{"title":"Выбрать сценарий","link":"https:\u002F\u002Fu.habr.com\u002F0RCPk","colorType":"light"}},{"id":"story-990_7","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F514\u002F5f8\u002F619\u002F5145f86194ad48dad48a846b42af0f93.png","button":{"title":"Jiraзамещение","link":"https:\u002F\u002Fu.habr.com\u002FEwhYq","colorType":"light"}},{"id":"story-990_8","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F439\u002Fa83\u002Fae7\u002F439a83ae78f7ef711e3b9bbed1ec26c5.png","button":{"title":"8 вещей","link":"https:\u002F\u002Fu.habr.com\u002FVTv2r","colorType":"light"}},{"id":"story-990_9","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F02d\u002F783\u002F2f7\u002F02d7832f7b1c95d88bff9f34209e204a.png","button":{"title":"Интерфейсы","link":"https:\u002F\u002Fu.habr.com\u002FUFOMZ","colorType":"light"}},{"id":"story-990_10","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F0cb\u002Ff7f\u002F0d9\u002F0cbf7f0d905d486ce4ff82bc939b21d5.png","button":{"title":"Стикеры ваши","link":"https:\u002F\u002Fu.habr.com\u002FoA1K7","colorType":"light"}}]},{"id":"story-984","author":{"logo":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F648\u002F61b\u002F9ae\u002F64861b9aecb7c474cd94063f98045541.png","title":"Хабр","link":null},"title":"Всегда котов!","lang":"ru","startTime":"2025-03-01T00:01:09+03:00","finishTime":"2025-03-23T16:21:00+03:00","slides":[{"id":"story-984_1","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fc06\u002Fc21\u002F93f\u002Fc06c2193ff34362ac2af782cf2571f55.png","button":null},{"id":"story-984_2","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fb68\u002F15f\u002F763\u002Fb6815f7630b9c015b1e67efb5bdf12d4.jpg","button":{"title":"Сделать purrrr","link":"https:\u002F\u002Fu.habr.com\u002Fj4DN1","colorType":"light"}},{"id":"story-984_3","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F550\u002F76e\u002Fd7a\u002F55076ed7a0954e243f944fc2f330623a.png","button":{"title":"Тыгыдык","link":"https:\u002F\u002Fu.habr.com\u002Fya360_kotov","colorType":"dark"}},{"id":"story-984_4","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F2fb\u002F23b\u002F06c\u002F2fb23b06cf294c2050104b2aef589788.jpg","button":{"title":"Исследование","link":"https:\u002F\u002Fu.habr.com\u002FbO3r0","colorType":"light"}},{"id":"story-984_5","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Ff50\u002F50f\u002F0ae\u002Ff5050f0aeea1335c4f0544c1863f8342.jpg","button":{"title":"Детали проекта","link":"https:\u002F\u002Fu.habr.com\u002FQJmhe","colorType":"light"}},{"id":"story-984_6","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F825\u002F3dd\u002F5f5\u002F8253dd5f5c19dd061578f1d09310a45f.jpg","button":{"title":"Эксперименты","link":"https:\u002F\u002Fu.habr.com\u002FVaOdo","colorType":"light"}},{"id":"story-984_7","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F3fb\u002Fc92\u002F0f9\u002F3fbc920f9ea81eca2c1c027ff77fc659.jpg","button":{"title":"Это не мем","link":"https:\u002F\u002Fu.habr.com\u002F0Wb3p","colorType":"light"}},{"id":"story-984_8","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F2b4\u002F794\u002Fc33\u002F2b4794c33844e60aad9468018fd132cd.jpg","button":{"title":"В засаде","link":"https:\u002F\u002Fu.habr.com\u002FnasCD","colorType":"dark"}}]}]},"technotext":{"years":[],"technotextDocForNominees":null,"technotextDocForWinners":null,"technotextInfo":{},"technotextInfoLoading":false,"technotextWinners":{},"technotextWinnersLoading":false},"userHubsContribution":{"contributionRefs":{"hubRefs":{},"hubIds":{}}},"userInvites":{"availableInvites":0,"usedInvitesIds":[],"usedInvitesRefs":{},"usedInvitesPagesCount":0,"unusedInvitesIds":[],"unusedInvitesRefs":{},"unusedInvitesPagesCount":0},"userVotes":{"karmaVotesList":[],"karmaVotesPagesCount":null,"karmaVotesListLoading":false,"commentsVotesList":[],"commentsVotesPagesCount":null,"commentsVotesListLoading":false,"postsVotesList":[],"postsVotesPagesCount":null,"postsVotesListLoading":false,"userVotesList":[],"userVotesPagesCount":null,"userVotesListLoading":false},"users":{"authorRefs":{},"authorIds":{},"pagesCount":{},"authorProfiles":{"dmt_ovs":{"alias":"dmt_ovs","badgets":[{"title":"Захабренный","description":"Пользователь с кармой \u003E0","url":null,"isRemovable":false},{"title":"Бета-тестер","description":"Участвует в тестировании новой функциональности","url":"https:\u002F\u002Fhabr.com\u002Fbeta\u002Fwelcome\u002F","isRemovable":false}],"aboutHtml":"","contacts":[],"invitedBy":{"issuerLogin":null,"timeCreated":"2023-02-24T22:37:10+00:00"},"careerProfile":null,"companies":{"pagesCount":1,"companyIds":["citymobil","lightmap","microsoft"],"companyRefs":{"citymobil":{"id":"5858","alias":"citymobil","titleHtml":"Ситимобил","descriptionHtml":"Творим городскую мобильность","imageUrl":"\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fcompany\u002Fcd3\u002F99d\u002Fb96\u002Fcd399db968a2981be5357e8cc3488bf2.jpg","relatedData":null,"statistics":{"subscribersCount":45049,"rating":0,"invest":null},"commonHubs":[]},"lightmap":{"id":"7774","alias":"lightmap","titleHtml":"Lightmap","descriptionHtml":"Разработчик мобильных игр","imageUrl":"\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fcompany\u002Fb48\u002Ff8d\u002F0e1\u002Fb48f8d0e11c97dd1e1b3c097307e2011.png","relatedData":null,"statistics":{"subscribersCount":36662,"rating":0,"invest":null},"commonHubs":[]},"microsoft":{"id":"68","alias":"microsoft","titleHtml":"Microsoft","descriptionHtml":"Microsoft — мировой лидер в области ПО и ИТ-услуг","imageUrl":"\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fcompany\u002Fe98\u002F5cf\u002F6a0\u002Fe985cf6a01b15006350561f26c70a41f.png","relatedData":null,"statistics":{"subscribersCount":163238,"rating":0,"invest":null},"commonHubs":[]}}}}},"userHubs":{},"userInvitations":{},"authorFollowers":{},"authorFollowed":{},"userSpecialization":{},"karmaStats":[],"statistics":null,"isLoading":false,"authorFollowersLoading":false,"authorFollowedLoading":false,"userHubsLoading":false,"userInvitationsLoading":false,"route":{}},"viewport":{"prevScrollY":{},"scrollY":0,"width":0},"tracker":{"notificationsLoading":false,"notificationsList":[],"notificationsPageCount":0,"pendingMarkNotificationsRead":[],"publicationsLoading":true,"publicationsList":[],"publicationsPageCount":0,"pendingDeletePublications":false,"pendingMarkPublicationsRead":false},"events":{"eventRefs":{},"eventIds":[],"pagesCount":0,"categories":[],"cities":[],"actualEvents":[{"id":"588","titleHtml":"Конкурс «Снежный код» от Хекслета. Три гранта на бесплатное 10-месячное обучение","descriptionHtml":"\u003Cp\u003EУчаствуйте в конкурсе грантов от онлайн-школы программирования Хекслет. Три победителя пройдут 10-месячное обучение с наставником, освоив один из востребованных стеков: Java, Python, JavaScript, PHP или Node.js.\u003C\u002Fp\u003E\u003Cp\u003EЭто шанс без вложений освоить новый стек, систематизировать знания, восполнить пробелы и повысить свою ценность на рынке. Технологии развиваются быстро — обновляйте навыки, чтобы не отставать.\u003C\u002Fp\u003E\u003Cp\u003EПомимо грантов, можно выиграть доступ ко всем курсам Хекслета, полезные подписки, сертификаты и подарки от Хабра и партнеров.\u003C\u002Fp\u003E\u003Cp\u003EВ прошлом году три победителя успешно завершили программу и уже работают в IT.  Инвестируйте время в свое развитие — участвуйте! \u003C\u002Fp\u003E","imageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Ff79\u002F1fc\u002F79d\u002Ff791fc79d0d9fdda84397ed0c0717764.png","eventUrl":"https:\u002F\u002Fspecial.hexlet.io\u002Fgrant?utm_source=partners&utm_medium=referral&utm_campaign=grant&utm_content=link&utm_term=placement_habr","startDay":"2025-02-17","finishDay":"2025-03-24","isOnline":true,"geo":[],"isArchive":false,"categories":[{"id":"2","titleHtml":"Разработка"}],"tags":["гранты","конкурс","Хекслет","Java","Python","JavaScript","PHP","Node.js"],"metadata":null},{"id":"596","titleHtml":"Офлайн-конференция Хабр х K-team: как удерживать таланты в 2025 году","descriptionHtml":"\u003Cp\u003EМы — Хабр и K-Team — провели масштабное исследование, чтобы разобраться, что на самом деле мотивирует сотрудников оставаться в компании и быть лояльными\u003C\u002Fp\u003E\u003Cp\u003EВместе прошли по тернистому пути к лояльности, опросив&nbsp;3 000+ сотрудников, HR и руководителей из разных отраслей:&nbsp;от ретейла и логистики до IT и промышленности. Мы заботливо собрали самые разные мнения, чтобы понять, что по-настоящему важно для людей, которые остаются в компании надолго и любят свою работу. \u003C\u002Fp\u003E\u003Cp\u003EНаша цель проста — помочь бизнесу не сливать бюджет на бесполезные инициативы, а сотрудникам — получать то, что им действительно нужно. \u003C\u002Fp\u003E\u003Cp\u003EПриглашаем вас на офлайн-презентацию в Москве в марте. Обсудим результаты исследования, ключевые выводы и разберем, как строить эффективные Retention-стратегии в 2025 году.\u003C\u002Fp\u003E\u003Cp\u003EКоличество мест ограничено, заявки проходят модерацию. Если ваша заявка будет одобрена, вы получите письмо с подтверждением и адресом встречи.\u003C\u002Fp\u003E\u003Cp\u003EЕсли прийти не получится — после ивента отправим результаты исследования всем, кто зарегистрируется на лендинге.\u003C\u002Fp\u003E\u003Cp\u003EМентальное здоровье сотрудников — важная часть корпоративной культуры. В «Ясно для бизнеса» изучают, как забота о команде влияет на вовлечённость и эффективность. Они подготовили гайд о работе с молодыми специалистами, а для теста сервиса есть промокод CORP-HABRTLNT-DISC20 на скидку 20% для первых сессий: https:\u002F\u002Fu.habr.com\u002FPQP4b\u003C\u002Fp\u003E\u003Cp\u003E\u003C\u002Fp\u003E","imageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fb14\u002Fcd3\u002F772\u002Fb14cd3772bc67698c8fbfd846e23824a.png","eventUrl":"https:\u002F\u002Fevent.k-team.ru\u002Fexpectations_vs_reality?utm_source=habr","startDay":"2025-03-20","startTime":"10:00","finishDay":"2025-03-20","finishTime":"17:00","isOnline":false,"geo":["Москва"],"isArchive":false,"categories":[{"id":"16","titleHtml":"Другое"}],"tags":["HR","HRD","Удержание сотрудников"],"metadata":null},{"id":"604","titleHtml":"IX HappyWorkForum | Аутентичность и ментальное здоровье персонала","descriptionHtml":"\u003Cp\u003EБолее 250 HRD, первые лица компаний и владельцы крупного бизнеса обсудят лучшие практики благополучия и управление командой.\u003C\u002Fp\u003E\u003Cp\u003EПочему ментальное здоровье становится KPI бизнеса?\u003C\u002Fp\u003E\u003Cp\u003EГде граница ответственности за выгорание и стресс сотрудников?\u003C\u002Fp\u003E\u003Cp\u003EКак стать работодателем №1?\u003C\u002Fp\u003E\u003Cp\u003EКак управлять уставшими командами?\u003C\u002Fp\u003E\u003Cp\u003EКак справляться с выгоранием руководителей?\u003C\u002Fp\u003E\u003Cp\u003EЧем замотивировать сотрудников, когда деньги уже не работают?&nbsp;&nbsp;\u003C\u002Fp\u003E\u003Cp\u003EКак решать ценностные конфликты?\u003C\u002Fp\u003E\u003Cp\u003EУспешные корпоративные программы: что реально работает?&nbsp;&nbsp;\u003C\u002Fp\u003E\u003Cp\u003EВ программе презентация отчёта по развитию лидерства, батлы, практические кейсы и нетворкинг.\u003C\u002Fp\u003E\u003Cp\u003EСреди спикеров, представители компаний: Т-банк, Сравни.ру, Ростелеком, ТД Ренна, Спортмастер, ТрансТелеком, Оптиком, Норникель, Азбука вкуса, ЕВМ и другие.\u003C\u002Fp\u003E\u003Cp\u003EУчастие для HRD, руководителей и владельцев бизнеса без оплаты. Действует строгая модерация.\u003C\u002Fp\u003E\u003Cp\u003E\u003C\u002Fp\u003E","imageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F733\u002F9ef\u002F194\u002F7339ef1945f3ee6906daf89db79829d4.png","eventUrl":"https:\u002F\u002Fhappyforum.ru\u002F?utm_source=habr&utm_medium=email&utm_campaign=hwf","startDay":"2025-03-20","startTime":"10:00","finishDay":"2025-03-20","finishTime":"18:00","isOnline":true,"geo":["Москва"],"isArchive":false,"categories":[{"id":"16","titleHtml":"Другое"}],"tags":["HRD","HR"],"metadata":null},{"id":"612","titleHtml":"Вебинар «Мастерская бюджета: как управлять затратами на облачные ресурсы»","descriptionHtml":"\u003Cp\u003EРасскажем, как сэкономить на использовании облачных сервисов через возможности личного кабинета, сервисы с free tier и акции. Покажем, как оптимизировать потребление ресурсов и настроить лимиты бюджетов.\u003C\u002Fp\u003E\u003Cp\u003EПрограмма вебинара:\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003EАнализ текущей утилизации ресурсов: поиск ресурсов с низкой утилизацией и анализ возможной оптимизации.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EКалькулятор затрат: демо-настройки параметров для точных прогнозов расходов.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EАнализ детализированных данных: подходы к аналитике, включая метаданные.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EОптимизация потребления: использование зарезервированных инстансов и спотовых экземпляров.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EАнализ бесплатного потребления: как использовать free tier для сокращения затрат.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EНастройка лимитов бюджетов: автоматизация и уведомления для контроля расходов.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EИспользование Public API: тегирование ресурсов для лучшей аналитики затрат.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003EВебинар будет интересен менеджерам облачных ресурсов и IT-департаментов, DevOps-инженерам и сотрудникам, в чью зону ответственности входит контроль над облачными расходами.\u003C\u002Fp\u003E","imageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F38f\u002F10d\u002Ff4c\u002F38f10df4c7f9d7c5d4610fe426af0ab4.png","eventUrl":"https:\u002F\u002Fu.habr.com\u002Fcldr_cloudeventwebinar","startDay":"2025-03-20","startTime":"11:00","finishDay":"2025-03-20","isOnline":true,"geo":[],"isArchive":false,"categories":[{"id":"2","titleHtml":"Разработка"},{"id":"4","titleHtml":"Администрирование"}],"tags":["вебинар cloudru","вебинар для айтишников","вебинар про облака"],"metadata":null},{"id":"616","titleHtml":"Бизнес-конференция «Digital Brand Day 2025: Орбита 2025»","descriptionHtml":"\u003Cp\u003E21 марта конференция «Digital Brand Day 2025: Орбита 2025» в восьмой раз соберёт ведущих экспертов цифрового маркетинга и рекламы для обсуждения главных трендов digital-рынка и новых инструментов, которые определят стратегию брендов.\u003C\u002Fp\u003E\u003Cp\u003EВ основе темы Digital Brand Day 2025 лежит фундаментальный вопрос философии: что первично — материя или сознание? А что же первично в цифровой среде — технологии или идеи? Конференция станет эпицентром открытий, где мы вместе проложим путь сквозь бескрайние просторы рекламного космоса и наметим вектор развития цифрового маркетинга.\u003C\u002Fp\u003E\u003Cp\u003EГостей «Digital Brand Day: Орбита 2025» ждёт не только насыщенная программа, но и возможность завести полезные знакомства, увидеть, каким будет диджитал завтра.\u003C\u002Fp\u003E","imageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F523\u002F7fb\u002F13a\u002F5237fb13ad7fb6fb483c49691aaec836.png","eventUrl":"https:\u002F\u002Fu.habr.com\u002Fcldr_digitalbrandday","startDay":"2025-03-21","startTime":"10:00","isOnline":false,"geo":["Москва"],"isArchive":false,"categories":[{"id":"10","titleHtml":"Маркетинг"},{"id":"16","titleHtml":"Другое"}],"tags":["digital brand day","бизнес-конференция digital brand day","цифровой маркетинг","digital-рынок"],"metadata":null},{"id":"608","titleHtml":"Вебинар «Контент-маркетинг здорового человека: как привлечь внимание аудитории»","descriptionHtml":"\u003Cp\u003E27 марта в 16:00 МСК вместе с агентством Loft PR Studio проведем открытый вебинар о том, как писать про здоровье на Хабре. \u003C\u002Fp\u003E\u003Cp\u003EНа вебинаре разберем, что помогает удерживать внимание и превращает контент в работающий инструмент. Поделимся опытом брендов, которые ведут блоги и регулярно публикуют статьи.\u003C\u002Fp\u003E\u003Cp\u003EБудет интересно тем, кто продвигает товары и услуги для здоровья на аудиторию B2C и B2B. \u003C\u002Fp\u003E\u003Cp\u003E🔗 Участие бесплатное, но нужна предварительная регистрация.\u003C\u002Fp\u003E","imageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F8fd\u002Fe04\u002Fddd\u002F8fde04ddd9ba3f6bcd515aa6209f96b7.png","eventUrl":"https:\u002F\u002Fhabr.timepad.ru\u002Fevent\u002F3266126\u002F?utm_refcode=b5d44b4f1d5f2c06b5696586408b58e610baafd8","startDay":"2025-03-27","startTime":"16:00","finishDay":"2025-03-27","finishTime":"18:00","isOnline":true,"geo":[],"isArchive":false,"categories":[{"id":"10","titleHtml":"Маркетинг"},{"id":"16","titleHtml":"Другое"}],"tags":["Вебинар","Контент","Хабр"],"metadata":null},{"id":"606","titleHtml":"Серия вебинаров «DevOps Middle: AvitoTech vs ecom.tech»","descriptionHtml":"\u003Cp\u003EУчебный центр Слёрм запустил серию бесплатных вебинаров «Честные вакансии: DevOps Middle».\u003C\u002Fp\u003E\u003Cp\u003EДва раза в неделю Вячеслав Федосеев, TeamLead DevOps в «Честном знаке» и автор телеграм-канала «DevOps Bootcamp с Федосеевым» встречается в прямом эфире с экспертами из бигтеха, чтобы обсудить:\u003C\u002Fp\u003E\u003Col\u003E\u003Cli\u003E\u003Cp\u003EКакие задачи должен решать DevOps middle.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EКакими основными и дополнительными инструментами и подходами должен владеть DevOps middle.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EСтоп-факторы на собеседовании.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EКак выглядит рабочий день DevOps middle.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EКакие софт-скилы действительно важны.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Fol\u003E\u003Cp\u003E31 марта состоится встреча с экспертами AvitoTech, 2 апреля — с ecom.tech. Кому подходите вы, а кто — вам? Разберёмся вместе на вебинарах.\u003C\u002Fp\u003E\u003Cp\u003EПодробности — в telegram-боте.\u003C\u002Fp\u003E\u003Cp\u003E\u003C\u002Fp\u003E","imageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fb99\u002F62a\u002Fb24\u002Fb9962ab2439c6edc80f96d7f0a847c72.png","eventUrl":"https:\u002F\u002Fu.habr.com\u002Fcldr_slermdevops","startDay":"2025-03-31","startTime":"17:00","isOnline":true,"geo":[],"isArchive":false,"categories":[{"id":"2","titleHtml":"Разработка"},{"id":"4","titleHtml":"Администрирование"}],"tags":["Вебинар Слерм","Вебинар Devops","Честные вакансии","Слерм","Честные вакансии Devops Middle"],"metadata":null},{"id":"618","titleHtml":"Реалити для разработчиков: узнайте, как строится новое публичное облако MWS","descriptionHtml":"\u003Cp\u003EBuilding the Cloud — это реалити-проект для разработчиков о новом облаке МТС Web Services. Каждый эпизод посвящён отдельному building-блоку новой облачной платформы.\u003C\u002Fp\u003E\u003Cp\u003EВ прямом эфире:\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003EПоказываем архитектуру сервисов облака ещё до релиза.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EДелимся опытом на реальных кейсах из разработки.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EОтвечаем на вопросы в прямом эфире.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003EВ новом выпуске проекта расскажем, как строим underlay-сеть нового облака.\u003C\u002Fp\u003E\u003Cp\u003EВы узнаете:\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003EКак мы поменяли подход к построению underlay-сети в новом облаке MWS.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EКакую архитектуру строим и как реализовали изоляцию management и data plane.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EКак обеспечиваем отказоустойчивость и производительность на уровне физической инфраструктуры.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003EНовый выпуск Building the Cloud будет интересен сетевым инженерам, backend-разработчикам, DevOps- и SRE-инженерам, а также всем, кто интересуется сетевыми или облачными технологиями.\u003C\u002Fp\u003E\u003Cp\u003EРегистрируйтесь по ссылке, подключайтесь к прямому эфиру и задавайте вопросы в чате.\u003C\u002Fp\u003E\u003Cp\u003EЗа самый интересный вопрос подарим фирменный мерч MWS.\u003C\u002Fp\u003E\u003Cp\u003EДо встречи в эфире.\u003C\u002Fp\u003E","imageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Ff76\u002F0f9\u002Fa82\u002Ff760f9a827b851a5eeca4802c643a91d.png","eventUrl":"https:\u002F\u002Fu.habr.com\u002Fcldr_buildingthecloud4","startDay":"2025-04-03","startTime":"11:00","isOnline":true,"geo":[],"isArchive":false,"categories":[{"id":"2","titleHtml":"Разработка"}],"tags":["реалити-проект для разработчиков","Реалити для разработчиков","облако","облако MWS"],"metadata":null},{"id":"620","titleHtml":"Открытая встреча «System Analysis Meetup SberHealth»","descriptionHtml":"\u003Cp\u003EВ программе:\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003EГоргоц Мария, старший системный аналитик, расскажет про описание требований для мобильных приложений.&nbsp;\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EНижник Станислав, ведущий системный аналитик, расскажет про книжный клуб системных аналитиков: «Как мы создали сообщество для обмена знаниями».\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EВ качестве приглашённого спикера Севостьянова Анастасия, ведущий системный аналитик в Альфа-Банке, расскажет про мидл слой без хаоса: «Как сделать документацию понятной и живой».&nbsp;\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003EПосле сессии с докладами проведём профессиональную игру для офлайн-участников «Искусство защиты абсурда».&nbsp;\u003C\u002Fp\u003E\u003Cp\u003EВедущая митапа Пашкова Ольга, руководитель направления методологии и системного анализа в СберЗдоровье.\u003C\u002Fp\u003E","imageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Feba\u002Fc37\u002F879\u002Febac378793b959ebce42f41713e7b67f.jpg","eventUrl":"https:\u002F\u002Fu.habr.com\u002Fcldr_sbermeetup","startDay":"2025-04-03","startTime":"17:00","finishDay":"2025-04-03","finishTime":"23:00","isOnline":true,"geo":["Москва"],"isArchive":false,"categories":[{"id":"12","titleHtml":"Аналитика"}],"tags":["Семинар аналитика","сбер митап","системная аналитика митап","системная аналитика"],"metadata":null},{"id":"590","titleHtml":"«GoCloud 2025» — масштабная IT-конференция про облака и AI","descriptionHtml":"\u003Cp\u003EПоговорим про глобальные тренды в AI, расскажем про широкий набор сценариев работы в облаке, поделимся последними релизами и нашими планами, чтобы показать, какой простор открывают облачные и AI-технологии для бизнеса и разработчиков.\u003C\u002Fp\u003E\u003Cp\u003EЧто ждёт участников в этом году:\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003EТри трека: инфраструктура и инструменты, AI и R&amp;D и сценарии работы в облаке.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003E30+ спикеров из Cloud.ru и ведущих российских компаний.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003ELive-демонстрации облачных платформ и нетворкинг с экспертами.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EНе только доклады: интерактивные зоны, afterparty с музыкальной программой и кастомный мерч.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003EКому будет полезно: техническим лидерам, IT-директорам, бизнес-руководителям, разработчикам, DevOps-инженерам, архитекторам, дата-инженерам, AI\u002FML-инженерам, дата-сайентистам, SRE-инженерам, системным администраторам, специалистам по информационной безопасности.\u003C\u002Fp\u003E\u003Cp\u003EАдрес: Москва, Цифровое деловое пространство (ЦДП), ул. Покровка, 47.\u003C\u002Fp\u003E\u003Cp\u003E\u003C\u002Fp\u003E","imageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F31b\u002Fe68\u002F295\u002F31be6829578e7934fbc944396eb330b1.png","eventUrl":"https:\u002F\u002Fu.habr.com\u002Fcldr_gocloud","startDay":"2025-04-10","startTime":"10:00","finishDay":"2025-04-10","finishTime":"20:00","isOnline":true,"geo":["Москва"],"isArchive":false,"categories":[{"id":"2","titleHtml":"Разработка"},{"id":"4","titleHtml":"Администрирование"},{"id":"8","titleHtml":"Менеджмент"}],"tags":["конференция Cloud.ru","AI","ИИ","айти конференция","облачные хранилища"],"metadata":null},{"id":"516","titleHtml":"IT-конференция Merge Tatarstan 2025","descriptionHtml":"\u003Cp\u003EКрупнейшая региональная IT-конференция России собирает профессионалов со всей страны для нетворкинга, обмена опытом и поиска новых деловых контактов.\u003C\u002Fp\u003E\u003Cp\u003EMerge Tatarstan — это 7 тематических конференций на одной площадке, 2000 участников, более 170 спикеров-практиков, мастер-классы, воркшопы и BoF-сессии.\u003C\u002Fp\u003E\u003Cp\u003EК участию в конференции приглашаются разработчики, QA, тимлиды, Project\u002FProduct-менеджеры, маркетологи, аналитики, UI\u002FUX-дизайнеры, PR-специалисты, HR-менеджеры, владельцы бизнеса и начинающие специалисты.\u003C\u002Fp\u003E\u003Cp\u003E\u003C\u002Fp\u003E","imageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F0e9\u002F3a8\u002F3ec\u002F0e93a83ecea09f806d1df907ddb036a4.jpg","eventUrl":"https:\u002F\u002Fu.habr.com\u002Fcldr_tatarstan","startDay":"2025-04-25","startTime":"09:00","finishDay":"2025-04-26","finishTime":"19:30","isOnline":false,"geo":["Казань"],"isArchive":false,"categories":[{"id":"2","titleHtml":"Разработка"},{"id":"10","titleHtml":"Маркетинг"},{"id":"16","titleHtml":"Другое"}],"tags":["Разработка","IT","PR","UI\u002FUX","бизнес","маркетинг","аналитика"],"metadata":null},{"id":"610","titleHtml":"Летняя айти-тусовка Summer Merge","descriptionHtml":"\u003Cp\u003EЛетняя айти-тусовка возвращается.\u003C\u002Fp\u003E\u003Cp\u003EВырваться из рутины и сменить обстановку на несколько дней можно вместе с Summer Merge.&nbsp;\u003C\u002Fp\u003E\u003Cp\u003EСосновый лес, чистый воздух, живое общение с экспертами IT, спортивные состязания, мастер-классы, квесты, встречи с друзьями, новые знакомства, afterparty — забудьте про суету города и окунитесь в приятную атмосферу digital detox. В эти летние IT-выходные мы обещаем атмосферу ярких приключений.&nbsp;\u003C\u002Fp\u003E\u003Cp\u003EЖдём вас 20—22 июня в экопарке «Русский берег» на Summer Merge.\u003C\u002Fp\u003E","imageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F652\u002F12d\u002F998\u002F65212d998fb4939d9787bd9c726d2acb.png","eventUrl":"https:\u002F\u002Fu.habr.com\u002Fcldr_summermerge","startDay":"2025-06-20","finishDay":"2025-06-22","isOnline":false,"geo":["Ульяновская область"],"isArchive":false,"categories":[{"id":"2","titleHtml":"Разработка"},{"id":"16","titleHtml":"Другое"}],"tags":["летняя айти-тусовка","айти-кэмп","летний выезд для айтишников","Summer Merge"],"metadata":null}],"currentEvent":null,"eventsFilter":{"city":"all","timeStarted":null,"timeEnded":null}},"wysiwyg":{"WYSIWYGRulesRefs":null}};(function(){var s;(s=document.currentScript||document.scripts[document.scripts.length-1]).parentNode.removeChild(s);}());</script><script src="https://assets.habr.com/habr-web/js/chunk-vendors.3b11d41f.js" defer></script><script src="https://assets.habr.com/habr-web/js/app.7a97ea6d.js" defer></script></div>
    <div id="overlays"><!----><!--teleport anchor--><!----><!--teleport anchor--><!----><!--teleport anchor--><!----><!--teleport anchor--><!----><!--teleport anchor--><!----><!--teleport anchor--></div>
    
    
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-S28W1WC23F"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());
    </script>
  
  <script type="text/javascript" >
    (function(m,e,t,r,i,k,a){m[i]=m[i]||function(){(m[i].a=m[i].a||[]).push(arguments)};
    m[i].l=1*new Date();k=e.createElement(t),a=e.getElementsByTagName(t)[0],k.async=1,k.src=r,a.parentNode.insertBefore(k,a)})
    (window, document, "script", "https://mc.yandex.ru/metrika/tag.js", "ym");

  </script>
    <script type="text/javascript">
      window.addEventListener('load', function () {
        setTimeout(() => {
          const img = new Image();
          img.src = 'https://vk.com/rtrg?p=VK-RTRG-421343-57vKE';
        }, 0);
      });
    </script>
  
    </body>

    </html>
