<!DOCTYPE html>
<html lang="ru">

  <head>
    <title>Облегчаем разработку Flutter-приложений: Создание плагинов с помощью Kotlin Multiplatform &#x2F; Хабр</title>
<meta property="fb:app_id" content="444736788986613">
<meta property="fb:pages" content="472597926099084">
<meta name="twitter:card" content="summary_large_image">
<meta name="twitter:site" content="@habr_com">
<meta property="og:site_name" content="Хабр">
<link href="https://habr.com/ru/rss/post/880174/?fl=ru" type="application/rss+xml" title rel="alternate" name="rss">
<link href="https://habr.com/ru/companies/otus/articles/880174/" rel="canonical" data-hid="e3fa780">
<link rel="image_src" href="https://habrastorage.org/getpro/habr/upload_files/aa0/a99/ec0/aa0a99ec09f4c5e42dbe8d7682621aca.png" data-hid="2a79c45">
<link rel="amphtml" href="https://habr.com/ru/amp/publications/880174/">
<meta property="og:title" content="Облегчаем разработку Flutter-приложений: Создание плагинов с помощью Kotlin Multiplatform">
<meta name="twitter:title" content="Облегчаем разработку Flutter-приложений: Создание плагинов с помощью Kotlin Multiplatform">
<meta name="aiturec:title" content="Облегчаем разработку Flutter-приложений: Создание плагинов с помощью Kotlin Multiplatform">
<meta name="description" content="Будучи Flutter-разработчиками, мы часто сталкиваемся с необходимостью написания кода, ориентированного на конкретную платформу. Хоть Flutter и предоставляет полноценный фреймворк для создания...">
<meta itemprop="description" content="Будучи Flutter-разработчиками, мы часто сталкиваемся с необходимостью написания кода, ориентированного на конкретную платформу. Хоть Flutter и предоставляет полноценный фреймворк для создания...">
<meta property="og:description" content="Будучи Flutter-разработчиками, мы часто сталкиваемся с необходимостью написания кода, ориентированного на конкретную платформу. Хоть Flutter и предоставляет полноценный фреймворк для создания...">
<meta name="twitter:description" content="Будучи Flutter-разработчиками, мы часто сталкиваемся с необходимостью написания кода, ориентированного на конкретную платформу. Хоть Flutter и предоставляет полноценный фреймворк для создания...">
<meta property="aiturec:description" content="Будучи Flutter-разработчиками, мы часто сталкиваемся с необходимостью написания кода, ориентированного на конкретную платформу. Хоть Flutter и предоставляет полноценный фреймворк для создания...">
<meta itemprop="image" content="https://habrastorage.org/getpro/habr/upload_files/aa0/a99/ec0/aa0a99ec09f4c5e42dbe8d7682621aca.png">
<meta property="og:image" content="https://habrastorage.org/getpro/habr/upload_files/aa0/a99/ec0/aa0a99ec09f4c5e42dbe8d7682621aca.png">
<meta property="og:image:width" content="1200">
<meta property="og:image:height" content="630">
<meta property="aiturec:image" content="https://habrastorage.org/getpro/habr/upload_files/aa0/a99/ec0/aa0a99ec09f4c5e42dbe8d7682621aca.png">
<meta name="twitter:image" content="https://habrastorage.org/getpro/habr/upload_files/aa0/a99/ec0/aa0a99ec09f4c5e42dbe8d7682621aca.png">
<meta property="vk:image" content="https://habrastorage.org/getpro/habr/upload_files/aa0/a99/ec0/aa0a99ec09f4c5e42dbe8d7682621aca.png?format=vk">
<meta property="vk:image" content="https://habrastorage.org/getpro/habr/upload_files/aa0/a99/ec0/aa0a99ec09f4c5e42dbe8d7682621aca.png?format=vk">
<meta property="aiturec:item_id" content="880174">
<meta property="aiturec:datetime" content="2025-02-06T16:09:01.000Z">
<meta content="https://habr.com/ru/companies/otus/articles/880174/" property="og:url">
<meta property="og:type" content="article">
<meta property="og:locale" content="ru_RU">
<meta property="og:image:width" content="1200">
<meta property="og:image:height" content="630">
<meta name="keywords" content="мобильная разработка, flutter, kotlin, кроссплатформенная разработка">
<script type="application/ld+json" data-hid="1e0f0a2">{"@context":"http:\/\/schema.org","@type":"Article","mainEntityOfPage":{"@type":"WebPage","@id":"https:\/\/habr.com\/ru\/companies\/otus\/articles\/880174\/"},"headline":"Облегчаем разработку Flutter-приложений: Создание плагинов с помощью Kotlin Multiplatform","datePublished":"2025-02-06T19:09:01+03:00","dateModified":"2025-02-10T18:29:10+03:00","author":{"@type":"Person","name":"OTUS"},"publisher":{"@type":"Organization","name":"Habr","logo":{"@type":"ImageObject","url":"https:\/\/habrastorage.org\/webt\/a_\/lk\/9m\/a_lk9mjkccjox-zccjrpfolmkmq.png"}},"description":"Будучи Flutter-разработчиками, мы часто сталкиваемся с необходимостью написания кода, ориентированного на конкретную платформу. Хоть Flutter и предоставляет полн...","url":"https:\/\/habr.com\/ru\/companies\/otus\/articles\/880174\/#post-content-body","about":["c_otus","h_flutter","h_kotlin","h_mobile_dev","f_develop"],"image":["https:\/\/habr.com\/share\/publication\/880174\/2357ec2edfe747c9818a52fb87d22f96\/","https:\/\/habrastorage.org\/getpro\/habr\/upload_files\/6e4\/a35\/3c8\/6e4a353c854dd69c838acb019c373a63.png","https:\/\/habrastorage.org\/getpro\/habr\/upload_files\/d31\/a57\/4cf\/d31a574cfd791359d971add705ba58e9.png","https:\/\/habrastorage.org\/getpro\/habr\/upload_files\/71c\/680\/bc1\/71c680bc1e1a344f5aff881ed562c535.png","https:\/\/habrastorage.org\/getpro\/habr\/upload_files\/5b5\/9ef\/2ca\/5b59ef2ca6707a8fcfd222cfa4ee6c47.png","https:\/\/habrastorage.org\/getpro\/habr\/upload_files\/7c5\/42d\/1cc\/7c542d1cc8658a17b14b3e1e130692b5.png","https:\/\/habrastorage.org\/getpro\/habr\/upload_files\/447\/cd4\/171\/447cd4171eef76ffb177962426d478a5.png","https:\/\/habrastorage.org\/getpro\/habr\/upload_files\/7ca\/bed\/f25\/7cabedf25c6191620c256523aa551297.png","https:\/\/habrastorage.org\/getpro\/habr\/upload_files\/19f\/869\/11f\/19f86911fc44f74b523573bff43f1c8a.png","https:\/\/habrastorage.org\/getpro\/habr\/upload_files\/20e\/e36\/499\/20ee36499b283c7c5221f7e346594bf2.png","https:\/\/habrastorage.org\/getpro\/habr\/upload_files\/f80\/4d0\/0f6\/f804d00f6c79fa4a33d13ce0b1b1bdc4.png","https:\/\/habrastorage.org\/getpro\/habr\/upload_files\/a0e\/7b5\/afb\/a0e7b5afbbbcad0c0e9252637a69bdcb.png","https:\/\/habrastorage.org\/getpro\/habr\/upload_files\/aa0\/a99\/ec0\/aa0a99ec09f4c5e42dbe8d7682621aca.png"]}</script>
    <meta charset="UTF-8">
    <meta name="viewport"
      content="width=device-width,initial-scale=1.0,viewport-fit=cover,maximum-scale=1,user-scalable=0">
    <meta name="referrer" content="unsafe-url">
    <style>
      /* cyrillic-ext */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 400;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9E4kDNxMZdWfMOD5VvmojLazX3dGTP.woff2) format('woff2');
        unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;
      }

      /* cyrillic */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 400;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9E4kDNxMZdWfMOD5Vvk4jLazX3dGTP.woff2) format('woff2');
        unicode-range: U+0301, U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;
      }

      /* latin-ext */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 400;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9E4kDNxMZdWfMOD5VvmYjLazX3dGTP.woff2) format('woff2');
        unicode-range: U+0100-02AF, U+0304, U+0308, U+0329, U+1E00-1E9F, U+1EF2-1EFF, U+2020, U+20A0-20AB, U+20AD-20C0, U+2113, U+2C60-2C7F, U+A720-A7FF;
      }

      /* latin */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 400;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9E4kDNxMZdWfMOD5Vvl4jLazX3dA.woff2) format('woff2');
        unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+0304, U+0308, U+0329, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
      }

      /* cyrillic-ext */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 500;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnZKveSxf6Xl7Gl3LX.woff2) format('woff2');
        unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;
      }

      /* cyrillic */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 500;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnZKveQhf6Xl7Gl3LX.woff2) format('woff2');
        unicode-range: U+0301, U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;
      }

      /* latin-ext */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 500;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnZKveSBf6Xl7Gl3LX.woff2) format('woff2');
        unicode-range: U+0100-02AF, U+0304, U+0308, U+0329, U+1E00-1E9F, U+1EF2-1EFF, U+2020, U+20A0-20AB, U+20AD-20C0, U+2113, U+2C60-2C7F, U+A720-A7FF;
      }

      /* latin */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 500;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnZKveRhf6Xl7Glw.woff2) format('woff2');
        unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+0304, U+0308, U+0329, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
      }

      /* cyrillic-ext */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 700;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnLK3eSxf6Xl7Gl3LX.woff2) format('woff2');
        unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;
      }

      /* cyrillic */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 700;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnLK3eQhf6Xl7Gl3LX.woff2) format('woff2');
        unicode-range: U+0301, U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;
      }

      /* latin-ext */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 700;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnLK3eSBf6Xl7Gl3LX.woff2) format('woff2');
        unicode-range: U+0100-02AF, U+0304, U+0308, U+0329, U+1E00-1E9F, U+1EF2-1EFF, U+2020, U+20A0-20AB, U+20AD-20C0, U+2113, U+2C60-2C7F, U+A720-A7FF;
      }

      /* latin */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 700;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnLK3eRhf6Xl7Glw.woff2) format('woff2');
        unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+0304, U+0308, U+0329, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
      }
    </style>
    <link rel="preload" href="https://assets.habr.com/habr-web/css/theme/light-v1.css" as="style" media="(prefers-color-scheme: light)" /><link rel="preload" href="https://assets.habr.com/habr-web/css/theme/dark-v1.css" as="style" media="(prefers-color-scheme: dark)" /><link id="light-colors" rel="stylesheet" href="https://assets.habr.com/habr-web/css/theme/light-v1.css" media="(prefers-color-scheme: light)" /><link id="dark-colors" rel="stylesheet" href="https://assets.habr.com/habr-web/css/theme/dark-v1.css" media="(prefers-color-scheme: dark)" />
    <script>window.i18nFetch = new Promise((res, rej) => {
          const xhr = new XMLHttpRequest();
          xhr.open('GET', '/js/i18n/ru-compiled.35b2fec11bb79a62419ab67779c2dd82.json');
          xhr.responseType = 'json';
          xhr.onload = function(e) {
            if (this.status === 200) {
              res({ru: xhr.response});
            } else {
              rej(e);
            }
          };
          xhr.send();
        });</script>
    <style>
      .grecaptcha-badge {
        visibility: hidden;
      }
    </style>
    <meta name="habr-version" content="2.233.0">
    
    <meta name="apple-mobile-web-app-status-bar-style" content="#303b44">
    <meta name="msapplication-TileColor" content="#629FBC">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="mobile-web-app-capable" content="yes">
    <link rel="shortcut icon" type="image/png" sizes="16x16" href="https://assets.habr.com/habr-web/img/favicons/favicon-16.png">
    <link rel="shortcut icon" type="image/png" sizes="32x32" href="https://assets.habr.com/habr-web/img/favicons/favicon-32.png">
    <link rel="apple-touch-icon" type="image/png" sizes="76x76" href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-76.png">
    <link rel="apple-touch-icon" type="image/png" sizes="120x120" href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-120.png">
    <link rel="apple-touch-icon" type="image/png" sizes="152x152" href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-152.png">
    <link rel="apple-touch-icon" type="image/png" sizes="180x180" href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-180.png">
    <link rel="apple-touch-icon" type="image/png" sizes="256x256" href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-256.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 320px) and (device-height: 568px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1136x640.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 375px) and (device-height: 812px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2436x1125.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1792x828.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_828x1792.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 375px) and (device-height: 667px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1334x750.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1242x2668.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 414px) and (device-height: 736px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2208x1242.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 375px) and (device-height: 812px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1125x2436.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 414px) and (device-height: 736px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1242x2208.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 1024px) and (device-height: 1366px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2732x2048.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2688x1242.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 834px) and (device-height: 1112px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2224x1668.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 375px) and (device-height: 667px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_750x1334.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 1024px) and (device-height: 1366px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2048x2732.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 834px) and (device-height: 1194px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2388x1668.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 834px) and (device-height: 1112px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1668x2224.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 320px) and (device-height: 568px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_640x1136.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 834px) and (device-height: 1194px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1668x2388.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 768px) and (device-height: 1024px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2048x1536.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 768px) and (device-height: 1024px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1536x2048.png">
    <link rel="mask-icon" color="#77a2b6" href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-120.svg">
    <link crossorigin="use-credentials" href="/manifest.webmanifest" rel="manifest">
    <script async src="https://unpkg.com/pwacompat" crossorigin="anonymous"></script>
    <script>window.yaContextCb = window.yaContextCb || []</script>
    <script src="https://yandex.ru/ads/system/context.js" async></script>
  <link rel="preload" href="https://assets.habr.com/habr-web/css/chunk-vendors.04465f7c.css" as="style"><link rel="preload" href="https://assets.habr.com/habr-web/js/chunk-vendors.3b11d41f.js" as="script"><link rel="preload" href="https://assets.habr.com/habr-web/css/app.20959a76.css" as="style"><link rel="preload" href="https://assets.habr.com/habr-web/js/app.7a97ea6d.js" as="script"><link rel="stylesheet" href="https://assets.habr.com/habr-web/css/chunk-vendors.04465f7c.css"><link rel="stylesheet" href="https://assets.habr.com/habr-web/css/app.20959a76.css"></head>
  <body>
    
    <div id="mount"><div id="app" data-async-called="true"><div class="tm-layout__wrapper"><!--[--><!----><div></div><div class="tm-feature tm-feature"><!----></div><header class="tm-header" data-test-id="header"><div class="tm-page-width"><!--[--><div class="tm-header__container"><div class="tm-header__burger-nav" data-test-id="burger-nav"><button class="tm-header__button tm-header__button_burger" type="button"><svg class="tm-svg-img tm-header__icon tm-header__icon-burger" height="16" width="16"><title>Меню</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#header-burger"></use></svg></button></div><span class="tm-header__logo-wrap"><a class="tm-header__logo tm-header__logo_hl-ru tm-header__logo" href="/ru/"><svg class="tm-svg-img tm-header__icon" height="16" width="16"><title>Хабр</title><use xlink:href="/img/habr-logo-ru.svg#logo"></use></svg></a><span style="display:none;" class="tm-header__beta-sign">β</span></span><!----><div class="tm-header-user-menu tm-header_user-menu"><a href="/ru/search/" class="tm-header-user-menu__item tm-header-user-menu__search" data-test-id="search-button"><svg class="tm-svg-img tm-header-user-menu__icon tm-header-user-menu__icon_search" height="24" width="24"><title>Поиск</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#search"></use></svg></a><!----><!----><div class="tm-header-user-menu__item tm-header-user-menu__write"><div><svg class="tm-svg-img tm-header-user-menu__icon tm-header-user-menu__icon_write" height="24" width="24"><title>Написать публикацию</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#write"></use></svg></div><!----></div><!--[--><div class="tm-header-user-menu__item"><button class="tm-header-user-menu__toggle" data-test-id="user-menu-settings"><svg class="tm-svg-img tm-header-user-menu__icon" height="24" width="24"><title>Настройки</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#page-settings"></use></svg></button></div><a href="https://habr.com/kek/v1/auth/habrahabr/?back=/ru/companies/otus/articles/880174/&amp;hl=ru" rel="nofollow" class="tm-header-user-menu__item"><!--[--><button class="btn btn_solid btn_small tm-header-user-menu__login" type="button"><!--[-->Войти<!--]--></button><!--]--></a><!--]--><!----><!--teleport start--><!--teleport end--><!----></div></div><!--]--></div></header><div class="tm-layout"><div class="tm-page-progress-bar"></div><!----><!----><div class="tm-page-width"><!--[--><!--]--></div><main class="tm-layout__container"><div class="tm-page" hl="ru" companyname="otus" data-async-called="true" style="--0c809c5a:16px;--a086013e:100%;--7c457026:0;"><div class="tm-page-width"><!--[--><div class="tm-page__header"><!--[--><!--]--></div><div class="tm-page__wrapper"><div class="tm-page__main_has-sidebar tm-page__main"><div class="pull-down"><!----><div class="pull-down__header" style="height:0px;"><div class="pull-down__content" style="bottom:10px;"><svg class="tm-svg-img pull-down__icon pull-down__arrow" height="24" width="24"><title>Обновить</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#pull-arrow"></use></svg></div></div><!--[--><!--[--><div class="tm-article-presenter"><!--[--><!--]--><div class="tm-article-presenter__body" data-test-id="article-body"><div class="tm-misprint-area"><div class="tm-misprint-area__wrapper"><!--[--><article class="tm-article-presenter__content tm-article-presenter__content_narrow"><!--[--><div class="tm-article-presenter__header"><!--[--><!--]--><div class="tm-article-snippet tm-article-snippet tm-article-presenter__snippet"><!--[--><!--]--><div class="tm-article-snippet__meta-container"><div class="tm-article-snippet__meta"><span class="tm-user-info tm-article-snippet__author"><a href="/ru/users/MaxRokatansky/" class="tm-user-info__userpic" data-test-id="user-info-pic" title="MaxRokatansky"><div class="tm-entity-image"><img alt="" class="tm-entity-image__pic" height="32" src="//habrastorage.org/r/w64/getpro/habr/avatars/b9f/baf/5f9/b9fbaf5f96ae52973706a0716bd9216e.jpg" width="32"></div></a><span class="tm-user-info__user tm-user-info__user_appearance-default" data-test-id="user-info-description"><a href="/ru/users/MaxRokatansky/" class="tm-user-info__username">MaxRokatansky <!----></a><!--[--><span class="tm-article-datetime-published"><time datetime="2025-02-06T16:09:01.000Z" title="2025-02-06, 19:09">6  фев   в 19:09</time></span><!--]--></span></span></div><!----></div><h1 class="tm-title tm-title_h1" lang="ru" data-test-id="articleTitle"><span>Облегчаем разработку Flutter-приложений: Создание плагинов с помощью Kotlin Multiplatform</span></h1><div class="tm-article-snippet__stats" data-test-id="articleStats"><div class="tm-article-complexity tm-article-complexity_complexity-medium"><span class="tm-svg-icon__wrapper tm-article-complexity__icon"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Уровень сложности</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#complexity-medium"></use></svg></span><span class="tm-article-complexity__label">Средний</span></div><div class="tm-article-reading-time"><span class="tm-svg-icon__wrapper tm-article-reading-time__icon"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Время на прочтение</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#clock"></use></svg></span><span class="tm-article-reading-time__label">29 мин</span></div><span class="tm-icon-counter tm-data-icons__item"><svg class="tm-svg-img tm-icon-counter__icon" height="24" width="24"><title>Количество просмотров</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-views"></use></svg><span class="tm-icon-counter__value" title="1600">1.6K</span></span></div><div class="tm-publication-hubs__container" data-test-id="articleHubsList"><div class="tm-publication-hubs"><!--[--><span class="tm-publication-hub__link-container"><a href="/ru/companies/otus/articles/" class="tm-publication-hub__link"><!--[--><span>Блог компании OTUS</span><!----><!--]--></a></span><span class="tm-publication-hub__link-container"><a href="/ru/hubs/flutter/" class="tm-publication-hub__link"><!--[--><span>Flutter</span><span class="tm-article-snippet__profiled-hub" title="Профильный хаб">*</span><!--]--></a></span><span class="tm-publication-hub__link-container"><a href="/ru/hubs/kotlin/" class="tm-publication-hub__link"><!--[--><span>Kotlin</span><span class="tm-article-snippet__profiled-hub" title="Профильный хаб">*</span><!--]--></a></span><span class="tm-publication-hub__link-container"><a href="/ru/hubs/mobile_dev/" class="tm-publication-hub__link"><!--[--><span>Разработка мобильных приложений</span><span class="tm-article-snippet__profiled-hub" title="Профильный хаб">*</span><!--]--></a></span><!--]--></div></div><div class="tm-article-labels" data-test-id="articleLabels"><div class="tm-article-labels__container"><!----><!--[--><div class="tm-publication-label tm-publication-label_variant-translation"><span>Перевод</span></div><!--]--></div></div><!----><!----></div></div><!--[--><div class="tm-article-presenter__origin"><a class="tm-article-presenter__origin-link" href="https://medium.com/@mohaberabi98/supercharge-your-flutter-apps-developing-plugins-with-kotlin-multiplatform-0d54edf7f2d1" target="_blank">Автор оригинала: <span>Mohab erabi</span></a></div><div class="tm-article-body" data-gallery-root lang="ru"><div><!--[--><!--]--></div><div id="post-content-body"><div><div class="article-formatted-body article-formatted-body article-formatted-body_version-2"><div xmlns="http://www.w3.org/1999/xhtml"><p>Будучи Flutter-разработчиками, мы часто сталкиваемся с необходимостью написания кода, ориентированного на конкретную платформу. Хоть Flutter и предоставляет полноценный фреймворк для создания кроссплатформенных приложений, интеграция нативного функционала иногда может быть весьма обременительной. Именно здесь на помощь приходит Kotlin Multiplatform (KMP). На мой взгляд, KMP — это не просто инструмент, который конкурирует с Flutter, скорее, он предлагает мощный способ рационализировать разработку плагинов, позволяя разработчикам экономить время, беречь силы и писать эффективный, легко сопровождаемый код.</p><p>В этой статье я поделюсь своим опытом использования KMP для создания библиотеки общих настроек (Shared Preferences) для Flutter под названием SharedPrefsKMP. Эта библиотека упрощает управление общими настройками в Android и iOS, демонстрируя, как KMP может улучшить процесс разработки на Flutter.</p><h2>Почему именно Kotlin Multiplatform?</h2><p>Kotlin Multiplatform позволяет разработчикам писать общий код, который можно запускать на нескольких платформах, включая Android и iOS. Используя KMP, Flutter-разработчики могут создавать плагины с общей бизнес-логикой, сокращать избыточность и поддерживать единую кодовую базу для определенных функций. Это, в свою очередь, сокращает время, необходимое на написание и отладку кода, что позволяет сосредоточиться на создании исключительного пользовательского опыта.</p><h2>Шаг 1: Создаем KMP-библиотеку</h2><ul><li><p><strong>Откройте Android Studio</strong>: Запустите Android Studio на своем компьютере. Убедитесь, что у вас установлена последняя версия, чтобы получить доступ ко всем возможностям Kotlin Multiplatform.</p></li><li><p><strong>Создайте новый проект</strong>:</p></li><li><p>Выберете на начальном экране <strong>«New Project»</strong>.</p></li><li><p>В окне выбора шаблона проекта выберите <strong>«Kotlin Multiplatform Library»</strong>. Если эта опция не отображается, вам может потребоваться установить плагин Kotlin Multiplatform из магазина плагинов.</p></li></ul><figure class="full-width "><img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/6e4/a35/3c8/6e4a353c854dd69c838acb019c373a63.png" width="875" height="659" data-src="https://habrastorage.org/getpro/habr/upload_files/6e4/a35/3c8/6e4a353c854dd69c838acb019c373a63.png"/></figure><h2>Шаг 2: Выбираем IOS-фреймворк</h2><ul><li><p>После выбора KMP-библиотеки нам нужно выбрать IOS-фреймворк.</p></li><li><p>Нажмите на IOS Framwork Distribution и выберите XCFramework.</p></li></ul><figure class="full-width "><img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/d31/a57/4cf/d31a574cfd791359d971add705ba58e9.png" width="875" height="659" data-src="https://habrastorage.org/getpro/habr/upload_files/d31/a57/4cf/d31a574cfd791359d971add705ba58e9.png"/></figure><h2>Для чего нам нужен iOS-фреймворк?</h2><p><strong>iOS-фреймворк </strong>— это набор кода и ресурсов, которые можно совместно и повторно использовать в различных приложениях. В нем заключены функциональные возможности, классы и библиотеки, которые могут быть использованы другими приложениями без необходимости каждый раз переписывать этот код. Фреймворки необходимы для модульного построения кода, повышения удобства сопровождения и облегчения сотрудничества между разработчиками.</p><p>В контексте Kotlin Multiplatform iOS-фреймворк позволяет разработчикам создавать общий код, к которому могут обращаться приложения на Swift и Objective-C, что способствует повторному использованию кода и сокращает количество кода, специфичного для конкретной платформы.</p><h2>Почему стоит выбрать именно XCFramework?</h2><p><strong>XCFramework </strong>— это современный формат упаковки, введенный компанией Apple для облегчения распространения фреймворков на различных платформах и архитектурах. Ниже приведены несколько причин, по которым XCFramework выбирают для KMP-библиотек, ориентированных на iOS:</p><p><strong>Поддержка кроссплатформенности</strong>: XCFrameworks может объединять двоичные файлы для нескольких платформ (iOS, macOS, tvOS, watchOS) и архитектур (arm64, x86_64) в один пакет. Это упрощает распространение программного продукта, поскольку разработчикам не нужно создавать заморачиваться с разными файлами фреймворков для разных целевых платформ.</p><p><strong>Упрощенная интеграция</strong>: XCFrameworks упрощает интеграцию фреймворков в проекты Xcode, поскольку обеспечивает единый подход к работе с зависимостями без необходимости беспокоиться о различных архитектурах и требованиях к платформам.</p><p><strong>Задел на будущее</strong>: Используя XCFrameworks, разработчики могут гарантировать совместимость с будущими версиями Xcode и iOS, поскольку Apple продолжает совершенствовать свои стратегии распространения фреймворков. XCFrameworks разработаны таким образом, чтобы изменения в базовых системах сборки и упаковки его не затрагивали.</p><p><strong>Повышенная производительность сборки</strong>: XCFrameworks позволяет ускорить сборку, поскольку Xcode может напрямую связать нужную архитектуру без необходимости собирать или управлять несколькими копиями одного и того же фреймворка.</p><p><strong>Оптимизированное управление версиями</strong>: При использовании XCFrameworks управление версиями и обновлениями становится проще, поскольку все необходимые двоичные файлы включены в один пакет, что снижает сложность управления зависимостями.</p><p>Теперь, после завершения создания kmp-библиотеки, нам нужно дождаться, когда gradle завершит синхронизацию.</p><h2>Наборы исходников в Kotlin Multiplatform</h2><p>В процессе создания KMP-библиотеки вы столкнетесь с определенными папками, называемыми <strong>source sets </strong>(наборы исходников). Эти наборы исходников очень важны для организации вашего кода для разных платформ, позволяя вам совместно использовать логику, реализуя при этом специфическую для каждой платформы функциональность. В вашем проекте вы найдете три основных набора исходников:</p><ol><li><p><strong>commonMain</strong></p></li><li><p><strong>androidMain</strong></p></li><li><p><strong>iosMain</strong></p></li></ol><h3>Что из себя представляют наборы исходников?</h3><p>Наборы исходников — это каталоги, содержащие код Kotlin для разных платформ. Набор исходников <strong>commonMain</strong> — это место, куда помещается код, который можно использовать на всех платформах. Наборы исходников <strong>androidMain </strong>и <strong>iosMain </strong>предназначены для специфических реализаций, позволяющих использовать нативные API и функции, уникальные для Android и iOS.</p><h3>Подготовка вашего проекта</h3><p>Прежде чем приступать к самому коду, неплохо бы очистить изначальную заготовку, предоставляемую шаблоном проекта Kotlin Multiplatform. Например, мы можем найти такие классы, как Project и Greetings, которые нам не понадобятся для нашей библиотеки общих настроек. Вот что нам нужно сделать:</p><ol><li><p><strong>Удалите ненужные классы</strong>: Откройте проект и перейдите к набору исходников commonMain. Удалите файлы Project.kt и Greetings.kt (или любые другие классы, которые не относятся к вашей библиотеке).</p></li></ol><p><strong>2. Организуйте свой код</strong>: Сосредоточьтесь на реализации необходимых интерфейсов и классов в папках commonMain, androidMain и iosMain.</p><h2>Создание Expect-класса в commonMain</h2><p>Внутри набора commonMain необходимо создать <strong>expect</strong>-класс для функционала общих настроек. Это важная часть использования Kotlin Multiplatform и позволяет определить интерфейс или функционал, который будет реализована по-разному на каждой платформе.</p><h3>Что здесь означает слово "Expect"?</h3><p>В Kotlin Multiplatform ключевое слово <strong>expect </strong>используется для объявления в общем коде класса, функции или свойства, которые будут иметь специфические для каждой платформы реализации. Таким образом можно определить общий интерфейс, который будет использоваться на всех платформах (например, Android и iOS), но при этом каждая платформа сможет предоставить свою уникальную реализацию.</p><h3>Зачем нужно использовать Expect?</h3><ol><li><p><strong>Совместное использование кода</strong>: <strong>Expect</strong>-класс позволяет записывать основную логику в набор commonMain, гарантируя, что один и тот же функционал может быть использован как на Android, так и на iOS без дублирования.</p></li><li><p><strong>Реализации для конкретных платформ</strong>: Хоть интерфейс остается неизменным, вы можете по-разному реализовать детали того, как общие настройки будут работать для каждой платформы, в соответствующих наборах исходников androidMain и iosMain.</p></li><li><p><strong>Гибкость и сопровождаемость</strong>: Если вам нужно внести изменения или добавить функции, вы можете легко модифицировать общий интерфейс или специфические для платформы реализации, не затрагивая всю кодовую базу.</p></li></ol><h3>Создаем Expect-класс </h3><ol><li><p><strong>Создайте новый файл Kotlin</strong>: Создайте в наборе исходников commonMain новый файл Kotlin под названием SharedPrefs.kt.</p></li><li><p><strong>Определите Expect-класс</strong>: Объявите в этом файле expect-класс для общих настроек. Вот простой пример:</p></li></ol><pre><code class="kotlin">package com.mohaberabi.sharedprefskmp

expect class SharedPrefs {
    fun getString(key: String): String?
    fun setString(key: String, value: String)
    fun getInt(key: String, default: Int): Int?
    fun setInt(key: String, value: Int)
    fun getBoolean(key: String, default: Boolean): Boolean?
    fun setBoolean(key: String, value: Boolean)
    fun remove(key: String)
    fun clear()
    fun getDouble(key: String, default: Double): Double

    fun setDouble(key: String, value: Double)

    fun getStringList(key: String): List&lt;String&gt;?
    fun setStringList(key: String, values: List&lt;String&gt;)
    fun contains(key: String): Boolean
}</code></pre><h2>Реализация Android-части </h2><p>Теперь, когда мы определили expect-класс для общих настроек в наборе исходников <code>commonMain</code>, мы начнем создавать реальный класс <code>SharedPrefs</code> для Android. В этой реализации мы воспользуемся встроенной функцией <code>SharedPreferences</code>, предоставляемой Android, которая позволяет нам сохранять простые типы данных.</p><p>Использование класса <code>SharedPreferences</code> в Android является простым и эффективным, что делает его отличным выбором для работы с пользовательскими настройками и настройками приложений. Давайте рассмотрим особенности реализации этого класса для Android и убедимся, что он соответствует ожиданиям, заложенным в наш общий код.</p><h2>Реализация класса SharedPrefs для Android</h2><ol><li><p><strong>Перейдите к набору исходников Android:</strong> Откройте проект Kotlin Multiplatform в Android Studio. В окне проекта найдите набор исходников <code>androidMain</code>, который обычно находится в каталоге <code>src/androidMain/kotlin/com/yourpackage/</code>.</p></li><li><p><strong>Создайте класс SharedPrefs: </strong>Создайте внутри каталога <code>androidMain</code> новый Kotlin-файл под названием SharedPrefs.kt. Этот файл будет содержать фактическую реализацию класса <code>SharedPrefs</code> для Android.</p></li><li><p><strong>Реализуйте класс SharedPrefs: </strong>Откройте файл SharedPrefs.kt и напишите свой класс <code>SharedPrefs</code>. Например, вы можете использовать этот код:</p></li></ol><pre><code class="kotlin">package com.mohaberabi.sharedprefskmp

import android.content.Context

actual class SharedPrefs(
    private val context: Context
) {


    private val prefs by lazy {
        context.applicationContext.getSharedPreferences("kmpPrefs", Context.MODE_PRIVATE)
    }

    actual fun getString(key: String): String? = prefs.getString(key, null)

    actual fun setString(
        key: String,
        value: String
    ) = prefs.edit().putString(key, value).apply()

    actual fun getInt(key: String, default: Int): Int? = prefs.getInt(key, default)
    actual fun setInt(key: String, value: Int) = prefs.edit().putInt(key, value).apply()
    actual fun getBoolean(key: String, default: Boolean): Boolean? = prefs.getBoolean(key, default)
    actual fun setBoolean(key: String, value: Boolean) = prefs.edit().putBoolean(key, value).apply()


    actual fun remove(key: String) = prefs.edit().remove(key).apply()

    actual fun clear() = prefs.edit().clear().apply()
    actual fun getDouble(key: String, default: Double): Double {
        val value = prefs.getString(key, null)
        return value?.toDoubleOrNull() ?: default
    }

    actual fun setDouble(key: String, value: Double) {
        prefs.edit().putString(key, value.toString()).apply()
    }

    actual fun getStringList(key: String): List&lt;String&gt;? {
        val stringSet = prefs.getStringSet(key, null)
        return stringSet?.toList()
    }

    actual fun setStringList(
        key: String,
        values: List&lt;String&gt;
    ) {
        prefs.edit().putStringSet(key, values.toSet()).apply()
    }

    actual fun contains(key: String): Boolean = prefs.contains(key)
}</code></pre><h2>Реализация iOS-части: UserDefaults и взаимодействие с Kotlin</h2><p>Теперь, когда мы реализовали Android-часть нашего класса <code>SharedPrefs</code>, пришло время сосредоточиться на реализации для iOS. В iOS мы воспользуемся классом <code>UserDefaults</code>, который обеспечивает простой способ сохранения пар ключ-значение при запуске приложения. <code>UserDefaults</code> обычно используется для хранения пользовательских и других настроек, что делает его подходящим выбором для нашей <code>SharedPrefs</code>.</p><h3>Пара слов о UserDefaults</h3><p>UserDefaults — это встроенный класс в iOS, который позволяет разработчикам хранить небольшие объемы данных в. Он использует механизм хранения пар «ключ‑значение», что позволяет легко получать и хранить простые типы данных, такие как строки, целые числа, логические значения и массивы.</p><h3>Взаимодействие Kotlin и iOS</h3><p>Одной из сильных сторон Kotlin Multiplatform является его способность взаимодействовать с существующим кодом iOS. При использовании KMP Kotlin может легко вызывать код на Swift и Objective-C, что означает, что мы можем использовать весь функционал, доступный нам в iOS SDK.</p><ul><li><p><strong>Kotlin в Objective-C</strong>: Код Kotlin может быть скомпилирован в формат, совместимый с Objective-C, что позволит вам вызывать функции Kotlin из Objective-C классов.</p></li><li><p><strong>Objective-C в Swift</strong>: Objective-C долгое время был основой для разработки iOS. С появлением Swift компания Apple позаботилась о том, чтобы Objective-C и Swift могли работать вместе. Это означает, что любой Objective-C код может быть легко вызван из Swift.</p></li></ul><p>Таким образом, если в iOS SDK есть какой-либо код или фреймворк, вы можете легко вызвать его в KMP-коде. Эта возможность гарантирует, что вы сможете использовать специфические для платформы функции, не теряя при этом преимуществ общего кода.</p><p>В нашем случае мы создадим iOS-реализацию класса <code>SharedPrefs</code> с помощью <code>UserDefaults</code>, что позволит нам в полной мере воспользоваться преимуществами совместимости Kotlin со Swift и Objective-C. Благодаря такому подходу мы можем поддерживать единую кодовую базу, гарантируя, что наше приложение будет вести себя так, как мы ожидаем на платформах Android и iOS.</p><p>Хочу отметить, что при реализации iOS-части наше внимание будет сосредоточено на создании бесшовного опыта, использующего лучшие практики разработки Kotlin и iOS.</p><h2>Реализация iOS-части</h2><ol><li><p><strong>Откройте каталог iosMain</strong>: В проекте Kotlin Multiplatform перейдите в каталог iosMain.</p></li><li><p><strong>Создайте класс </strong><code>SharedPrefs</code>: Создайте в каталоге iosMain новый Kotlin-файл под названием SharedPrefs.kt.</p></li><li><p><strong>Реализуйте класс </strong><code>SharedPrefs</code>: Напишите код для класса <code>SharedPrefs</code>, используя UserDefaults:</p></li></ol><pre><code class="kotlin">package com.mohaberabi.sharedprefskmp


import platform.Foundation.NSUserDefaults

actual class SharedPrefs {


    companion object {
        private const val DOMAIN_NAME = "kmpPrefs"
    }

    private val prefs by lazy {
        NSUserDefaults.standardUserDefaults().apply {
            persistentDomainForName(DOMAIN_NAME)
        }
    }

    actual fun getString(key: String): String? = prefs.stringForKey(key)

    actual fun setString(key: String, value: String) {
        prefs.setObject(value, forKey = key)
        prefs.synchronize()
    }

    actual fun getInt(key: String, default: Int): Int? = prefs.integerForKey(key).toInt()

    actual fun setInt(key: String, value: Int) {
        prefs.setInteger(value.toLong(), forKey = key)
        prefs.synchronize()
    }

    actual fun getBoolean(key: String, default: Boolean): Boolean? {
        return try {
            prefs.boolForKey(key)
        } catch (e: Exception) {
            default
        }
    }

    actual fun setBoolean(key: String, value: Boolean) {
        prefs.setBool(value, forKey = key)
        prefs.synchronize()
    }

    actual fun remove(key: String) {
        prefs.removeObjectForKey(key)
        prefs.synchronize()
    }

    actual fun clear() {

        prefs.removePersistentDomainForName(DOMAIN_NAME)
        prefs.synchronize()
    }

    actual fun getDouble(key: String, default: Double): Double {

        return try {
            prefs.doubleForKey(key)
        } catch (e: Exception) {
            default
        }
    }

    actual fun setDouble(key: String, value: Double) {
        prefs.setDouble(value, forKey = key)
        prefs.synchronize()
    }

    actual fun getStringList(key: String): List&lt;String&gt;? {
        val array = prefs.arrayForKey(key) as? List&lt;String&gt;
        return array ?: emptyList()
    }

    actual fun setStringList(key: String, values: List&lt;String&gt;) {
        prefs.setObject(values, forKey = key)
        prefs.synchronize()
    }

    actual fun contains(key: String): Boolean = prefs.objectForKey(key) != null
}</code></pre><h2>Релиз артефактов для Android и iOS</h2><p>Чтобы упростить процесс релиза нашей KMP-библиотеки, мы сгенерируем локальный AAR (Android Archive) и XCFramework для iOS. Выполните следующие шаги:</p><h3>1. Создайте AAR артефакт для Android </h3><ul><li><p>Откройте свой проект в Android Studio.</p></li><li><p>Перейдите в каталог android вашего KMP-проекта.</p></li><li><p>Откройте файл <code>build.gradle.kts</code>.</p></li><li><p>Убедитесь, что плагин kotlin-multiplatform применен и настроен на включение общего модуля.</p></li><li><p>Используйте следующую команду Gradle в терминале</p></li></ul><pre><code>./gradlew assembleRelease</code></pre><p>После этого мы найдем релиз android aar для нашей библиотеки здесь: </p><p>shared/build/outputs/aar/shared-release.aar </p><figure class="full-width "><img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/71c/680/bc1/71c680bc1e1a344f5aff881ed562c535.png" width="568" height="1438" data-src="https://habrastorage.org/getpro/habr/upload_files/71c/680/bc1/71c680bc1e1a344f5aff881ed562c535.png"/></figure><h3>2. Создание XCFramework для iOS</h3><ul><li><p>Откройте свой проект в Xcode.</p></li><li><p>Выберите таргет для вашей мультиплатформенной библиотеки Kotlin.</p></li><li><p>В настройках сборки убедитесь, что для фреймворка iOS заданы правильные конфигурации.</p></li><li><p>Используйте следующую команду в терминале, чтобы сгенерировать XCFramework</p></li></ul><pre><code>./gradlew assembleXCFramework</code></pre><p>Вы найдете фреймворк для ios внутри:<br/>shared/build/XCFrameowk/release/sahred.xcframework</p><figure class="full-width "><img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/5b5/9ef/2ca/5b59ef2ca6707a8fcfd222cfa4ee6c47.png" width="580" height="1078" data-src="https://habrastorage.org/getpro/habr/upload_files/5b5/9ef/2ca/5b59ef2ca6707a8fcfd222cfa4ee6c47.png"/></figure><p>Теперь, после того как мы закончили работу над KMP-частью нам нужно создать flutter-приложение, чтобы использовать библиотеку, которую мы только что создали.</p><p>Перейдите в android studio или другую IDE по вашему выбору и создайте flutter-приложение. Сделайте так, чтобы оно поддерживало ios и android, поскольку сейчас наша библиотека предназначена только для ios и android.</p><figure class="full-width "><img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/7c5/42d/1cc/7c542d1cc8658a17b14b3e1e130692b5.png" width="875" height="792" data-src="https://habrastorage.org/getpro/habr/upload_files/7c5/42d/1cc/7c542d1cc8658a17b14b3e1e130692b5.png"/></figure><p>После создания flutter-приложения вам нужно будет открыть android-модуль flutter-приложения в android studio. Для этого откройте в android studio проект, перейдя в каталог flutter-приложения и выбрав android. Вам придется подождать некоторое время, пока gradle android studio не закончит синхронизацию.</p><p>После этого откройте модуль .app, а затем build.gradle.</p><p>Сначала нам нужно изменить minsdk, так как созданная нами библиотека предназначена только для minsdk 24.</p><figure class="full-width "><img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/447/cd4/171/447cd4171eef76ffb177962426d478a5.png" width="875" height="606" data-src="https://habrastorage.org/getpro/habr/upload_files/447/cd4/171/447cd4171eef76ffb177962426d478a5.png"/></figure><p>Теперь нам нужно создать новую папку под android/app/libs</p><p>Здесь будет .aar, который мы только что создали.</p><h3>1. Создайте новый каталог для AAR</h3><ul><li><p>Перейдите в каталог проекта Android.</p></li><li><p>Перейдите в каталог app  (например, android/app).</p></li><li><p>Создайте новый каталог под названием libs, если он еще не существует.</p></li></ul><h3>2. Скопируйте AAR-файл </h3><ul><li><p>Найдите AAR-файл, который вы сгенерировали из KMP-библиотеки. Он должен находиться в папке android/build/outputs/aar/.</p></li><li><p>Скопируйте .aar-файл из этого каталога.</p></li></ul><h3>3. Вставьте AAR-файл </h3><ul><li><p>Вставьте скопированный AAR-файл в только что созданную директорию libs (android/app/libs).</p></li></ul><h3>4. Обновите build.gradle, чтобы включить в него AAR</h3><ul><li><p>Откройте файл build.gradle для вашего модуля приложения Android (находится в android/app/build.gradle).</p></li><li><p>Добавьте следующую строку в блок dependencies, чтобы включить AAR-файл:</p></li></ul><figure class="full-width "><img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/7ca/bed/f25/7cabedf25c6191620c256523aa551297.png" width="875" height="1199" data-src="https://habrastorage.org/getpro/habr/upload_files/7ca/bed/f25/7cabedf25c6191620c256523aa551297.png"/></figure><p>Теперь нам нужно использовать этот .aar в android. Поэтому в том же app/build.gradle создайте новый блок <code>dependecies {}</code>, чтобы включить aar-библиотеку в качестве локальной зависимости в наше flutter-приложение под android:</p><pre><code>dependencies {
    implementation(files("libs/shared-release.aar"))
}</code></pre><pre><code>defaultConfig {
        // TODO: Укажите свой собственный уникальный идентификатор приложения 
        applicationId = "com.mohaberabi.fluttersharedprefskmp.shraed_prefskmp"
        // Вы можете изменить следующие значения в соответствии с требованиями вашего приложения.

       // Для получения дополнительной информации см.: https://flutter.dev/to/review-gradle-config.
        minSdk = 24
        targetSdk = flutter.targetSdkVersion
        versionCode = flutter.versionCode
        versionName = flutter.versionName
    }

    buildTypes {
        release {
            // TODO: Добавьте собственную конфигурацию подписи для сборки релиза.
            // Пока что подписываемся отладочными ключами, чтобы `flutter run --release` работал.
            signingConfig = signingConfigs.debug
        }
    }
}

dependencies {
    implementation(files("libs/shared-release.aar"))
}

flutter {
    source = "../.."
}</code></pre><p>Теперь нам нужно задействовать его в файле MainActivity.kt Android-части flutter-приложения.</p><p>Перейдите к файлу <code>app/src/main/kotlint/MainActivity.kt</code>.</p><p>Нам нужно переопределить метод <code>configureFlutterEngine</code> из <code>FlutterActivity</code>, чтобы мы могли создать flutter-канал для связи с ним и нашим flutter-приложением: </p><pre><code class="kotlin">package com.mohaberabi.fluttersharedprefskmp.shraed_prefskmp

import io.flutter.embedding.android.FlutterActivity
import io.flutter.embedding.engine.FlutterEngine
import io.flutter.plugin.common.MethodChannel
import com.mohaberabi.sharedprefskmp.SharedPrefs

class MainActivity : FlutterActivity() {

    companion object {
        private const val CHANNEL_NAME = "com.mohaberabi.fluttersharedprefs.kmp"
        private const val GET_STRING = "getString"
        private const val SET_STRING = "setString"
        private const val GET_INT = "getInt"
        private const val SET_INT = "setInt"
        private const val GET_BOOLEAN = "getBoolean"
        private const val SET_BOOLEAN = "setBoolean"
        private const val REMOVE = "remove"
        private const val CLEAR = "clear"
        private const val GET_STRING_LIST = "getStringList"
        private const val SET_STRING_LIST = "setStringList"
        private const val CONTAINS = "contains"
    }

    private lateinit var sharedPrefs: SharedPrefs

    override fun configureFlutterEngine(flutterEngine: FlutterEngine) {
        super.configureFlutterEngine(flutterEngine)
        sharedPrefs = SharedPrefs(applicationContext)
        MethodChannel(
            flutterEngine.dartExecutor.binaryMessenger,
            CHANNEL_NAME
        ).setMethodCallHandler { call, result -&gt;
            when (call.method) {
                GET_STRING -&gt; {
                    val key = call.argument&lt;String&gt;("key") ?: ""
                    val value = sharedPrefs.getString(key)
                    result.success(value)
                }

                SET_STRING -&gt; {
                    val key = call.argument&lt;String&gt;("key") ?: ""
                    val value = call.argument&lt;String&gt;("value") ?: ""
                    sharedPrefs.setString(key, value)
                    result.success(null)
                }

                GET_INT -&gt; {
                    val key = call.argument&lt;String&gt;("key") ?: ""
                    val default = call.argument&lt;Int&gt;("default") ?: 0
                    val value = sharedPrefs.getInt(key, default)
                    result.success(value)
                }

                SET_INT -&gt; {
                    val key = call.argument&lt;String&gt;("key") ?: ""
                    val value = call.argument&lt;Int&gt;("value") ?: 0
                    sharedPrefs.setInt(key, value)
                    result.success(null)
                }

                GET_BOOLEAN -&gt; {
                    val key = call.argument&lt;String&gt;("key") ?: ""
                    val default = call.argument&lt;Boolean&gt;("default") ?: false
                    val value = sharedPrefs.getBoolean(key, default)
                    result.success(value)
                }

                SET_BOOLEAN -&gt; {
                    val key = call.argument&lt;String&gt;("key") ?: ""
                    val value = call.argument&lt;Boolean&gt;("value") ?: false
                    sharedPrefs.setBoolean(key, value)
                    result.success(null)
                }

                REMOVE -&gt; {
                    val key = call.argument&lt;String&gt;("key") ?: ""
                    sharedPrefs.remove(key)
                    result.success(null)
                }

                CLEAR -&gt; {
                    sharedPrefs.clear()
                    result.success(null)
                }

                GET_STRING_LIST -&gt; {
                    val key = call.argument&lt;String&gt;("key") ?: ""
                    val value = sharedPrefs.getStringList(key)
                    result.success(value)
                }

                SET_STRING_LIST -&gt; {
                    val key = call.argument&lt;String&gt;("key") ?: ""
                    val values = call.argument&lt;List&lt;String&gt;&gt;("values") ?: emptyList()
                    sharedPrefs.setStringList(key, values)
                    result.success(null)
                }

                CONTAINS -&gt; {
                    val key = call.argument&lt;String&gt;("key") ?: ""
                    val exists = sharedPrefs.contains(key)
                    result.success(exists)
                }

                else -&gt; {
                    result.notImplemented()
                }
            }
        }
    }
}</code></pre><ul><li><p><strong>Название и методы канала</strong>:</p></li><li><p>Константа <code>CHANNEL_NAME</code> используется для установления канала связи между Flutter и нативным кодом.</p></li><li><p>Здесь объявлено несколько констант, представляющих имена методов (<code>GET_STRING</code>, <code>SET_STRING</code> и т.д.), соответствующих операциям, которые можно выполнять с общими настройками.</p></li><li><p><strong>Экземпляр SharedPrefs</strong>:</p></li><li><p>Приватная переменная <code>sharedPrefs</code> объявлена для хранения экземпляра класса <code>SharedPrefs</code> (из KMP-библиотеки). Этот экземпляр используется для взаимодействия с общими настройками.</p></li><li><p><strong>Метод </strong><code>configureFlutterEngine</code>:</p></li><li><p>Этот метод переопределяет поведение по умолчанию для настройки движка Flutter.</p></li><li><p>Экземпляр <code>sharedPrefs</code> инициализируется контекстом приложения, чтобы обеспечить доступ к общим настройкам.</p></li><li><p>Канал <code>MethodChannel</code> нужен для прослушивания вызовов методов из Flutter.</p></li><li><p><strong>Обработчик вызова метода</strong>:</p></li><li><p>Внутри <code>setMethodCallHandler</code> используется оператор when для реагирования на различные вызовы методов из Flutter.</p></li><li><p>Каждому случаю соответствует операция с общими настройками, например:</p></li><li><p><strong>Get и Set String</strong>: Получение или сохранение строкового значения.</p></li><li><p><strong>Get и Set Int</strong>: Получение или сохранение целочисленного значения с возможностью выбора значения по умолчанию.</p></li><li><p><strong>Get и Set Boolean</strong>: Получение или сохранение булевого значения, в том числе по умолчанию.</p></li><li><p><strong>Remove и Clear</strong>: удаление конкретного ключа или очистка всех настроек.</p></li><li><p><strong>Get и Set String List</strong>: Работа со списками строк.</p></li><li><p><strong>Contains</strong>: Проверьте, существует ли определенный ключ в общих настройках.</p></li><li><p><strong>Результаты обработки</strong>:</p></li><li><p>Для каждой операции результат отправляется обратно во Flutter с помощью <code>result.success()</code> или <code>result.notImplemented()</code>, если метод не распознан.</p></li></ul><h2>Реализация iOS-части KMP-библиотеки общих настроек Flutter </h2><p>Чтобы интегрировать KMP-библиотеку общих настроек в ваш Flutter-проект для iOS, выполните следующие простые шаги для добавления локального фреймворка в Xcode:</p><p><strong>Откройте проект iOS в Xcode</strong>:</p><ul><li><p>Перейдите в каталог вашего Flutter-проекта.</p></li><li><p>Откройте папку ios и найдите файл <code>.xcworkspace</code> (не файл .xcodeproj).</p></li><li><p>Дважды кликните по файлу <code>.xcworkspace</code>, чтобы запустить Xcode.</p></li></ul><p><strong>Выберите таргет</strong></p><ul><li><p>В навигаторе проектов Xcode найдите и выберите название вашего проекта в верхней части левой боковой панели.</p></li><li><p>В главном окне вы увидите настройки проекта. Кликните на таргете вашего приложения (обычно она называется так же, как и ваш проект).</p></li></ul><p><strong>Зайдите в раздел Frameworks</strong>:</p><ul><li><p>Выбрав таргет, найдите вкладку <strong>"Build Phases" </strong>в главном окне настроек проекта.</p></li><li><p>Прокрутите вниз до раздела <strong>"Link Binary With Libraries".</strong></p></li></ul><p><strong>Добавьте локальный фреймворк</strong>:</p><ul><li><p>Нажмите на кнопку <strong>"+" </strong>в нижней части раздела "Link Binary With Libraries". Откроется диалог для добавления фреймворков и библиотек.</p></li><li><p>В поле поиска введите имя локального фреймворка, который вы хотите добавить (например, имя вашего KMP-фреймворка общих настроек).</p></li><li><p>Если фреймворк не указан в списке, нажмите <strong>"Add Other..."</strong>, затем перейдите к месту, где хранится.framework-файл (обычно в каталоге build KMP-библиотеки).</p></li><li><p>Выберите фреймворк и нажмите <strong>"Open"</strong>.</p></li></ul><figure class="full-width "><img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/19f/869/11f/19f86911fc44f74b523573bff43f1c8a.png" width="875" height="377" data-src="https://habrastorage.org/getpro/habr/upload_files/19f/869/11f/19f86911fc44f74b523573bff43f1c8a.png"/></figure><figure class="full-width "><img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/20e/e36/499/20ee36499b283c7c5221f7e346594bf2.png" width="875" height="686" data-src="https://habrastorage.org/getpro/habr/upload_files/20e/e36/499/20ee36499b283c7c5221f7e346594bf2.png"/></figure><p>Таким образом библиотека будет добавлена в наше flutter-приложение под ios в качестве фреймворка. Теперь нам нужно перейти к файлу Runner/AppDelegate.swift. Сначала импортируем shared в верхней части файла:</p><pre><code>import Flutter
import UIKit
import shared</code></pre><pre><code class="kotlin">import Flutter
import UIKit
import shared

@main
@objc class AppDelegate: FlutterAppDelegate {

    private let channelName = "com.mohaberabi.fluttersharedprefs.kmp"
    private var sharedPrefs: SharedPrefs?

    struct MethodNames {
        static let getString = "getString"
        static let setString = "setString"
        static let getInt = "getInt"
        static let setInt = "setInt"
        static let getBoolean = "getBoolean"
        static let setBoolean = "setBoolean"
        static let remove = "remove"
        static let clear = "clear"
        static let getStringList = "getStringList"
        static let setStringList = "setStringList"
        static let contains = "contains"
    }

    override func application(
        _ application: UIApplication,
        didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?
    ) -&gt; Bool {
        let controller: FlutterViewController = window?.rootViewController as! FlutterViewController
        let methodChannel = FlutterMethodChannel(name: channelName, binaryMessenger: controller.binaryMessenger)

        methodChannel.setMethodCallHandler { [weak self] (call: FlutterMethodCall, result: @escaping FlutterResult) in
            guard let self = self else { return }

            if self.sharedPrefs == nil {
                self.sharedPrefs = SharedPrefs()
            }

            switch call.method {
            case MethodNames.getString:
                self.handleGetString(call: call, result: result)

            case MethodNames.setString:
                self.handleSetString(call: call, result: result)

            case MethodNames.getInt:
                self.handleGetInt(call: call, result: result)

            case MethodNames.setInt:
                self.handleSetInt(call: call, result: result)

            case MethodNames.getBoolean:
                self.handleGetBoolean(call: call, result: result)

            case MethodNames.setBoolean:
                self.handleSetBoolean(call: call, result: result)

            case MethodNames.remove:
                self.handleRemove(call: call, result: result)

            case MethodNames.clear:
                self.handleClear(result: result)

            case MethodNames.getStringList:
                self.handleGetStringList(call: call, result: result)

            case MethodNames.setStringList:
                self.handleSetStringList(call: call, result: result)

            case MethodNames.contains:
                self.handleContains(call: call, result: result)

            default:
                result(FlutterMethodNotImplemented)
            }
        }

        return super.application(application, didFinishLaunchingWithOptions: launchOptions)
    }

    private func handleGetString(call: FlutterMethodCall, result: @escaping FlutterResult) {
        if let args = call.arguments as? [String: Any], let key = args["key"] as? String {
            let value = sharedPrefs?.getString(key: key)
            result(value)
        } else {
            result(FlutterError(code: "INVALID_ARGUMENT", message: "Key is required", details: nil))
        }
    }

    private func handleSetString(call: FlutterMethodCall, result: @escaping FlutterResult) {
        if let args = call.arguments as? [String: Any],
           let key = args["key"] as? String,
           let value = args["value"] as? String {
            sharedPrefs?.setString(key: key, value: value)
            result(nil)
        } else {
            result(FlutterError(code: "INVALID_ARGUMENT", message: "Key and value are required", details: nil))
        }
    }
    private func handleGetInt(call: FlutterMethodCall, result: @escaping FlutterResult) {
        if let args = call.arguments as? [String: Any], let key = args["key"] as? String {
            let defaultValue = Int32(args["default"] as? Int ?? 0)
            let value = sharedPrefs?.getInt(key: key, default: defaultValue)
            result(value)
        } else {
            result(FlutterError(code: "INVALID_ARGUMENT", message: "Key is required", details: nil))
        }
    }

    private func handleSetInt(call: FlutterMethodCall, result: @escaping FlutterResult) {
        if let args = call.arguments as? [String: Any],
           let key = args["key"] as? String,
           let value = args["value"] as? Int {
            sharedPrefs?.setInt(key: key, value: Int32(value))
            result(nil)
        } else {
            result(FlutterError(code: "INVALID_ARGUMENT", message: "Key and value are required", details: nil))
        }
    }


    private func handleGetBoolean(call: FlutterMethodCall, result: @escaping FlutterResult) {
        if let args = call.arguments as? [String: Any], let key = args["key"] as? String {
            let defaultValue = args["default"] as? Bool ?? false
            let value = sharedPrefs?.getBoolean(key: key, default: defaultValue)
            result(value)
        } else {
            result(FlutterError(code: "INVALID_ARGUMENT", message: "Key is required", details: nil))
        }
    }

    private func handleSetBoolean(call: FlutterMethodCall, result: @escaping FlutterResult) {
        if let args = call.arguments as? [String: Any],
           let key = args["key"] as? String,
           let value = args["value"] as? Bool {
            sharedPrefs?.setBoolean(key: key, value: value)
            result(nil)
        } else {
            result(FlutterError(code: "INVALID_ARGUMENT", message: "Key and value are required", details: nil))
        }
    }

    private func handleRemove(call: FlutterMethodCall, result: @escaping FlutterResult) {
        if let args = call.arguments as? [String: Any], let key = args["key"] as? String {
            sharedPrefs?.remove(key: key)
            result(nil)
        } else {
            result(FlutterError(code: "INVALID_ARGUMENT", message: "Key is required", details: nil))
        }
    }

    private func handleClear(result: @escaping FlutterResult) {
        sharedPrefs?.clear()
        result(nil)
    }

    private func handleGetStringList(call: FlutterMethodCall, result: @escaping FlutterResult) {
        if let args = call.arguments as? [String: Any], let key = args["key"] as? String {
            let value = sharedPrefs?.getStringList(key: key)
            result(value)
        } else {
            result(FlutterError(code: "INVALID_ARGUMENT", message: "Key is required", details: nil))
        }
    }

    private func handleSetStringList(call: FlutterMethodCall, result: @escaping FlutterResult) {
        if let args = call.arguments as? [String: Any],
           let key = args["key"] as? String,
           let values = args["values"] as? [String] {
            sharedPrefs?.setStringList(key: key, values: values)
            result(nil)
        } else {
            result(FlutterError(code: "INVALID_ARGUMENT", message: "Key and values are required", details: nil))
        }
    }

    private func handleContains(call: FlutterMethodCall, result: @escaping FlutterResult) {
        if let args = call.arguments as? [String: Any], let key = args["key"] as? String {
            let exists = sharedPrefs?.contains(key: key)
            result(exists)
        } else {
            result(FlutterError(code: "INVALID_ARGUMENT", message: "Key is required", details: nil))
        }
    }
}</code></pre><p>Мы закончили с нативными частями, и теперь нам нужно создать класс вызова fltuter-канала. Закройте xcode и все инстансы IDE, кроме flutter-приложения, и давайте пока сосредоточимся на flutter-части.</p><pre><code class="kotlin">abstract interface class PrefsParams {
  static const String key = "key";
  static const String value = "value";
  static const String defaultt = "default";
  static const String values = "values";
}

abstract interface class PrefsConst {
  static const MethodChannel channel =
      MethodChannel('com.mohaberabi.fluttersharedprefs.kmp');
  static const String getString = "getString";
  static const String setString = "setString";
  static const String getInt = "getInt";
  static const String setInt = "setInt";
  static const String getBoolean = "getBoolean";
  static const String setBoolean = "setBoolean";
  static const String remove = "remove";
  static const String clear = "clear";
  static const String getStringList = "getStringList";
  static const String setStringList = "setStringList";
  static const String contains = "contains";
}</code></pre><p>В папке lib flutter-приложения создайте новый .dart-файл под названием <code>shared_prefs_param.dart</code>, который будет содержать ключи params для канала и вызовов методов:</p><pre><code class="kotlin">import 'package:shraed_prefskmp/shared_prefs_params.dart';

class SharedPrefs {
  Future&lt;String?&gt; getString(String key) async {
    final String? value = await PrefsConst.channel.invokeMethod(
      PrefsConst.getString,
      {PrefsParams.key: key},
    );
    return value;
  }

  Future&lt;void&gt; setString(String key, String value) async {
    await PrefsConst.channel.invokeMethod(
      PrefsConst.setString,
      {PrefsParams.key: key, PrefsParams.value: value},
    );
  }

  Future&lt;int?&gt; getInt(String key, {int defaultValue = 0}) async {
    final int? value = await PrefsConst.channel.invokeMethod(
      PrefsConst.getInt,
      {PrefsParams.key: key, PrefsParams.defaultt: defaultValue},
    );
    return value;
  }

  Future&lt;void&gt; setInt(String key, int value) async {
    await PrefsConst.channel.invokeMethod(
      PrefsConst.setInt,
      {PrefsParams.key: key, PrefsParams.value: value},
    );
  }

  Future&lt;bool?&gt; getBoolean(String key, {bool defaultValue = false}) async {
    final value = await PrefsConst.channel.invokeMethod(
      PrefsConst.getBoolean,
      {PrefsParams.key: key, PrefsParams.defaultt: defaultValue},
    );
    if (value == null) {
      return null;
    } else {
      if (value is bool) {
        return value;
      } else if (value is int) {
        if (value == 0) {
          return false;
        } else {
          return true;
        }
      }
    }
    return value;
  }

  Future&lt;void&gt; setBoolean(String key, bool value) async {
    await PrefsConst.channel.invokeMethod(
      PrefsConst.setBoolean,
      {PrefsParams.key: key, PrefsParams.value: value},
    );
  }

  Future&lt;void&gt; remove(String key) async {
    await PrefsConst.channel.invokeMethod(
      PrefsConst.remove,
      {PrefsParams.key: key},
    );
  }

  Future&lt;void&gt; clear() async {
    await PrefsConst.channel.invokeMethod(PrefsConst.clear);
  }

  Future&lt;List&lt;String&gt;?&gt; getStringList(String key) async {
    final List&lt;Object?&gt;? value = await PrefsConst.channel.invokeMethod(
      PrefsConst.getStringList,
      {PrefsParams.key: key},
    );
    return value?.cast&lt;String&gt;();
  }

  Future&lt;void&gt; setStringList(String key, List&lt;String&gt; values) async {
    await PrefsConst.channel.invokeMethod(
      PrefsConst.setStringList,
      {PrefsParams.key: key, PrefsParams.values: values},
    );
  }

  Future&lt;bool&gt; contains(String key) async {
    final bool exists = await PrefsConst.channel.invokeMethod(
      PrefsConst.contains,
      {PrefsParams.key: key},
    );
    return exists;
  }
}</code></pre><p>Затем создайте новый .dart-файл shared_prefs.dart, который будет содержать вызовы каналов для созданной нами нативной части:</p><pre><code class="kotlin">import 'package:flutter/material.dart';
import 'shared_prefs.dart';

class SharedPrefsTestScreen extends StatefulWidget {
  @override
  _SharedPrefsTestScreenState createState() =&gt; _SharedPrefsTestScreenState();
}

class _SharedPrefsTestScreenState extends State&lt;SharedPrefsTestScreen&gt; {
  final SharedPrefs _sharedPrefs = SharedPrefs();

  final TextEditingController _stringKeyController = TextEditingController();
  final TextEditingController _stringValueController = TextEditingController();
  final TextEditingController _intKeyController = TextEditingController();
  final TextEditingController _intValueController = TextEditingController();
  final TextEditingController _boolKeyController = TextEditingController();
  final TextEditingController _boolValueController = TextEditingController();
  final TextEditingController _listKeyController = TextEditingController();
  final TextEditingController _listValueController = TextEditingController();

  String? _outputString;
  int? _outputInt;
  bool? _outputBool;
  List&lt;String&gt;? _outputList;

  void _setString() async {
    await _sharedPrefs.setString(
        _stringKeyController.text, _stringValueController.text);
  }

  void _getString() async {
    final value = await _sharedPrefs.getString(_stringKeyController.text);
    setState(() {
      _outputString = value;
    });
  }

  void _setInt() async {
    await _sharedPrefs.setInt(
        _intKeyController.text, int.parse(_intValueController.text));
  }

  void _getInt() async {
    final value = await _sharedPrefs.getInt(_intKeyController.text);
    setState(() {
      _outputInt = value;
    });
  }

  void _setBoolean() async {
    await _sharedPrefs.setBoolean(_boolKeyController.text,
        _boolValueController.text.toLowerCase() == 'true');
  }

  void _getBoolean() async {
    final value = await _sharedPrefs.getBoolean(_boolKeyController.text);
    setState(() {
      _outputBool = value;
    });
  }

  void _setStringList() async {
    final values =
        _listValueController.text.split(',').map((e) =&gt; e.trim()).toList();
    await _sharedPrefs.setStringList(_listKeyController.text, values);
  }

  void _getStringList() async {
    final value = await _sharedPrefs.getStringList(_listKeyController.text);
    setState(() {
      _outputList = value;
    });
  }

  void _remove(String key) async {
    await _sharedPrefs.remove(key);
  }

  void _clear() async {
    await _sharedPrefs.clear();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Shared Preferences Test'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: SingleChildScrollView(
          child: Column(
            children: [
              TextField(
                controller: _stringKeyController,
                decoration: const InputDecoration(labelText: 'String Key'),
              ),
              TextField(
                controller: _stringValueController,
                decoration: const InputDecoration(labelText: 'String Value'),
              ),
              ButtonsRow(
                onRemove: () =&gt; _remove(_stringKeyController.text),
                onset: _setString,
                output: _outputString,
                onGet: _getString,
              ),
              TextField(
                controller: _intKeyController,
                decoration: const InputDecoration(labelText: 'Integer Key'),
              ),
              TextField(
                controller: _intValueController,
                decoration: const InputDecoration(labelText: 'Integer Value'),
                keyboardType: TextInputType.number,
              ),
              ButtonsRow(
                onRemove: () =&gt; _remove(_boolKeyController.text),
                onset: _setInt,
                output: _outputInt?.toString(),
                onGet: _getInt,
              ),
              TextField(
                controller: _boolKeyController,
                decoration: const InputDecoration(labelText: 'Boolean Key'),
              ),
              TextField(
                controller: _boolValueController,
                decoration: const InputDecoration(
                    labelText: 'Boolean Value (true/false)'),
              ),
              ButtonsRow(
                onRemove: () =&gt; _remove(_boolKeyController.text),
                onset: _setBoolean,
                output: _outputBool?.toString(),
                onGet: _getBoolean,
              ),
              TextField(
                controller: _listKeyController,
                decoration: const InputDecoration(labelText: 'List Key'),
              ),
              TextField(
                controller: _listValueController,
                decoration: const InputDecoration(
                    labelText: 'List Values (comma separated)'),
              ),
              ButtonsRow(
                onRemove: () =&gt; _remove(_listKeyController.text),
                onset: _setStringList,
                output: _outputList?.join(", "),
                onGet: _getStringList,
              ),
              ElevatedButton(
                onPressed: _clear,
                child: const Text('Clear All'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

class ButtonsRow extends StatelessWidget {
  final void Function() onset;
  final void Function() onRemove;
  final void Function() onGet;
  final String? output;

  const ButtonsRow({
    super.key,
    required this.onRemove,
    required this.onset,
    required this.output,
    required this.onGet,
  });

  @override
  Widget build(BuildContext context) {
    return Row(
      children: [
        ElevatedButton(
          onPressed: onset,
          child: const Text('Set'),
        ),
        ElevatedButton(
          onPressed: onGet,
          child: const Text('Get'),
        ),
        ElevatedButton(
          onPressed: onRemove,
          child: const Text('Remove'),
        ),
        if (output != null) Text("output : $output"),
      ],
    );
  }
}</code></pre><p>Теперь, когда мы закончили с логикой, нам нужно создать несколько flutter-экранов, чтобы проверить код, который мы только что написали. Мы создадим простой ui-экран с примитивными ui-элементами, чтобы проверить класс, который мы сделали. Для этого создайте новый .dart-файл и назовите его shared_prefs_screen.dart:</p><pre><code class="kotlin">import 'package:flutter/material.dart';
import 'shared_prefs.dart';

class SharedPrefsTestScreen extends StatefulWidget {
 @override
 _SharedPrefsTestScreenState createState() =&gt; _SharedPrefsTestScreenState();
}

class _SharedPrefsTestScreenState extends State&lt;SharedPrefsTestScreen&gt; {
 final SharedPrefs _sharedPrefs = SharedPrefs();

 final TextEditingController _stringKeyController = TextEditingController();
 final TextEditingController _stringValueController = TextEditingController();
 final TextEditingController _intKeyController = TextEditingController();
 final TextEditingController _intValueController = TextEditingController();
 final TextEditingController _boolKeyController = TextEditingController();
 final TextEditingController _boolValueController = TextEditingController();
 final TextEditingController _listKeyController = TextEditingController();
 final TextEditingController _listValueController = TextEditingController();

 String? _outputString;
 int? _outputInt;
 bool? _outputBool;
 List&lt;String&gt;? _outputList;

 void _setString() async {
   await _sharedPrefs.setString(
       _stringKeyController.text, _stringValueController.text);
 }

 void _getString() async {
   final value = await _sharedPrefs.getString(_stringKeyController.text);
   setState(() {
     _outputString = value;
   });
 }

 void _setInt() async {
   await _sharedPrefs.setInt(
       _intKeyController.text, int.parse(_intValueController.text));
 }

 void _getInt() async {
   final value = await _sharedPrefs.getInt(_intKeyController.text);
   setState(() {
     _outputInt = value;
   });
 }

 void _setBoolean() async {
   await _sharedPrefs.setBoolean(_boolKeyController.text,
       _boolValueController.text.toLowerCase() == 'true');
 }

 void _getBoolean() async {
   final value = await _sharedPrefs.getBoolean(_boolKeyController.text);
   setState(() {
     _outputBool = value;
   });
 }

 void _setStringList() async {
   final values =
       _listValueController.text.split(',').map((e) =&gt; e.trim()).toList();
   await _sharedPrefs.setStringList(_listKeyController.text, values);
 }

 void _getStringList() async {
   final value = await _sharedPrefs.getStringList(_listKeyController.text);
   setState(() {
     _outputList = value;
   });
 }

 void _remove(String key) async {
   await _sharedPrefs.remove(key);
 }

 void _clear() async {
   await _sharedPrefs.clear();
 }

 @override
 Widget build(BuildContext context) {
   return Scaffold(
     appBar: AppBar(
       title: const Text('Shared Preferences Test'),
     ),
     body: Padding(
       padding: const EdgeInsets.all(16.0),
       child: SingleChildScrollView(
         child: Column(
           children: [
             TextField(
               controller: _stringKeyController,
               decoration: const InputDecoration(labelText: 'String Key'),
             ),
             TextField(
               controller: _stringValueController,
               decoration: const InputDecoration(labelText: 'String Value'),
             ),
             ButtonsRow(
               onRemove: () =&gt; _remove(_stringKeyController.text),
               onset: _setString,
               output: _outputString,
               onGet: _getString,
             ),
             TextField(
               controller: _intKeyController,
               decoration: const InputDecoration(labelText: 'Integer Key'),
             ),
             TextField(
               controller: _intValueController,
               decoration: const InputDecoration(labelText: 'Integer Value'),
               keyboardType: TextInputType.number,
             ),
             ButtonsRow(
               onRemove: () =&gt; _remove(_boolKeyController.text),
               onset: _setInt,
               output: _outputInt?.toString(),
               onGet: _getInt,
             ),
             TextField(
               controller: _boolKeyController,
               decoration: const InputDecoration(labelText: 'Boolean Key'),
             ),
             TextField(
               controller: _boolValueController,
               decoration: const InputDecoration(
                   labelText: 'Boolean Value (true/false)'),
             ),
             ButtonsRow(
               onRemove: () =&gt; _remove(_boolKeyController.text),
               onset: _setBoolean,
               output: _outputBool?.toString(),
               onGet: _getBoolean,
             ),
             TextField(
               controller: _listKeyController,
               decoration: const InputDecoration(labelText: 'List Key'),
             ),
             TextField(
               controller: _listValueController,
               decoration: const InputDecoration(
                   labelText: 'List Values (comma separated)'),
             ),
             ButtonsRow(
               onRemove: () =&gt; _remove(_listKeyController.text),
               onset: _setStringList,
               output: _outputList?.join(", "),
               onGet: _getStringList,
             ),
             ElevatedButton(
               onPressed: _clear,
               child: const Text('Clear All'),
             ),
           ],
         ),
       ),
     ),
   );
 }
}

class ButtonsRow extends StatelessWidget {
 final void Function() onset;
 final void Function() onRemove;
 final void Function() onGet;
 final String? output;

 const ButtonsRow({
   super.key,
   required this.onRemove,
   required this.onset,
   required this.output,
   required this.onGet,
 });

 @override
 Widget build(BuildContext context) {
   return Row(
     children: [
       ElevatedButton(
         onPressed: onset,
         child: const Text('Set'),
       ),
       ElevatedButton(
         onPressed: onGet,
         child: const Text('Get'),
       ),
       ElevatedButton(
         onPressed: onRemove,
         child: const Text('Remove'),
       ),
       if (output != null) Text("output : $output"),
     ],
   );
 }
}
</code></pre><p><code>SharedPrefsTestScreen</code> — это виджет Flutter, предназначенный для предоставления пользовательского интерфейса для тестирования функциональности библиотеки общих настроек. Он позволяет пользователям устанавливать, получать, удалять и очищать значения в общих настройках для различных типов данных, включая строки, целые числа, логические значения и списки. Вот простое описание того, как это работает:</p><p><strong>Stateful виджет</strong>:</p><ul><li><p>Экран реализован как stateful виджет, то есть он может сохранять информацию о состоянии (например, пользовательские вводы и выводы) в течение своего жизненного цикла.</p></li></ul><p><strong>Текстовые контроллеры</strong>:</p><ul><li><p>Он использует несколько экземпляров <code>TextEditingController</code> для управления пользовательским вводом для различных типов данных (строка, целое число, логическая переменная и список). Каждый контроллер соответствует полю с ключом или значением.</p></li></ul><p><strong>Выходные переменные</strong>:</p><ul><li><p>Четыре переменные (<code>_outputString</code>, <code>_outputInt</code>, <code>_outputBool</code> и <code>_outputList</code>) определены для хранения значений, полученных из общих настроек.</p></li></ul><p><strong>CRUD-операции </strong></p><ul><li><p>На экране представлены методы для выполнения операций создания, чтения, обновления и удаления (CRUD):</p></li><li><p><strong>Операции установки значений</strong>: Методы <code>_setString</code>, <code>_setInt</code>, <code>_setBoolean</code> и <code>_setStringList</code> сохраняют значения в общих настройках на основе пользовательского ввода.</p></li><li><p><strong>Операции получения значений</strong>: Методы <code>_getString</code>, <code>_getInt</code>, <code>_getBoolean</code> и <code>_getStringList</code> извлекают значения из общих настроек и обновляют выходные переменные.</p></li><li><p><strong>Удаление и очистка</strong>: Метод <code>_remove</code> удаляет определенное значение, а метод <code>_clear</code> удаляет все записи из общих настроек.</p></li><li><p><strong>Пользовательский интерфейс:</strong> состоит из ряда виджетов <code>TextField</code> для ввода данных пользователем и виджетов <code>ButtonsRow</code>, которые предоставляют кнопки для установки, получения и удаления значений. Результаты операций отображаются рядом с кнопками.</p></li><li><p><strong>Виджет ButtonsRow</strong>: Это отдельный stateless виджет, в котором заключены кнопки для установки, получения и удаления значений, а также отображения вывода. Он улучшает организацию и возможность повторного использования макета кнопок.</p></li></ul><p>Теперь перейдем к главному .dart-файлу и удалим стандартный код из flutter sdk, чтобы он выглядел следующим образом:</p><pre><code class="kotlin">import 'package:flutter/material.dart';
import 'package:shraed_prefskmp/shared_prefs_screen.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
        title: 'Flutter Demo',
        theme: ThemeData(
          colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
          useMaterial3: true,
        ),
        home: SharedPrefsTestScreen());
  }
}</code></pre><p>Давайте запустим приложение, чтобы протестировать его:</p><figure class="full-width "><img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/f80/4d0/0f6/f804d00f6c79fa4a33d13ce0b1b1bdc4.png" width="738" height="1600" data-src="https://habrastorage.org/getpro/habr/upload_files/f80/4d0/0f6/f804d00f6c79fa4a33d13ce0b1b1bdc4.png"/></figure><figure class="full-width "><img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/a0e/7b5/afb/a0e7b5afbbbcad0c0e9252637a69bdcb.png" width="826" height="1600" data-src="https://habrastorage.org/getpro/habr/upload_files/a0e/7b5/afb/a0e7b5afbbbcad0c0e9252637a69bdcb.png"/></figure><p>В этом проекте мы успешно реализовали KMP-библиотеку для обработки общих настроек, которая легко работает на платформах Android и iOS. Мы также создали интерфейс Flutter для взаимодействия с этой библиотекой, позволяющий пользователям легко хранить, извлекать и управлять своими настройками.</p><p>Исходный код нашей KMP-библиотеки и  flutter-приложения <a href="https://github.com/mohaberabi/flutter-sharedpreferences-kmp">можно найти на GitHub</a></p><hr/><p>Всех Flutter-разработчиков приглашаем на открытые уроки:</p><ul><li><p>6 февраля 20:00 — Flutter и Firebase: создание серверлесс-приложения.<br/><a href="https://otus.pw/gz1H/">Записаться</a></p></li><li><p>19 февраля 20:00 — Дополненная реальность во Flutter: создание интерактивных приложений с использованием ARKit, ARCore и Flutter.<br/><a href="https://otus.pw/gN8B/">Записаться</a></p></li></ul><p></p></div></div></div><!----><!----></div><!----><!----></div><!--]--><!----><div class="tm-article-presenter__meta" data-test-id="article-meta-links"><div class="tm-separated-list tm-article-presenter__meta-list"><span class="tm-separated-list__title">Теги:</span><ul class="tm-separated-list__list"><!--[--><li class="tm-separated-list__item"><!--[--><a href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[%D0%BC%D0%BE%D0%B1%D0%B8%D0%BB%D1%8C%D0%BD%D0%B0%D1%8F+%D1%80%D0%B0%D0%B7%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%BA%D0%B0]" class="tm-tags-list__link"><span>мобильная разработка</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[flutter]" class="tm-tags-list__link"><span>flutter</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[kotlin]" class="tm-tags-list__link"><span>kotlin</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[%D0%BA%D1%80%D0%BE%D1%81%D1%81%D0%BF%D0%BB%D0%B0%D1%82%D1%84%D0%BE%D1%80%D0%BC%D0%B5%D0%BD%D0%BD%D0%B0%D1%8F+%D1%80%D0%B0%D0%B7%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%BA%D0%B0]" class="tm-tags-list__link"><span>кроссплатформенная разработка</span></a><!--]--></li><!--]--><!----></ul></div><div class="tm-separated-list tm-article-presenter__meta-list"><span class="tm-separated-list__title">Хабы:</span><ul class="tm-separated-list__list"><!--[--><li class="tm-separated-list__item"><!--[--><a href="/ru/companies/otus/articles/" class="tm-hubs-list__link"><!--[--><span>Блог компании OTUS</span><!--]--></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a href="/ru/hubs/flutter/" class="tm-hubs-list__link"><!--[--><span>Flutter</span><!--]--></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a href="/ru/hubs/kotlin/" class="tm-hubs-list__link"><!--[--><span>Kotlin</span><!--]--></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a href="/ru/hubs/mobile_dev/" class="tm-hubs-list__link"><!--[--><span>Разработка мобильных приложений</span><!--]--></a><!--]--></li><!--]--><!----></ul></div></div><!----><!--]--></article><!--]--></div><!----></div><div style="" class="tm-article-sticky-panel" data-test-id="article-sticky-panel"><div class="tm-data-icons tm-data-icons tm-data-icons_space-big tm-article-sticky-panel__icons" data-test-id="article-stats-icons"><div class="tm-article-rating tm-data-icons__item"><div class="tm-votes-meter tm-article-rating__votes-switcher"><svg class="tm-svg-img tm-votes-meter__icon tm-votes-meter__icon tm-votes-meter__icon_appearance-article" height="24" width="24"><title>Всего голосов 8: ↑6 и ↓2</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-rating"></use></svg><span class="tm-votes-meter__value tm-votes-meter__value_positive tm-votes-meter__value_appearance-article tm-votes-meter__value_rating tm-votes-meter__value" data-test-id="votes-meter-value" title="Всего голосов 8: ↑6 и ↓2">+7</span></div><!--teleport start--><!--teleport end--><!----></div><!----><!----><button class="bookmarks-button tm-data-icons__item" title="Добавить в закладки" type="button"><span class="tm-svg-icon__wrapper bookmarks-button__icon"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Добавить в закладки</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-favorite"></use></svg></span><span class="bookmarks-button__counter" title="Количество пользователей, добавивших публикацию в закладки">13</span></button><div class="tm-sharing tm-data-icons__item" title="Поделиться"><button class="tm-sharing__button" type="button"><svg viewbox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" class="tm-sharing__icon"><path fill="currentColor" d="M13.8 13.8V18l7.2-6.6L13.8 5v3.9C5 8.9 3 18.6 3 18.6c2.5-4.4 6-4.8 10.8-4.8z"></path></svg></button><!--teleport start--><!--teleport end--></div><div class="tm-article-comments-counter-link tm-data-icons__item" title="Читать комментарии"><a href="/ru/companies/otus/articles/880174/comments/" class="tm-article-comments-counter-link__link" data-test-id="counter-comments"><!--[--><svg class="tm-svg-img tm-article-comments-counter-link__icon" height="24" width="24"><title>Комментарии</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-comments"></use></svg><span class="tm-article-comments-counter-link__value">2</span><!--]--></a><!----></div><!--[--><!--[--><!--[--><!----><!--]--><!--]--><!--]--><!--teleport start--><!--teleport end--><!----></div></div></div><!--[--><!--]--><div class="tm-article-presenter__footer"><!--[--><!--[--><div class="tm-article-blocks"><!----><!--[--><section class="tm-block tm-block tm-block_spacing-bottom"><!----><!--[--><div class="tm-block__body tm-block__body tm-block__body_variant-balanced"><!--[--><div class="tm-article-author" data-test-id="article-author-info" data-async-called="true"><!--[--><!--[--><div class="tm-article-author__company"><div class="tm-article-author__company-card"><div class="tm-company-snippet"><a href="/ru/companies/otus/profile/" class="tm-company-snippet__logo-link"><div class="tm-entity-image"><img alt="" class="tm-entity-image__pic" height="40" src="//habrastorage.org/getpro/habr/company/a65/525/4fe/a655254feebb0b25a027b5e276ea6489.png" width="40"></div></a><div class="tm-company-snippet__info"><a href="/ru/companies/otus/profile/" class="tm-company-snippet__title" data-test-id="company-title"><span>OTUS</span></a><div class="tm-company-snippet__description">Цифровые навыки от ведущих экспертов</div></div></div><div class="tm-article-author__buttons"><!----><!----></div></div><div class="tm-article-author__company-contacts"><!--[--><a class="tm-article-author__contact" href="https://otus.ru" rel="noopener" target="_blank">Сайт</a><a class="tm-article-author__contact" href="https://vk.com/club145052891" rel="noopener" target="_blank">ВКонтакте</a><a class="tm-article-author__contact" href="https://telegram.me/Otusjava" rel="noopener" target="_blank">Telegram</a><!--]--></div><div class="tm-article-author__separator"></div></div><!--]--><!--]--><div class="tm-user-card tm-user-card tm-user-card_variant-article tm-article-author__user-card" data-async-called="true"><div class="tm-user-card__info-container"><div class="tm-user-card__header"><div class="tm-user-card__header-data"><a href="/ru/users/MaxRokatansky/" class="tm-user-card__userpic tm-user-card__userpic_size-40"><div class="tm-entity-image"><img alt="" class="tm-entity-image__pic" src="//habrastorage.org/getpro/habr/avatars/b9f/baf/5f9/b9fbaf5f96ae52973706a0716bd9216e.jpg"></div></a><div class="tm-user-card__meta"><div class="tm-counter-container tm-karma tm-karma" title=" 1052 голоса "><div class="tm-counter-container__header"><!--[--><div class="karma-display positive" data-v-7635202e>114</div><!----><!--]--></div><div class="tm-counter-container__footer"><!--[--><div class="tm-karma__text">Карма</div><!--teleport start--><!--teleport end--><!--]--></div></div><div class="tm-counter-container" title="Рейтинг пользователя"><div class="tm-counter-container__header"><!--[--><!--[--><!--]--><div class="tm-votes-lever tm-votes-lever tm-votes-lever_appearance-rating"><!----><div class="tm-votes-lever__score tm-votes-lever__score_appearance-rating tm-votes-lever__score"><!--[--><span><span class="tm-votes-lever__score-counter tm-votes-lever__score-counter_rating tm-votes-lever__score-counter" data-test-id="votes-score-counter">39.1</span></span><!--]--></div><!----></div><!--]--></div><div class="tm-counter-container__footer"><!--[--><span class="tm-rating__text tm-rating__text">Рейтинг</span><!--]--></div></div></div></div></div><div class="tm-user-card__info tm-user-card__info_variant-article tm-user-card__info"><div class="tm-user-card__title tm-user-card__title_variant-article tm-user-card__title"><span class="tm-user-card__name tm-user-card__name_variant-article tm-user-card__name">OTUS</span><a href="/ru/users/MaxRokatansky/" class="tm-user-card__nickname tm-user-card__nickname tm-user-card__nickname_variant-article"> @MaxRokatansky</a><!----></div><p class="tm-user-card__short-info tm-user-card__short-info_variant-article tm-user-card__short-info" data-test-id="user-card-speciality">Редактор</p></div></div><!----><div class="tm-user-card__buttons tm-user-card__buttons_variant-article tm-user-card__buttons"><!----><div class="tm-user-card__button"><div class="tm-button-follow tm-user-card__button-follow"><!----><button class="tm-button-follow__button tm-button-follow__button_big" data-test-id="follow-button" type="button">Подписаться</button></div></div><!----><div class="tm-user-card__button tm-user-card__button_write" data-test-id="user-card-conversations"><svg class="tm-svg-img tm-user-card__button-icon" height="16" width="16"><title>Отправить сообщение</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#mail"></use></svg></div><!----></div><!----></div><div class="tm-article-author__user-contacts" data-test-id="author-contacts"><!----><!----><!----></div></div><!--]--></div><!--]--><!----></section><!----><!--[--><!--]--><!--]--><div class="tm-article-blocks__comments"><div id="publication-comments" class="tm-article-page-comments"><div><!--[--><div class="tm-article-comments-counter-link tm-article-comments-counter-button"><a href="/ru/companies/otus/articles/880174/comments/" class="tm-article-comments-counter-link__link tm-article-comments-counter-link__link_button-style" data-test-id="counter-comments"><!--[--><svg class="tm-svg-img tm-article-comments-counter-link__icon tm-article-comments-counter-link__icon_contrasted" height="24" width="24"><title>Комментарии</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-comments"></use></svg><span class="tm-article-comments-counter-link__value tm-article-comments-counter-link__value_contrasted"> Комментарии 2 </span><!--]--></a><!----></div><!--]--></div></div></div><!--[--><!--[--><!--]--><section class="tm-block tm-block tm-block_spacing-bottom"><header class="tm-block__header tm-block__header tm-block__header_variant-borderless"><div class="tm-block__header-container"><h2 class="tm-block__title tm-block__title tm-block__title_variant-large">Публикации</h2><!--[--><!--]--></div><!----></header><!--[--><div class="tm-block__body tm-block__body tm-block__body_variant-condensed-slim"><!--[--><!--[--><div class="tm-tabs tm-tabs"><div class=""><!--[--><span class="tm-tabs__tab-item"><button class="tm-tabs__tab-link tm-tabs__tab-link_active tm-tabs__tab-link_slim tm-tabs__tab-link">Лучшие за сутки</button></span><span class="tm-tabs__tab-item"><button class="tm-tabs__tab-link tm-tabs__tab-link_slim tm-tabs__tab-link">Похожие</button></span><!--]--></div><!----></div><div class="similar-and-daily__tab-view"><div class="placeholder-wrapper"><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><div class="tm-placeholder-article-cards"><!--[--><div class="tm-placeholder-article-card"><div class="tm-placeholder__user"><div class="tm-placeholder__user-pic loads"></div><div class="tm-placeholder__user-date loads"></div></div><div class="tm-placeholder-article-card__title"><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div></div><div class="tm-placeholder-article-card__icons tm-placeholder__counters"><!--[--><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><!--]--></div></div><div class="tm-placeholder-article-card"><div class="tm-placeholder__user"><div class="tm-placeholder__user-pic loads"></div><div class="tm-placeholder__user-date loads"></div></div><div class="tm-placeholder-article-card__title"><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div></div><div class="tm-placeholder-article-card__icons tm-placeholder__counters"><!--[--><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><!--]--></div></div><div class="tm-placeholder-article-card"><div class="tm-placeholder__user"><div class="tm-placeholder__user-pic loads"></div><div class="tm-placeholder__user-date loads"></div></div><div class="tm-placeholder-article-card__title"><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div></div><div class="tm-placeholder-article-card__icons tm-placeholder__counters"><!--[--><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><!--]--></div></div><div class="tm-placeholder-article-card"><div class="tm-placeholder__user"><div class="tm-placeholder__user-pic loads"></div><div class="tm-placeholder__user-date loads"></div></div><div class="tm-placeholder-article-card__title"><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div></div><div class="tm-placeholder-article-card__icons tm-placeholder__counters"><!--[--><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><!--]--></div></div><div class="tm-placeholder-article-card"><div class="tm-placeholder__user"><div class="tm-placeholder__user-pic loads"></div><div class="tm-placeholder__user-date loads"></div></div><div class="tm-placeholder-article-card__title"><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div></div><div class="tm-placeholder-article-card__icons tm-placeholder__counters"><!--[--><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><!--]--></div></div><!--]--></div><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----></div><!----></div><!--]--><!--]--></div><!--]--><!----></section><!--[--><!--[--><div class="placeholder-wrapper" school-alias="23-otus"><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><div class="tm-placeholder-inset tm-placeholder-vacancies"><div class="tm-placeholder-inset__header"><div class="tm-placeholder__line tm-placeholder__line_inset-header loads"></div></div><div class="tm-placeholder-inset__body"><ul class="tm-placeholder-list"><!--[--><li class="tm-placeholder-list__item tm-placeholder-list__item_inset"><div class="tm-placeholder-list__title-container"><div class="tm-placeholder__line tm-placeholder__line_item-title loads"></div></div><div class="tm-project-block-items__properties"><!--[--><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><!--]--></div></li><li class="tm-placeholder-list__item tm-placeholder-list__item_inset"><div class="tm-placeholder-list__title-container"><div class="tm-placeholder__line tm-placeholder__line_item-title loads"></div></div><div class="tm-project-block-items__properties"><!--[--><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><!--]--></div></li><li class="tm-placeholder-list__item tm-placeholder-list__item_inset"><div class="tm-placeholder-list__title-container"><div class="tm-placeholder__line tm-placeholder__line_item-title loads"></div></div><div class="tm-project-block-items__properties"><!--[--><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><!--]--></div></li><li class="tm-placeholder-list__item tm-placeholder-list__item_inset"><div class="tm-placeholder-list__title-container"><div class="tm-placeholder__line tm-placeholder__line_item-title loads"></div></div><div class="tm-project-block-items__properties"><!--[--><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><!--]--></div></li><li class="tm-placeholder-list__item tm-placeholder-list__item_inset"><div class="tm-placeholder-list__title-container"><div class="tm-placeholder__line tm-placeholder__line_item-title loads"></div></div><div class="tm-project-block-items__properties"><!--[--><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><!--]--></div></li><!--]--></ul></div><div class="tm-placeholder-inset__footer"><div class="tm-placeholder__line tm-placeholder__line_inset-footer loads"></div></div></div><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----></div><!--]--><!--]--><!----><!--[--><!--]--><!--]--></div><!--]--><!--]--></div></div><!--]--><!--]--></div></div><div class="tm-page__sidebar"><!--[--><!----><!--]--></div></div><!----><!--]--></div></div></main><!----></div><!----><div class="tm-footer"><div class="tm-page-width"><!--[--><div class="tm-footer__container"><div class="tm-footer__title"><a class="tm-svg-icon__wrapper tm-footer__title-link" href="/ru/"><svg class="tm-svg-img tm-svg-icon" height="16" width="16"><title>Хабр</title><use xlink:href="/img/habr-logo-ru.svg#logo"></use></svg></a></div><div class="tm-footer__social"><!--[--><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://www.facebook.com/habrahabr.ru" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="36" width="36"><title>Facebook</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-facebook"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://twitter.com/habr_com" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="36" width="36"><title>Twitter</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-twitter"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://vk.com/habr" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="36" width="36"><title>VK</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-vk"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://telegram.me/habr_com" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="36" width="36"><title>Telegram</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-telegram"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://www.youtube.com/channel/UCd_sTwKqVrweTt4oAKY5y4w" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="36" width="36"><title>Youtube</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-youtube"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://dzen.ru/habr" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="36" width="36"><title>Яндекс Дзен</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-dzen"></use></svg></a><!--]--></div><!--teleport start--><!--teleport end--><button class="tm-footer__link"><svg class="tm-svg-img tm-footer__icon" height="16" width="16"><title>Язык</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#lang"></use></svg> Настройка языка</button><a href="/ru/feedback/" class="tm-footer__link">Техническая поддержка</a><div class="tm-footer-copyright"><span class="tm-copyright"><span class="tm-copyright__years">© 2006–2025, </span><span class="tm-copyright__name"><a class="tm-copyright__link" href="https://company.habr.com/" rel="noopener" target="_blank">Habr</a></span></span></div></div><!--]--></div></div><!----><!--]--></div><!----></div><script>window.__INITIAL_STATE__={"adblock":{"hasAcceptableAdsFilter":false,"hasAdblock":false},"articlesList":{"articlesList":{"880174":{"id":"880174","timePublished":"2025-02-06T16:09:01+00:00","isCorporative":true,"lang":"ru","titleHtml":"Облегчаем разработку Flutter-приложений: Создание плагинов с помощью Kotlin Multiplatform","leadData":{"textHtml":"\u003Cp\u003EБудучи Flutter-разработчиками, мы часто сталкиваемся с необходимостью написания кода, ориентированного на конкретную платформу. Хоть Flutter и предоставляет полноценный фреймворк для создания кроссплатформенных приложений, интеграция нативного функционала иногда может быть весьма обременительной. Именно здесь на помощь приходит Kotlin Multiplatform (KMP). На мой взгляд, KMP — это не просто инструмент, который конкурирует с Flutter, скорее, он предлагает мощный способ рационализировать разработку плагинов, позволяя разработчикам экономить время, беречь силы и писать эффективный, легко сопровождаемый код.\u003C\u002Fp\u003E\u003Cp\u003EВ этой статье я поделюсь своим опытом использования KMP для создания библиотеки общих настроек (Shared Preferences) для Flutter под названием SharedPrefsKMP. Эта библиотека упрощает управление общими настройками в Android и iOS, демонстрируя, как KMP может улучшить процесс разработки на Flutter.\u003C\u002Fp\u003E\u003Cp\u003E\u003C\u002Fp\u003E","imageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Faa0\u002Fa99\u002Fec0\u002Faa0a99ec09f4c5e42dbe8d7682621aca.png","buttonTextHtml":"Читать далее","image":{"url":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Faa0\u002Fa99\u002Fec0\u002Faa0a99ec09f4c5e42dbe8d7682621aca.png","fit":"cover","positionY":0,"positionX":0}},"editorVersion":"2.0","postType":"article","postLabels":[{"type":"translation","typeOf":"system","title":"Перевод","data":{"originalAuthorName":"Mohab erabi","originalUrl":"https:\u002F\u002Fmedium.com\u002F@mohaberabi98\u002Fsupercharge-your-flutter-apps-developing-plugins-with-kotlin-multiplatform-0d54edf7f2d1"}}],"author":{"id":"1547287","alias":"MaxRokatansky","fullname":"OTUS","avatarUrl":"\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Favatars\u002Fb9f\u002Fbaf\u002F5f9\u002Fb9fbaf5f96ae52973706a0716bd9216e.jpg","speciality":"Редактор","scoreStats":{"score":114,"votesCount":1052},"rating":39.1,"relatedData":null,"contacts":[],"authorContacts":[],"paymentDetails":{"paymentYandexMoney":null,"paymentPayPalMe":null,"paymentWebmoney":null},"donationsMethod":null,"isInBlacklist":null,"careerProfile":null},"statistics":{"commentsCount":2,"favoritesCount":13,"readingCount":1600,"score":7,"votesCount":8,"votesCountPlus":6,"votesCountMinus":2},"hubs":[{"id":"21052","alias":"otus","type":"corporative","title":"Блог компании OTUS","titleHtml":"Блог компании OTUS","isProfiled":false,"relatedData":null},{"id":"22176","alias":"flutter","type":"collective","title":"Flutter","titleHtml":"Flutter","isProfiled":true,"relatedData":null},{"id":"19441","alias":"kotlin","type":"collective","title":"Kotlin","titleHtml":"Kotlin","isProfiled":true,"relatedData":null},{"id":"6345","alias":"mobile_dev","type":"collective","title":"Разработка мобильных приложений","titleHtml":"Разработка мобильных приложений","isProfiled":true,"relatedData":null}],"flows":[{"id":"1","alias":"develop","title":"Разработка","titleHtml":"Разработка"}],"relatedData":{"vote":null,"unreadCommentsCount":0,"bookmarked":false,"canComment":false,"canEdit":false,"canViewVotes":false,"votePlus":{"canVote":false,"isChargeEnough":false,"isKarmaEnough":false,"isVotingOver":true,"isPublicationLimitEnough":false},"voteMinus":{"canVote":false,"isChargeEnough":false,"isKarmaEnough":false,"isVotingOver":true,"isPublicationLimitEnough":false},"canModerateComments":false,"trackerSubscribed":false,"emailSubscribed":false},"textHtml":"\u003Cdiv xmlns=\"http:\u002F\u002Fwww.w3.org\u002F1999\u002Fxhtml\"\u003E\u003Cp\u003EБудучи Flutter-разработчиками, мы часто сталкиваемся с необходимостью написания кода, ориентированного на конкретную платформу. Хоть Flutter и предоставляет полноценный фреймворк для создания кроссплатформенных приложений, интеграция нативного функционала иногда может быть весьма обременительной. Именно здесь на помощь приходит Kotlin Multiplatform (KMP). На мой взгляд, KMP — это не просто инструмент, который конкурирует с Flutter, скорее, он предлагает мощный способ рационализировать разработку плагинов, позволяя разработчикам экономить время, беречь силы и писать эффективный, легко сопровождаемый код.\u003C\u002Fp\u003E\u003Cp\u003EВ этой статье я поделюсь своим опытом использования KMP для создания библиотеки общих настроек (Shared Preferences) для Flutter под названием SharedPrefsKMP. Эта библиотека упрощает управление общими настройками в Android и iOS, демонстрируя, как KMP может улучшить процесс разработки на Flutter.\u003C\u002Fp\u003E\u003Ch2\u003EПочему именно Kotlin Multiplatform?\u003C\u002Fh2\u003E\u003Cp\u003EKotlin Multiplatform позволяет разработчикам писать общий код, который можно запускать на нескольких платформах, включая Android и iOS. Используя KMP, Flutter-разработчики могут создавать плагины с общей бизнес-логикой, сокращать избыточность и поддерживать единую кодовую базу для определенных функций. Это, в свою очередь, сокращает время, необходимое на написание и отладку кода, что позволяет сосредоточиться на создании исключительного пользовательского опыта.\u003C\u002Fp\u003E\u003Ch2\u003EШаг 1: Создаем KMP-библиотеку\u003C\u002Fh2\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003E\u003Cstrong\u003EОткройте Android Studio\u003C\u002Fstrong\u003E: Запустите Android Studio на своем компьютере. Убедитесь, что у вас установлена последняя версия, чтобы получить доступ ко всем возможностям Kotlin Multiplatform.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003E\u003Cstrong\u003EСоздайте новый проект\u003C\u002Fstrong\u003E:\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EВыберете на начальном экране \u003Cstrong\u003E«New Project»\u003C\u002Fstrong\u003E.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EВ окне выбора шаблона проекта выберите \u003Cstrong\u003E«Kotlin Multiplatform Library»\u003C\u002Fstrong\u003E. Если эта опция не отображается, вам может потребоваться установить плагин Kotlin Multiplatform из магазина плагинов.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cfigure class=\"full-width \"\u003E\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw1560\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F6e4\u002Fa35\u002F3c8\u002F6e4a353c854dd69c838acb019c373a63.png\" width=\"875\" height=\"659\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F6e4\u002Fa35\u002F3c8\u002F6e4a353c854dd69c838acb019c373a63.png\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Ch2\u003EШаг 2: Выбираем IOS-фреймворк\u003C\u002Fh2\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003EПосле выбора KMP-библиотеки нам нужно выбрать IOS-фреймворк.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EНажмите на IOS Framwork Distribution и выберите XCFramework.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cfigure class=\"full-width \"\u003E\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw1560\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fd31\u002Fa57\u002F4cf\u002Fd31a574cfd791359d971add705ba58e9.png\" width=\"875\" height=\"659\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fd31\u002Fa57\u002F4cf\u002Fd31a574cfd791359d971add705ba58e9.png\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Ch2\u003EДля чего нам нужен iOS-фреймворк?\u003C\u002Fh2\u003E\u003Cp\u003E\u003Cstrong\u003EiOS-фреймворк \u003C\u002Fstrong\u003E— это набор кода и ресурсов, которые можно совместно и повторно использовать в различных приложениях. В нем заключены функциональные возможности, классы и библиотеки, которые могут быть использованы другими приложениями без необходимости каждый раз переписывать этот код. Фреймворки необходимы для модульного построения кода, повышения удобства сопровождения и облегчения сотрудничества между разработчиками.\u003C\u002Fp\u003E\u003Cp\u003EВ контексте Kotlin Multiplatform iOS-фреймворк позволяет разработчикам создавать общий код, к которому могут обращаться приложения на Swift и Objective-C, что способствует повторному использованию кода и сокращает количество кода, специфичного для конкретной платформы.\u003C\u002Fp\u003E\u003Ch2\u003EПочему стоит выбрать именно XCFramework?\u003C\u002Fh2\u003E\u003Cp\u003E\u003Cstrong\u003EXCFramework \u003C\u002Fstrong\u003E— это современный формат упаковки, введенный компанией Apple для облегчения распространения фреймворков на различных платформах и архитектурах. Ниже приведены несколько причин, по которым XCFramework выбирают для KMP-библиотек, ориентированных на iOS:\u003C\u002Fp\u003E\u003Cp\u003E\u003Cstrong\u003EПоддержка кроссплатформенности\u003C\u002Fstrong\u003E: XCFrameworks может объединять двоичные файлы для нескольких платформ (iOS, macOS, tvOS, watchOS) и архитектур (arm64, x86_64) в один пакет. Это упрощает распространение программного продукта, поскольку разработчикам не нужно создавать заморачиваться с разными файлами фреймворков для разных целевых платформ.\u003C\u002Fp\u003E\u003Cp\u003E\u003Cstrong\u003EУпрощенная интеграция\u003C\u002Fstrong\u003E: XCFrameworks упрощает интеграцию фреймворков в проекты Xcode, поскольку обеспечивает единый подход к работе с зависимостями без необходимости беспокоиться о различных архитектурах и требованиях к платформам.\u003C\u002Fp\u003E\u003Cp\u003E\u003Cstrong\u003EЗадел на будущее\u003C\u002Fstrong\u003E: Используя XCFrameworks, разработчики могут гарантировать совместимость с будущими версиями Xcode и iOS, поскольку Apple продолжает совершенствовать свои стратегии распространения фреймворков. XCFrameworks разработаны таким образом, чтобы изменения в базовых системах сборки и упаковки его не затрагивали.\u003C\u002Fp\u003E\u003Cp\u003E\u003Cstrong\u003EПовышенная производительность сборки\u003C\u002Fstrong\u003E: XCFrameworks позволяет ускорить сборку, поскольку Xcode может напрямую связать нужную архитектуру без необходимости собирать или управлять несколькими копиями одного и того же фреймворка.\u003C\u002Fp\u003E\u003Cp\u003E\u003Cstrong\u003EОптимизированное управление версиями\u003C\u002Fstrong\u003E: При использовании XCFrameworks управление версиями и обновлениями становится проще, поскольку все необходимые двоичные файлы включены в один пакет, что снижает сложность управления зависимостями.\u003C\u002Fp\u003E\u003Cp\u003EТеперь, после завершения создания kmp-библиотеки, нам нужно дождаться, когда gradle завершит синхронизацию.\u003C\u002Fp\u003E\u003Ch2\u003EНаборы исходников в Kotlin Multiplatform\u003C\u002Fh2\u003E\u003Cp\u003EВ процессе создания KMP-библиотеки вы столкнетесь с определенными папками, называемыми \u003Cstrong\u003Esource sets \u003C\u002Fstrong\u003E(наборы исходников). Эти наборы исходников очень важны для организации вашего кода для разных платформ, позволяя вам совместно использовать логику, реализуя при этом специфическую для каждой платформы функциональность. В вашем проекте вы найдете три основных набора исходников:\u003C\u002Fp\u003E\u003Col\u003E\u003Cli\u003E\u003Cp\u003E\u003Cstrong\u003EcommonMain\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003E\u003Cstrong\u003EandroidMain\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003E\u003Cstrong\u003EiosMain\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Fol\u003E\u003Ch3\u003EЧто из себя представляют наборы исходников?\u003C\u002Fh3\u003E\u003Cp\u003EНаборы исходников — это каталоги, содержащие код Kotlin для разных платформ. Набор исходников \u003Cstrong\u003EcommonMain\u003C\u002Fstrong\u003E — это место, куда помещается код, который можно использовать на всех платформах. Наборы исходников \u003Cstrong\u003EandroidMain \u003C\u002Fstrong\u003Eи \u003Cstrong\u003EiosMain \u003C\u002Fstrong\u003Eпредназначены для специфических реализаций, позволяющих использовать нативные API и функции, уникальные для Android и iOS.\u003C\u002Fp\u003E\u003Ch3\u003EПодготовка вашего проекта\u003C\u002Fh3\u003E\u003Cp\u003EПрежде чем приступать к самому коду, неплохо бы очистить изначальную заготовку, предоставляемую шаблоном проекта Kotlin Multiplatform. Например, мы можем найти такие классы, как Project и Greetings, которые нам не понадобятся для нашей библиотеки общих настроек. Вот что нам нужно сделать:\u003C\u002Fp\u003E\u003Col\u003E\u003Cli\u003E\u003Cp\u003E\u003Cstrong\u003EУдалите ненужные классы\u003C\u002Fstrong\u003E: Откройте проект и перейдите к набору исходников commonMain. Удалите файлы Project.kt и Greetings.kt (или любые другие классы, которые не относятся к вашей библиотеке).\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Fol\u003E\u003Cp\u003E\u003Cstrong\u003E2. Организуйте свой код\u003C\u002Fstrong\u003E: Сосредоточьтесь на реализации необходимых интерфейсов и классов в папках commonMain, androidMain и iosMain.\u003C\u002Fp\u003E\u003Ch2\u003EСоздание Expect-класса в commonMain\u003C\u002Fh2\u003E\u003Cp\u003EВнутри набора commonMain необходимо создать \u003Cstrong\u003Eexpect\u003C\u002Fstrong\u003E-класс для функционала общих настроек. Это важная часть использования Kotlin Multiplatform и позволяет определить интерфейс или функционал, который будет реализована по-разному на каждой платформе.\u003C\u002Fp\u003E\u003Ch3\u003EЧто здесь означает слово \"Expect\"?\u003C\u002Fh3\u003E\u003Cp\u003EВ Kotlin Multiplatform ключевое слово \u003Cstrong\u003Eexpect \u003C\u002Fstrong\u003Eиспользуется для объявления в общем коде класса, функции или свойства, которые будут иметь специфические для каждой платформы реализации. Таким образом можно определить общий интерфейс, который будет использоваться на всех платформах (например, Android и iOS), но при этом каждая платформа сможет предоставить свою уникальную реализацию.\u003C\u002Fp\u003E\u003Ch3\u003EЗачем нужно использовать Expect?\u003C\u002Fh3\u003E\u003Col\u003E\u003Cli\u003E\u003Cp\u003E\u003Cstrong\u003EСовместное использование кода\u003C\u002Fstrong\u003E: \u003Cstrong\u003EExpect\u003C\u002Fstrong\u003E-класс позволяет записывать основную логику в набор commonMain, гарантируя, что один и тот же функционал может быть использован как на Android, так и на iOS без дублирования.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003E\u003Cstrong\u003EРеализации для конкретных платформ\u003C\u002Fstrong\u003E: Хоть интерфейс остается неизменным, вы можете по-разному реализовать детали того, как общие настройки будут работать для каждой платформы, в соответствующих наборах исходников androidMain и iosMain.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003E\u003Cstrong\u003EГибкость и сопровождаемость\u003C\u002Fstrong\u003E: Если вам нужно внести изменения или добавить функции, вы можете легко модифицировать общий интерфейс или специфические для платформы реализации, не затрагивая всю кодовую базу.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Fol\u003E\u003Ch3\u003EСоздаем Expect-класс \u003C\u002Fh3\u003E\u003Col\u003E\u003Cli\u003E\u003Cp\u003E\u003Cstrong\u003EСоздайте новый файл Kotlin\u003C\u002Fstrong\u003E: Создайте в наборе исходников commonMain новый файл Kotlin под названием SharedPrefs.kt.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003E\u003Cstrong\u003EОпределите Expect-класс\u003C\u002Fstrong\u003E: Объявите в этом файле expect-класс для общих настроек. Вот простой пример:\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Fol\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Epackage com.mohaberabi.sharedprefskmp\n\nexpect class SharedPrefs {\n    fun getString(key: String): String?\n    fun setString(key: String, value: String)\n    fun getInt(key: String, default: Int): Int?\n    fun setInt(key: String, value: Int)\n    fun getBoolean(key: String, default: Boolean): Boolean?\n    fun setBoolean(key: String, value: Boolean)\n    fun remove(key: String)\n    fun clear()\n    fun getDouble(key: String, default: Double): Double\n\n    fun setDouble(key: String, value: Double)\n\n    fun getStringList(key: String): List&lt;String&gt;?\n    fun setStringList(key: String, values: List&lt;String&gt;)\n    fun contains(key: String): Boolean\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch2\u003EРеализация Android-части \u003C\u002Fh2\u003E\u003Cp\u003EТеперь, когда мы определили expect-класс для общих настроек в наборе исходников \u003Ccode\u003EcommonMain\u003C\u002Fcode\u003E, мы начнем создавать реальный класс \u003Ccode\u003ESharedPrefs\u003C\u002Fcode\u003E для Android. В этой реализации мы воспользуемся встроенной функцией \u003Ccode\u003ESharedPreferences\u003C\u002Fcode\u003E, предоставляемой Android, которая позволяет нам сохранять простые типы данных.\u003C\u002Fp\u003E\u003Cp\u003EИспользование класса \u003Ccode\u003ESharedPreferences\u003C\u002Fcode\u003E в Android является простым и эффективным, что делает его отличным выбором для работы с пользовательскими настройками и настройками приложений. Давайте рассмотрим особенности реализации этого класса для Android и убедимся, что он соответствует ожиданиям, заложенным в наш общий код.\u003C\u002Fp\u003E\u003Ch2\u003EРеализация класса SharedPrefs для Android\u003C\u002Fh2\u003E\u003Col\u003E\u003Cli\u003E\u003Cp\u003E\u003Cstrong\u003EПерейдите к набору исходников Android:\u003C\u002Fstrong\u003E Откройте проект Kotlin Multiplatform в Android Studio. В окне проекта найдите набор исходников \u003Ccode\u003EandroidMain\u003C\u002Fcode\u003E, который обычно находится в каталоге \u003Ccode\u003Esrc\u002FandroidMain\u002Fkotlin\u002Fcom\u002Fyourpackage\u002F\u003C\u002Fcode\u003E.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003E\u003Cstrong\u003EСоздайте класс SharedPrefs: \u003C\u002Fstrong\u003EСоздайте внутри каталога \u003Ccode\u003EandroidMain\u003C\u002Fcode\u003E новый Kotlin-файл под названием SharedPrefs.kt. Этот файл будет содержать фактическую реализацию класса \u003Ccode\u003ESharedPrefs\u003C\u002Fcode\u003E для Android.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003E\u003Cstrong\u003EРеализуйте класс SharedPrefs: \u003C\u002Fstrong\u003EОткройте файл SharedPrefs.kt и напишите свой класс \u003Ccode\u003ESharedPrefs\u003C\u002Fcode\u003E. Например, вы можете использовать этот код:\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Fol\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Epackage com.mohaberabi.sharedprefskmp\n\nimport android.content.Context\n\nactual class SharedPrefs(\n    private val context: Context\n) {\n\n\n    private val prefs by lazy {\n        context.applicationContext.getSharedPreferences(\"kmpPrefs\", Context.MODE_PRIVATE)\n    }\n\n    actual fun getString(key: String): String? = prefs.getString(key, null)\n\n    actual fun setString(\n        key: String,\n        value: String\n    ) = prefs.edit().putString(key, value).apply()\n\n    actual fun getInt(key: String, default: Int): Int? = prefs.getInt(key, default)\n    actual fun setInt(key: String, value: Int) = prefs.edit().putInt(key, value).apply()\n    actual fun getBoolean(key: String, default: Boolean): Boolean? = prefs.getBoolean(key, default)\n    actual fun setBoolean(key: String, value: Boolean) = prefs.edit().putBoolean(key, value).apply()\n\n\n    actual fun remove(key: String) = prefs.edit().remove(key).apply()\n\n    actual fun clear() = prefs.edit().clear().apply()\n    actual fun getDouble(key: String, default: Double): Double {\n        val value = prefs.getString(key, null)\n        return value?.toDoubleOrNull() ?: default\n    }\n\n    actual fun setDouble(key: String, value: Double) {\n        prefs.edit().putString(key, value.toString()).apply()\n    }\n\n    actual fun getStringList(key: String): List&lt;String&gt;? {\n        val stringSet = prefs.getStringSet(key, null)\n        return stringSet?.toList()\n    }\n\n    actual fun setStringList(\n        key: String,\n        values: List&lt;String&gt;\n    ) {\n        prefs.edit().putStringSet(key, values.toSet()).apply()\n    }\n\n    actual fun contains(key: String): Boolean = prefs.contains(key)\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch2\u003EРеализация iOS-части: UserDefaults и взаимодействие с Kotlin\u003C\u002Fh2\u003E\u003Cp\u003EТеперь, когда мы реализовали Android-часть нашего класса \u003Ccode\u003ESharedPrefs\u003C\u002Fcode\u003E, пришло время сосредоточиться на реализации для iOS. В iOS мы воспользуемся классом \u003Ccode\u003EUserDefaults\u003C\u002Fcode\u003E, который обеспечивает простой способ сохранения пар ключ-значение при запуске приложения. \u003Ccode\u003EUserDefaults\u003C\u002Fcode\u003E обычно используется для хранения пользовательских и других настроек, что делает его подходящим выбором для нашей \u003Ccode\u003ESharedPrefs\u003C\u002Fcode\u003E.\u003C\u002Fp\u003E\u003Ch3\u003EПара слов о UserDefaults\u003C\u002Fh3\u003E\u003Cp\u003EUserDefaults — это встроенный класс в iOS, который позволяет разработчикам хранить небольшие объемы данных в. Он использует механизм хранения пар «ключ‑значение», что позволяет легко получать и хранить простые типы данных, такие как строки, целые числа, логические значения и массивы.\u003C\u002Fp\u003E\u003Ch3\u003EВзаимодействие Kotlin и iOS\u003C\u002Fh3\u003E\u003Cp\u003EОдной из сильных сторон Kotlin Multiplatform является его способность взаимодействовать с существующим кодом iOS. При использовании KMP Kotlin может легко вызывать код на Swift и Objective-C, что означает, что мы можем использовать весь функционал, доступный нам в iOS SDK.\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003E\u003Cstrong\u003EKotlin в Objective-C\u003C\u002Fstrong\u003E: Код Kotlin может быть скомпилирован в формат, совместимый с Objective-C, что позволит вам вызывать функции Kotlin из Objective-C классов.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003E\u003Cstrong\u003EObjective-C в Swift\u003C\u002Fstrong\u003E: Objective-C долгое время был основой для разработки iOS. С появлением Swift компания Apple позаботилась о том, чтобы Objective-C и Swift могли работать вместе. Это означает, что любой Objective-C код может быть легко вызван из Swift.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003EТаким образом, если в iOS SDK есть какой-либо код или фреймворк, вы можете легко вызвать его в KMP-коде. Эта возможность гарантирует, что вы сможете использовать специфические для платформы функции, не теряя при этом преимуществ общего кода.\u003C\u002Fp\u003E\u003Cp\u003EВ нашем случае мы создадим iOS-реализацию класса \u003Ccode\u003ESharedPrefs\u003C\u002Fcode\u003E с помощью \u003Ccode\u003EUserDefaults\u003C\u002Fcode\u003E, что позволит нам в полной мере воспользоваться преимуществами совместимости Kotlin со Swift и Objective-C. Благодаря такому подходу мы можем поддерживать единую кодовую базу, гарантируя, что наше приложение будет вести себя так, как мы ожидаем на платформах Android и iOS.\u003C\u002Fp\u003E\u003Cp\u003EХочу отметить, что при реализации iOS-части наше внимание будет сосредоточено на создании бесшовного опыта, использующего лучшие практики разработки Kotlin и iOS.\u003C\u002Fp\u003E\u003Ch2\u003EРеализация iOS-части\u003C\u002Fh2\u003E\u003Col\u003E\u003Cli\u003E\u003Cp\u003E\u003Cstrong\u003EОткройте каталог iosMain\u003C\u002Fstrong\u003E: В проекте Kotlin Multiplatform перейдите в каталог iosMain.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003E\u003Cstrong\u003EСоздайте класс \u003C\u002Fstrong\u003E\u003Ccode\u003ESharedPrefs\u003C\u002Fcode\u003E: Создайте в каталоге iosMain новый Kotlin-файл под названием SharedPrefs.kt.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003E\u003Cstrong\u003EРеализуйте класс \u003C\u002Fstrong\u003E\u003Ccode\u003ESharedPrefs\u003C\u002Fcode\u003E: Напишите код для класса \u003Ccode\u003ESharedPrefs\u003C\u002Fcode\u003E, используя UserDefaults:\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Fol\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Epackage com.mohaberabi.sharedprefskmp\n\n\nimport platform.Foundation.NSUserDefaults\n\nactual class SharedPrefs {\n\n\n    companion object {\n        private const val DOMAIN_NAME = \"kmpPrefs\"\n    }\n\n    private val prefs by lazy {\n        NSUserDefaults.standardUserDefaults().apply {\n            persistentDomainForName(DOMAIN_NAME)\n        }\n    }\n\n    actual fun getString(key: String): String? = prefs.stringForKey(key)\n\n    actual fun setString(key: String, value: String) {\n        prefs.setObject(value, forKey = key)\n        prefs.synchronize()\n    }\n\n    actual fun getInt(key: String, default: Int): Int? = prefs.integerForKey(key).toInt()\n\n    actual fun setInt(key: String, value: Int) {\n        prefs.setInteger(value.toLong(), forKey = key)\n        prefs.synchronize()\n    }\n\n    actual fun getBoolean(key: String, default: Boolean): Boolean? {\n        return try {\n            prefs.boolForKey(key)\n        } catch (e: Exception) {\n            default\n        }\n    }\n\n    actual fun setBoolean(key: String, value: Boolean) {\n        prefs.setBool(value, forKey = key)\n        prefs.synchronize()\n    }\n\n    actual fun remove(key: String) {\n        prefs.removeObjectForKey(key)\n        prefs.synchronize()\n    }\n\n    actual fun clear() {\n\n        prefs.removePersistentDomainForName(DOMAIN_NAME)\n        prefs.synchronize()\n    }\n\n    actual fun getDouble(key: String, default: Double): Double {\n\n        return try {\n            prefs.doubleForKey(key)\n        } catch (e: Exception) {\n            default\n        }\n    }\n\n    actual fun setDouble(key: String, value: Double) {\n        prefs.setDouble(value, forKey = key)\n        prefs.synchronize()\n    }\n\n    actual fun getStringList(key: String): List&lt;String&gt;? {\n        val array = prefs.arrayForKey(key) as? List&lt;String&gt;\n        return array ?: emptyList()\n    }\n\n    actual fun setStringList(key: String, values: List&lt;String&gt;) {\n        prefs.setObject(values, forKey = key)\n        prefs.synchronize()\n    }\n\n    actual fun contains(key: String): Boolean = prefs.objectForKey(key) != null\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch2\u003EРелиз артефактов для Android и iOS\u003C\u002Fh2\u003E\u003Cp\u003EЧтобы упростить процесс релиза нашей KMP-библиотеки, мы сгенерируем локальный AAR (Android Archive) и XCFramework для iOS. Выполните следующие шаги:\u003C\u002Fp\u003E\u003Ch3\u003E1. Создайте AAR артефакт для Android \u003C\u002Fh3\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003EОткройте свой проект в Android Studio.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EПерейдите в каталог android вашего KMP-проекта.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EОткройте файл \u003Ccode\u003Ebuild.gradle.kts\u003C\u002Fcode\u003E.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EУбедитесь, что плагин kotlin-multiplatform применен и настроен на включение общего модуля.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EИспользуйте следующую команду Gradle в терминале\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cpre\u003E\u003Ccode\u003E.\u002Fgradlew assembleRelease\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EПосле этого мы найдем релиз android aar для нашей библиотеки здесь: \u003C\u002Fp\u003E\u003Cp\u003Eshared\u002Fbuild\u002Foutputs\u002Faar\u002Fshared-release.aar \u003C\u002Fp\u003E\u003Cfigure class=\"full-width \"\u003E\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw1560\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F71c\u002F680\u002Fbc1\u002F71c680bc1e1a344f5aff881ed562c535.png\" width=\"568\" height=\"1438\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F71c\u002F680\u002Fbc1\u002F71c680bc1e1a344f5aff881ed562c535.png\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Ch3\u003E2. Создание XCFramework для iOS\u003C\u002Fh3\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003EОткройте свой проект в Xcode.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EВыберите таргет для вашей мультиплатформенной библиотеки Kotlin.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EВ настройках сборки убедитесь, что для фреймворка iOS заданы правильные конфигурации.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EИспользуйте следующую команду в терминале, чтобы сгенерировать XCFramework\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cpre\u003E\u003Ccode\u003E.\u002Fgradlew assembleXCFramework\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EВы найдете фреймворк для ios внутри:\u003Cbr\u002F\u003Eshared\u002Fbuild\u002FXCFrameowk\u002Frelease\u002Fsahred.xcframework\u003C\u002Fp\u003E\u003Cfigure class=\"full-width \"\u003E\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw1560\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F5b5\u002F9ef\u002F2ca\u002F5b59ef2ca6707a8fcfd222cfa4ee6c47.png\" width=\"580\" height=\"1078\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F5b5\u002F9ef\u002F2ca\u002F5b59ef2ca6707a8fcfd222cfa4ee6c47.png\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cp\u003EТеперь, после того как мы закончили работу над KMP-частью нам нужно создать flutter-приложение, чтобы использовать библиотеку, которую мы только что создали.\u003C\u002Fp\u003E\u003Cp\u003EПерейдите в android studio или другую IDE по вашему выбору и создайте flutter-приложение. Сделайте так, чтобы оно поддерживало ios и android, поскольку сейчас наша библиотека предназначена только для ios и android.\u003C\u002Fp\u003E\u003Cfigure class=\"full-width \"\u003E\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw1560\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F7c5\u002F42d\u002F1cc\u002F7c542d1cc8658a17b14b3e1e130692b5.png\" width=\"875\" height=\"792\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F7c5\u002F42d\u002F1cc\u002F7c542d1cc8658a17b14b3e1e130692b5.png\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cp\u003EПосле создания flutter-приложения вам нужно будет открыть android-модуль flutter-приложения в android studio. Для этого откройте в android studio проект, перейдя в каталог flutter-приложения и выбрав android. Вам придется подождать некоторое время, пока gradle android studio не закончит синхронизацию.\u003C\u002Fp\u003E\u003Cp\u003EПосле этого откройте модуль .app, а затем build.gradle.\u003C\u002Fp\u003E\u003Cp\u003EСначала нам нужно изменить minsdk, так как созданная нами библиотека предназначена только для minsdk 24.\u003C\u002Fp\u003E\u003Cfigure class=\"full-width \"\u003E\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw1560\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F447\u002Fcd4\u002F171\u002F447cd4171eef76ffb177962426d478a5.png\" width=\"875\" height=\"606\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F447\u002Fcd4\u002F171\u002F447cd4171eef76ffb177962426d478a5.png\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cp\u003EТеперь нам нужно создать новую папку под android\u002Fapp\u002Flibs\u003C\u002Fp\u003E\u003Cp\u003EЗдесь будет .aar, который мы только что создали.\u003C\u002Fp\u003E\u003Ch3\u003E1. Создайте новый каталог для AAR\u003C\u002Fh3\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003EПерейдите в каталог проекта Android.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EПерейдите в каталог app  (например, android\u002Fapp).\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EСоздайте новый каталог под названием libs, если он еще не существует.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Ch3\u003E2. Скопируйте AAR-файл \u003C\u002Fh3\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003EНайдите AAR-файл, который вы сгенерировали из KMP-библиотеки. Он должен находиться в папке android\u002Fbuild\u002Foutputs\u002Faar\u002F.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EСкопируйте .aar-файл из этого каталога.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Ch3\u003E3. Вставьте AAR-файл \u003C\u002Fh3\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003EВставьте скопированный AAR-файл в только что созданную директорию libs (android\u002Fapp\u002Flibs).\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Ch3\u003E4. Обновите build.gradle, чтобы включить в него AAR\u003C\u002Fh3\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003EОткройте файл build.gradle для вашего модуля приложения Android (находится в android\u002Fapp\u002Fbuild.gradle).\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EДобавьте следующую строку в блок dependencies, чтобы включить AAR-файл:\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cfigure class=\"full-width \"\u003E\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw1560\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F7ca\u002Fbed\u002Ff25\u002F7cabedf25c6191620c256523aa551297.png\" width=\"875\" height=\"1199\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F7ca\u002Fbed\u002Ff25\u002F7cabedf25c6191620c256523aa551297.png\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cp\u003EТеперь нам нужно использовать этот .aar в android. Поэтому в том же app\u002Fbuild.gradle создайте новый блок \u003Ccode\u003Edependecies {}\u003C\u002Fcode\u003E, чтобы включить aar-библиотеку в качестве локальной зависимости в наше flutter-приложение под android:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode\u003Edependencies {\n    implementation(files(\"libs\u002Fshared-release.aar\"))\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cpre\u003E\u003Ccode\u003EdefaultConfig {\n        \u002F\u002F TODO: Укажите свой собственный уникальный идентификатор приложения \n        applicationId = \"com.mohaberabi.fluttersharedprefskmp.shraed_prefskmp\"\n        \u002F\u002F Вы можете изменить следующие значения в соответствии с требованиями вашего приложения.\n\n       \u002F\u002F Для получения дополнительной информации см.: https:\u002F\u002Fflutter.dev\u002Fto\u002Freview-gradle-config.\n        minSdk = 24\n        targetSdk = flutter.targetSdkVersion\n        versionCode = flutter.versionCode\n        versionName = flutter.versionName\n    }\n\n    buildTypes {\n        release {\n            \u002F\u002F TODO: Добавьте собственную конфигурацию подписи для сборки релиза.\n            \u002F\u002F Пока что подписываемся отладочными ключами, чтобы `flutter run --release` работал.\n            signingConfig = signingConfigs.debug\n        }\n    }\n}\n\ndependencies {\n    implementation(files(\"libs\u002Fshared-release.aar\"))\n}\n\nflutter {\n    source = \"..\u002F..\"\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EТеперь нам нужно задействовать его в файле MainActivity.kt Android-части flutter-приложения.\u003C\u002Fp\u003E\u003Cp\u003EПерейдите к файлу \u003Ccode\u003Eapp\u002Fsrc\u002Fmain\u002Fkotlint\u002FMainActivity.kt\u003C\u002Fcode\u003E.\u003C\u002Fp\u003E\u003Cp\u003EНам нужно переопределить метод \u003Ccode\u003EconfigureFlutterEngine\u003C\u002Fcode\u003E из \u003Ccode\u003EFlutterActivity\u003C\u002Fcode\u003E, чтобы мы могли создать flutter-канал для связи с ним и нашим flutter-приложением: \u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Epackage com.mohaberabi.fluttersharedprefskmp.shraed_prefskmp\n\nimport io.flutter.embedding.android.FlutterActivity\nimport io.flutter.embedding.engine.FlutterEngine\nimport io.flutter.plugin.common.MethodChannel\nimport com.mohaberabi.sharedprefskmp.SharedPrefs\n\nclass MainActivity : FlutterActivity() {\n\n    companion object {\n        private const val CHANNEL_NAME = \"com.mohaberabi.fluttersharedprefs.kmp\"\n        private const val GET_STRING = \"getString\"\n        private const val SET_STRING = \"setString\"\n        private const val GET_INT = \"getInt\"\n        private const val SET_INT = \"setInt\"\n        private const val GET_BOOLEAN = \"getBoolean\"\n        private const val SET_BOOLEAN = \"setBoolean\"\n        private const val REMOVE = \"remove\"\n        private const val CLEAR = \"clear\"\n        private const val GET_STRING_LIST = \"getStringList\"\n        private const val SET_STRING_LIST = \"setStringList\"\n        private const val CONTAINS = \"contains\"\n    }\n\n    private lateinit var sharedPrefs: SharedPrefs\n\n    override fun configureFlutterEngine(flutterEngine: FlutterEngine) {\n        super.configureFlutterEngine(flutterEngine)\n        sharedPrefs = SharedPrefs(applicationContext)\n        MethodChannel(\n            flutterEngine.dartExecutor.binaryMessenger,\n            CHANNEL_NAME\n        ).setMethodCallHandler { call, result -&gt;\n            when (call.method) {\n                GET_STRING -&gt; {\n                    val key = call.argument&lt;String&gt;(\"key\") ?: \"\"\n                    val value = sharedPrefs.getString(key)\n                    result.success(value)\n                }\n\n                SET_STRING -&gt; {\n                    val key = call.argument&lt;String&gt;(\"key\") ?: \"\"\n                    val value = call.argument&lt;String&gt;(\"value\") ?: \"\"\n                    sharedPrefs.setString(key, value)\n                    result.success(null)\n                }\n\n                GET_INT -&gt; {\n                    val key = call.argument&lt;String&gt;(\"key\") ?: \"\"\n                    val default = call.argument&lt;Int&gt;(\"default\") ?: 0\n                    val value = sharedPrefs.getInt(key, default)\n                    result.success(value)\n                }\n\n                SET_INT -&gt; {\n                    val key = call.argument&lt;String&gt;(\"key\") ?: \"\"\n                    val value = call.argument&lt;Int&gt;(\"value\") ?: 0\n                    sharedPrefs.setInt(key, value)\n                    result.success(null)\n                }\n\n                GET_BOOLEAN -&gt; {\n                    val key = call.argument&lt;String&gt;(\"key\") ?: \"\"\n                    val default = call.argument&lt;Boolean&gt;(\"default\") ?: false\n                    val value = sharedPrefs.getBoolean(key, default)\n                    result.success(value)\n                }\n\n                SET_BOOLEAN -&gt; {\n                    val key = call.argument&lt;String&gt;(\"key\") ?: \"\"\n                    val value = call.argument&lt;Boolean&gt;(\"value\") ?: false\n                    sharedPrefs.setBoolean(key, value)\n                    result.success(null)\n                }\n\n                REMOVE -&gt; {\n                    val key = call.argument&lt;String&gt;(\"key\") ?: \"\"\n                    sharedPrefs.remove(key)\n                    result.success(null)\n                }\n\n                CLEAR -&gt; {\n                    sharedPrefs.clear()\n                    result.success(null)\n                }\n\n                GET_STRING_LIST -&gt; {\n                    val key = call.argument&lt;String&gt;(\"key\") ?: \"\"\n                    val value = sharedPrefs.getStringList(key)\n                    result.success(value)\n                }\n\n                SET_STRING_LIST -&gt; {\n                    val key = call.argument&lt;String&gt;(\"key\") ?: \"\"\n                    val values = call.argument&lt;List&lt;String&gt;&gt;(\"values\") ?: emptyList()\n                    sharedPrefs.setStringList(key, values)\n                    result.success(null)\n                }\n\n                CONTAINS -&gt; {\n                    val key = call.argument&lt;String&gt;(\"key\") ?: \"\"\n                    val exists = sharedPrefs.contains(key)\n                    result.success(exists)\n                }\n\n                else -&gt; {\n                    result.notImplemented()\n                }\n            }\n        }\n    }\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003E\u003Cstrong\u003EНазвание и методы канала\u003C\u002Fstrong\u003E:\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EКонстанта \u003Ccode\u003ECHANNEL_NAME\u003C\u002Fcode\u003E используется для установления канала связи между Flutter и нативным кодом.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EЗдесь объявлено несколько констант, представляющих имена методов (\u003Ccode\u003EGET_STRING\u003C\u002Fcode\u003E, \u003Ccode\u003ESET_STRING\u003C\u002Fcode\u003E и т.д.), соответствующих операциям, которые можно выполнять с общими настройками.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003E\u003Cstrong\u003EЭкземпляр SharedPrefs\u003C\u002Fstrong\u003E:\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EПриватная переменная \u003Ccode\u003EsharedPrefs\u003C\u002Fcode\u003E объявлена для хранения экземпляра класса \u003Ccode\u003ESharedPrefs\u003C\u002Fcode\u003E (из KMP-библиотеки). Этот экземпляр используется для взаимодействия с общими настройками.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003E\u003Cstrong\u003EМетод \u003C\u002Fstrong\u003E\u003Ccode\u003EconfigureFlutterEngine\u003C\u002Fcode\u003E:\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EЭтот метод переопределяет поведение по умолчанию для настройки движка Flutter.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EЭкземпляр \u003Ccode\u003EsharedPrefs\u003C\u002Fcode\u003E инициализируется контекстом приложения, чтобы обеспечить доступ к общим настройкам.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EКанал \u003Ccode\u003EMethodChannel\u003C\u002Fcode\u003E нужен для прослушивания вызовов методов из Flutter.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003E\u003Cstrong\u003EОбработчик вызова метода\u003C\u002Fstrong\u003E:\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EВнутри \u003Ccode\u003EsetMethodCallHandler\u003C\u002Fcode\u003E используется оператор when для реагирования на различные вызовы методов из Flutter.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EКаждому случаю соответствует операция с общими настройками, например:\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003E\u003Cstrong\u003EGet и Set String\u003C\u002Fstrong\u003E: Получение или сохранение строкового значения.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003E\u003Cstrong\u003EGet и Set Int\u003C\u002Fstrong\u003E: Получение или сохранение целочисленного значения с возможностью выбора значения по умолчанию.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003E\u003Cstrong\u003EGet и Set Boolean\u003C\u002Fstrong\u003E: Получение или сохранение булевого значения, в том числе по умолчанию.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003E\u003Cstrong\u003ERemove и Clear\u003C\u002Fstrong\u003E: удаление конкретного ключа или очистка всех настроек.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003E\u003Cstrong\u003EGet и Set String List\u003C\u002Fstrong\u003E: Работа со списками строк.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003E\u003Cstrong\u003EContains\u003C\u002Fstrong\u003E: Проверьте, существует ли определенный ключ в общих настройках.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003E\u003Cstrong\u003EРезультаты обработки\u003C\u002Fstrong\u003E:\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EДля каждой операции результат отправляется обратно во Flutter с помощью \u003Ccode\u003Eresult.success()\u003C\u002Fcode\u003E или \u003Ccode\u003Eresult.notImplemented()\u003C\u002Fcode\u003E, если метод не распознан.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Ch2\u003EРеализация iOS-части KMP-библиотеки общих настроек Flutter \u003C\u002Fh2\u003E\u003Cp\u003EЧтобы интегрировать KMP-библиотеку общих настроек в ваш Flutter-проект для iOS, выполните следующие простые шаги для добавления локального фреймворка в Xcode:\u003C\u002Fp\u003E\u003Cp\u003E\u003Cstrong\u003EОткройте проект iOS в Xcode\u003C\u002Fstrong\u003E:\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003EПерейдите в каталог вашего Flutter-проекта.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EОткройте папку ios и найдите файл \u003Ccode\u003E.xcworkspace\u003C\u002Fcode\u003E (не файл .xcodeproj).\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EДважды кликните по файлу \u003Ccode\u003E.xcworkspace\u003C\u002Fcode\u003E, чтобы запустить Xcode.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003E\u003Cstrong\u003EВыберите таргет\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003EВ навигаторе проектов Xcode найдите и выберите название вашего проекта в верхней части левой боковой панели.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EВ главном окне вы увидите настройки проекта. Кликните на таргете вашего приложения (обычно она называется так же, как и ваш проект).\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003E\u003Cstrong\u003EЗайдите в раздел Frameworks\u003C\u002Fstrong\u003E:\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003EВыбрав таргет, найдите вкладку \u003Cstrong\u003E\"Build Phases\" \u003C\u002Fstrong\u003Eв главном окне настроек проекта.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EПрокрутите вниз до раздела \u003Cstrong\u003E\"Link Binary With Libraries\".\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003E\u003Cstrong\u003EДобавьте локальный фреймворк\u003C\u002Fstrong\u003E:\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003EНажмите на кнопку \u003Cstrong\u003E\"+\" \u003C\u002Fstrong\u003Eв нижней части раздела \"Link Binary With Libraries\". Откроется диалог для добавления фреймворков и библиотек.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EВ поле поиска введите имя локального фреймворка, который вы хотите добавить (например, имя вашего KMP-фреймворка общих настроек).\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EЕсли фреймворк не указан в списке, нажмите \u003Cstrong\u003E\"Add Other...\"\u003C\u002Fstrong\u003E, затем перейдите к месту, где хранится.framework-файл (обычно в каталоге build KMP-библиотеки).\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EВыберите фреймворк и нажмите \u003Cstrong\u003E\"Open\"\u003C\u002Fstrong\u003E.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cfigure class=\"full-width \"\u003E\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw1560\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F19f\u002F869\u002F11f\u002F19f86911fc44f74b523573bff43f1c8a.png\" width=\"875\" height=\"377\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F19f\u002F869\u002F11f\u002F19f86911fc44f74b523573bff43f1c8a.png\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cfigure class=\"full-width \"\u003E\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw1560\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F20e\u002Fe36\u002F499\u002F20ee36499b283c7c5221f7e346594bf2.png\" width=\"875\" height=\"686\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F20e\u002Fe36\u002F499\u002F20ee36499b283c7c5221f7e346594bf2.png\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cp\u003EТаким образом библиотека будет добавлена в наше flutter-приложение под ios в качестве фреймворка. Теперь нам нужно перейти к файлу Runner\u002FAppDelegate.swift. Сначала импортируем shared в верхней части файла:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode\u003Eimport Flutter\nimport UIKit\nimport shared\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Eimport Flutter\nimport UIKit\nimport shared\n\n@main\n@objc class AppDelegate: FlutterAppDelegate {\n\n    private let channelName = \"com.mohaberabi.fluttersharedprefs.kmp\"\n    private var sharedPrefs: SharedPrefs?\n\n    struct MethodNames {\n        static let getString = \"getString\"\n        static let setString = \"setString\"\n        static let getInt = \"getInt\"\n        static let setInt = \"setInt\"\n        static let getBoolean = \"getBoolean\"\n        static let setBoolean = \"setBoolean\"\n        static let remove = \"remove\"\n        static let clear = \"clear\"\n        static let getStringList = \"getStringList\"\n        static let setStringList = \"setStringList\"\n        static let contains = \"contains\"\n    }\n\n    override func application(\n        _ application: UIApplication,\n        didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?\n    ) -&gt; Bool {\n        let controller: FlutterViewController = window?.rootViewController as! FlutterViewController\n        let methodChannel = FlutterMethodChannel(name: channelName, binaryMessenger: controller.binaryMessenger)\n\n        methodChannel.setMethodCallHandler { [weak self] (call: FlutterMethodCall, result: @escaping FlutterResult) in\n            guard let self = self else { return }\n\n            if self.sharedPrefs == nil {\n                self.sharedPrefs = SharedPrefs()\n            }\n\n            switch call.method {\n            case MethodNames.getString:\n                self.handleGetString(call: call, result: result)\n\n            case MethodNames.setString:\n                self.handleSetString(call: call, result: result)\n\n            case MethodNames.getInt:\n                self.handleGetInt(call: call, result: result)\n\n            case MethodNames.setInt:\n                self.handleSetInt(call: call, result: result)\n\n            case MethodNames.getBoolean:\n                self.handleGetBoolean(call: call, result: result)\n\n            case MethodNames.setBoolean:\n                self.handleSetBoolean(call: call, result: result)\n\n            case MethodNames.remove:\n                self.handleRemove(call: call, result: result)\n\n            case MethodNames.clear:\n                self.handleClear(result: result)\n\n            case MethodNames.getStringList:\n                self.handleGetStringList(call: call, result: result)\n\n            case MethodNames.setStringList:\n                self.handleSetStringList(call: call, result: result)\n\n            case MethodNames.contains:\n                self.handleContains(call: call, result: result)\n\n            default:\n                result(FlutterMethodNotImplemented)\n            }\n        }\n\n        return super.application(application, didFinishLaunchingWithOptions: launchOptions)\n    }\n\n    private func handleGetString(call: FlutterMethodCall, result: @escaping FlutterResult) {\n        if let args = call.arguments as? [String: Any], let key = args[\"key\"] as? String {\n            let value = sharedPrefs?.getString(key: key)\n            result(value)\n        } else {\n            result(FlutterError(code: \"INVALID_ARGUMENT\", message: \"Key is required\", details: nil))\n        }\n    }\n\n    private func handleSetString(call: FlutterMethodCall, result: @escaping FlutterResult) {\n        if let args = call.arguments as? [String: Any],\n           let key = args[\"key\"] as? String,\n           let value = args[\"value\"] as? String {\n            sharedPrefs?.setString(key: key, value: value)\n            result(nil)\n        } else {\n            result(FlutterError(code: \"INVALID_ARGUMENT\", message: \"Key and value are required\", details: nil))\n        }\n    }\n    private func handleGetInt(call: FlutterMethodCall, result: @escaping FlutterResult) {\n        if let args = call.arguments as? [String: Any], let key = args[\"key\"] as? String {\n            let defaultValue = Int32(args[\"default\"] as? Int ?? 0)\n            let value = sharedPrefs?.getInt(key: key, default: defaultValue)\n            result(value)\n        } else {\n            result(FlutterError(code: \"INVALID_ARGUMENT\", message: \"Key is required\", details: nil))\n        }\n    }\n\n    private func handleSetInt(call: FlutterMethodCall, result: @escaping FlutterResult) {\n        if let args = call.arguments as? [String: Any],\n           let key = args[\"key\"] as? String,\n           let value = args[\"value\"] as? Int {\n            sharedPrefs?.setInt(key: key, value: Int32(value))\n            result(nil)\n        } else {\n            result(FlutterError(code: \"INVALID_ARGUMENT\", message: \"Key and value are required\", details: nil))\n        }\n    }\n\n\n    private func handleGetBoolean(call: FlutterMethodCall, result: @escaping FlutterResult) {\n        if let args = call.arguments as? [String: Any], let key = args[\"key\"] as? String {\n            let defaultValue = args[\"default\"] as? Bool ?? false\n            let value = sharedPrefs?.getBoolean(key: key, default: defaultValue)\n            result(value)\n        } else {\n            result(FlutterError(code: \"INVALID_ARGUMENT\", message: \"Key is required\", details: nil))\n        }\n    }\n\n    private func handleSetBoolean(call: FlutterMethodCall, result: @escaping FlutterResult) {\n        if let args = call.arguments as? [String: Any],\n           let key = args[\"key\"] as? String,\n           let value = args[\"value\"] as? Bool {\n            sharedPrefs?.setBoolean(key: key, value: value)\n            result(nil)\n        } else {\n            result(FlutterError(code: \"INVALID_ARGUMENT\", message: \"Key and value are required\", details: nil))\n        }\n    }\n\n    private func handleRemove(call: FlutterMethodCall, result: @escaping FlutterResult) {\n        if let args = call.arguments as? [String: Any], let key = args[\"key\"] as? String {\n            sharedPrefs?.remove(key: key)\n            result(nil)\n        } else {\n            result(FlutterError(code: \"INVALID_ARGUMENT\", message: \"Key is required\", details: nil))\n        }\n    }\n\n    private func handleClear(result: @escaping FlutterResult) {\n        sharedPrefs?.clear()\n        result(nil)\n    }\n\n    private func handleGetStringList(call: FlutterMethodCall, result: @escaping FlutterResult) {\n        if let args = call.arguments as? [String: Any], let key = args[\"key\"] as? String {\n            let value = sharedPrefs?.getStringList(key: key)\n            result(value)\n        } else {\n            result(FlutterError(code: \"INVALID_ARGUMENT\", message: \"Key is required\", details: nil))\n        }\n    }\n\n    private func handleSetStringList(call: FlutterMethodCall, result: @escaping FlutterResult) {\n        if let args = call.arguments as? [String: Any],\n           let key = args[\"key\"] as? String,\n           let values = args[\"values\"] as? [String] {\n            sharedPrefs?.setStringList(key: key, values: values)\n            result(nil)\n        } else {\n            result(FlutterError(code: \"INVALID_ARGUMENT\", message: \"Key and values are required\", details: nil))\n        }\n    }\n\n    private func handleContains(call: FlutterMethodCall, result: @escaping FlutterResult) {\n        if let args = call.arguments as? [String: Any], let key = args[\"key\"] as? String {\n            let exists = sharedPrefs?.contains(key: key)\n            result(exists)\n        } else {\n            result(FlutterError(code: \"INVALID_ARGUMENT\", message: \"Key is required\", details: nil))\n        }\n    }\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EМы закончили с нативными частями, и теперь нам нужно создать класс вызова fltuter-канала. Закройте xcode и все инстансы IDE, кроме flutter-приложения, и давайте пока сосредоточимся на flutter-части.\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Eabstract interface class PrefsParams {\n  static const String key = \"key\";\n  static const String value = \"value\";\n  static const String defaultt = \"default\";\n  static const String values = \"values\";\n}\n\nabstract interface class PrefsConst {\n  static const MethodChannel channel =\n      MethodChannel('com.mohaberabi.fluttersharedprefs.kmp');\n  static const String getString = \"getString\";\n  static const String setString = \"setString\";\n  static const String getInt = \"getInt\";\n  static const String setInt = \"setInt\";\n  static const String getBoolean = \"getBoolean\";\n  static const String setBoolean = \"setBoolean\";\n  static const String remove = \"remove\";\n  static const String clear = \"clear\";\n  static const String getStringList = \"getStringList\";\n  static const String setStringList = \"setStringList\";\n  static const String contains = \"contains\";\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EВ папке lib flutter-приложения создайте новый .dart-файл под названием \u003Ccode\u003Eshared_prefs_param.dart\u003C\u002Fcode\u003E, который будет содержать ключи params для канала и вызовов методов:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Eimport 'package:shraed_prefskmp\u002Fshared_prefs_params.dart';\n\nclass SharedPrefs {\n  Future&lt;String?&gt; getString(String key) async {\n    final String? value = await PrefsConst.channel.invokeMethod(\n      PrefsConst.getString,\n      {PrefsParams.key: key},\n    );\n    return value;\n  }\n\n  Future&lt;void&gt; setString(String key, String value) async {\n    await PrefsConst.channel.invokeMethod(\n      PrefsConst.setString,\n      {PrefsParams.key: key, PrefsParams.value: value},\n    );\n  }\n\n  Future&lt;int?&gt; getInt(String key, {int defaultValue = 0}) async {\n    final int? value = await PrefsConst.channel.invokeMethod(\n      PrefsConst.getInt,\n      {PrefsParams.key: key, PrefsParams.defaultt: defaultValue},\n    );\n    return value;\n  }\n\n  Future&lt;void&gt; setInt(String key, int value) async {\n    await PrefsConst.channel.invokeMethod(\n      PrefsConst.setInt,\n      {PrefsParams.key: key, PrefsParams.value: value},\n    );\n  }\n\n  Future&lt;bool?&gt; getBoolean(String key, {bool defaultValue = false}) async {\n    final value = await PrefsConst.channel.invokeMethod(\n      PrefsConst.getBoolean,\n      {PrefsParams.key: key, PrefsParams.defaultt: defaultValue},\n    );\n    if (value == null) {\n      return null;\n    } else {\n      if (value is bool) {\n        return value;\n      } else if (value is int) {\n        if (value == 0) {\n          return false;\n        } else {\n          return true;\n        }\n      }\n    }\n    return value;\n  }\n\n  Future&lt;void&gt; setBoolean(String key, bool value) async {\n    await PrefsConst.channel.invokeMethod(\n      PrefsConst.setBoolean,\n      {PrefsParams.key: key, PrefsParams.value: value},\n    );\n  }\n\n  Future&lt;void&gt; remove(String key) async {\n    await PrefsConst.channel.invokeMethod(\n      PrefsConst.remove,\n      {PrefsParams.key: key},\n    );\n  }\n\n  Future&lt;void&gt; clear() async {\n    await PrefsConst.channel.invokeMethod(PrefsConst.clear);\n  }\n\n  Future&lt;List&lt;String&gt;?&gt; getStringList(String key) async {\n    final List&lt;Object?&gt;? value = await PrefsConst.channel.invokeMethod(\n      PrefsConst.getStringList,\n      {PrefsParams.key: key},\n    );\n    return value?.cast&lt;String&gt;();\n  }\n\n  Future&lt;void&gt; setStringList(String key, List&lt;String&gt; values) async {\n    await PrefsConst.channel.invokeMethod(\n      PrefsConst.setStringList,\n      {PrefsParams.key: key, PrefsParams.values: values},\n    );\n  }\n\n  Future&lt;bool&gt; contains(String key) async {\n    final bool exists = await PrefsConst.channel.invokeMethod(\n      PrefsConst.contains,\n      {PrefsParams.key: key},\n    );\n    return exists;\n  }\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EЗатем создайте новый .dart-файл shared_prefs.dart, который будет содержать вызовы каналов для созданной нами нативной части:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Eimport 'package:flutter\u002Fmaterial.dart';\nimport 'shared_prefs.dart';\n\nclass SharedPrefsTestScreen extends StatefulWidget {\n  @override\n  _SharedPrefsTestScreenState createState() =&gt; _SharedPrefsTestScreenState();\n}\n\nclass _SharedPrefsTestScreenState extends State&lt;SharedPrefsTestScreen&gt; {\n  final SharedPrefs _sharedPrefs = SharedPrefs();\n\n  final TextEditingController _stringKeyController = TextEditingController();\n  final TextEditingController _stringValueController = TextEditingController();\n  final TextEditingController _intKeyController = TextEditingController();\n  final TextEditingController _intValueController = TextEditingController();\n  final TextEditingController _boolKeyController = TextEditingController();\n  final TextEditingController _boolValueController = TextEditingController();\n  final TextEditingController _listKeyController = TextEditingController();\n  final TextEditingController _listValueController = TextEditingController();\n\n  String? _outputString;\n  int? _outputInt;\n  bool? _outputBool;\n  List&lt;String&gt;? _outputList;\n\n  void _setString() async {\n    await _sharedPrefs.setString(\n        _stringKeyController.text, _stringValueController.text);\n  }\n\n  void _getString() async {\n    final value = await _sharedPrefs.getString(_stringKeyController.text);\n    setState(() {\n      _outputString = value;\n    });\n  }\n\n  void _setInt() async {\n    await _sharedPrefs.setInt(\n        _intKeyController.text, int.parse(_intValueController.text));\n  }\n\n  void _getInt() async {\n    final value = await _sharedPrefs.getInt(_intKeyController.text);\n    setState(() {\n      _outputInt = value;\n    });\n  }\n\n  void _setBoolean() async {\n    await _sharedPrefs.setBoolean(_boolKeyController.text,\n        _boolValueController.text.toLowerCase() == 'true');\n  }\n\n  void _getBoolean() async {\n    final value = await _sharedPrefs.getBoolean(_boolKeyController.text);\n    setState(() {\n      _outputBool = value;\n    });\n  }\n\n  void _setStringList() async {\n    final values =\n        _listValueController.text.split(',').map((e) =&gt; e.trim()).toList();\n    await _sharedPrefs.setStringList(_listKeyController.text, values);\n  }\n\n  void _getStringList() async {\n    final value = await _sharedPrefs.getStringList(_listKeyController.text);\n    setState(() {\n      _outputList = value;\n    });\n  }\n\n  void _remove(String key) async {\n    await _sharedPrefs.remove(key);\n  }\n\n  void _clear() async {\n    await _sharedPrefs.clear();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('Shared Preferences Test'),\n      ),\n      body: Padding(\n        padding: const EdgeInsets.all(16.0),\n        child: SingleChildScrollView(\n          child: Column(\n            children: [\n              TextField(\n                controller: _stringKeyController,\n                decoration: const InputDecoration(labelText: 'String Key'),\n              ),\n              TextField(\n                controller: _stringValueController,\n                decoration: const InputDecoration(labelText: 'String Value'),\n              ),\n              ButtonsRow(\n                onRemove: () =&gt; _remove(_stringKeyController.text),\n                onset: _setString,\n                output: _outputString,\n                onGet: _getString,\n              ),\n              TextField(\n                controller: _intKeyController,\n                decoration: const InputDecoration(labelText: 'Integer Key'),\n              ),\n              TextField(\n                controller: _intValueController,\n                decoration: const InputDecoration(labelText: 'Integer Value'),\n                keyboardType: TextInputType.number,\n              ),\n              ButtonsRow(\n                onRemove: () =&gt; _remove(_boolKeyController.text),\n                onset: _setInt,\n                output: _outputInt?.toString(),\n                onGet: _getInt,\n              ),\n              TextField(\n                controller: _boolKeyController,\n                decoration: const InputDecoration(labelText: 'Boolean Key'),\n              ),\n              TextField(\n                controller: _boolValueController,\n                decoration: const InputDecoration(\n                    labelText: 'Boolean Value (true\u002Ffalse)'),\n              ),\n              ButtonsRow(\n                onRemove: () =&gt; _remove(_boolKeyController.text),\n                onset: _setBoolean,\n                output: _outputBool?.toString(),\n                onGet: _getBoolean,\n              ),\n              TextField(\n                controller: _listKeyController,\n                decoration: const InputDecoration(labelText: 'List Key'),\n              ),\n              TextField(\n                controller: _listValueController,\n                decoration: const InputDecoration(\n                    labelText: 'List Values (comma separated)'),\n              ),\n              ButtonsRow(\n                onRemove: () =&gt; _remove(_listKeyController.text),\n                onset: _setStringList,\n                output: _outputList?.join(\", \"),\n                onGet: _getStringList,\n              ),\n              ElevatedButton(\n                onPressed: _clear,\n                child: const Text('Clear All'),\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}\n\nclass ButtonsRow extends StatelessWidget {\n  final void Function() onset;\n  final void Function() onRemove;\n  final void Function() onGet;\n  final String? output;\n\n  const ButtonsRow({\n    super.key,\n    required this.onRemove,\n    required this.onset,\n    required this.output,\n    required this.onGet,\n  });\n\n  @override\n  Widget build(BuildContext context) {\n    return Row(\n      children: [\n        ElevatedButton(\n          onPressed: onset,\n          child: const Text('Set'),\n        ),\n        ElevatedButton(\n          onPressed: onGet,\n          child: const Text('Get'),\n        ),\n        ElevatedButton(\n          onPressed: onRemove,\n          child: const Text('Remove'),\n        ),\n        if (output != null) Text(\"output : $output\"),\n      ],\n    );\n  }\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EТеперь, когда мы закончили с логикой, нам нужно создать несколько flutter-экранов, чтобы проверить код, который мы только что написали. Мы создадим простой ui-экран с примитивными ui-элементами, чтобы проверить класс, который мы сделали. Для этого создайте новый .dart-файл и назовите его shared_prefs_screen.dart:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Eimport 'package:flutter\u002Fmaterial.dart';\nimport 'shared_prefs.dart';\n\nclass SharedPrefsTestScreen extends StatefulWidget {\n @override\n _SharedPrefsTestScreenState createState() =&gt; _SharedPrefsTestScreenState();\n}\n\nclass _SharedPrefsTestScreenState extends State&lt;SharedPrefsTestScreen&gt; {\n final SharedPrefs _sharedPrefs = SharedPrefs();\n\n final TextEditingController _stringKeyController = TextEditingController();\n final TextEditingController _stringValueController = TextEditingController();\n final TextEditingController _intKeyController = TextEditingController();\n final TextEditingController _intValueController = TextEditingController();\n final TextEditingController _boolKeyController = TextEditingController();\n final TextEditingController _boolValueController = TextEditingController();\n final TextEditingController _listKeyController = TextEditingController();\n final TextEditingController _listValueController = TextEditingController();\n\n String? _outputString;\n int? _outputInt;\n bool? _outputBool;\n List&lt;String&gt;? _outputList;\n\n void _setString() async {\n   await _sharedPrefs.setString(\n       _stringKeyController.text, _stringValueController.text);\n }\n\n void _getString() async {\n   final value = await _sharedPrefs.getString(_stringKeyController.text);\n   setState(() {\n     _outputString = value;\n   });\n }\n\n void _setInt() async {\n   await _sharedPrefs.setInt(\n       _intKeyController.text, int.parse(_intValueController.text));\n }\n\n void _getInt() async {\n   final value = await _sharedPrefs.getInt(_intKeyController.text);\n   setState(() {\n     _outputInt = value;\n   });\n }\n\n void _setBoolean() async {\n   await _sharedPrefs.setBoolean(_boolKeyController.text,\n       _boolValueController.text.toLowerCase() == 'true');\n }\n\n void _getBoolean() async {\n   final value = await _sharedPrefs.getBoolean(_boolKeyController.text);\n   setState(() {\n     _outputBool = value;\n   });\n }\n\n void _setStringList() async {\n   final values =\n       _listValueController.text.split(',').map((e) =&gt; e.trim()).toList();\n   await _sharedPrefs.setStringList(_listKeyController.text, values);\n }\n\n void _getStringList() async {\n   final value = await _sharedPrefs.getStringList(_listKeyController.text);\n   setState(() {\n     _outputList = value;\n   });\n }\n\n void _remove(String key) async {\n   await _sharedPrefs.remove(key);\n }\n\n void _clear() async {\n   await _sharedPrefs.clear();\n }\n\n @override\n Widget build(BuildContext context) {\n   return Scaffold(\n     appBar: AppBar(\n       title: const Text('Shared Preferences Test'),\n     ),\n     body: Padding(\n       padding: const EdgeInsets.all(16.0),\n       child: SingleChildScrollView(\n         child: Column(\n           children: [\n             TextField(\n               controller: _stringKeyController,\n               decoration: const InputDecoration(labelText: 'String Key'),\n             ),\n             TextField(\n               controller: _stringValueController,\n               decoration: const InputDecoration(labelText: 'String Value'),\n             ),\n             ButtonsRow(\n               onRemove: () =&gt; _remove(_stringKeyController.text),\n               onset: _setString,\n               output: _outputString,\n               onGet: _getString,\n             ),\n             TextField(\n               controller: _intKeyController,\n               decoration: const InputDecoration(labelText: 'Integer Key'),\n             ),\n             TextField(\n               controller: _intValueController,\n               decoration: const InputDecoration(labelText: 'Integer Value'),\n               keyboardType: TextInputType.number,\n             ),\n             ButtonsRow(\n               onRemove: () =&gt; _remove(_boolKeyController.text),\n               onset: _setInt,\n               output: _outputInt?.toString(),\n               onGet: _getInt,\n             ),\n             TextField(\n               controller: _boolKeyController,\n               decoration: const InputDecoration(labelText: 'Boolean Key'),\n             ),\n             TextField(\n               controller: _boolValueController,\n               decoration: const InputDecoration(\n                   labelText: 'Boolean Value (true\u002Ffalse)'),\n             ),\n             ButtonsRow(\n               onRemove: () =&gt; _remove(_boolKeyController.text),\n               onset: _setBoolean,\n               output: _outputBool?.toString(),\n               onGet: _getBoolean,\n             ),\n             TextField(\n               controller: _listKeyController,\n               decoration: const InputDecoration(labelText: 'List Key'),\n             ),\n             TextField(\n               controller: _listValueController,\n               decoration: const InputDecoration(\n                   labelText: 'List Values (comma separated)'),\n             ),\n             ButtonsRow(\n               onRemove: () =&gt; _remove(_listKeyController.text),\n               onset: _setStringList,\n               output: _outputList?.join(\", \"),\n               onGet: _getStringList,\n             ),\n             ElevatedButton(\n               onPressed: _clear,\n               child: const Text('Clear All'),\n             ),\n           ],\n         ),\n       ),\n     ),\n   );\n }\n}\n\nclass ButtonsRow extends StatelessWidget {\n final void Function() onset;\n final void Function() onRemove;\n final void Function() onGet;\n final String? output;\n\n const ButtonsRow({\n   super.key,\n   required this.onRemove,\n   required this.onset,\n   required this.output,\n   required this.onGet,\n });\n\n @override\n Widget build(BuildContext context) {\n   return Row(\n     children: [\n       ElevatedButton(\n         onPressed: onset,\n         child: const Text('Set'),\n       ),\n       ElevatedButton(\n         onPressed: onGet,\n         child: const Text('Get'),\n       ),\n       ElevatedButton(\n         onPressed: onRemove,\n         child: const Text('Remove'),\n       ),\n       if (output != null) Text(\"output : $output\"),\n     ],\n   );\n }\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E\u003Ccode\u003ESharedPrefsTestScreen\u003C\u002Fcode\u003E — это виджет Flutter, предназначенный для предоставления пользовательского интерфейса для тестирования функциональности библиотеки общих настроек. Он позволяет пользователям устанавливать, получать, удалять и очищать значения в общих настройках для различных типов данных, включая строки, целые числа, логические значения и списки. Вот простое описание того, как это работает:\u003C\u002Fp\u003E\u003Cp\u003E\u003Cstrong\u003EStateful виджет\u003C\u002Fstrong\u003E:\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003EЭкран реализован как stateful виджет, то есть он может сохранять информацию о состоянии (например, пользовательские вводы и выводы) в течение своего жизненного цикла.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003E\u003Cstrong\u003EТекстовые контроллеры\u003C\u002Fstrong\u003E:\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003EОн использует несколько экземпляров \u003Ccode\u003ETextEditingController\u003C\u002Fcode\u003E для управления пользовательским вводом для различных типов данных (строка, целое число, логическая переменная и список). Каждый контроллер соответствует полю с ключом или значением.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003E\u003Cstrong\u003EВыходные переменные\u003C\u002Fstrong\u003E:\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003EЧетыре переменные (\u003Ccode\u003E_outputString\u003C\u002Fcode\u003E, \u003Ccode\u003E_outputInt\u003C\u002Fcode\u003E, \u003Ccode\u003E_outputBool\u003C\u002Fcode\u003E и \u003Ccode\u003E_outputList\u003C\u002Fcode\u003E) определены для хранения значений, полученных из общих настроек.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003E\u003Cstrong\u003ECRUD-операции \u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003EНа экране представлены методы для выполнения операций создания, чтения, обновления и удаления (CRUD):\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003E\u003Cstrong\u003EОперации установки значений\u003C\u002Fstrong\u003E: Методы \u003Ccode\u003E_setString\u003C\u002Fcode\u003E, \u003Ccode\u003E_setInt\u003C\u002Fcode\u003E, \u003Ccode\u003E_setBoolean\u003C\u002Fcode\u003E и \u003Ccode\u003E_setStringList\u003C\u002Fcode\u003E сохраняют значения в общих настройках на основе пользовательского ввода.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003E\u003Cstrong\u003EОперации получения значений\u003C\u002Fstrong\u003E: Методы \u003Ccode\u003E_getString\u003C\u002Fcode\u003E, \u003Ccode\u003E_getInt\u003C\u002Fcode\u003E, \u003Ccode\u003E_getBoolean\u003C\u002Fcode\u003E и \u003Ccode\u003E_getStringList\u003C\u002Fcode\u003E извлекают значения из общих настроек и обновляют выходные переменные.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003E\u003Cstrong\u003EУдаление и очистка\u003C\u002Fstrong\u003E: Метод \u003Ccode\u003E_remove\u003C\u002Fcode\u003E удаляет определенное значение, а метод \u003Ccode\u003E_clear\u003C\u002Fcode\u003E удаляет все записи из общих настроек.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003E\u003Cstrong\u003EПользовательский интерфейс:\u003C\u002Fstrong\u003E состоит из ряда виджетов \u003Ccode\u003ETextField\u003C\u002Fcode\u003E для ввода данных пользователем и виджетов \u003Ccode\u003EButtonsRow\u003C\u002Fcode\u003E, которые предоставляют кнопки для установки, получения и удаления значений. Результаты операций отображаются рядом с кнопками.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003E\u003Cstrong\u003EВиджет ButtonsRow\u003C\u002Fstrong\u003E: Это отдельный stateless виджет, в котором заключены кнопки для установки, получения и удаления значений, а также отображения вывода. Он улучшает организацию и возможность повторного использования макета кнопок.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003EТеперь перейдем к главному .dart-файлу и удалим стандартный код из flutter sdk, чтобы он выглядел следующим образом:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Eimport 'package:flutter\u002Fmaterial.dart';\nimport 'package:shraed_prefskmp\u002Fshared_prefs_screen.dart';\n\nvoid main() {\n  runApp(const MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n        title: 'Flutter Demo',\n        theme: ThemeData(\n          colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\n          useMaterial3: true,\n        ),\n        home: SharedPrefsTestScreen());\n  }\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EДавайте запустим приложение, чтобы протестировать его:\u003C\u002Fp\u003E\u003Cfigure class=\"full-width \"\u003E\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw1560\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Ff80\u002F4d0\u002F0f6\u002Ff804d00f6c79fa4a33d13ce0b1b1bdc4.png\" width=\"738\" height=\"1600\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Ff80\u002F4d0\u002F0f6\u002Ff804d00f6c79fa4a33d13ce0b1b1bdc4.png\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cfigure class=\"full-width \"\u003E\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw1560\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fa0e\u002F7b5\u002Fafb\u002Fa0e7b5afbbbcad0c0e9252637a69bdcb.png\" width=\"826\" height=\"1600\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fa0e\u002F7b5\u002Fafb\u002Fa0e7b5afbbbcad0c0e9252637a69bdcb.png\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cp\u003EВ этом проекте мы успешно реализовали KMP-библиотеку для обработки общих настроек, которая легко работает на платформах Android и iOS. Мы также создали интерфейс Flutter для взаимодействия с этой библиотекой, позволяющий пользователям легко хранить, извлекать и управлять своими настройками.\u003C\u002Fp\u003E\u003Cp\u003EИсходный код нашей KMP-библиотеки и  flutter-приложения \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fmohaberabi\u002Fflutter-sharedpreferences-kmp\"\u003Eможно найти на GitHub\u003C\u002Fa\u003E\u003C\u002Fp\u003E\u003Chr\u002F\u003E\u003Cp\u003EВсех Flutter-разработчиков приглашаем на открытые уроки:\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003E6 февраля 20:00 — Flutter и Firebase: создание серверлесс-приложения.\u003Cbr\u002F\u003E\u003Ca href=\"https:\u002F\u002Fotus.pw\u002Fgz1H\u002F\"\u003EЗаписаться\u003C\u002Fa\u003E\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003E19 февраля 20:00 — Дополненная реальность во Flutter: создание интерактивных приложений с использованием ARKit, ARCore и Flutter.\u003Cbr\u002F\u003E\u003Ca href=\"https:\u002F\u002Fotus.pw\u002FgN8B\u002F\"\u003EЗаписаться\u003C\u002Fa\u003E\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003E\u003C\u002Fp\u003E\u003C\u002Fdiv\u003E","tags":[{"titleHtml":"мобильная разработка"},{"titleHtml":"flutter"},{"titleHtml":"kotlin"},{"titleHtml":"кроссплатформенная разработка"}],"metadata":{"stylesUrls":[],"scriptUrls":[],"shareImageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Faa0\u002Fa99\u002Fec0\u002Faa0a99ec09f4c5e42dbe8d7682621aca.png","shareImageWidth":1200,"shareImageHeight":630,"vkShareImageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Faa0\u002Fa99\u002Fec0\u002Faa0a99ec09f4c5e42dbe8d7682621aca.png","schemaJsonLd":"{\"@context\":\"http:\\\u002F\\\u002Fschema.org\",\"@type\":\"Article\",\"mainEntityOfPage\":{\"@type\":\"WebPage\",\"@id\":\"https:\\\u002F\\\u002Fhabr.com\\\u002Fru\\\u002Fcompanies\\\u002Fotus\\\u002Farticles\\\u002F880174\\\u002F\"},\"headline\":\"Облегчаем разработку Flutter-приложений: Создание плагинов с помощью Kotlin Multiplatform\",\"datePublished\":\"2025-02-06T19:09:01+03:00\",\"dateModified\":\"2025-02-10T18:29:10+03:00\",\"author\":{\"@type\":\"Person\",\"name\":\"OTUS\"},\"publisher\":{\"@type\":\"Organization\",\"name\":\"Habr\",\"logo\":{\"@type\":\"ImageObject\",\"url\":\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fwebt\\\u002Fa_\\\u002Flk\\\u002F9m\\\u002Fa_lk9mjkccjox-zccjrpfolmkmq.png\"}},\"description\":\"Будучи Flutter-разработчиками, мы часто сталкиваемся с необходимостью написания кода, ориентированного на конкретную платформу. Хоть Flutter и предоставляет полн...\",\"url\":\"https:\\\u002F\\\u002Fhabr.com\\\u002Fru\\\u002Fcompanies\\\u002Fotus\\\u002Farticles\\\u002F880174\\\u002F#post-content-body\",\"about\":[\"c_otus\",\"h_flutter\",\"h_kotlin\",\"h_mobile_dev\",\"f_develop\"],\"image\":[\"https:\\\u002F\\\u002Fhabr.com\\\u002Fshare\\\u002Fpublication\\\u002F880174\\\u002F2357ec2edfe747c9818a52fb87d22f96\\\u002F\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fupload_files\\\u002F6e4\\\u002Fa35\\\u002F3c8\\\u002F6e4a353c854dd69c838acb019c373a63.png\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fupload_files\\\u002Fd31\\\u002Fa57\\\u002F4cf\\\u002Fd31a574cfd791359d971add705ba58e9.png\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fupload_files\\\u002F71c\\\u002F680\\\u002Fbc1\\\u002F71c680bc1e1a344f5aff881ed562c535.png\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fupload_files\\\u002F5b5\\\u002F9ef\\\u002F2ca\\\u002F5b59ef2ca6707a8fcfd222cfa4ee6c47.png\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fupload_files\\\u002F7c5\\\u002F42d\\\u002F1cc\\\u002F7c542d1cc8658a17b14b3e1e130692b5.png\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fupload_files\\\u002F447\\\u002Fcd4\\\u002F171\\\u002F447cd4171eef76ffb177962426d478a5.png\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fupload_files\\\u002F7ca\\\u002Fbed\\\u002Ff25\\\u002F7cabedf25c6191620c256523aa551297.png\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fupload_files\\\u002F19f\\\u002F869\\\u002F11f\\\u002F19f86911fc44f74b523573bff43f1c8a.png\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fupload_files\\\u002F20e\\\u002Fe36\\\u002F499\\\u002F20ee36499b283c7c5221f7e346594bf2.png\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fupload_files\\\u002Ff80\\\u002F4d0\\\u002F0f6\\\u002Ff804d00f6c79fa4a33d13ce0b1b1bdc4.png\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fupload_files\\\u002Fa0e\\\u002F7b5\\\u002Fafb\\\u002Fa0e7b5afbbbcad0c0e9252637a69bdcb.png\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fupload_files\\\u002Faa0\\\u002Fa99\\\u002Fec0\\\u002Faa0a99ec09f4c5e42dbe8d7682621aca.png\"]}","metaDescription":"Будучи Flutter-разработчиками, мы часто сталкиваемся с необходимостью написания кода, ориентированного на конкретную платформу. Хоть Flutter и предоставляет полноценный фреймворк для создания...","mainImageUrl":null,"amp":true,"customTrackerLinks":[]},"polls":[],"commentsEnabled":{"status":true,"reason":null},"rulesRemindEnabled":false,"votesEnabled":true,"status":"published","plannedPublishTime":null,"checked":null,"hasPinnedComments":false,"format":null,"banner":null,"multiwidget":null,"multiwidgetUuid":null,"readingTime":29,"complexity":"medium","isEditorial":false,"allowedFeatures":{"isTestTargetAllow":false}}},"articlesIds":{},"isLoading":false,"pagesCount":{},"route":{},"reasonsList":null,"postReasonsList":null,"view":"list","lastVisitedRoute":{},"ssrCommentsArticleIds":[""],"viewedPosts":[],"myFeedFilter":{"complexity":"all","score":"all","types":["articles","posts","news"]},"myFeedIsApplyFilters":false,"myFeedIsForce":false,"karma":{"userReasonsList":null}},"authorContribution":{"authors":{}},"betaTest":{"currentAnnouncement":null,"announcements":{},"announcementCards":null,"announcementComments":{},"announcementCommentThreads":{},"announcementCommentingStatuses":{},"archivedList":[]},"authorStatistics":{"articleRefs":{},"articleIds":{},"pagesCount":{},"route":{},"viewsCount":[],"maxStatsCount":{}},"career":{"seoLandings":[],"hubs":""},"comments":{"articleComments":{},"articlePinnedComments":{},"searchCommentsResults":null,"pagesCount":null,"commentAccess":{},"scrollParents":{},"pageArticleComments":{"lastViewedComment":0,"postId":null,"lastCommentTimestamp":"","moderated":[],"moderatedIds":[],"commentRoute":"","idempotenceKey":""}},"companies":{"companyRefs":{"otus":{"alias":"otus","imageUrl":"\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fcompany\u002Fa65\u002F525\u002F4fe\u002Fa655254feebb0b25a027b5e276ea6489.png","titleHtml":"OTUS","descriptionHtml":"Цифровые навыки от ведущих экспертов","relatedData":null,"statistics":{"subscribersCount":158808,"rating":714.96,"invest":null,"postsCount":3961,"threadsCount":13,"newsCount":5,"vacanciesCount":1,"employeesCount":49,"careerRating":null},"foundationDate":{"year":"2017","month":"04","day":"01"},"location":{"city":{"id":"447159","title":"Москва"},"region":{"id":"1885","title":"Москва и Московская обл."},"country":{"id":"168","title":"Россия"}},"siteUrl":"https:\u002F\u002Fotus.ru","staffNumber":"101–200 человек","registrationDate":"2017-03-22T08:17:26+00:00","representativeUser":{"alias":"MaxRokatansky","fullname":"OTUS"},"contacts":[{"title":"Сайт","url":"https:\u002F\u002Fotus.ru","siteTitle":"OTUS - Онлайн-образование","favicon":"https:\u002F\u002Fotus.ru\u002Ffavicon.ico"},{"title":"ВКонтакте","url":"https:\u002F\u002Fvk.com\u002Fclub145052891","siteTitle":"VK | VK","favicon":"https:\u002F\u002Fm.vk.com\u002Fimages\u002Ficons\u002Ffavicons\u002Ffav_logo.ico?10"},{"title":"Telegram","url":"https:\u002F\u002Ftelegram.me\u002FOtusjava","siteTitle":"Telegram: Contact @Otusjava","favicon":"https:\u002F\u002Ftelegram.org\u002Fimg\u002Fwebsite_icon.svg?4"}],"settings":{"analyticsSettings":[],"branding":null,"status":"active","isStartup":false,"hasActivePolls":false,"shouldShowHabrAds":false},"metadata":{"titleHtml":"OTUS, Москва - Цифровые навыки от ведущих экспертов с 1 апреля 2017 г.","title":"OTUS, Москва - Цифровые навыки от ведущих экспертов с 1 апреля 2017 г.","keywords":["python","java","golang","nginx","архитектура предприятия"],"descriptionHtml":"3 961 статья от авторов компании OTUS","description":"3 961 статья от авторов компании OTUS"},"aDeskSettings":null,"careerAlias":"otus","schoolAlias":"23-otus"}},"companyIds":{},"companyTopIds":{},"pagesCount":{},"companyProfiles":{},"companiesCategories":[],"companiesCategoriesTotalCount":0,"companiesWidgets":{},"companiesWorkers":{},"companiesFans":{},"multiwidgets":{},"route":{},"isLoading":false,"companyWorkersLoading":false,"companyFansLoading":false,"multiwidgetLoading":false,"vacancies":{},"companiesGalleries":{},"companiesBanners":{},"companiesLandingVacancies":{},"companiesTechnologies":{},"workplaceInfo":null},"companyAdmin":{"companyInfo":null,"companyInfoLoading":false,"faqArticles":null,"brandingPreviewImageUrl":null,"jivoStatus":0,"adminNotifications":null,"availableInvitesCount":{}},"companyAdd":{"currentStep":"","stepsData":{},"uncompletedSteps":[],"isStepLoading":true,"isStepCommitting":false,"isInitialized":false,"agreementContent":""},"companiesContribution":{"hubs":{},"flows":{},"companyRefs":{}},"companyHubsContribution":{"contributionRefs":{"hubRefs":{},"hubIds":{}}},"conversation":{"messages":[],"respondent":null,"isLoadMore":false},"conversations":{"conversations":[],"pagesCount":0},"docs":{"menu":{},"articles":{},"mainMenu":[],"loading":{"main":false,"dropdown":false,"article":false}},"feature":{"isProbablyVisible":true},"fixedBanner":{"isArticleStickyPanelVisible":false,"isArticleStickyPanelAtTheBottom":false,"isFixedBannerVisible":false,"isStickyPanelIconsHidden":false},"flows":{"flows":[{"id":"1","alias":"develop","title":"Разработка","titleHtml":"Разработка","route":{"name":"FLOW_PAGE","params":{"flowName":"develop"}}},{"id":"6","alias":"admin","title":"Администрирование","titleHtml":"Администрирование","route":{"name":"FLOW_PAGE","params":{"flowName":"admin"}}},{"id":"2","alias":"design","title":"Дизайн","titleHtml":"Дизайн","route":{"name":"FLOW_PAGE","params":{"flowName":"design"}}},{"id":"3","alias":"management","title":"Менеджмент","titleHtml":"Менеджмент","route":{"name":"FLOW_PAGE","params":{"flowName":"management"}}},{"id":"4","alias":"marketing","title":"Маркетинг","titleHtml":"Маркетинг","route":{"name":"FLOW_PAGE","params":{"flowName":"marketing"}}},{"id":"7","alias":"popsci","title":"Научпоп","titleHtml":"Научпоп","route":{"name":"FLOW_PAGE","params":{"flowName":"popsci"}}}],"updates":{}},"global":{"isPwa":false,"device":"mobile","isHabrCom":true,"requestId":"3f20ad2d4972b7407b88a8d2a48d14ba"},"hubs":{"hubRefs":{},"hubIds":{},"pagesCount":{},"isLoading":false,"route":{}},"hubsBlock":{"hubRefs":{},"hubIds":{}},"i18n":{"fl":"ru","hl":"ru"},"info":{"welcomePage":{},"isLoading":true},"location":{"urlStruct":{"protocol":null,"slashes":null,"auth":null,"host":null,"port":null,"hostname":null,"hash":null,"query":{},"pathname":"\u002Fru\u002Fcompanies\u002Fotus\u002Farticles\u002F880174\u002F","path":"\u002Fru\u002Fcompanies\u002Fotus\u002Farticles\u002F880174\u002F","href":"\u002Fru\u002Fcompanies\u002Fotus\u002Farticles\u002F880174\u002F"}},"me":{"user":null,"uuid":null,"ppgDemanded":false,"karmaResetInfo":{"canReincarnate":null,"wasReincarnated":null,"currentScore":null},"notes":null,"userUpdates":{"feeds":{"newPostsCount":null,"newThreadsCount":null,"newNewsCount":null,"newCount":null},"conversationUnreadCount":0}},"mostReadingList":{"mostReadingListIds":[],"mostReadingListRefs":null,"promoPost":null},"onboarding":{"currentStep":null,"stepsData":{},"stepsErrors":{},"completedSteps":[],"isStepCommitting":false,"isCommitDisabled":true},"ppa":{"articles":{},"card":null,"transactions":null,"totalTransactions":null,"isAccessible":null},"projectsBlocks":{"activeBlocks":{"vacancies":"project-block-company-article"}},"promoData":{"isLoading":false,"hasLoaded":false,"featurer":null,"megaposts":null,"promoLinks":null,"promoPosts":null,"sticker":null},"publicationStatistics":{"statsInfo":{},"statsFunnels":{},"statsGraph":{},"defaultSuggest":{},"suggest":{},"timeTracker":{},"isTrackingActivity":false,"isUserActive":true,"otherPublicationStats":{}},"pullRefresh":{"shouldRefresh":false},"sandbox":{"articleIds":[],"articleRefs":{},"pagesCount":null,"route":{},"lastVisitedRoute":{},"isLoading":false},"search":{"searchQueryError":null},"settingsOther":{"inputs":{"uiLang":{"errors":[],"ref":null,"value":""},"articlesLangEnglish":{"errors":[],"ref":null,"value":false},"articlesLangRussian":{"errors":[],"ref":null,"value":false},"agreement":{"errors":[],"ref":null,"value":false},"email":{"errors":[],"ref":null,"value":true},"digest":{"errors":[],"ref":null,"value":true}}},"similarList":{"similarListIds":[],"similarListRefs":null},"ssr":{"error":null,"isDataLoaded":true,"isDataLoading":false,"isHydrationFailed":false,"isServer":false},"stories":{"stories":[{"id":"story-998","author":{"logo":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F91a\u002F166\u002F49f\u002F91a16649f9ef89302a5a56cfa22a451d.png","title":"Яндекс Практикум","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up"},"title":"Как расти на работе?","lang":"ru","startTime":"2025-03-18T18:45:00+03:00","finishTime":"2025-03-31T19:00:00+03:00","slides":[{"id":"story-998_1","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fbf4\u002F911\u002F7e6\u002Fbf49117e637ff2099b3944f8803cd7a3.png","button":null},{"id":"story-998_2","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F3e3\u002Fc84\u002Fe83\u002F3e3c84e8330ea1ddf72e9d310457ed2f.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_3","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F84b\u002F533\u002F3c3\u002F84b5333c3e77e8dac62a8b50d042acb9.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_4","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F257\u002Feb0\u002F2be\u002F257eb02bea1777e13f3e647cae6e06cd.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_5","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F858\u002F086\u002F0ed\u002F8580860ed3497c043c04f9a42054d74f.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_6","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fcdf\u002F32f\u002F387\u002Fcdf32f38777f046c063b5182f4125e14.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_7","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fd48\u002Ff2d\u002F0e2\u002Fd48f2d0e2ecd7d746d738191bb913d8f.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_8","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fb38\u002Ffd7\u002Fee0\u002Fb38fd7ee04848bf3b058be7403438bd1.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_9","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F79e\u002Feaa\u002F9d8\u002F79eeaa9d8af5a288ad42bd9d63b5793a.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_10","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fcdc\u002F17e\u002F385\u002Fcdc17e38582dc67838b9abfb200d982e.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}}]},{"id":"story-996","author":{"logo":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fe63\u002F36d\u002Fa24\u002Fe6336da24460ab6b9fbc347d03eb263a.png","title":"Хабр","link":null},"title":"Здоровье айтишника","lang":"ru","startTime":"2025-03-17T10:22:00+03:00","finishTime":"2025-04-13T10:22:00+03:00","slides":[{"id":"story-996_1","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fb7c\u002F6de\u002F8ea\u002Fb7c6de8ea6789dbc30f071716172b6dd.jpg","button":null},{"id":"story-996_2","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F2e7\u002F88a\u002F0fe\u002F2e788a0fe61729ca8b23eb59069c844f.jpg","button":{"title":"Личный опыт","link":"https:\u002F\u002Fu.habr.com\u002Fzd-1","colorType":"light"}},{"id":"story-996_3","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fb93\u002F6f4\u002F256\u002Fb936f425653b84fa60ab00d09f78c543.jpg","button":{"title":"Как это было","link":"https:\u002F\u002Fu.habr.com\u002Fzd-2","colorType":"light"}},{"id":"story-996_4","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fc10\u002Fd14\u002Ff5a\u002Fc10d14f5a4859fe10baecbcc2bcb8828.jpg","button":{"title":"Шея в фокусе","link":"https:\u002F\u002Fu.habr.com\u002Fzd-3","colorType":"dark"}},{"id":"story-996_5","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F535\u002Fe1b\u002F77a\u002F535e1b77a9eb896262ad73321f2ad99f.jpg","button":{"title":"Фотоинструкция","link":"https:\u002F\u002Fu.habr.com\u002Fzd-4","colorType":"light"}},{"id":"story-996_6","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F569\u002Fc39\u002F49f\u002F569c3949f5b330ea85d4a1864f481c3d.jpg","button":{"title":"Сидите (не)правильно","link":"https:\u002F\u002Fu.habr.com\u002Fzd-5","colorType":"dark"}},{"id":"story-996_7","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F1f2\u002F1de\u002Fdbf\u002F1f21dedbf2902bc4061a75b839b63595.jpg","button":{"title":"Журнал изменений","link":"https:\u002F\u002Fu.habr.com\u002Fzd-6","colorType":"dark"}},{"id":"story-996_8","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F95a\u002F164\u002F21b\u002F95a16421badc3a9f1135309ab0c42c41.jpg","button":{"title":"Альтернатива","link":"https:\u002F\u002Fu.habr.com\u002Fzd-7","colorType":"light"}},{"id":"story-996_9","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F624\u002F027\u002F54d\u002F62402754d311798af44bcfe7f9abfedc.jpg","button":{"title":"Хроника поисков","link":"https:\u002F\u002Fu.habr.com\u002Fzd-8","colorType":"dark"}}]},{"id":"story-992","author":{"logo":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F3fe\u002F2fc\u002Fb05\u002F3fe2fcb05df852d7e1e00d44e54e39ae.png","title":"Сезоны Хабра","link":"https:\u002F\u002Fu.habr.com\u002Ffnstories"},"title":"Угадайте будущее в новом сезоне","lang":"ru","startTime":"2025-03-12T19:15:00+03:00","finishTime":"2025-03-31T23:56:00+03:00","slides":[{"id":"story-992_1","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fc56\u002Faf5\u002Fc43\u002Fc56af5c4377f7f7b94f7b6ad20fc92c3.png","button":{"title":"А что за сезон?","link":"https:\u002F\u002Fu.habr.com\u002Ffnstories","colorType":"light"}},{"id":"story-992_2","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F8fa\u002Fde7\u002F65d\u002F8fade765d99207f31c597283ae6ce912.png","button":{"title":"Какие темы нужны","link":"https:\u002F\u002Fu.habr.com\u002Ffnstories","colorType":"dark"}},{"id":"story-992_3","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F23e\u002F7b9\u002Fb24\u002F23e7b9b24cb056d1a42e8d31ccea16ce.png","button":{"title":"Сезон будущего ИИ","link":"https:\u002F\u002Fu.habr.com\u002Ffnstories","colorType":"dark"}},{"id":"story-992_4","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F27b\u002Fbfc\u002Fa18\u002F27bbfca18e656ee0122b5cb8eb2cb502.png","button":{"title":"Все правила сезона","link":"https:\u002F\u002Fu.habr.com\u002Ffnstories","colorType":"dark"}},{"id":"story-992_5","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F1e0\u002F6c6\u002Ff33\u002F1e06c6f33e703bbd2b2ae3baee3376fd.png","button":{"title":"Как участвовать","link":"https:\u002F\u002Fu.habr.com\u002Ffnstories","colorType":"dark"}}]},{"id":"story-990","author":{"logo":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F282\u002Fe80\u002Fbf1\u002F282e80bf1b73484126ed53c6f3e42692.png","title":"Aeza","link":"https:\u002F\u002Fu.habr.com\u002FI72qi"},"title":"С праздником весны!","lang":"ru","startTime":"2025-03-09T10:15:00+03:00","finishTime":"2025-03-30T23:59:00+03:00","slides":[{"id":"story-990_1","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F064\u002F9dd\u002Ff59\u002F0649ddf5949cae6c9342fb62034a36ac.png","button":null},{"id":"story-990_2","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F05f\u002F96b\u002F25e\u002F05f96b25e910c32256ee0b1916f21380.png","button":{"title":"Семейная история","link":"https:\u002F\u002Fu.habr.com\u002Fey2bY","colorType":"light"}},{"id":"story-990_3","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fcd1\u002Ff5d\u002F921\u002Fcd1f5d921bb9489ac11727272660bdb6.png","button":{"title":"Движущиеся картинки","link":"https:\u002F\u002Fu.habr.com\u002FWLKXU","colorType":"light"}},{"id":"story-990_4","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fb55\u002Fd45\u002Fec5\u002Fb55d45ec50e53275c60d16ea886a0672.png","button":{"title":"Личный опыт","link":"https:\u002F\u002Fu.habr.com\u002FSxrki","colorType":"light"}},{"id":"story-990_5","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Ffa7\u002F1ce\u002Ffca\u002Ffa71cefca5ed0a3fe8b50bd703b3605f.png","button":{"title":"Алгоритм","link":"https:\u002F\u002Fu.habr.com\u002Ftbz2p","colorType":"light"}},{"id":"story-990_6","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F435\u002F89d\u002Ff90\u002F43589df9018846cc6a8eed986226b252.png","button":{"title":"Выбрать сценарий","link":"https:\u002F\u002Fu.habr.com\u002F0RCPk","colorType":"light"}},{"id":"story-990_7","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F514\u002F5f8\u002F619\u002F5145f86194ad48dad48a846b42af0f93.png","button":{"title":"Jiraзамещение","link":"https:\u002F\u002Fu.habr.com\u002FEwhYq","colorType":"light"}},{"id":"story-990_8","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F439\u002Fa83\u002Fae7\u002F439a83ae78f7ef711e3b9bbed1ec26c5.png","button":{"title":"8 вещей","link":"https:\u002F\u002Fu.habr.com\u002FVTv2r","colorType":"light"}},{"id":"story-990_9","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F02d\u002F783\u002F2f7\u002F02d7832f7b1c95d88bff9f34209e204a.png","button":{"title":"Интерфейсы","link":"https:\u002F\u002Fu.habr.com\u002FUFOMZ","colorType":"light"}},{"id":"story-990_10","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F0cb\u002Ff7f\u002F0d9\u002F0cbf7f0d905d486ce4ff82bc939b21d5.png","button":{"title":"Стикеры ваши","link":"https:\u002F\u002Fu.habr.com\u002FoA1K7","colorType":"light"}}]},{"id":"story-984","author":{"logo":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F648\u002F61b\u002F9ae\u002F64861b9aecb7c474cd94063f98045541.png","title":"Хабр","link":null},"title":"Всегда котов!","lang":"ru","startTime":"2025-03-01T00:01:09+03:00","finishTime":"2025-03-23T16:21:00+03:00","slides":[{"id":"story-984_1","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fc06\u002Fc21\u002F93f\u002Fc06c2193ff34362ac2af782cf2571f55.png","button":null},{"id":"story-984_2","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fb68\u002F15f\u002F763\u002Fb6815f7630b9c015b1e67efb5bdf12d4.jpg","button":{"title":"Сделать purrrr","link":"https:\u002F\u002Fu.habr.com\u002Fj4DN1","colorType":"light"}},{"id":"story-984_3","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F550\u002F76e\u002Fd7a\u002F55076ed7a0954e243f944fc2f330623a.png","button":{"title":"Тыгыдык","link":"https:\u002F\u002Fu.habr.com\u002Fya360_kotov","colorType":"dark"}},{"id":"story-984_4","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F2fb\u002F23b\u002F06c\u002F2fb23b06cf294c2050104b2aef589788.jpg","button":{"title":"Исследование","link":"https:\u002F\u002Fu.habr.com\u002FbO3r0","colorType":"light"}},{"id":"story-984_5","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Ff50\u002F50f\u002F0ae\u002Ff5050f0aeea1335c4f0544c1863f8342.jpg","button":{"title":"Детали проекта","link":"https:\u002F\u002Fu.habr.com\u002FQJmhe","colorType":"light"}},{"id":"story-984_6","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F825\u002F3dd\u002F5f5\u002F8253dd5f5c19dd061578f1d09310a45f.jpg","button":{"title":"Эксперименты","link":"https:\u002F\u002Fu.habr.com\u002FVaOdo","colorType":"light"}},{"id":"story-984_7","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F3fb\u002Fc92\u002F0f9\u002F3fbc920f9ea81eca2c1c027ff77fc659.jpg","button":{"title":"Это не мем","link":"https:\u002F\u002Fu.habr.com\u002F0Wb3p","colorType":"light"}},{"id":"story-984_8","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F2b4\u002F794\u002Fc33\u002F2b4794c33844e60aad9468018fd132cd.jpg","button":{"title":"В засаде","link":"https:\u002F\u002Fu.habr.com\u002FnasCD","colorType":"dark"}}]}]},"technotext":{"years":[],"technotextDocForNominees":null,"technotextDocForWinners":null,"technotextInfo":{},"technotextInfoLoading":false,"technotextWinners":{},"technotextWinnersLoading":false},"userHubsContribution":{"contributionRefs":{"hubRefs":{},"hubIds":{}}},"userInvites":{"availableInvites":0,"usedInvitesIds":[],"usedInvitesRefs":{},"usedInvitesPagesCount":0,"unusedInvitesIds":[],"unusedInvitesRefs":{},"unusedInvitesPagesCount":0},"userVotes":{"karmaVotesList":[],"karmaVotesPagesCount":null,"karmaVotesListLoading":false,"commentsVotesList":[],"commentsVotesPagesCount":null,"commentsVotesListLoading":false,"postsVotesList":[],"postsVotesPagesCount":null,"postsVotesListLoading":false,"userVotesList":[],"userVotesPagesCount":null,"userVotesListLoading":false},"users":{"authorRefs":{},"authorIds":{},"pagesCount":{},"authorProfiles":{"maxrokatansky":{"alias":"MaxRokatansky","badgets":[{"title":"Захабренный","description":"Пользователь с кармой \u003E0","url":null,"isRemovable":false},{"title":"Старожил","description":"Пользователь, зарегистрированный более 3-х лет назад, с кармой больше 50","url":null,"isRemovable":false},{"title":"Бета-тестер","description":"Участвует в тестировании новой функциональности","url":"https:\u002F\u002Fhabr.com\u002Fbeta\u002Fwelcome\u002F","isRemovable":false},{"title":"Знаток Хабра 18+","description":"За победу в квизе на совершеннолетие Хабра","url":null,"isRemovable":true},{"title":"Монстр статей","description":"10+ статей за год","url":null,"isRemovable":false},{"title":"Избранный","description":"за год была статья, которая набрала &gt;100 закладок","url":null,"isRemovable":false},{"title":"Хорошая реакция","description":"Успел активировать дополнительный набор реакций до того, как реакции убрали с Хабра","url":null,"isRemovable":false}],"aboutHtml":"","contacts":[],"invitedBy":{"issuerLogin":"Tully","timeCreated":"2017-09-07T10:47:12+00:00"},"careerProfile":null,"companies":{"pagesCount":1,"companyIds":["otus"],"companyRefs":{"otus":{"id":"4756","alias":"otus","titleHtml":"OTUS","descriptionHtml":"Цифровые навыки от ведущих экспертов","imageUrl":"\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fcompany\u002Fa65\u002F525\u002F4fe\u002Fa655254feebb0b25a027b5e276ea6489.png","relatedData":null,"statistics":{"subscribersCount":158808,"rating":714.96,"invest":null},"commonHubs":[]}}}}},"userHubs":{},"userInvitations":{},"authorFollowers":{},"authorFollowed":{},"userSpecialization":{},"karmaStats":[],"statistics":null,"isLoading":false,"authorFollowersLoading":false,"authorFollowedLoading":false,"userHubsLoading":false,"userInvitationsLoading":false,"route":{}},"viewport":{"prevScrollY":{},"scrollY":0,"width":0},"tracker":{"notificationsLoading":false,"notificationsList":[],"notificationsPageCount":0,"pendingMarkNotificationsRead":[],"publicationsLoading":true,"publicationsList":[],"publicationsPageCount":0,"pendingDeletePublications":false,"pendingMarkPublicationsRead":false},"events":{"eventRefs":{},"eventIds":[],"pagesCount":0,"categories":[],"cities":[],"actualEvents":null,"currentEvent":null,"eventsFilter":{"city":"all","timeStarted":null,"timeEnded":null}},"wysiwyg":{"WYSIWYGRulesRefs":null}};(function(){var s;(s=document.currentScript||document.scripts[document.scripts.length-1]).parentNode.removeChild(s);}());</script><script src="https://assets.habr.com/habr-web/js/chunk-vendors.3b11d41f.js" defer></script><script src="https://assets.habr.com/habr-web/js/app.7a97ea6d.js" defer></script></div>
    <div id="overlays"><!----><!--teleport anchor--><!----><!--teleport anchor--><!----><!--teleport anchor--><!----><!--teleport anchor--><!----><!--teleport anchor--><!----><!--teleport anchor--></div>
    
    
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-S28W1WC23F"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());
    </script>
  
  <script type="text/javascript" >
    (function(m,e,t,r,i,k,a){m[i]=m[i]||function(){(m[i].a=m[i].a||[]).push(arguments)};
    m[i].l=1*new Date();k=e.createElement(t),a=e.getElementsByTagName(t)[0],k.async=1,k.src=r,a.parentNode.insertBefore(k,a)})
    (window, document, "script", "https://mc.yandex.ru/metrika/tag.js", "ym");

  </script>
    <script type="text/javascript">
      window.addEventListener('load', function () {
        setTimeout(() => {
          const img = new Image();
          img.src = 'https://vk.com/rtrg?p=VK-RTRG-421343-57vKE';
        }, 0);
      });
    </script>
  
    </body>

    </html>
