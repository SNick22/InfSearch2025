<!DOCTYPE html>
<html lang="ru">

  <head>
    <title>Как устроены аннотации в Kotlin. Часть 1 &#x2F; Хабр</title>
<meta property="fb:app_id" content="444736788986613">
<meta property="fb:pages" content="472597926099084">
<meta name="twitter:card" content="summary_large_image">
<meta name="twitter:site" content="@habr_com">
<meta property="og:site_name" content="Хабр">
<link href="https://habr.com/ru/rss/post/823906/?fl=ru" type="application/rss+xml" title rel="alternate" name="rss">
<link href="https://habr.com/ru/companies/surfstudio/articles/823906/" rel="canonical" data-hid="e3fa780">
<link rel="image_src" href="https://habrastorage.org/getpro/habr/upload_files/e94/364/f7f/e94364f7f872bdc28a2a199cafc6f4c2.JPG" data-hid="2a79c45">
<link rel="amphtml" href="https://habr.com/ru/amp/publications/823906/">
<meta property="og:title" content="Как устроены аннотации в Kotlin. Часть 1">
<meta name="twitter:title" content="Как устроены аннотации в Kotlin. Часть 1">
<meta name="aiturec:title" content="Как устроены аннотации в Kotlin. Часть 1">
<meta name="description" content="Привет! Сегодня с вами Максим Кругликов из Surf Android Team с переводом статьи про устройство аннотаций в Kotlin и три основных механизма их обработки: процессинг , рефлексию и lint . Давайте...">
<meta itemprop="description" content="Привет! Сегодня с вами Максим Кругликов из Surf Android Team с переводом статьи про устройство аннотаций в Kotlin и три основных механизма их обработки: процессинг , рефлексию и lint . Давайте...">
<meta property="og:description" content="Привет! Сегодня с вами Максим Кругликов из Surf Android Team с переводом статьи про устройство аннотаций в Kotlin и три основных механизма их обработки: процессинг , рефлексию и lint . Давайте...">
<meta name="twitter:description" content="Привет! Сегодня с вами Максим Кругликов из Surf Android Team с переводом статьи про устройство аннотаций в Kotlin и три основных механизма их обработки: процессинг , рефлексию и lint . Давайте...">
<meta property="aiturec:description" content="Привет! Сегодня с вами Максим Кругликов из Surf Android Team с переводом статьи про устройство аннотаций в Kotlin и три основных механизма их обработки: процессинг , рефлексию и lint . Давайте...">
<meta itemprop="image" content="https://habrastorage.org/getpro/habr/upload_files/e94/364/f7f/e94364f7f872bdc28a2a199cafc6f4c2.JPG">
<meta property="og:image" content="https://habrastorage.org/getpro/habr/upload_files/e94/364/f7f/e94364f7f872bdc28a2a199cafc6f4c2.JPG">
<meta property="og:image:width" content="1200">
<meta property="og:image:height" content="630">
<meta property="aiturec:image" content="https://habrastorage.org/getpro/habr/upload_files/e94/364/f7f/e94364f7f872bdc28a2a199cafc6f4c2.JPG">
<meta name="twitter:image" content="https://habrastorage.org/getpro/habr/upload_files/e94/364/f7f/e94364f7f872bdc28a2a199cafc6f4c2.JPG">
<meta property="vk:image" content="https://habrastorage.org/getpro/habr/upload_files/e94/364/f7f/e94364f7f872bdc28a2a199cafc6f4c2.JPG?format=vk">
<meta property="vk:image" content="https://habrastorage.org/getpro/habr/upload_files/e94/364/f7f/e94364f7f872bdc28a2a199cafc6f4c2.JPG?format=vk">
<meta property="aiturec:item_id" content="823906">
<meta property="aiturec:datetime" content="2024-06-24T08:04:45.000Z">
<meta content="https://habr.com/ru/companies/surfstudio/articles/823906/" property="og:url">
<meta property="og:type" content="article">
<meta property="og:locale" content="ru_RU">
<meta property="og:image:width" content="1200">
<meta property="og:image:height" content="630">
<meta name="keywords" content="android, kotlin, разработка приложений, нативная мобильная разработка">
<script type="application/ld+json" data-hid="1e0f0a2">{"@context":"http:\/\/schema.org","@type":"Article","mainEntityOfPage":{"@type":"WebPage","@id":"https:\/\/habr.com\/ru\/companies\/surfstudio\/articles\/823906\/"},"headline":"Как устроены аннотации в Kotlin. Часть 1","datePublished":"2024-06-24T11:04:45+03:00","dateModified":"2024-06-24T11:29:32+03:00","author":{"@type":"Person","name":"Surf_Studio"},"publisher":{"@type":"Organization","name":"Habr","logo":{"@type":"ImageObject","url":"https:\/\/habrastorage.org\/webt\/a_\/lk\/9m\/a_lk9mjkccjox-zccjrpfolmkmq.png"}},"description":"Привет! Сегодня с вами Максим Кругликов из Surf Android Team с переводом статьи про устройство аннотаций в Kotlin и три основных механизма их обработки: процесси...","url":"https:\/\/habr.com\/ru\/companies\/surfstudio\/articles\/823906\/#post-content-body","about":["c_surfstudio","h_android_dev","h_kotlin","h_mobile_dev","f_develop"],"image":["https:\/\/habr.com\/share\/publication\/823906\/c6062e0083a21df941b31690379fd35d\/","https:\/\/habrastorage.org\/getpro\/habr\/upload_files\/9cd\/165\/47b\/9cd16547bd649cd039b132c4452b1edb.png","https:\/\/habrastorage.org\/getpro\/habr\/upload_files\/a3d\/381\/8b8\/a3d3818b8f330133cdfb2de8624a19f7.png"]}</script>
    <meta charset="UTF-8">
    <meta name="viewport"
      content="width=device-width,initial-scale=1.0,viewport-fit=cover,maximum-scale=1,user-scalable=0">
    <meta name="referrer" content="unsafe-url">
    <style>
      /* cyrillic-ext */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 400;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9E4kDNxMZdWfMOD5VvmojLazX3dGTP.woff2) format('woff2');
        unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;
      }

      /* cyrillic */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 400;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9E4kDNxMZdWfMOD5Vvk4jLazX3dGTP.woff2) format('woff2');
        unicode-range: U+0301, U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;
      }

      /* latin-ext */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 400;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9E4kDNxMZdWfMOD5VvmYjLazX3dGTP.woff2) format('woff2');
        unicode-range: U+0100-02AF, U+0304, U+0308, U+0329, U+1E00-1E9F, U+1EF2-1EFF, U+2020, U+20A0-20AB, U+20AD-20C0, U+2113, U+2C60-2C7F, U+A720-A7FF;
      }

      /* latin */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 400;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9E4kDNxMZdWfMOD5Vvl4jLazX3dA.woff2) format('woff2');
        unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+0304, U+0308, U+0329, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
      }

      /* cyrillic-ext */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 500;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnZKveSxf6Xl7Gl3LX.woff2) format('woff2');
        unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;
      }

      /* cyrillic */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 500;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnZKveQhf6Xl7Gl3LX.woff2) format('woff2');
        unicode-range: U+0301, U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;
      }

      /* latin-ext */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 500;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnZKveSBf6Xl7Gl3LX.woff2) format('woff2');
        unicode-range: U+0100-02AF, U+0304, U+0308, U+0329, U+1E00-1E9F, U+1EF2-1EFF, U+2020, U+20A0-20AB, U+20AD-20C0, U+2113, U+2C60-2C7F, U+A720-A7FF;
      }

      /* latin */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 500;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnZKveRhf6Xl7Glw.woff2) format('woff2');
        unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+0304, U+0308, U+0329, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
      }

      /* cyrillic-ext */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 700;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnLK3eSxf6Xl7Gl3LX.woff2) format('woff2');
        unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;
      }

      /* cyrillic */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 700;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnLK3eQhf6Xl7Gl3LX.woff2) format('woff2');
        unicode-range: U+0301, U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;
      }

      /* latin-ext */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 700;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnLK3eSBf6Xl7Gl3LX.woff2) format('woff2');
        unicode-range: U+0100-02AF, U+0304, U+0308, U+0329, U+1E00-1E9F, U+1EF2-1EFF, U+2020, U+20A0-20AB, U+20AD-20C0, U+2113, U+2C60-2C7F, U+A720-A7FF;
      }

      /* latin */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 700;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnLK3eRhf6Xl7Glw.woff2) format('woff2');
        unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+0304, U+0308, U+0329, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
      }
    </style>
    <link rel="preload" href="https://assets.habr.com/habr-web/css/theme/light-v1.css" as="style" media="(prefers-color-scheme: light)" /><link rel="preload" href="https://assets.habr.com/habr-web/css/theme/dark-v1.css" as="style" media="(prefers-color-scheme: dark)" /><link id="light-colors" rel="stylesheet" href="https://assets.habr.com/habr-web/css/theme/light-v1.css" media="(prefers-color-scheme: light)" /><link id="dark-colors" rel="stylesheet" href="https://assets.habr.com/habr-web/css/theme/dark-v1.css" media="(prefers-color-scheme: dark)" />
    <script>window.i18nFetch = new Promise((res, rej) => {
          const xhr = new XMLHttpRequest();
          xhr.open('GET', '/js/i18n/ru-compiled.35b2fec11bb79a62419ab67779c2dd82.json');
          xhr.responseType = 'json';
          xhr.onload = function(e) {
            if (this.status === 200) {
              res({ru: xhr.response});
            } else {
              rej(e);
            }
          };
          xhr.send();
        });</script>
    <style>
      .grecaptcha-badge {
        visibility: hidden;
      }
    </style>
    <meta name="habr-version" content="2.233.0">
    
    <meta name="apple-mobile-web-app-status-bar-style" content="#303b44">
    <meta name="msapplication-TileColor" content="#629FBC">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="mobile-web-app-capable" content="yes">
    <link rel="shortcut icon" type="image/png" sizes="16x16" href="https://assets.habr.com/habr-web/img/favicons/favicon-16.png">
    <link rel="shortcut icon" type="image/png" sizes="32x32" href="https://assets.habr.com/habr-web/img/favicons/favicon-32.png">
    <link rel="apple-touch-icon" type="image/png" sizes="76x76" href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-76.png">
    <link rel="apple-touch-icon" type="image/png" sizes="120x120" href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-120.png">
    <link rel="apple-touch-icon" type="image/png" sizes="152x152" href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-152.png">
    <link rel="apple-touch-icon" type="image/png" sizes="180x180" href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-180.png">
    <link rel="apple-touch-icon" type="image/png" sizes="256x256" href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-256.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 320px) and (device-height: 568px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1136x640.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 375px) and (device-height: 812px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2436x1125.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1792x828.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_828x1792.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 375px) and (device-height: 667px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1334x750.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1242x2668.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 414px) and (device-height: 736px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2208x1242.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 375px) and (device-height: 812px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1125x2436.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 414px) and (device-height: 736px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1242x2208.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 1024px) and (device-height: 1366px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2732x2048.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2688x1242.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 834px) and (device-height: 1112px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2224x1668.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 375px) and (device-height: 667px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_750x1334.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 1024px) and (device-height: 1366px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2048x2732.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 834px) and (device-height: 1194px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2388x1668.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 834px) and (device-height: 1112px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1668x2224.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 320px) and (device-height: 568px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_640x1136.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 834px) and (device-height: 1194px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1668x2388.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 768px) and (device-height: 1024px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2048x1536.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 768px) and (device-height: 1024px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1536x2048.png">
    <link rel="mask-icon" color="#77a2b6" href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-120.svg">
    <link crossorigin="use-credentials" href="/manifest.webmanifest" rel="manifest">
    <script async src="https://unpkg.com/pwacompat" crossorigin="anonymous"></script>
    <script>window.yaContextCb = window.yaContextCb || []</script>
    <script src="https://yandex.ru/ads/system/context.js" async></script>
  <link rel="preload" href="https://assets.habr.com/habr-web/css/chunk-vendors.04465f7c.css" as="style"><link rel="preload" href="https://assets.habr.com/habr-web/js/chunk-vendors.3b11d41f.js" as="script"><link rel="preload" href="https://assets.habr.com/habr-web/css/app.20959a76.css" as="style"><link rel="preload" href="https://assets.habr.com/habr-web/js/app.7a97ea6d.js" as="script"><link rel="stylesheet" href="https://assets.habr.com/habr-web/css/chunk-vendors.04465f7c.css"><link rel="stylesheet" href="https://assets.habr.com/habr-web/css/app.20959a76.css"></head>
  <body>
    
    <div id="mount"><div id="app" data-async-called="true"><div class="tm-layout__wrapper"><!--[--><!----><div></div><div class="tm-feature tm-feature"><!----></div><header class="tm-header" data-test-id="header"><div class="tm-page-width"><!--[--><div class="tm-header__container"><div class="tm-header__burger-nav" data-test-id="burger-nav"><button class="tm-header__button tm-header__button_burger" type="button"><svg class="tm-svg-img tm-header__icon tm-header__icon-burger" height="16" width="16"><title>Меню</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#header-burger"></use></svg></button></div><span class="tm-header__logo-wrap"><a class="tm-header__logo tm-header__logo_hl-ru tm-header__logo" href="/ru/"><svg class="tm-svg-img tm-header__icon" height="16" width="16"><title>Хабр</title><use xlink:href="/img/habr-logo-ru.svg#logo"></use></svg></a><span style="display:none;" class="tm-header__beta-sign">β</span></span><!----><div class="tm-header-user-menu tm-header_user-menu"><a href="/ru/search/" class="tm-header-user-menu__item tm-header-user-menu__search" data-test-id="search-button"><svg class="tm-svg-img tm-header-user-menu__icon tm-header-user-menu__icon_search" height="24" width="24"><title>Поиск</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#search"></use></svg></a><!----><!----><div class="tm-header-user-menu__item tm-header-user-menu__write"><div><svg class="tm-svg-img tm-header-user-menu__icon tm-header-user-menu__icon_write" height="24" width="24"><title>Написать публикацию</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#write"></use></svg></div><!----></div><!--[--><div class="tm-header-user-menu__item"><button class="tm-header-user-menu__toggle" data-test-id="user-menu-settings"><svg class="tm-svg-img tm-header-user-menu__icon" height="24" width="24"><title>Настройки</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#page-settings"></use></svg></button></div><a href="https://habr.com/kek/v1/auth/habrahabr/?back=/ru/companies/surfstudio/articles/823906/&amp;hl=ru" rel="nofollow" class="tm-header-user-menu__item"><!--[--><button class="btn btn_solid btn_small tm-header-user-menu__login" type="button"><!--[-->Войти<!--]--></button><!--]--></a><!--]--><!----><!--teleport start--><!--teleport end--><!----></div></div><!--]--></div></header><div class="tm-layout"><div class="tm-page-progress-bar"></div><!----><!----><div class="tm-page-width"><!--[--><!--]--></div><main class="tm-layout__container"><div class="tm-page" hl="ru" companyname="surfstudio" data-async-called="true" style="--0c809c5a:16px;--a086013e:100%;--7c457026:0;"><div class="tm-page-width"><!--[--><div class="tm-page__header"><!--[--><!--]--></div><div class="tm-page__wrapper"><div class="tm-page__main_has-sidebar tm-page__main"><div class="pull-down"><!----><div class="pull-down__header" style="height:0px;"><div class="pull-down__content" style="bottom:10px;"><svg class="tm-svg-img pull-down__icon pull-down__arrow" height="24" width="24"><title>Обновить</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#pull-arrow"></use></svg></div></div><!--[--><!--[--><div class="tm-article-presenter"><!--[--><!--[--><div class="banner-wrapper narrow" style="--467224fc:100px;--58ff5eba:auto;" data-v-ad758baa><!--[--><div class="placeholder-wrapper placeholder" data-v-ad758baa><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><div class="adfox-banner-placeholder narrow" data-v-12f7bcca><div class="image loads" data-v-12f7bcca></div><div class="lines" data-v-12f7bcca><div class="line loads" data-v-12f7bcca></div><div class="line loads" data-v-12f7bcca></div><div class="line loads" data-v-12f7bcca></div></div></div><!----></div><div id="adfox_169815559787254866" class="tm-adfox-banner" data-v-ad758baa></div><!--]--></div><!----><!----><!--]--><!--]--><div class="tm-article-presenter__body" data-test-id="article-body"><div class="tm-misprint-area"><div class="tm-misprint-area__wrapper"><!--[--><article class="tm-article-presenter__content tm-article-presenter__content_narrow"><!--[--><div class="tm-article-presenter__header"><!--[--><!--]--><div class="tm-article-snippet tm-article-snippet tm-article-presenter__snippet"><!--[--><!--]--><div class="tm-article-snippet__meta-container"><div class="tm-article-snippet__meta"><span class="tm-user-info tm-article-snippet__author"><a href="/ru/users/Surf_Studio/" class="tm-user-info__userpic" data-test-id="user-info-pic" title="Surf_Studio"><div class="tm-entity-image"><img alt="" class="tm-entity-image__pic" height="32" src="//habrastorage.org/r/w64/getpro/habr/avatars/ffb/239/13d/ffb23913d57ecd841b8eff3cb1c48c4a.png" width="32"></div></a><span class="tm-user-info__user tm-user-info__user_appearance-default" data-test-id="user-info-description"><a href="/ru/users/Surf_Studio/" class="tm-user-info__username">Surf_Studio <!----></a><!--[--><span class="tm-article-datetime-published"><time datetime="2024-06-24T08:04:45.000Z" title="2024-06-24, 11:04">24  июн  2024 в 11:04</time></span><!--]--></span></span></div><!----></div><h1 class="tm-title tm-title_h1" lang="ru" data-test-id="articleTitle"><span>Как устроены аннотации в Kotlin. Часть 1</span></h1><div class="tm-article-snippet__stats" data-test-id="articleStats"><div class="tm-article-complexity tm-article-complexity_complexity-medium"><span class="tm-svg-icon__wrapper tm-article-complexity__icon"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Уровень сложности</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#complexity-medium"></use></svg></span><span class="tm-article-complexity__label">Средний</span></div><div class="tm-article-reading-time"><span class="tm-svg-icon__wrapper tm-article-reading-time__icon"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Время на прочтение</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#clock"></use></svg></span><span class="tm-article-reading-time__label">10 мин</span></div><span class="tm-icon-counter tm-data-icons__item"><svg class="tm-svg-img tm-icon-counter__icon" height="24" width="24"><title>Количество просмотров</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-views"></use></svg><span class="tm-icon-counter__value" title="5309">5.3K</span></span></div><div class="tm-publication-hubs__container" data-test-id="articleHubsList"><div class="tm-publication-hubs"><!--[--><span class="tm-publication-hub__link-container"><a href="/ru/companies/surfstudio/articles/" class="tm-publication-hub__link"><!--[--><span>Блог компании Surf</span><!----><!--]--></a></span><span class="tm-publication-hub__link-container"><a href="/ru/hubs/android_dev/" class="tm-publication-hub__link"><!--[--><span>Разработка под Android</span><span class="tm-article-snippet__profiled-hub" title="Профильный хаб">*</span><!--]--></a></span><span class="tm-publication-hub__link-container"><a href="/ru/hubs/kotlin/" class="tm-publication-hub__link"><!--[--><span>Kotlin</span><span class="tm-article-snippet__profiled-hub" title="Профильный хаб">*</span><!--]--></a></span><span class="tm-publication-hub__link-container"><a href="/ru/hubs/mobile_dev/" class="tm-publication-hub__link"><!--[--><span>Разработка мобильных приложений</span><span class="tm-article-snippet__profiled-hub" title="Профильный хаб">*</span><!--]--></a></span><!--]--></div></div><div class="tm-article-labels" data-test-id="articleLabels"><div class="tm-article-labels__container"><div class="tm-publication-label tm-publication-label_variant-review"><span>Обзор</span></div><!--[--><div class="tm-publication-label tm-publication-label_variant-translation"><span>Перевод</span></div><!--]--></div></div><!----><!----></div></div><!--[--><div class="tm-article-presenter__origin"><a class="tm-article-presenter__origin-link" href="https://proandroiddev.com/how-kotlin-annotations-work-8d06798a32d2" target="_blank">Автор оригинала: <span>Sherry Yuan</span></a></div><div class="tm-article-body" data-gallery-root lang="ru"><div><!--[--><!--]--></div><div id="post-content-body"><div><div class="article-formatted-body article-formatted-body article-formatted-body_version-2"><div xmlns="http://www.w3.org/1999/xhtml"><p>Привет! Сегодня с вами Максим Кругликов из Surf Android Team с переводом статьи про устройство аннотаций в Kotlin и три основных механизма их обработки: <strong>процессинг</strong>, <strong>рефлексию</strong> и <strong>lint</strong>. Давайте разберёмся.</p><p>Разработчики Android могут создавать сложные приложения с разбросанными повсюду аннотациями, например, <code>@Provides</code>  из<a href="https://dagger.dev/"> <u>Dagger</u></a> или <code>@ColorRes</code>  из<a href="https://developer.android.com/reference/kotlin/androidx/annotation/package-summary"> <u>AndroidX</u></a>. При этом они не до конца понимают, как работают эти аннотации. Они похожи на магию. В этой статье развеется часть этой магии и исследуется три основных механизма обработки аннотаций: <strong>процессинг аннотаций</strong>, <strong>рефлексия</strong> и <strong>lint</strong>.</p><p>Во второй части разберём, как реальная библиотека <a href="https://github.com/square/moshi"><u>Moshi</u></a>, основанная на аннотациях, использует все три механизма.</p><p><strong>Что такое аннотации в Kotlin?</strong></p><p>Аннотации — это средство добавления метаданных к коду. Чтобы объявить аннотацию, достаточно добавить модификатор annotation перед классом:</p><pre><code class="kotlin">annotation class CustomAnnotation</code></pre><p>Можно снабдить его метааннотациями, чтобы дать дополнительную информацию:</p><pre><code class="kotlin">@Target(AnnotationTarget.FUNCTION, AnnotationTarget.TYPE_PARAMETER)
@Retention(AnnotationRetention.SOURCE)
annotation class CustomAnnotation</code></pre><p><code>@Target</code> указывает возможные типы элементов, к которым можно применить аннотацию (например, классы, функции или переменные). <code>@Retention</code> указывает, хранится ли аннотация в бинарнике и доступна ли она только во время компиляции или во время выполнения тоже. В значении по умолчанию RUNTIME аннотация доступна везде.</p><p><strong>Процессинг аннотаций</strong> и <strong>рефлексия</strong> относятся к категории метапрограммирования — метода, при котором программы используют другие программы (например, исходный код Kotlin) в качестве своих данных. Оба механизма используют аннотации для сокращения бойлерплейта и автоматизации типовых задач. Например, большинство библиотек внедрения зависимостей (например, Dagger) и сериализации (например, Moshi) используют либо один из подходов, либо оба одновременно. С помощью процессинга аннотаций и рефлексии можно достичь схожего результата. Например, Moshi поддерживает оба механизма генерации адаптеров JSON.</p><p><strong>Lint</strong> — совсем другой механизм, использующий аннотации для проверки исходных файлов на наличие проблем. Считать ли это метапрограммированием — неясно.</p><p>Все три механизма предлагают мощные и гибкие API, поэтому разные аннотации могут давать совершенно разные результаты в зависимости от того, как они обрабатываются в коде. Разработчикам редко приходится писать этот код самостоятельно — чаще используются аннотации из библиотек, которые уже их обрабатывают, чем создаем собственные.</p><p><strong>Процессинг аннотаций</strong></p><p>Обработчики аннотаций — это плагины компилятора, которые генерируют код на основе аннотаций во время компиляции. Сторонняя библиотека содержит обработчик аннотаций, если при подключении зависимости в build.gradle она требует использовать <code>annotationProcessor</code>, <code>kapt</code> или <code>ksp</code> вместо <code>implementation</code>. Несколько примеров популярных библиотек, использующих обработку аннотаций — это Dagger (<code>@Provides</code>, <code>@Ingect</code>), Moshi (<code>@Json</code>) и Room (<code>@Entity</code>, <code>@Dao</code>).</p><p>Обработчик аннотаций должен быть зарегистрирован в компиляторе, чтобы он мог работать во время компиляции. Самый распространенный способ зарегистрировать его — через библиотеку Google AutoService — просто добавить к своему процессору аннотацию <code>@AutoService</code> (Processor.class).</p><p>Существует три основных API для создания обработчиков аннотаций: Annotation Processor Tool (APT), Kotlin Annotation Processor Tool (kapt) и Kotlin Symbol Processing (KSP). Процессоры, созданные с помощью APT и kapt, расширяют один и тот же базовый класс <code>AbstractProcessor</code>, тогда как KSP имеет отдельный класс <code>SymbolProcessor</code>.</p><p>Обработка аннотаций происходит в несколько раундов. В каждом раунде компилятор ищет аннотации в исходных файлах и вызывает соответствующие процессоры. Если процессоры генерируют новые файлы, то следующий раунд начинается уже со сгенерированных файлов. Процесс продолжается до тех пор, пока не перестанут создаваться новые файлы.</p><p><strong>Annotation Processor Tool</strong></p><p>APT — единственный API из эпохи Android до Kotlin. Он используется компилятором Java (javac) и подключается через <code>annotationProcessor</code>. В настоящее время его редко можно увидеть в проектах Android, поскольку он не поддерживает Kotlin-файлы.</p><p>Обработчики аннотаций APT работают с исходным кодом на .java. Чтобы сделать такой, нужно создать класс, расширяющий <code>AbstractProcessor</code>. Две основные функции, которые необходимо реализовать, — это <code>getSupportedAnnotationTypes()</code>, которая должна вернуть поддерживаемые этим процессором аннотации, и <code>process()</code>, которая является основным блоком, вызываемым в каждом раунде обработки. Тут нужно думать об исходном коде как о простом тексте, а не как о чем-то исполняемом. Подобно файлу JSON. Исходный код представлен в виде дерева элементов (Element), которое в свою очередь представляет элементы программы, включая пакеты, классы или функции.</p><p>Второй параметр метода <code>process()</code> — это <code>roundEnv</code>, объект <code>RoundEnvironment</code> с информацией о текущем и предыдущих раундах обработки. Он обеспечивает доступ к дереву Element’ов и несколько способов исследования аннотаций, связанных с ними, например <code>getElementsAnnotatedWith()</code>.</p><p>Можно генерировать код в методе <code>process()</code> на основе аннотированных элементов. Интерфейс Filer из <code>ProcessingEnvironment</code> позволяет создавать новые файлы, а затем записывать в них текст, как в любой другой файл. Сгенерированные файлы появятся в каталоге <code>&lt;module&gt;/build/generated/source/</code> проекта. Именно так Dagger генерирует классы <code>Something_Factory</code> и <code>Something_MembersInjector</code>, а Moshi — классы <code>SomethingAdapter</code>. <a href="https://github.com/square/javapoet"><u>JavaPoet</u></a> — популярная библиотека для написания исходного кода Java, использующая этот подход.</p><p>Нет нужды подробно останавливаться на реализации собственного <code>AbstractProcessor</code>, потому что на эту тему уже есть множество ресурсов (ссылки в конце статьи. Кстати, в следующей статье мы рассмотрим, как это реализовано в <code>JsonClassCodegenProcessor</code> от Moshi).</p><p><strong>Kotlin Annotation Processor Tool</strong></p><p>Когда Kotlin получил признание, Kapt стал популярным API-интерфейсом для обработки аннотаций. Это плагин компилятора, созданный на основе APT и поддерживающий исходный код и Kotlin и Java. Он использует тот же <code>AbstractProcessor</code>, что и APT, поэтому информация из предыдущего раздела о создании процессоров аннотаций APT также применима и к kapt. Kapt может запускать любой <code>AbstractProcessor</code> независимо от того, был ли он написан с учетом поддержки Kotlin или Java. <a href="https://square.github.io/kotlinpoet/"><u>KotlinPoet</u></a> — популярная библиотека для написания исходного кода Kotlin, которая использует этот подход.</p><p>Главный недостаток Kapt — долгое время компиляции. Он компилируется, используя Javac, как APT, и работает с Kotlin, генерируя Java-стабы из файлов Kotlin, которые затем могут прочитать процессоры. Создание таких стабов — дорогостоящая операция, которая значительно влияет на скорость сборки.</p><p><strong>Kotlin Symbol Processing</strong></p><p>KSP представили в 2021 году, и это первая альтернатива kapt, написанная на Kotlin. Благодаря прямой интеграции с компилятором Kotlin (kotlinc) KSP анализирует код Kotlin напрямую, без создания Java-стабов, и работает до 2 раз быстрее, чем kapt. </p><p>Он также лучше понимает языковые конструкции Kotlin. Если в модуле остались процессоры kapt, он все равно будет генерировать стабы во время компиляции. Это означает, что  повысить производительность KSP получится только в том случае, если из модуля будет удалено все использование kapt.</p><p>Чтобы создать обработчик аннотаций KSP, нужно реализовать интерфейс <code>SymbolProcessor</code>. KSP также представляет исходный код в виде синтаксического дерева и предоставляет API, <a href="https://kotlinlang.org/docs/ksp-reference.html#program-elements"><u>аналогичный Kapt</u></a>. </p><p><code>KsDeclaration</code> или <code>KsDeclarationContainer</code> в KSP — это аналог <code>Element</code> из kapt. <code>Resolver</code>, как и <code>RoundEnvironment</code> из kapt, — это параметр в <code>SymbolProcessor.process()</code>, обеспечивающий доступ к синтаксическому дереву. <code>Resolver.getSymbolsWithAnnotation()</code> позволяет исследовать символы с аннотациями. И, наконец, <code>CodeGenerator</code>, как и <code>Filer</code>, позволяет генерировать код во время процессинга.</p><p><strong>Рефлексия</strong></p><p>Рефлексия — это способность языка исследовать свои классы, интерфейсы, поля и методы во время выполнения, не зная их имен во время компиляции. Он позволяет программам динамически создавать экземпляры новых объектов и вызывать методы. А также изменять их структуру и поведение во время выполнения. Примеры популярных библиотек, которые используют рефлексию для изменения поведения программы: Moshi (<code>@Json</code>) и Retrofit (<code>@GET</code>, <code>@POST</code>).</p><p>Стандартная библиотека рефлексии Java работает и в Kotlin. Но у Kotlin есть свой собственный API рефлексии, доступный в пакете <code>kotlin-reflect</code>. Он предоставляет несколько дополнительных функций, включая доступ к nullable-свойствам и типам.</p><p>Вот пример вызова метода во время выполнения с помощью рефлексии:</p><pre><code class="kotlin">class HelloPrinter {
 fun printHello() {
   println("Hello, world!!!")
 }
}

val printer = HelloPrinter()
val methods = printer::class.java.methods
val helloFunction = methods.find { it.name == "printHello" }
helloFunction?.invoke(printer)</code></pre><p>Рефлексия предназначена не только для работы с аннотациями, она предоставляет надежный API для работы с ними, а аннотации, в свою очередь, могут сделать её использование более безопасным и эффективным. </p><p>Например, можно обновить предыдущий код, чтобы вызывать все методы, помеченные аннотацией <code>@Greeter</code>, без указания их имен в строках:</p><pre><code class="kotlin">@Target(AnnotationTarget.FUNCTION)
annotation class Greeter

class HelloPrinter {
 @Greeter
 fun printHello() {
   println("Hello, world!!!")
 }
}

val printer = HelloPrinter()
val methods = printer::class.java.methods
val helloFunctions = methods.filter {
 it.isAnnotationPresent(Greeter::class.java)
}
helloFunctions.forEach {
 it.invoke(printer)
}</code></pre><p>В API рефлексии Kotlin доступны и другие функции, связанные с аннотациями. Например, <code>KAnnotatedElement.findAnnotations()</code> и <code>KAnnotatedElement.hasAnnotation()</code>. Чтобы аннотация работала с рефлексией, она должна быть помечена <code>@Retention</code> со значением RUNTIME (по умолчанию).</p><p>При выборе между рефлексией и процессингом аннотаций стоит учитывать пару компромиссов:</p><ol><li><p>Использование рефлексии влечёт за собой более долгое время выполнения, а процессинг аннотаций — более долгое время компиляции.</p></li><li><p>В случае ошибки, рефлексия выбросит ошибку прямо в рантайме, а процессинг аннотаций — во время компиляции.</p></li></ol><p>Большинство библиотек предпочитают процессинг аннотаций, поскольку более медленная компиляция не повлияет на работу конечного пользователя, а ошибки времени компиляции будут замечены до того, как дойдут до пользователя. Из-за этого Dagger полностью избавился от рефлексии при переходе на вторую версию.</p><p>Retrofit, популярная клиентская библиотека HTTP,  полностью полагается на рефлексию. Она использует <code>Proxy</code> для создания экземпляров аннотированных интерфейсов. Рефлексия здесь имеет смысл, поскольку задержка выполнения сетевого запроса намного превышает любую задержку, вызванную рефлексией. При этом сбои во время выполнения относительно легко идентифицировать, поскольку можно протестировать новый код Retrofit, просто вызвав нужный метод API во время отладки нового кода.</p><p><strong>Lint</strong></p><p>Lint — это инструмент сканирования кода, который проверяет исходные файлы проекта Android на наличие потенциальных ошибок и возможных улучшений безопасности, производительности, accessibility и другого. Речь пойдёт о <a href="https://developer.android.com/studio/write/lint"><u>встроенном lint</u></a> без рассмотрения сторонних инструментов, вроде <a href="https://github.com/detekt/detekt"><u>Detekt</u></a>.</p><p>Lint глубоко интегрирован в Android Studio и подсвечивает проблемы прямо в IDE.</p><figure class="full-width "><img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/9cd/165/47b/9cd16547bd649cd039b132c4452b1edb.png" width="2522" height="872" data-src="https://habrastorage.org/getpro/habr/upload_files/9cd/165/47b/9cd16547bd649cd039b132c4452b1edb.png"/></figure><p>Многие проверки, даже приведенный выше «Unnecessary safe call», не используют аннотации. Однако аннотации могут помочь lint обнаружить более тонкие проблемы в коде. Поскольку в Java нет встроенной обработки nullable значений, как в Kotlin, <code>@Nonnul</code> и <code>@Nullable</code> позволяют lint выдавать те же предупреждения о null-safetty для Kotlin. </p><p>Другой пример — <code>@ColorRes</code>, который сообщает lint, что параметр <code>Int</code> должен быть ссылкой на цветовой ресурс (например, <code>android.R.color.black</code>).</p><figure class="full-width "><img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/a3d/381/8b8/a3d3818b8f330133cdfb2de8624a19f7.png" width="2522" height="872" data-src="https://habrastorage.org/getpro/habr/upload_files/a3d/381/8b8/a3d3818b8f330133cdfb2de8624a19f7.png"/></figure><p>В отличие от процессинга аннотаций и рефлексии, Lint выполняет только статический анализ кода и не может влиять на поведение программы. Это отличает его от двух других механизмов, где аннотации обычно поступают из сторонних библиотек. Часто используемые аннотации, связанные с lint, взяты из пакета <code>androidx.annotations</code> и обрабатываются встроенными проверками Android Studio.</p><p>Если нужно добавить кастомную проверку lint — собственную или из сторонней библиотеки, необходимо использовать конфигурацию зависимостей <code>lintChecks</code> или <code>lintPublish</code>. <code>lintChecks</code> делает правило lint доступным только для одного текущего модуля, тогда как <code>lintPublish</code> делает его доступным для всех.</p><p>Чтобы добавить новую проверку, нам нужно создать подкласс <code>Detector</code>. Такие детекторы могут работать с файлами разных типов в зависимости от того, какой <code>FileScanner</code> он реализует. Например, <code>SourceCodeScanner</code> может анализировать исходные файлы Kotlin или Java, а <code>GradleScanner</code> — файлы Gradle.</p><p><code>SourceCodeScanner</code> — сканер для обработки аннотаций. Он предлагает два API абстрактного синтаксического дерева (Abstract Syntax Tree, AST), разработанные Jetbrains, для анализа исходного кода. </p><p><a href="https://plugins.jetbrains.com/docs/intellij/uast.html"><u>Universal Abstract Syntax Tree</u></a> (UAST) представляет универсальное API для нескольких языков, что позволяет написать один анализатор, который работает «универсально» на всех языках, поддерживаемых UAST, включая Kotlin и Java.</p><p>До UAST был <a href="https://plugins.jetbrains.com/docs/intellij/psi-elements.html"><u>Program Structure Interface</u></a> (PSI). PSI представляет Kotlin и Java по-разному и все еще необходим для учета нюансов, специфичных для отдельно взятого языка. UAST построен на основе PSI, поэтому его в API иногда попадают элементы PSI. Навигация по AST похожа на навигацию по деревьям элементов при обработке аннотаций.</p><p>В <a href="https://googlesamples.github.io/android-custom-lint-rules/"><u>руководстве по пользовательским lint правилам от Google</u></a> есть <a href="https://googlesamples.github.io/android-custom-lint-rules/api-guide/annotations.md.html"><u>полезная страница</u></a> о том, как добавить проверку, которая проходит по аннотированным элементам. Если нужно сразу просмотреть использование самой аннотации, а не только элементы, аннотированные ею, можно переопределить метод <code>getApplicatbleUastTypes()</code> из <code>SourceCodeScanner</code>, чтобы вернуть <code>UAnnotation::class.java</code>, а затем переопределить <code>createUastHandler()</code>, чтобы вернуть кастомный <code>UElementHandler</code>. Любое обнаружение проблем, связанных с пользовательской аннотацией, может быть выполнено в методе <code>visitAnnotation()</code> класс <code>UElementHandler</code>.</p><p><strong>Мистические кастомные аннотации</strong></p><p>Иногда можно столкнуться с кастомной аннотацией в коде, на которую нет ссылок ни в каких обработчиках аннотаций, коде рефлексии или lint правилах. Что же она делает?</p><p>Скорее всего, она помечена метааннотацией из сторонней библиотеки. Некоторые библиотеки предоставляют функции, основанные на метааннотациях. Например, в Dagger есть метааннотация <code>@Qualifier</code> для случаев, когда одного типа недостаточно для идентификации зависимости. <code>@Qualifier</code> позволяет нам создавать такие пользовательские аннотации:</p><pre><code class="kotlin">@Qualifier
@Target(AnnotationTarget.FIELD, AnnotationTarget.VALUE_PARAMETER, AnnotationTarget.FUNCTION)
annotation class Authorized

@Qualifier
@Target(AnnotationTarget.FIELD, AnnotationTarget.VALUE_PARAMETER, AnnotationTarget.FUNCTION)
annotation class Unauthorized</code></pre><p>Можно использовать их, например, для внедрения различных экземпляров класса в зависимости от того, вошел ли пользователь в систему:</p><pre><code class="kotlin">@Provides
@Authorized
OkHttpClient.Builder provideAuthorizedOkHttpClientBuilder(…)

@Provides
@Unauthorized
OkHttpClient.Builder provideUnauthorizedOkHttpClientBuilder(…)</code></pre><p>Не нужно писать код для обработки этих пользовательских аннотаций. Обработчик аннотаций Dagger выполнит поиск всех пользовательских аннотаций <code>@Qualifier</code> и обработает их. У Moshi есть аналогичная метааннотация <code>@JsonQualifier</code>, позволяющая указать, как тип сериализуется для конкретного поля, не меняя его сериализацию повсюду.</p><p><strong>Полезные ссылки</strong></p><ul><li><p><a href="https://www.youtube.com/watch?v=dOcs-NKK-RA"><u>Annotation Processing Boilerplate Destruction talk</u></a></p></li><li><p><a href="https://medium.com/androidiots/writing-your-own-annotation-processors-in-android-1fa0cd96ef11"><u>Writing your own Annotation Processors in Android article</u></a></p></li><li><p><a href="https://www.baeldung.com/kotlin/annotations"><u>Baeldung’s Kotlin Annotations article</u></a></p></li><li><p><a href="https://googlesamples.github.io/android-custom-lint-rules/"><u>Android custom lint rules guide</u></a></p></li></ul><blockquote><p>Больше полезного про Android — в Telegram-канале Surf Android Team. </p><p>Кейсы, лучшие практики, новости и вакансии в команду Android Surf в одном месте. <a href="https://t.me/surf_android"><strong>Присоединяйтесь</strong></a>!</p></blockquote><p></p></div></div></div><!----><!----></div><!----><!----></div><!--]--><!----><div class="tm-article-presenter__meta" data-test-id="article-meta-links"><div class="tm-separated-list tm-article-presenter__meta-list"><span class="tm-separated-list__title">Теги:</span><ul class="tm-separated-list__list"><!--[--><li class="tm-separated-list__item"><!--[--><a href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[android]" class="tm-tags-list__link"><span>android</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[kotlin]" class="tm-tags-list__link"><span>kotlin</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[%D1%80%D0%B0%D0%B7%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%BA%D0%B0+%D0%BF%D1%80%D0%B8%D0%BB%D0%BE%D0%B6%D0%B5%D0%BD%D0%B8%D0%B9]" class="tm-tags-list__link"><span>разработка приложений</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[%D0%BD%D0%B0%D1%82%D0%B8%D0%B2%D0%BD%D0%B0%D1%8F+%D0%BC%D0%BE%D0%B1%D0%B8%D0%BB%D1%8C%D0%BD%D0%B0%D1%8F+%D1%80%D0%B0%D0%B7%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%BA%D0%B0]" class="tm-tags-list__link"><span>нативная мобильная разработка</span></a><!--]--></li><!--]--><!----></ul></div><div class="tm-separated-list tm-article-presenter__meta-list"><span class="tm-separated-list__title">Хабы:</span><ul class="tm-separated-list__list"><!--[--><li class="tm-separated-list__item"><!--[--><a href="/ru/companies/surfstudio/articles/" class="tm-hubs-list__link"><!--[--><span>Блог компании Surf</span><!--]--></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a href="/ru/hubs/android_dev/" class="tm-hubs-list__link"><!--[--><span>Разработка под Android</span><!--]--></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a href="/ru/hubs/kotlin/" class="tm-hubs-list__link"><!--[--><span>Kotlin</span><!--]--></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a href="/ru/hubs/mobile_dev/" class="tm-hubs-list__link"><!--[--><span>Разработка мобильных приложений</span><!--]--></a><!--]--></li><!--]--><!----></ul></div></div><!----><!--]--></article><!--]--></div><!----></div><div style="" class="tm-article-sticky-panel" data-test-id="article-sticky-panel"><div class="tm-data-icons tm-data-icons tm-data-icons_space-big tm-article-sticky-panel__icons" data-test-id="article-stats-icons"><div class="tm-article-rating tm-data-icons__item"><div class="tm-votes-meter tm-article-rating__votes-switcher"><svg class="tm-svg-img tm-votes-meter__icon tm-votes-meter__icon tm-votes-meter__icon_appearance-article" height="24" width="24"><title>Всего голосов 4: ↑4 и ↓0</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-rating"></use></svg><span class="tm-votes-meter__value tm-votes-meter__value_positive tm-votes-meter__value_appearance-article tm-votes-meter__value_rating tm-votes-meter__value" data-test-id="votes-meter-value" title="Всего голосов 4: ↑4 и ↓0">+4</span></div><!--teleport start--><!--teleport end--><!----></div><!----><!----><button class="bookmarks-button tm-data-icons__item" title="Добавить в закладки" type="button"><span class="tm-svg-icon__wrapper bookmarks-button__icon"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Добавить в закладки</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-favorite"></use></svg></span><span class="bookmarks-button__counter" title="Количество пользователей, добавивших публикацию в закладки">53</span></button><div class="tm-sharing tm-data-icons__item" title="Поделиться"><button class="tm-sharing__button" type="button"><svg viewbox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" class="tm-sharing__icon"><path fill="currentColor" d="M13.8 13.8V18l7.2-6.6L13.8 5v3.9C5 8.9 3 18.6 3 18.6c2.5-4.4 6-4.8 10.8-4.8z"></path></svg></button><!--teleport start--><!--teleport end--></div><div class="tm-article-comments-counter-link tm-data-icons__item" title="Читать комментарии"><a href="/ru/companies/surfstudio/articles/823906/comments/" class="tm-article-comments-counter-link__link" data-test-id="counter-comments"><!--[--><svg class="tm-svg-img tm-article-comments-counter-link__icon" height="24" width="24"><title>Комментарии</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-comments"></use></svg><span class="tm-article-comments-counter-link__value">0</span><!--]--></a><!----></div><!--[--><!--[--><!--[--><!----><!--]--><!--]--><!--]--><!--teleport start--><!--teleport end--><!----></div></div></div><!--[--><!--]--><div class="tm-article-presenter__footer"><!--[--><!--[--><div class="tm-article-blocks"><!----><!--[--><section class="tm-block tm-block tm-block_spacing-bottom"><!----><!--[--><div class="tm-block__body tm-block__body tm-block__body_variant-balanced"><!--[--><div class="tm-article-author" data-test-id="article-author-info" data-async-called="true"><!--[--><!--[--><div class="tm-article-author__company"><div class="tm-article-author__company-card"><div class="tm-company-snippet"><a href="/ru/companies/surfstudio/profile/" class="tm-company-snippet__logo-link"><div class="tm-entity-image"><img alt="" class="tm-entity-image__pic" height="40" src="//habrastorage.org/getpro/habr/company/cac/579/907/cac5799077a2883e001815819c2ccbac.jpg" width="40"></div></a><div class="tm-company-snippet__info"><a href="/ru/companies/surfstudio/profile/" class="tm-company-snippet__title" data-test-id="company-title"><span>Surf</span></a><div class="tm-company-snippet__description">Создаём веб- и мобильные приложения</div></div></div><div class="tm-article-author__buttons"><!----><!----></div></div><div class="tm-article-author__company-contacts"><!--[--><a class="tm-article-author__contact" href="https://surf.ru/" rel="noopener" target="_blank">Сайт</a><a class="tm-article-author__contact" href="https://vk.com/surfstudio" rel="noopener" target="_blank">ВКонтакте</a><a class="tm-article-author__contact" href="https://instagram.com/surfstudio" rel="noopener" target="_blank">Instagram</a><a class="tm-article-author__contact" href="https://telegram.me/surf_tech" rel="noopener" target="_blank">Telegram</a><a class="tm-article-author__contact" href="https://telegram.me/surf_flutter" rel="noopener" target="_blank">Telegram</a><a class="tm-article-author__contact" href="https://telegram.me/surf_ios" rel="noopener" target="_blank">Telegram</a><a class="tm-article-author__contact" href="https://telegram.me/surf_android" rel="noopener" target="_blank">Telegram</a><a class="tm-article-author__contact" href="https://telegram.me/product_channel_surf" rel="noopener" target="_blank">Telegram</a><!--]--></div><div class="tm-article-author__separator"></div></div><!--]--><!--]--><div class="tm-user-card tm-user-card tm-user-card_variant-article tm-article-author__user-card" data-async-called="true"><div class="tm-user-card__info-container"><div class="tm-user-card__header"><div class="tm-user-card__header-data"><a href="/ru/users/Surf_Studio/" class="tm-user-card__userpic tm-user-card__userpic_size-40"><div class="tm-entity-image"><img alt="" class="tm-entity-image__pic" src="//habrastorage.org/getpro/habr/avatars/ffb/239/13d/ffb23913d57ecd841b8eff3cb1c48c4a.png"></div></a><div class="tm-user-card__meta"><div class="tm-counter-container tm-karma tm-karma" title=" 110 голосов "><div class="tm-counter-container__header"><!--[--><div class="karma-display positive" data-v-7635202e>66</div><!----><!--]--></div><div class="tm-counter-container__footer"><!--[--><div class="tm-karma__text">Карма</div><!--teleport start--><!--teleport end--><!--]--></div></div><div class="tm-counter-container" title="Рейтинг пользователя"><div class="tm-counter-container__header"><!--[--><!--[--><!--]--><div class="tm-votes-lever tm-votes-lever tm-votes-lever_appearance-rating"><!----><div class="tm-votes-lever__score tm-votes-lever__score_appearance-rating tm-votes-lever__score"><!--[--><span><span class="tm-votes-lever__score-counter tm-votes-lever__score-counter_rating tm-votes-lever__score-counter" data-test-id="votes-score-counter">56</span></span><!--]--></div><!----></div><!--]--></div><div class="tm-counter-container__footer"><!--[--><span class="tm-rating__text tm-rating__text">Рейтинг</span><!--]--></div></div></div></div></div><div class="tm-user-card__info tm-user-card__info_variant-article tm-user-card__info"><div class="tm-user-card__title tm-user-card__title_variant-article tm-user-card__title"><!----><a href="/ru/users/Surf_Studio/" class="tm-user-card__nickname tm-user-card__nickname tm-user-card__nickname_variant-article"> @Surf_Studio</a><!----></div><p class="tm-user-card__short-info tm-user-card__short-info_variant-article tm-user-card__short-info" data-test-id="user-card-speciality">Пользователь</p></div></div><!----><div class="tm-user-card__buttons tm-user-card__buttons_variant-article tm-user-card__buttons"><!----><div class="tm-user-card__button"><div class="tm-button-follow tm-user-card__button-follow"><!----><button class="tm-button-follow__button tm-button-follow__button_big" data-test-id="follow-button" type="button">Подписаться</button></div></div><!----><div class="tm-user-card__button tm-user-card__button_write" data-test-id="user-card-conversations"><svg class="tm-svg-img tm-user-card__button-icon" height="16" width="16"><title>Отправить сообщение</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#mail"></use></svg></div><!----></div><!----></div><div class="tm-article-author__user-contacts" data-test-id="author-contacts"><!----><!----><!----></div></div><!--]--></div><!--]--><!----></section><!----><!--[--><div class="banner-wrapper leaderboard tm-company-article__banner" style="--467224fc:200px;--58ff5eba:auto;" data-v-ad758baa><!--[--><div class="placeholder-wrapper placeholder" data-v-ad758baa><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><div class="adfox-banner-placeholder leaderboard" data-v-12f7bcca><div class="image loads" data-v-12f7bcca></div><div class="lines" data-v-12f7bcca><div class="line loads" data-v-12f7bcca></div><div class="line loads" data-v-12f7bcca></div><div class="line loads" data-v-12f7bcca></div></div></div><!----></div><div id="adfox_164725660339535756" class="tm-adfox-banner" data-v-ad758baa></div><!--]--></div><!----><!--]--><!--]--><div class="tm-article-blocks__comments"><div id="publication-comments" class="tm-article-page-comments"><div><!--[--><div class="tm-article-comments-counter-link tm-article-comments-counter-button"><a href="/ru/companies/surfstudio/articles/823906/comments/" class="tm-article-comments-counter-link__link tm-article-comments-counter-link__link_button-style" data-test-id="counter-comments"><!--[--><svg class="tm-svg-img tm-article-comments-counter-link__icon tm-article-comments-counter-link__icon_contrasted" height="24" width="24"><title>Комментарии</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-comments"></use></svg><span class="tm-article-comments-counter-link__value tm-article-comments-counter-link__value_contrasted"> Комментировать </span><!--]--></a><!----></div><!--]--></div></div></div><!--[--><!--[--><!--]--><section class="tm-block tm-block tm-block_spacing-bottom"><header class="tm-block__header tm-block__header tm-block__header_variant-borderless"><div class="tm-block__header-container"><h2 class="tm-block__title tm-block__title tm-block__title_variant-large">Публикации</h2><!--[--><!--]--></div><!----></header><!--[--><div class="tm-block__body tm-block__body tm-block__body_variant-condensed-slim"><!--[--><!--[--><div class="tm-tabs tm-tabs"><div class=""><!--[--><span class="tm-tabs__tab-item"><button class="tm-tabs__tab-link tm-tabs__tab-link_active tm-tabs__tab-link_slim tm-tabs__tab-link">Лучшие за сутки</button></span><span class="tm-tabs__tab-item"><button class="tm-tabs__tab-link tm-tabs__tab-link_slim tm-tabs__tab-link">Похожие</button></span><!--]--></div><!----></div><div class="similar-and-daily__tab-view"><div class="placeholder-wrapper"><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><div class="tm-placeholder-article-cards"><!--[--><div class="tm-placeholder-article-card"><div class="tm-placeholder__user"><div class="tm-placeholder__user-pic loads"></div><div class="tm-placeholder__user-date loads"></div></div><div class="tm-placeholder-article-card__title"><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div></div><div class="tm-placeholder-article-card__icons tm-placeholder__counters"><!--[--><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><!--]--></div></div><div class="tm-placeholder-article-card"><div class="tm-placeholder__user"><div class="tm-placeholder__user-pic loads"></div><div class="tm-placeholder__user-date loads"></div></div><div class="tm-placeholder-article-card__title"><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div></div><div class="tm-placeholder-article-card__icons tm-placeholder__counters"><!--[--><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><!--]--></div></div><div class="tm-placeholder-article-card"><div class="tm-placeholder__user"><div class="tm-placeholder__user-pic loads"></div><div class="tm-placeholder__user-date loads"></div></div><div class="tm-placeholder-article-card__title"><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div></div><div class="tm-placeholder-article-card__icons tm-placeholder__counters"><!--[--><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><!--]--></div></div><div class="tm-placeholder-article-card"><div class="tm-placeholder__user"><div class="tm-placeholder__user-pic loads"></div><div class="tm-placeholder__user-date loads"></div></div><div class="tm-placeholder-article-card__title"><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div></div><div class="tm-placeholder-article-card__icons tm-placeholder__counters"><!--[--><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><!--]--></div></div><div class="tm-placeholder-article-card"><div class="tm-placeholder__user"><div class="tm-placeholder__user-pic loads"></div><div class="tm-placeholder__user-date loads"></div></div><div class="tm-placeholder-article-card__title"><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div><div class="tm-placeholder__line tm-placeholder-article-card__title-line loads"></div></div><div class="tm-placeholder-article-card__icons tm-placeholder__counters"><!--[--><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><div class="tm-placeholder-data-icon"><div class="tm-placeholder__icon tm-placeholder__icon_large loads"></div><div class="tm-placeholder__line tm-placeholder__line_icon-text"></div></div><!--]--></div></div><!--]--></div><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----></div><!----></div><!--]--><!--]--></div><!--]--><!----></section><!--[--><!--[--><section class="tm-block tm-block tm-block_spacing-around tm-stories-block" data-navigatable tabindex="0" data-async-called="true"><header class="tm-block__header tm-block__header"><div class="tm-block__header-container"><h2 class="tm-block__title tm-block__title">Истории</h2><!--[--><!--]--></div><!----></header><!--[--><div class="tm-block__body tm-block__body tm-block__body_variant-equal"><!--[--><div class="tm-stories-empty"><!--[--><div class="tm-stories-card-empty"><div class="tm-stories-card-empty__image"></div><div class="tm-stories-card-empty__title"><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div></div></div><div class="tm-stories-card-empty"><div class="tm-stories-card-empty__image"></div><div class="tm-stories-card-empty__title"><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div></div></div><div class="tm-stories-card-empty"><div class="tm-stories-card-empty__image"></div><div class="tm-stories-card-empty__title"><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div></div></div><div class="tm-stories-card-empty"><div class="tm-stories-card-empty__image"></div><div class="tm-stories-card-empty__title"><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div></div></div><div class="tm-stories-card-empty"><div class="tm-stories-card-empty__image"></div><div class="tm-stories-card-empty__title"><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div></div></div><div class="tm-stories-card-empty"><div class="tm-stories-card-empty__image"></div><div class="tm-stories-card-empty__title"><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div></div></div><!--]--></div><!----><!--]--></div><!--]--><!----></section><div class="placeholder-wrapper"><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><div class="tm-placeholder-inset tm-placeholder-courses"><div class="tm-placeholder-inset__header"><div class="tm-placeholder__line tm-placeholder__line_inset-header loads"></div></div><div class="tm-placeholder-inset__body"><ul class="tm-placeholder-list"><!--[--><li class="tm-placeholder-list__item tm-placeholder-list__item_inset"><div class="tm-placeholder-list__title-container"><div class="tm-placeholder__company-avatar"></div><div class="tm-placeholder__line tm-placeholder__line_item-title loads"></div></div><div class="tm-project-block-items__properties"><!--[--><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><!--]--></div></li><li class="tm-placeholder-list__item tm-placeholder-list__item_inset"><div class="tm-placeholder-list__title-container"><div class="tm-placeholder__company-avatar"></div><div class="tm-placeholder__line tm-placeholder__line_item-title loads"></div></div><div class="tm-project-block-items__properties"><!--[--><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><!--]--></div></li><li class="tm-placeholder-list__item tm-placeholder-list__item_inset"><div class="tm-placeholder-list__title-container"><div class="tm-placeholder__company-avatar"></div><div class="tm-placeholder__line tm-placeholder__line_item-title loads"></div></div><div class="tm-project-block-items__properties"><!--[--><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><!--]--></div></li><li class="tm-placeholder-list__item tm-placeholder-list__item_inset"><div class="tm-placeholder-list__title-container"><div class="tm-placeholder__company-avatar"></div><div class="tm-placeholder__line tm-placeholder__line_item-title loads"></div></div><div class="tm-project-block-items__properties"><!--[--><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><!--]--></div></li><li class="tm-placeholder-list__item tm-placeholder-list__item_inset"><div class="tm-placeholder-list__title-container"><div class="tm-placeholder__company-avatar"></div><div class="tm-placeholder__line tm-placeholder__line_item-title loads"></div></div><div class="tm-project-block-items__properties"><!--[--><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><!--]--></div></li><!--]--></ul></div><div class="tm-placeholder-inset__footer"><div class="tm-placeholder__line tm-placeholder__line_inset-footer loads"></div></div></div><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----></div><!--]--><!--]--><!----><!--[--><div><div class="placeholder-wrapper"><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><div class="tm-placeholder-promo"><div class="tm-placeholder-promo__header"><div class="tm-placeholder__line tm-placeholder__line_promo-title"></div></div><div class="tm-placeholder-promo__body"><div class="tm-placeholder-promo__posts"><div class="tm-placeholder-promo__post"><div class="tm-placeholder-promo__image"></div><div class="tm-placeholder__line tm-placeholder__line_post-title"></div></div><div class="tm-placeholder-promo__post"><div class="tm-placeholder-promo__image"></div><div class="tm-placeholder__line tm-placeholder__line_post-title"></div></div><div class="tm-placeholder-promo__post"><div class="tm-placeholder-promo__image"></div><div class="tm-placeholder__line tm-placeholder__line_post-title"></div></div></div><div class="tm-placeholder-promo__dots"><div class="tm-placeholder-promo__dot"></div><div class="tm-placeholder-promo__dot"></div><div class="tm-placeholder-promo__dot"></div></div></div></div><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----></div></div><!--]--><!--]--></div><!--]--><!--]--></div></div><!--]--><!--]--></div></div><div class="tm-page__sidebar"><!--[--><!----><!--]--></div></div><!----><!--]--></div></div></main><!----></div><!----><div class="tm-footer"><div class="tm-page-width"><!--[--><div class="tm-footer__container"><div class="tm-footer__title"><a class="tm-svg-icon__wrapper tm-footer__title-link" href="/ru/"><svg class="tm-svg-img tm-svg-icon" height="16" width="16"><title>Хабр</title><use xlink:href="/img/habr-logo-ru.svg#logo"></use></svg></a></div><div class="tm-footer__social"><!--[--><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://www.facebook.com/habrahabr.ru" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="36" width="36"><title>Facebook</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-facebook"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://twitter.com/habr_com" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="36" width="36"><title>Twitter</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-twitter"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://vk.com/habr" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="36" width="36"><title>VK</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-vk"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://telegram.me/habr_com" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="36" width="36"><title>Telegram</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-telegram"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://www.youtube.com/channel/UCd_sTwKqVrweTt4oAKY5y4w" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="36" width="36"><title>Youtube</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-youtube"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://dzen.ru/habr" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="36" width="36"><title>Яндекс Дзен</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-dzen"></use></svg></a><!--]--></div><!--teleport start--><!--teleport end--><button class="tm-footer__link"><svg class="tm-svg-img tm-footer__icon" height="16" width="16"><title>Язык</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#lang"></use></svg> Настройка языка</button><a href="/ru/feedback/" class="tm-footer__link">Техническая поддержка</a><div class="tm-footer-copyright"><span class="tm-copyright"><span class="tm-copyright__years">© 2006–2025, </span><span class="tm-copyright__name"><a class="tm-copyright__link" href="https://company.habr.com/" rel="noopener" target="_blank">Habr</a></span></span></div></div><!--]--></div></div><!----><!--]--></div><!----></div><script>window.__INITIAL_STATE__={"adblock":{"hasAcceptableAdsFilter":false,"hasAdblock":false},"articlesList":{"articlesList":{"823906":{"id":"823906","timePublished":"2024-06-24T08:04:45+00:00","isCorporative":true,"lang":"ru","titleHtml":"Как устроены аннотации в Kotlin. Часть 1","leadData":{"textHtml":"\u003Cp\u003EПривет! Сегодня с вами Максим Кругликов из Surf Android Team с переводом статьи про устройство аннотаций в Kotlin и три основных механизма их обработки: \u003Cstrong\u003Eпроцессинг\u003C\u002Fstrong\u003E, \u003Cstrong\u003Eрефлексию\u003C\u002Fstrong\u003E и \u003Cstrong\u003Elint\u003C\u002Fstrong\u003E.\u003C\u002Fp\u003E\u003Cp\u003E\u003C\u002Fp\u003E","imageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fe94\u002F364\u002Ff7f\u002Fe94364f7f872bdc28a2a199cafc6f4c2.JPG","buttonTextHtml":"Читать дальше","image":{"url":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fe94\u002F364\u002Ff7f\u002Fe94364f7f872bdc28a2a199cafc6f4c2.JPG","fit":"cover","positionY":0,"positionX":0}},"editorVersion":"2.0","postType":"article","postLabels":[{"type":"translation","typeOf":"system","title":"Перевод","data":{"originalAuthorName":"Sherry Yuan","originalUrl":"https:\u002F\u002Fproandroiddev.com\u002Fhow-kotlin-annotations-work-8d06798a32d2"}}],"author":{"id":"2090603","alias":"Surf_Studio","fullname":null,"avatarUrl":"\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Favatars\u002Fffb\u002F239\u002F13d\u002Fffb23913d57ecd841b8eff3cb1c48c4a.png","speciality":null,"scoreStats":{"score":66,"votesCount":110},"rating":56,"relatedData":null,"contacts":[],"authorContacts":[],"paymentDetails":{"paymentYandexMoney":null,"paymentPayPalMe":null,"paymentWebmoney":null},"donationsMethod":null,"isInBlacklist":null,"careerProfile":null},"statistics":{"commentsCount":0,"favoritesCount":53,"readingCount":5309,"score":4,"votesCount":4,"votesCountPlus":4,"votesCountMinus":0},"hubs":[{"id":"22290","alias":"surfstudio","type":"corporative","title":"Блог компании Surf","titleHtml":"Блог компании Surf","isProfiled":false,"relatedData":null},{"id":"17107","alias":"android_dev","type":"collective","title":"Разработка под Android","titleHtml":"Разработка под Android","isProfiled":true,"relatedData":null},{"id":"19441","alias":"kotlin","type":"collective","title":"Kotlin","titleHtml":"Kotlin","isProfiled":true,"relatedData":null},{"id":"6345","alias":"mobile_dev","type":"collective","title":"Разработка мобильных приложений","titleHtml":"Разработка мобильных приложений","isProfiled":true,"relatedData":null}],"flows":[{"id":"1","alias":"develop","title":"Разработка","titleHtml":"Разработка"}],"relatedData":{"vote":null,"unreadCommentsCount":0,"bookmarked":false,"canComment":false,"canEdit":false,"canViewVotes":false,"votePlus":{"canVote":false,"isChargeEnough":false,"isKarmaEnough":false,"isVotingOver":true,"isPublicationLimitEnough":false},"voteMinus":{"canVote":false,"isChargeEnough":false,"isKarmaEnough":false,"isVotingOver":true,"isPublicationLimitEnough":false},"canModerateComments":false,"trackerSubscribed":false,"emailSubscribed":false},"textHtml":"\u003Cdiv xmlns=\"http:\u002F\u002Fwww.w3.org\u002F1999\u002Fxhtml\"\u003E\u003Cp\u003EПривет! Сегодня с вами Максим Кругликов из Surf Android Team с переводом статьи про устройство аннотаций в Kotlin и три основных механизма их обработки: \u003Cstrong\u003Eпроцессинг\u003C\u002Fstrong\u003E, \u003Cstrong\u003Eрефлексию\u003C\u002Fstrong\u003E и \u003Cstrong\u003Elint\u003C\u002Fstrong\u003E. Давайте разберёмся.\u003C\u002Fp\u003E\u003Cp\u003EРазработчики Android могут создавать сложные приложения с разбросанными повсюду аннотациями, например, \u003Ccode\u003E@Provides\u003C\u002Fcode\u003E  из\u003Ca href=\"https:\u002F\u002Fdagger.dev\u002F\"\u003E \u003Cu\u003EDagger\u003C\u002Fu\u003E\u003C\u002Fa\u003E или \u003Ccode\u003E@ColorRes\u003C\u002Fcode\u003E  из\u003Ca href=\"https:\u002F\u002Fdeveloper.android.com\u002Freference\u002Fkotlin\u002Fandroidx\u002Fannotation\u002Fpackage-summary\"\u003E \u003Cu\u003EAndroidX\u003C\u002Fu\u003E\u003C\u002Fa\u003E. При этом они не до конца понимают, как работают эти аннотации. Они похожи на магию. В этой статье развеется часть этой магии и исследуется три основных механизма обработки аннотаций: \u003Cstrong\u003Eпроцессинг аннотаций\u003C\u002Fstrong\u003E, \u003Cstrong\u003Eрефлексия\u003C\u002Fstrong\u003E и \u003Cstrong\u003Elint\u003C\u002Fstrong\u003E.\u003C\u002Fp\u003E\u003Cp\u003EВо второй части разберём, как реальная библиотека \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fsquare\u002Fmoshi\"\u003E\u003Cu\u003EMoshi\u003C\u002Fu\u003E\u003C\u002Fa\u003E, основанная на аннотациях, использует все три механизма.\u003C\u002Fp\u003E\u003Cp\u003E\u003Cstrong\u003EЧто такое аннотации в Kotlin?\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\u003Cp\u003EАннотации — это средство добавления метаданных к коду. Чтобы объявить аннотацию, достаточно добавить модификатор annotation перед классом:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Eannotation class CustomAnnotation\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EМожно снабдить его метааннотациями, чтобы дать дополнительную информацию:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003E@Target(AnnotationTarget.FUNCTION, AnnotationTarget.TYPE_PARAMETER)\n@Retention(AnnotationRetention.SOURCE)\nannotation class CustomAnnotation\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E\u003Ccode\u003E@Target\u003C\u002Fcode\u003E указывает возможные типы элементов, к которым можно применить аннотацию (например, классы, функции или переменные). \u003Ccode\u003E@Retention\u003C\u002Fcode\u003E указывает, хранится ли аннотация в бинарнике и доступна ли она только во время компиляции или во время выполнения тоже. В значении по умолчанию RUNTIME аннотация доступна везде.\u003C\u002Fp\u003E\u003Cp\u003E\u003Cstrong\u003EПроцессинг аннотаций\u003C\u002Fstrong\u003E и \u003Cstrong\u003Eрефлексия\u003C\u002Fstrong\u003E относятся к категории метапрограммирования — метода, при котором программы используют другие программы (например, исходный код Kotlin) в качестве своих данных. Оба механизма используют аннотации для сокращения бойлерплейта и автоматизации типовых задач. Например, большинство библиотек внедрения зависимостей (например, Dagger) и сериализации (например, Moshi) используют либо один из подходов, либо оба одновременно. С помощью процессинга аннотаций и рефлексии можно достичь схожего результата. Например, Moshi поддерживает оба механизма генерации адаптеров JSON.\u003C\u002Fp\u003E\u003Cp\u003E\u003Cstrong\u003ELint\u003C\u002Fstrong\u003E — совсем другой механизм, использующий аннотации для проверки исходных файлов на наличие проблем. Считать ли это метапрограммированием — неясно.\u003C\u002Fp\u003E\u003Cp\u003EВсе три механизма предлагают мощные и гибкие API, поэтому разные аннотации могут давать совершенно разные результаты в зависимости от того, как они обрабатываются в коде. Разработчикам редко приходится писать этот код самостоятельно — чаще используются аннотации из библиотек, которые уже их обрабатывают, чем создаем собственные.\u003C\u002Fp\u003E\u003Cp\u003E\u003Cstrong\u003EПроцессинг аннотаций\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\u003Cp\u003EОбработчики аннотаций — это плагины компилятора, которые генерируют код на основе аннотаций во время компиляции. Сторонняя библиотека содержит обработчик аннотаций, если при подключении зависимости в build.gradle она требует использовать \u003Ccode\u003EannotationProcessor\u003C\u002Fcode\u003E, \u003Ccode\u003Ekapt\u003C\u002Fcode\u003E или \u003Ccode\u003Eksp\u003C\u002Fcode\u003E вместо \u003Ccode\u003Eimplementation\u003C\u002Fcode\u003E. Несколько примеров популярных библиотек, использующих обработку аннотаций — это Dagger (\u003Ccode\u003E@Provides\u003C\u002Fcode\u003E, \u003Ccode\u003E@Ingect\u003C\u002Fcode\u003E), Moshi (\u003Ccode\u003E@Json\u003C\u002Fcode\u003E) и Room (\u003Ccode\u003E@Entity\u003C\u002Fcode\u003E, \u003Ccode\u003E@Dao\u003C\u002Fcode\u003E).\u003C\u002Fp\u003E\u003Cp\u003EОбработчик аннотаций должен быть зарегистрирован в компиляторе, чтобы он мог работать во время компиляции. Самый распространенный способ зарегистрировать его — через библиотеку Google AutoService — просто добавить к своему процессору аннотацию \u003Ccode\u003E@AutoService\u003C\u002Fcode\u003E (Processor.class).\u003C\u002Fp\u003E\u003Cp\u003EСуществует три основных API для создания обработчиков аннотаций: Annotation Processor Tool (APT), Kotlin Annotation Processor Tool (kapt) и Kotlin Symbol Processing (KSP). Процессоры, созданные с помощью APT и kapt, расширяют один и тот же базовый класс \u003Ccode\u003EAbstractProcessor\u003C\u002Fcode\u003E, тогда как KSP имеет отдельный класс \u003Ccode\u003ESymbolProcessor\u003C\u002Fcode\u003E.\u003C\u002Fp\u003E\u003Cp\u003EОбработка аннотаций происходит в несколько раундов. В каждом раунде компилятор ищет аннотации в исходных файлах и вызывает соответствующие процессоры. Если процессоры генерируют новые файлы, то следующий раунд начинается уже со сгенерированных файлов. Процесс продолжается до тех пор, пока не перестанут создаваться новые файлы.\u003C\u002Fp\u003E\u003Cp\u003E\u003Cstrong\u003EAnnotation Processor Tool\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\u003Cp\u003EAPT — единственный API из эпохи Android до Kotlin. Он используется компилятором Java (javac) и подключается через \u003Ccode\u003EannotationProcessor\u003C\u002Fcode\u003E. В настоящее время его редко можно увидеть в проектах Android, поскольку он не поддерживает Kotlin-файлы.\u003C\u002Fp\u003E\u003Cp\u003EОбработчики аннотаций APT работают с исходным кодом на .java. Чтобы сделать такой, нужно создать класс, расширяющий \u003Ccode\u003EAbstractProcessor\u003C\u002Fcode\u003E. Две основные функции, которые необходимо реализовать, — это \u003Ccode\u003EgetSupportedAnnotationTypes()\u003C\u002Fcode\u003E, которая должна вернуть поддерживаемые этим процессором аннотации, и \u003Ccode\u003Eprocess()\u003C\u002Fcode\u003E, которая является основным блоком, вызываемым в каждом раунде обработки. Тут нужно думать об исходном коде как о простом тексте, а не как о чем-то исполняемом. Подобно файлу JSON. Исходный код представлен в виде дерева элементов (Element), которое в свою очередь представляет элементы программы, включая пакеты, классы или функции.\u003C\u002Fp\u003E\u003Cp\u003EВторой параметр метода \u003Ccode\u003Eprocess()\u003C\u002Fcode\u003E — это \u003Ccode\u003EroundEnv\u003C\u002Fcode\u003E, объект \u003Ccode\u003ERoundEnvironment\u003C\u002Fcode\u003E с информацией о текущем и предыдущих раундах обработки. Он обеспечивает доступ к дереву Element’ов и несколько способов исследования аннотаций, связанных с ними, например \u003Ccode\u003EgetElementsAnnotatedWith()\u003C\u002Fcode\u003E.\u003C\u002Fp\u003E\u003Cp\u003EМожно генерировать код в методе \u003Ccode\u003Eprocess()\u003C\u002Fcode\u003E на основе аннотированных элементов. Интерфейс Filer из \u003Ccode\u003EProcessingEnvironment\u003C\u002Fcode\u003E позволяет создавать новые файлы, а затем записывать в них текст, как в любой другой файл. Сгенерированные файлы появятся в каталоге \u003Ccode\u003E&lt;module&gt;\u002Fbuild\u002Fgenerated\u002Fsource\u002F\u003C\u002Fcode\u003E проекта. Именно так Dagger генерирует классы \u003Ccode\u003ESomething_Factory\u003C\u002Fcode\u003E и \u003Ccode\u003ESomething_MembersInjector\u003C\u002Fcode\u003E, а Moshi — классы \u003Ccode\u003ESomethingAdapter\u003C\u002Fcode\u003E. \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fsquare\u002Fjavapoet\"\u003E\u003Cu\u003EJavaPoet\u003C\u002Fu\u003E\u003C\u002Fa\u003E — популярная библиотека для написания исходного кода Java, использующая этот подход.\u003C\u002Fp\u003E\u003Cp\u003EНет нужды подробно останавливаться на реализации собственного \u003Ccode\u003EAbstractProcessor\u003C\u002Fcode\u003E, потому что на эту тему уже есть множество ресурсов (ссылки в конце статьи. Кстати, в следующей статье мы рассмотрим, как это реализовано в \u003Ccode\u003EJsonClassCodegenProcessor\u003C\u002Fcode\u003E от Moshi).\u003C\u002Fp\u003E\u003Cp\u003E\u003Cstrong\u003EKotlin Annotation Processor Tool\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\u003Cp\u003EКогда Kotlin получил признание, Kapt стал популярным API-интерфейсом для обработки аннотаций. Это плагин компилятора, созданный на основе APT и поддерживающий исходный код и Kotlin и Java. Он использует тот же \u003Ccode\u003EAbstractProcessor\u003C\u002Fcode\u003E, что и APT, поэтому информация из предыдущего раздела о создании процессоров аннотаций APT также применима и к kapt. Kapt может запускать любой \u003Ccode\u003EAbstractProcessor\u003C\u002Fcode\u003E независимо от того, был ли он написан с учетом поддержки Kotlin или Java. \u003Ca href=\"https:\u002F\u002Fsquare.github.io\u002Fkotlinpoet\u002F\"\u003E\u003Cu\u003EKotlinPoet\u003C\u002Fu\u003E\u003C\u002Fa\u003E — популярная библиотека для написания исходного кода Kotlin, которая использует этот подход.\u003C\u002Fp\u003E\u003Cp\u003EГлавный недостаток Kapt — долгое время компиляции. Он компилируется, используя Javac, как APT, и работает с Kotlin, генерируя Java-стабы из файлов Kotlin, которые затем могут прочитать процессоры. Создание таких стабов — дорогостоящая операция, которая значительно влияет на скорость сборки.\u003C\u002Fp\u003E\u003Cp\u003E\u003Cstrong\u003EKotlin Symbol Processing\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\u003Cp\u003EKSP представили в 2021 году, и это первая альтернатива kapt, написанная на Kotlin. Благодаря прямой интеграции с компилятором Kotlin (kotlinc) KSP анализирует код Kotlin напрямую, без создания Java-стабов, и работает до 2 раз быстрее, чем kapt. \u003C\u002Fp\u003E\u003Cp\u003EОн также лучше понимает языковые конструкции Kotlin. Если в модуле остались процессоры kapt, он все равно будет генерировать стабы во время компиляции. Это означает, что  повысить производительность KSP получится только в том случае, если из модуля будет удалено все использование kapt.\u003C\u002Fp\u003E\u003Cp\u003EЧтобы создать обработчик аннотаций KSP, нужно реализовать интерфейс \u003Ccode\u003ESymbolProcessor\u003C\u002Fcode\u003E. KSP также представляет исходный код в виде синтаксического дерева и предоставляет API, \u003Ca href=\"https:\u002F\u002Fkotlinlang.org\u002Fdocs\u002Fksp-reference.html#program-elements\"\u003E\u003Cu\u003Eаналогичный Kapt\u003C\u002Fu\u003E\u003C\u002Fa\u003E. \u003C\u002Fp\u003E\u003Cp\u003E\u003Ccode\u003EKsDeclaration\u003C\u002Fcode\u003E или \u003Ccode\u003EKsDeclarationContainer\u003C\u002Fcode\u003E в KSP — это аналог \u003Ccode\u003EElement\u003C\u002Fcode\u003E из kapt. \u003Ccode\u003EResolver\u003C\u002Fcode\u003E, как и \u003Ccode\u003ERoundEnvironment\u003C\u002Fcode\u003E из kapt, — это параметр в \u003Ccode\u003ESymbolProcessor.process()\u003C\u002Fcode\u003E, обеспечивающий доступ к синтаксическому дереву. \u003Ccode\u003EResolver.getSymbolsWithAnnotation()\u003C\u002Fcode\u003E позволяет исследовать символы с аннотациями. И, наконец, \u003Ccode\u003ECodeGenerator\u003C\u002Fcode\u003E, как и \u003Ccode\u003EFiler\u003C\u002Fcode\u003E, позволяет генерировать код во время процессинга.\u003C\u002Fp\u003E\u003Cp\u003E\u003Cstrong\u003EРефлексия\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\u003Cp\u003EРефлексия — это способность языка исследовать свои классы, интерфейсы, поля и методы во время выполнения, не зная их имен во время компиляции. Он позволяет программам динамически создавать экземпляры новых объектов и вызывать методы. А также изменять их структуру и поведение во время выполнения. Примеры популярных библиотек, которые используют рефлексию для изменения поведения программы: Moshi (\u003Ccode\u003E@Json\u003C\u002Fcode\u003E) и Retrofit (\u003Ccode\u003E@GET\u003C\u002Fcode\u003E, \u003Ccode\u003E@POST\u003C\u002Fcode\u003E).\u003C\u002Fp\u003E\u003Cp\u003EСтандартная библиотека рефлексии Java работает и в Kotlin. Но у Kotlin есть свой собственный API рефлексии, доступный в пакете \u003Ccode\u003Ekotlin-reflect\u003C\u002Fcode\u003E. Он предоставляет несколько дополнительных функций, включая доступ к nullable-свойствам и типам.\u003C\u002Fp\u003E\u003Cp\u003EВот пример вызова метода во время выполнения с помощью рефлексии:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Eclass HelloPrinter {\n fun printHello() {\n   println(\"Hello, world!!!\")\n }\n}\n\nval printer = HelloPrinter()\nval methods = printer::class.java.methods\nval helloFunction = methods.find { it.name == \"printHello\" }\nhelloFunction?.invoke(printer)\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EРефлексия предназначена не только для работы с аннотациями, она предоставляет надежный API для работы с ними, а аннотации, в свою очередь, могут сделать её использование более безопасным и эффективным. \u003C\u002Fp\u003E\u003Cp\u003EНапример, можно обновить предыдущий код, чтобы вызывать все методы, помеченные аннотацией \u003Ccode\u003E@Greeter\u003C\u002Fcode\u003E, без указания их имен в строках:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003E@Target(AnnotationTarget.FUNCTION)\nannotation class Greeter\n\nclass HelloPrinter {\n @Greeter\n fun printHello() {\n   println(\"Hello, world!!!\")\n }\n}\n\nval printer = HelloPrinter()\nval methods = printer::class.java.methods\nval helloFunctions = methods.filter {\n it.isAnnotationPresent(Greeter::class.java)\n}\nhelloFunctions.forEach {\n it.invoke(printer)\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EВ API рефлексии Kotlin доступны и другие функции, связанные с аннотациями. Например, \u003Ccode\u003EKAnnotatedElement.findAnnotations()\u003C\u002Fcode\u003E и \u003Ccode\u003EKAnnotatedElement.hasAnnotation()\u003C\u002Fcode\u003E. Чтобы аннотация работала с рефлексией, она должна быть помечена \u003Ccode\u003E@Retention\u003C\u002Fcode\u003E со значением RUNTIME (по умолчанию).\u003C\u002Fp\u003E\u003Cp\u003EПри выборе между рефлексией и процессингом аннотаций стоит учитывать пару компромиссов:\u003C\u002Fp\u003E\u003Col\u003E\u003Cli\u003E\u003Cp\u003EИспользование рефлексии влечёт за собой более долгое время выполнения, а процессинг аннотаций — более долгое время компиляции.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EВ случае ошибки, рефлексия выбросит ошибку прямо в рантайме, а процессинг аннотаций — во время компиляции.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Fol\u003E\u003Cp\u003EБольшинство библиотек предпочитают процессинг аннотаций, поскольку более медленная компиляция не повлияет на работу конечного пользователя, а ошибки времени компиляции будут замечены до того, как дойдут до пользователя. Из-за этого Dagger полностью избавился от рефлексии при переходе на вторую версию.\u003C\u002Fp\u003E\u003Cp\u003ERetrofit, популярная клиентская библиотека HTTP,  полностью полагается на рефлексию. Она использует \u003Ccode\u003EProxy\u003C\u002Fcode\u003E для создания экземпляров аннотированных интерфейсов. Рефлексия здесь имеет смысл, поскольку задержка выполнения сетевого запроса намного превышает любую задержку, вызванную рефлексией. При этом сбои во время выполнения относительно легко идентифицировать, поскольку можно протестировать новый код Retrofit, просто вызвав нужный метод API во время отладки нового кода.\u003C\u002Fp\u003E\u003Cp\u003E\u003Cstrong\u003ELint\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\u003Cp\u003ELint — это инструмент сканирования кода, который проверяет исходные файлы проекта Android на наличие потенциальных ошибок и возможных улучшений безопасности, производительности, accessibility и другого. Речь пойдёт о \u003Ca href=\"https:\u002F\u002Fdeveloper.android.com\u002Fstudio\u002Fwrite\u002Flint\"\u003E\u003Cu\u003Eвстроенном lint\u003C\u002Fu\u003E\u003C\u002Fa\u003E без рассмотрения сторонних инструментов, вроде \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fdetekt\u002Fdetekt\"\u003E\u003Cu\u003EDetekt\u003C\u002Fu\u003E\u003C\u002Fa\u003E.\u003C\u002Fp\u003E\u003Cp\u003ELint глубоко интегрирован в Android Studio и подсвечивает проблемы прямо в IDE.\u003C\u002Fp\u003E\u003Cfigure class=\"full-width \"\u003E\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw1560\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F9cd\u002F165\u002F47b\u002F9cd16547bd649cd039b132c4452b1edb.png\" width=\"2522\" height=\"872\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F9cd\u002F165\u002F47b\u002F9cd16547bd649cd039b132c4452b1edb.png\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cp\u003EМногие проверки, даже приведенный выше «Unnecessary safe call», не используют аннотации. Однако аннотации могут помочь lint обнаружить более тонкие проблемы в коде. Поскольку в Java нет встроенной обработки nullable значений, как в Kotlin, \u003Ccode\u003E@Nonnul\u003C\u002Fcode\u003E и \u003Ccode\u003E@Nullable\u003C\u002Fcode\u003E позволяют lint выдавать те же предупреждения о null-safetty для Kotlin. \u003C\u002Fp\u003E\u003Cp\u003EДругой пример — \u003Ccode\u003E@ColorRes\u003C\u002Fcode\u003E, который сообщает lint, что параметр \u003Ccode\u003EInt\u003C\u002Fcode\u003E должен быть ссылкой на цветовой ресурс (например, \u003Ccode\u003Eandroid.R.color.black\u003C\u002Fcode\u003E).\u003C\u002Fp\u003E\u003Cfigure class=\"full-width \"\u003E\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw1560\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fa3d\u002F381\u002F8b8\u002Fa3d3818b8f330133cdfb2de8624a19f7.png\" width=\"2522\" height=\"872\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fa3d\u002F381\u002F8b8\u002Fa3d3818b8f330133cdfb2de8624a19f7.png\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cp\u003EВ отличие от процессинга аннотаций и рефлексии, Lint выполняет только статический анализ кода и не может влиять на поведение программы. Это отличает его от двух других механизмов, где аннотации обычно поступают из сторонних библиотек. Часто используемые аннотации, связанные с lint, взяты из пакета \u003Ccode\u003Eandroidx.annotations\u003C\u002Fcode\u003E и обрабатываются встроенными проверками Android Studio.\u003C\u002Fp\u003E\u003Cp\u003EЕсли нужно добавить кастомную проверку lint — собственную или из сторонней библиотеки, необходимо использовать конфигурацию зависимостей \u003Ccode\u003ElintChecks\u003C\u002Fcode\u003E или \u003Ccode\u003ElintPublish\u003C\u002Fcode\u003E. \u003Ccode\u003ElintChecks\u003C\u002Fcode\u003E делает правило lint доступным только для одного текущего модуля, тогда как \u003Ccode\u003ElintPublish\u003C\u002Fcode\u003E делает его доступным для всех.\u003C\u002Fp\u003E\u003Cp\u003EЧтобы добавить новую проверку, нам нужно создать подкласс \u003Ccode\u003EDetector\u003C\u002Fcode\u003E. Такие детекторы могут работать с файлами разных типов в зависимости от того, какой \u003Ccode\u003EFileScanner\u003C\u002Fcode\u003E он реализует. Например, \u003Ccode\u003ESourceCodeScanner\u003C\u002Fcode\u003E может анализировать исходные файлы Kotlin или Java, а \u003Ccode\u003EGradleScanner\u003C\u002Fcode\u003E — файлы Gradle.\u003C\u002Fp\u003E\u003Cp\u003E\u003Ccode\u003ESourceCodeScanner\u003C\u002Fcode\u003E — сканер для обработки аннотаций. Он предлагает два API абстрактного синтаксического дерева (Abstract Syntax Tree, AST), разработанные Jetbrains, для анализа исходного кода. \u003C\u002Fp\u003E\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fplugins.jetbrains.com\u002Fdocs\u002Fintellij\u002Fuast.html\"\u003E\u003Cu\u003EUniversal Abstract Syntax Tree\u003C\u002Fu\u003E\u003C\u002Fa\u003E (UAST) представляет универсальное API для нескольких языков, что позволяет написать один анализатор, который работает «универсально» на всех языках, поддерживаемых UAST, включая Kotlin и Java.\u003C\u002Fp\u003E\u003Cp\u003EДо UAST был \u003Ca href=\"https:\u002F\u002Fplugins.jetbrains.com\u002Fdocs\u002Fintellij\u002Fpsi-elements.html\"\u003E\u003Cu\u003EProgram Structure Interface\u003C\u002Fu\u003E\u003C\u002Fa\u003E (PSI). PSI представляет Kotlin и Java по-разному и все еще необходим для учета нюансов, специфичных для отдельно взятого языка. UAST построен на основе PSI, поэтому его в API иногда попадают элементы PSI. Навигация по AST похожа на навигацию по деревьям элементов при обработке аннотаций.\u003C\u002Fp\u003E\u003Cp\u003EВ \u003Ca href=\"https:\u002F\u002Fgooglesamples.github.io\u002Fandroid-custom-lint-rules\u002F\"\u003E\u003Cu\u003Eруководстве по пользовательским lint правилам от Google\u003C\u002Fu\u003E\u003C\u002Fa\u003E есть \u003Ca href=\"https:\u002F\u002Fgooglesamples.github.io\u002Fandroid-custom-lint-rules\u002Fapi-guide\u002Fannotations.md.html\"\u003E\u003Cu\u003Eполезная страница\u003C\u002Fu\u003E\u003C\u002Fa\u003E о том, как добавить проверку, которая проходит по аннотированным элементам. Если нужно сразу просмотреть использование самой аннотации, а не только элементы, аннотированные ею, можно переопределить метод \u003Ccode\u003EgetApplicatbleUastTypes()\u003C\u002Fcode\u003E из \u003Ccode\u003ESourceCodeScanner\u003C\u002Fcode\u003E, чтобы вернуть \u003Ccode\u003EUAnnotation::class.java\u003C\u002Fcode\u003E, а затем переопределить \u003Ccode\u003EcreateUastHandler()\u003C\u002Fcode\u003E, чтобы вернуть кастомный \u003Ccode\u003EUElementHandler\u003C\u002Fcode\u003E. Любое обнаружение проблем, связанных с пользовательской аннотацией, может быть выполнено в методе \u003Ccode\u003EvisitAnnotation()\u003C\u002Fcode\u003E класс \u003Ccode\u003EUElementHandler\u003C\u002Fcode\u003E.\u003C\u002Fp\u003E\u003Cp\u003E\u003Cstrong\u003EМистические кастомные аннотации\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\u003Cp\u003EИногда можно столкнуться с кастомной аннотацией в коде, на которую нет ссылок ни в каких обработчиках аннотаций, коде рефлексии или lint правилах. Что же она делает?\u003C\u002Fp\u003E\u003Cp\u003EСкорее всего, она помечена метааннотацией из сторонней библиотеки. Некоторые библиотеки предоставляют функции, основанные на метааннотациях. Например, в Dagger есть метааннотация \u003Ccode\u003E@Qualifier\u003C\u002Fcode\u003E для случаев, когда одного типа недостаточно для идентификации зависимости. \u003Ccode\u003E@Qualifier\u003C\u002Fcode\u003E позволяет нам создавать такие пользовательские аннотации:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003E@Qualifier\n@Target(AnnotationTarget.FIELD, AnnotationTarget.VALUE_PARAMETER, AnnotationTarget.FUNCTION)\nannotation class Authorized\n\n@Qualifier\n@Target(AnnotationTarget.FIELD, AnnotationTarget.VALUE_PARAMETER, AnnotationTarget.FUNCTION)\nannotation class Unauthorized\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EМожно использовать их, например, для внедрения различных экземпляров класса в зависимости от того, вошел ли пользователь в систему:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003E@Provides\n@Authorized\nOkHttpClient.Builder provideAuthorizedOkHttpClientBuilder(…)\n\n@Provides\n@Unauthorized\nOkHttpClient.Builder provideUnauthorizedOkHttpClientBuilder(…)\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EНе нужно писать код для обработки этих пользовательских аннотаций. Обработчик аннотаций Dagger выполнит поиск всех пользовательских аннотаций \u003Ccode\u003E@Qualifier\u003C\u002Fcode\u003E и обработает их. У Moshi есть аналогичная метааннотация \u003Ccode\u003E@JsonQualifier\u003C\u002Fcode\u003E, позволяющая указать, как тип сериализуется для конкретного поля, не меняя его сериализацию повсюду.\u003C\u002Fp\u003E\u003Cp\u003E\u003Cstrong\u003EПолезные ссылки\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fwww.youtube.com\u002Fwatch?v=dOcs-NKK-RA\"\u003E\u003Cu\u003EAnnotation Processing Boilerplate Destruction talk\u003C\u002Fu\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fmedium.com\u002Fandroidiots\u002Fwriting-your-own-annotation-processors-in-android-1fa0cd96ef11\"\u003E\u003Cu\u003EWriting your own Annotation Processors in Android article\u003C\u002Fu\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fwww.baeldung.com\u002Fkotlin\u002Fannotations\"\u003E\u003Cu\u003EBaeldung’s Kotlin Annotations article\u003C\u002Fu\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fgooglesamples.github.io\u002Fandroid-custom-lint-rules\u002F\"\u003E\u003Cu\u003EAndroid custom lint rules guide\u003C\u002Fu\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cblockquote\u003E\u003Cp\u003EБольше полезного про Android — в Telegram-канале Surf Android Team. \u003C\u002Fp\u003E\u003Cp\u003EКейсы, лучшие практики, новости и вакансии в команду Android Surf в одном месте. \u003Ca href=\"https:\u002F\u002Ft.me\u002Fsurf_android\"\u003E\u003Cstrong\u003EПрисоединяйтесь\u003C\u002Fstrong\u003E\u003C\u002Fa\u003E!\u003C\u002Fp\u003E\u003C\u002Fblockquote\u003E\u003Cp\u003E\u003C\u002Fp\u003E\u003C\u002Fdiv\u003E","tags":[{"titleHtml":"android"},{"titleHtml":"kotlin"},{"titleHtml":"разработка приложений"},{"titleHtml":"нативная мобильная разработка"}],"metadata":{"stylesUrls":[],"scriptUrls":[],"shareImageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fe94\u002F364\u002Ff7f\u002Fe94364f7f872bdc28a2a199cafc6f4c2.JPG","shareImageWidth":1200,"shareImageHeight":630,"vkShareImageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fe94\u002F364\u002Ff7f\u002Fe94364f7f872bdc28a2a199cafc6f4c2.JPG","schemaJsonLd":"{\"@context\":\"http:\\\u002F\\\u002Fschema.org\",\"@type\":\"Article\",\"mainEntityOfPage\":{\"@type\":\"WebPage\",\"@id\":\"https:\\\u002F\\\u002Fhabr.com\\\u002Fru\\\u002Fcompanies\\\u002Fsurfstudio\\\u002Farticles\\\u002F823906\\\u002F\"},\"headline\":\"Как устроены аннотации в Kotlin. Часть 1\",\"datePublished\":\"2024-06-24T11:04:45+03:00\",\"dateModified\":\"2024-06-24T11:29:32+03:00\",\"author\":{\"@type\":\"Person\",\"name\":\"Surf_Studio\"},\"publisher\":{\"@type\":\"Organization\",\"name\":\"Habr\",\"logo\":{\"@type\":\"ImageObject\",\"url\":\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fwebt\\\u002Fa_\\\u002Flk\\\u002F9m\\\u002Fa_lk9mjkccjox-zccjrpfolmkmq.png\"}},\"description\":\"Привет! Сегодня с вами Максим Кругликов из Surf Android Team с переводом статьи про устройство аннотаций в Kotlin и три основных механизма их обработки: процесси...\",\"url\":\"https:\\\u002F\\\u002Fhabr.com\\\u002Fru\\\u002Fcompanies\\\u002Fsurfstudio\\\u002Farticles\\\u002F823906\\\u002F#post-content-body\",\"about\":[\"c_surfstudio\",\"h_android_dev\",\"h_kotlin\",\"h_mobile_dev\",\"f_develop\"],\"image\":[\"https:\\\u002F\\\u002Fhabr.com\\\u002Fshare\\\u002Fpublication\\\u002F823906\\\u002Fc6062e0083a21df941b31690379fd35d\\\u002F\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fupload_files\\\u002F9cd\\\u002F165\\\u002F47b\\\u002F9cd16547bd649cd039b132c4452b1edb.png\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fupload_files\\\u002Fa3d\\\u002F381\\\u002F8b8\\\u002Fa3d3818b8f330133cdfb2de8624a19f7.png\"]}","metaDescription":"Привет! Сегодня с вами Максим Кругликов из Surf Android Team с переводом статьи про устройство аннотаций в Kotlin и три основных механизма их обработки: процессинг , рефлексию и lint . Давайте...","mainImageUrl":null,"amp":true,"customTrackerLinks":[]},"polls":[],"commentsEnabled":{"status":true,"reason":null},"rulesRemindEnabled":false,"votesEnabled":true,"status":"published","plannedPublishTime":null,"checked":null,"hasPinnedComments":false,"format":"review","banner":null,"multiwidget":null,"multiwidgetUuid":null,"readingTime":10,"complexity":"medium","isEditorial":false,"allowedFeatures":{"isTestTargetAllow":true}}},"articlesIds":{},"isLoading":false,"pagesCount":{},"route":{},"reasonsList":null,"postReasonsList":null,"view":"list","lastVisitedRoute":{},"ssrCommentsArticleIds":[""],"viewedPosts":[],"myFeedFilter":{"complexity":"all","score":"all","types":["articles","posts","news"]},"myFeedIsApplyFilters":false,"myFeedIsForce":false,"karma":{"userReasonsList":null}},"authorContribution":{"authors":{}},"betaTest":{"currentAnnouncement":null,"announcements":{},"announcementCards":null,"announcementComments":{},"announcementCommentThreads":{},"announcementCommentingStatuses":{},"archivedList":[]},"authorStatistics":{"articleRefs":{},"articleIds":{},"pagesCount":{},"route":{},"viewsCount":[],"maxStatsCount":{}},"career":{"seoLandings":[],"hubs":""},"comments":{"articleComments":{},"articlePinnedComments":{},"searchCommentsResults":null,"pagesCount":null,"commentAccess":{},"scrollParents":{},"pageArticleComments":{"lastViewedComment":0,"postId":null,"lastCommentTimestamp":"","moderated":[],"moderatedIds":[],"commentRoute":"","idempotenceKey":""}},"companies":{"companyRefs":{"surfstudio":{"alias":"surfstudio","imageUrl":"\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fcompany\u002Fcac\u002F579\u002F907\u002Fcac5799077a2883e001815819c2ccbac.jpg","titleHtml":"Surf","descriptionHtml":"Создаём веб- и мобильные приложения","relatedData":null,"statistics":{"subscribersCount":37557,"rating":138.19,"invest":null,"postsCount":168,"threadsCount":0,"newsCount":23,"vacanciesCount":0,"employeesCount":20,"careerRating":null},"foundationDate":{"year":"2011","month":"01","day":"29"},"location":{"city":{"id":"446283","title":"Воронеж"},"region":{"id":"1733","title":"Воронежская обл."},"country":{"id":"168","title":"Россия"}},"siteUrl":"https:\u002F\u002Fsurf.ru","staffNumber":"201–500 человек","registrationDate":"2019-07-04T08:00:00+00:00","representativeUser":null,"contacts":[{"title":"Сайт","url":"https:\u002F\u002Fsurf.ru\u002F","siteTitle":"Компания по разработке ПО и приложений на заказ | Surf","favicon":"https:\u002F\u002Fsurf.ru\u002Fwp-content\u002Fthemes\u002Fsurf\u002Ffavicon.ico"},{"title":"ВКонтакте","url":"https:\u002F\u002Fvk.com\u002Fsurfstudio","siteTitle":"VK | VK","favicon":"https:\u002F\u002Fm.vk.com\u002Fimages\u002Ficons\u002Ffavicons\u002Ffav_logo.ico?10"},{"title":"Instagram","url":"https:\u002F\u002Finstagram.com\u002Fsurfstudio","siteTitle":"Login • Instagram","favicon":"https:\u002F\u002Fstatic.cdninstagram.com\u002Frsrc.php\u002Fv4\u002FyI\u002Fr\u002FVsNE-OHk_8a.png"},{"title":"Telegram","url":"https:\u002F\u002Ftelegram.me\u002Fsurf_tech","siteTitle":"Telegram: Contact @surf_tech","favicon":"https:\u002F\u002Ftelegram.org\u002Fimg\u002Fwebsite_icon.svg?4"},{"title":"Telegram","url":"https:\u002F\u002Ftelegram.me\u002Fsurf_flutter","siteTitle":"Telegram: Contact @surf_flutter","favicon":"https:\u002F\u002Ftelegram.org\u002Fimg\u002Fwebsite_icon.svg?4"},{"title":"Telegram","url":"https:\u002F\u002Ftelegram.me\u002Fsurf_ios","siteTitle":"Telegram: Contact @surf_ios","favicon":"https:\u002F\u002Ftelegram.org\u002Fimg\u002Fwebsite_icon.svg?4"},{"title":"Telegram","url":"https:\u002F\u002Ftelegram.me\u002Fsurf_android","siteTitle":"Telegram: Contact @surf_android","favicon":"https:\u002F\u002Ftelegram.org\u002Fimg\u002Fwebsite_icon.svg?4"},{"title":"Telegram","url":"https:\u002F\u002Ftelegram.me\u002Fproduct_channel_surf","siteTitle":"Telegram: Contact @product_channel_surf","favicon":"https:\u002F\u002Ftelegram.org\u002Fimg\u002Fwebsite_icon.svg?4"}],"settings":{"analyticsSettings":[{"type":"ym","trackingId":"94526284"}],"branding":null,"status":"active","isStartup":false,"hasActivePolls":false,"shouldShowHabrAds":true},"metadata":{"titleHtml":"Surf, Воронеж - Создаём веб- и мобильные приложения с 29 января 2011 г.","title":"Surf, Воронеж - Создаём веб- и мобильные приложения с 29 января 2011 г.","keywords":["flutter","android","мобильная разработка","кроссплатформенная разработка","surf","мобильные приложения","ios","кроссплатформенность","разработка мобильных приложений","dart","кроссплатформа","аналитика мобильных приложений","burger king","разработка приложений","эфир","android-разработка","swift","ритейл","тестирование","qa"],"descriptionHtml":"168 статей от авторов компании Surf","description":"168 статей от авторов компании Surf"},"aDeskSettings":null,"careerAlias":"surf","schoolAlias":null}},"companyIds":{},"companyTopIds":{},"pagesCount":{},"companyProfiles":{},"companiesCategories":[],"companiesCategoriesTotalCount":0,"companiesWidgets":{},"companiesWorkers":{},"companiesFans":{},"multiwidgets":{},"route":{},"isLoading":false,"companyWorkersLoading":false,"companyFansLoading":false,"multiwidgetLoading":false,"vacancies":{},"companiesGalleries":{},"companiesBanners":{},"companiesLandingVacancies":{},"companiesTechnologies":{},"workplaceInfo":null},"companyAdmin":{"companyInfo":null,"companyInfoLoading":false,"faqArticles":null,"brandingPreviewImageUrl":null,"jivoStatus":0,"adminNotifications":null,"availableInvitesCount":{}},"companyAdd":{"currentStep":"","stepsData":{},"uncompletedSteps":[],"isStepLoading":true,"isStepCommitting":false,"isInitialized":false,"agreementContent":""},"companiesContribution":{"hubs":{},"flows":{},"companyRefs":{}},"companyHubsContribution":{"contributionRefs":{"hubRefs":{},"hubIds":{}}},"conversation":{"messages":[],"respondent":null,"isLoadMore":false},"conversations":{"conversations":[],"pagesCount":0},"docs":{"menu":{},"articles":{},"mainMenu":[],"loading":{"main":false,"dropdown":false,"article":false}},"feature":{"isProbablyVisible":true},"fixedBanner":{"isArticleStickyPanelVisible":false,"isArticleStickyPanelAtTheBottom":false,"isFixedBannerVisible":false,"isStickyPanelIconsHidden":false},"flows":{"flows":[{"id":"1","alias":"develop","title":"Разработка","titleHtml":"Разработка","route":{"name":"FLOW_PAGE","params":{"flowName":"develop"}}},{"id":"6","alias":"admin","title":"Администрирование","titleHtml":"Администрирование","route":{"name":"FLOW_PAGE","params":{"flowName":"admin"}}},{"id":"2","alias":"design","title":"Дизайн","titleHtml":"Дизайн","route":{"name":"FLOW_PAGE","params":{"flowName":"design"}}},{"id":"3","alias":"management","title":"Менеджмент","titleHtml":"Менеджмент","route":{"name":"FLOW_PAGE","params":{"flowName":"management"}}},{"id":"4","alias":"marketing","title":"Маркетинг","titleHtml":"Маркетинг","route":{"name":"FLOW_PAGE","params":{"flowName":"marketing"}}},{"id":"7","alias":"popsci","title":"Научпоп","titleHtml":"Научпоп","route":{"name":"FLOW_PAGE","params":{"flowName":"popsci"}}}],"updates":{}},"global":{"isPwa":false,"device":"mobile","isHabrCom":true,"requestId":"5a3632c5a40f99fe64d9af4ce95c22aa"},"hubs":{"hubRefs":{},"hubIds":{},"pagesCount":{},"isLoading":false,"route":{}},"hubsBlock":{"hubRefs":{},"hubIds":{}},"i18n":{"fl":"ru","hl":"ru"},"info":{"welcomePage":{},"isLoading":true},"location":{"urlStruct":{"protocol":null,"slashes":null,"auth":null,"host":null,"port":null,"hostname":null,"hash":null,"query":{},"pathname":"\u002Fru\u002Fcompanies\u002Fsurfstudio\u002Farticles\u002F823906\u002F","path":"\u002Fru\u002Fcompanies\u002Fsurfstudio\u002Farticles\u002F823906\u002F","href":"\u002Fru\u002Fcompanies\u002Fsurfstudio\u002Farticles\u002F823906\u002F"}},"me":{"user":null,"uuid":null,"ppgDemanded":false,"karmaResetInfo":{"canReincarnate":null,"wasReincarnated":null,"currentScore":null},"notes":null,"userUpdates":{"feeds":{"newPostsCount":null,"newThreadsCount":null,"newNewsCount":null,"newCount":null},"conversationUnreadCount":0}},"mostReadingList":{"mostReadingListIds":[],"mostReadingListRefs":null,"promoPost":null},"onboarding":{"currentStep":null,"stepsData":{},"stepsErrors":{},"completedSteps":[],"isStepCommitting":false,"isCommitDisabled":true},"ppa":{"articles":{},"card":null,"transactions":null,"totalTransactions":null,"isAccessible":null},"projectsBlocks":{"activeBlocks":{"courses":"project-block-company-article"}},"promoData":{"isLoading":false,"hasLoaded":false,"featurer":null,"megaposts":null,"promoLinks":null,"promoPosts":null,"sticker":null},"publicationStatistics":{"statsInfo":{},"statsFunnels":{},"statsGraph":{},"defaultSuggest":{},"suggest":{},"timeTracker":{},"isTrackingActivity":false,"isUserActive":true,"otherPublicationStats":{}},"pullRefresh":{"shouldRefresh":false},"sandbox":{"articleIds":[],"articleRefs":{},"pagesCount":null,"route":{},"lastVisitedRoute":{},"isLoading":false},"search":{"searchQueryError":null},"settingsOther":{"inputs":{"uiLang":{"errors":[],"ref":null,"value":""},"articlesLangEnglish":{"errors":[],"ref":null,"value":false},"articlesLangRussian":{"errors":[],"ref":null,"value":false},"agreement":{"errors":[],"ref":null,"value":false},"email":{"errors":[],"ref":null,"value":true},"digest":{"errors":[],"ref":null,"value":true}}},"similarList":{"similarListIds":[],"similarListRefs":null},"ssr":{"error":null,"isDataLoaded":true,"isDataLoading":false,"isHydrationFailed":false,"isServer":false},"stories":{"stories":[{"id":"story-998","author":{"logo":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F91a\u002F166\u002F49f\u002F91a16649f9ef89302a5a56cfa22a451d.png","title":"Яндекс Практикум","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up"},"title":"Как расти на работе?","lang":"ru","startTime":"2025-03-18T18:45:00+03:00","finishTime":"2025-03-31T19:00:00+03:00","slides":[{"id":"story-998_1","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fbf4\u002F911\u002F7e6\u002Fbf49117e637ff2099b3944f8803cd7a3.png","button":null},{"id":"story-998_2","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F3e3\u002Fc84\u002Fe83\u002F3e3c84e8330ea1ddf72e9d310457ed2f.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_3","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F84b\u002F533\u002F3c3\u002F84b5333c3e77e8dac62a8b50d042acb9.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_4","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F257\u002Feb0\u002F2be\u002F257eb02bea1777e13f3e647cae6e06cd.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_5","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F858\u002F086\u002F0ed\u002F8580860ed3497c043c04f9a42054d74f.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_6","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fcdf\u002F32f\u002F387\u002Fcdf32f38777f046c063b5182f4125e14.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_7","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fd48\u002Ff2d\u002F0e2\u002Fd48f2d0e2ecd7d746d738191bb913d8f.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_8","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fb38\u002Ffd7\u002Fee0\u002Fb38fd7ee04848bf3b058be7403438bd1.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_9","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F79e\u002Feaa\u002F9d8\u002F79eeaa9d8af5a288ad42bd9d63b5793a.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_10","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fcdc\u002F17e\u002F385\u002Fcdc17e38582dc67838b9abfb200d982e.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}}]},{"id":"story-996","author":{"logo":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fe63\u002F36d\u002Fa24\u002Fe6336da24460ab6b9fbc347d03eb263a.png","title":"Хабр","link":null},"title":"Здоровье айтишника","lang":"ru","startTime":"2025-03-17T10:22:00+03:00","finishTime":"2025-04-13T10:22:00+03:00","slides":[{"id":"story-996_1","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fb7c\u002F6de\u002F8ea\u002Fb7c6de8ea6789dbc30f071716172b6dd.jpg","button":null},{"id":"story-996_2","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F2e7\u002F88a\u002F0fe\u002F2e788a0fe61729ca8b23eb59069c844f.jpg","button":{"title":"Личный опыт","link":"https:\u002F\u002Fu.habr.com\u002Fzd-1","colorType":"light"}},{"id":"story-996_3","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fb93\u002F6f4\u002F256\u002Fb936f425653b84fa60ab00d09f78c543.jpg","button":{"title":"Как это было","link":"https:\u002F\u002Fu.habr.com\u002Fzd-2","colorType":"light"}},{"id":"story-996_4","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fc10\u002Fd14\u002Ff5a\u002Fc10d14f5a4859fe10baecbcc2bcb8828.jpg","button":{"title":"Шея в фокусе","link":"https:\u002F\u002Fu.habr.com\u002Fzd-3","colorType":"dark"}},{"id":"story-996_5","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F535\u002Fe1b\u002F77a\u002F535e1b77a9eb896262ad73321f2ad99f.jpg","button":{"title":"Фотоинструкция","link":"https:\u002F\u002Fu.habr.com\u002Fzd-4","colorType":"light"}},{"id":"story-996_6","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F569\u002Fc39\u002F49f\u002F569c3949f5b330ea85d4a1864f481c3d.jpg","button":{"title":"Сидите (не)правильно","link":"https:\u002F\u002Fu.habr.com\u002Fzd-5","colorType":"dark"}},{"id":"story-996_7","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F1f2\u002F1de\u002Fdbf\u002F1f21dedbf2902bc4061a75b839b63595.jpg","button":{"title":"Журнал изменений","link":"https:\u002F\u002Fu.habr.com\u002Fzd-6","colorType":"dark"}},{"id":"story-996_8","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F95a\u002F164\u002F21b\u002F95a16421badc3a9f1135309ab0c42c41.jpg","button":{"title":"Альтернатива","link":"https:\u002F\u002Fu.habr.com\u002Fzd-7","colorType":"light"}},{"id":"story-996_9","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F624\u002F027\u002F54d\u002F62402754d311798af44bcfe7f9abfedc.jpg","button":{"title":"Хроника поисков","link":"https:\u002F\u002Fu.habr.com\u002Fzd-8","colorType":"dark"}}]},{"id":"story-992","author":{"logo":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F3fe\u002F2fc\u002Fb05\u002F3fe2fcb05df852d7e1e00d44e54e39ae.png","title":"Сезоны Хабра","link":"https:\u002F\u002Fu.habr.com\u002Ffnstories"},"title":"Угадайте будущее в новом сезоне","lang":"ru","startTime":"2025-03-12T19:15:00+03:00","finishTime":"2025-03-31T23:56:00+03:00","slides":[{"id":"story-992_1","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fc56\u002Faf5\u002Fc43\u002Fc56af5c4377f7f7b94f7b6ad20fc92c3.png","button":{"title":"А что за сезон?","link":"https:\u002F\u002Fu.habr.com\u002Ffnstories","colorType":"light"}},{"id":"story-992_2","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F8fa\u002Fde7\u002F65d\u002F8fade765d99207f31c597283ae6ce912.png","button":{"title":"Какие темы нужны","link":"https:\u002F\u002Fu.habr.com\u002Ffnstories","colorType":"dark"}},{"id":"story-992_3","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F23e\u002F7b9\u002Fb24\u002F23e7b9b24cb056d1a42e8d31ccea16ce.png","button":{"title":"Сезон будущего ИИ","link":"https:\u002F\u002Fu.habr.com\u002Ffnstories","colorType":"dark"}},{"id":"story-992_4","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F27b\u002Fbfc\u002Fa18\u002F27bbfca18e656ee0122b5cb8eb2cb502.png","button":{"title":"Все правила сезона","link":"https:\u002F\u002Fu.habr.com\u002Ffnstories","colorType":"dark"}},{"id":"story-992_5","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F1e0\u002F6c6\u002Ff33\u002F1e06c6f33e703bbd2b2ae3baee3376fd.png","button":{"title":"Как участвовать","link":"https:\u002F\u002Fu.habr.com\u002Ffnstories","colorType":"dark"}}]},{"id":"story-990","author":{"logo":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F282\u002Fe80\u002Fbf1\u002F282e80bf1b73484126ed53c6f3e42692.png","title":"Aeza","link":"https:\u002F\u002Fu.habr.com\u002FI72qi"},"title":"С праздником весны!","lang":"ru","startTime":"2025-03-09T10:15:00+03:00","finishTime":"2025-03-30T23:59:00+03:00","slides":[{"id":"story-990_1","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F064\u002F9dd\u002Ff59\u002F0649ddf5949cae6c9342fb62034a36ac.png","button":null},{"id":"story-990_2","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F05f\u002F96b\u002F25e\u002F05f96b25e910c32256ee0b1916f21380.png","button":{"title":"Семейная история","link":"https:\u002F\u002Fu.habr.com\u002Fey2bY","colorType":"light"}},{"id":"story-990_3","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fcd1\u002Ff5d\u002F921\u002Fcd1f5d921bb9489ac11727272660bdb6.png","button":{"title":"Движущиеся картинки","link":"https:\u002F\u002Fu.habr.com\u002FWLKXU","colorType":"light"}},{"id":"story-990_4","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fb55\u002Fd45\u002Fec5\u002Fb55d45ec50e53275c60d16ea886a0672.png","button":{"title":"Личный опыт","link":"https:\u002F\u002Fu.habr.com\u002FSxrki","colorType":"light"}},{"id":"story-990_5","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Ffa7\u002F1ce\u002Ffca\u002Ffa71cefca5ed0a3fe8b50bd703b3605f.png","button":{"title":"Алгоритм","link":"https:\u002F\u002Fu.habr.com\u002Ftbz2p","colorType":"light"}},{"id":"story-990_6","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F435\u002F89d\u002Ff90\u002F43589df9018846cc6a8eed986226b252.png","button":{"title":"Выбрать сценарий","link":"https:\u002F\u002Fu.habr.com\u002F0RCPk","colorType":"light"}},{"id":"story-990_7","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F514\u002F5f8\u002F619\u002F5145f86194ad48dad48a846b42af0f93.png","button":{"title":"Jiraзамещение","link":"https:\u002F\u002Fu.habr.com\u002FEwhYq","colorType":"light"}},{"id":"story-990_8","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F439\u002Fa83\u002Fae7\u002F439a83ae78f7ef711e3b9bbed1ec26c5.png","button":{"title":"8 вещей","link":"https:\u002F\u002Fu.habr.com\u002FVTv2r","colorType":"light"}},{"id":"story-990_9","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F02d\u002F783\u002F2f7\u002F02d7832f7b1c95d88bff9f34209e204a.png","button":{"title":"Интерфейсы","link":"https:\u002F\u002Fu.habr.com\u002FUFOMZ","colorType":"light"}},{"id":"story-990_10","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F0cb\u002Ff7f\u002F0d9\u002F0cbf7f0d905d486ce4ff82bc939b21d5.png","button":{"title":"Стикеры ваши","link":"https:\u002F\u002Fu.habr.com\u002FoA1K7","colorType":"light"}}]},{"id":"story-984","author":{"logo":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F648\u002F61b\u002F9ae\u002F64861b9aecb7c474cd94063f98045541.png","title":"Хабр","link":null},"title":"Всегда котов!","lang":"ru","startTime":"2025-03-01T00:01:09+03:00","finishTime":"2025-03-23T16:21:00+03:00","slides":[{"id":"story-984_1","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fc06\u002Fc21\u002F93f\u002Fc06c2193ff34362ac2af782cf2571f55.png","button":null},{"id":"story-984_2","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fb68\u002F15f\u002F763\u002Fb6815f7630b9c015b1e67efb5bdf12d4.jpg","button":{"title":"Сделать purrrr","link":"https:\u002F\u002Fu.habr.com\u002Fj4DN1","colorType":"light"}},{"id":"story-984_3","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F550\u002F76e\u002Fd7a\u002F55076ed7a0954e243f944fc2f330623a.png","button":{"title":"Тыгыдык","link":"https:\u002F\u002Fu.habr.com\u002Fya360_kotov","colorType":"dark"}},{"id":"story-984_4","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F2fb\u002F23b\u002F06c\u002F2fb23b06cf294c2050104b2aef589788.jpg","button":{"title":"Исследование","link":"https:\u002F\u002Fu.habr.com\u002FbO3r0","colorType":"light"}},{"id":"story-984_5","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Ff50\u002F50f\u002F0ae\u002Ff5050f0aeea1335c4f0544c1863f8342.jpg","button":{"title":"Детали проекта","link":"https:\u002F\u002Fu.habr.com\u002FQJmhe","colorType":"light"}},{"id":"story-984_6","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F825\u002F3dd\u002F5f5\u002F8253dd5f5c19dd061578f1d09310a45f.jpg","button":{"title":"Эксперименты","link":"https:\u002F\u002Fu.habr.com\u002FVaOdo","colorType":"light"}},{"id":"story-984_7","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F3fb\u002Fc92\u002F0f9\u002F3fbc920f9ea81eca2c1c027ff77fc659.jpg","button":{"title":"Это не мем","link":"https:\u002F\u002Fu.habr.com\u002F0Wb3p","colorType":"light"}},{"id":"story-984_8","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F2b4\u002F794\u002Fc33\u002F2b4794c33844e60aad9468018fd132cd.jpg","button":{"title":"В засаде","link":"https:\u002F\u002Fu.habr.com\u002FnasCD","colorType":"dark"}}]}]},"technotext":{"years":[],"technotextDocForNominees":null,"technotextDocForWinners":null,"technotextInfo":{},"technotextInfoLoading":false,"technotextWinners":{},"technotextWinnersLoading":false},"userHubsContribution":{"contributionRefs":{"hubRefs":{},"hubIds":{}}},"userInvites":{"availableInvites":0,"usedInvitesIds":[],"usedInvitesRefs":{},"usedInvitesPagesCount":0,"unusedInvitesIds":[],"unusedInvitesRefs":{},"unusedInvitesPagesCount":0},"userVotes":{"karmaVotesList":[],"karmaVotesPagesCount":null,"karmaVotesListLoading":false,"commentsVotesList":[],"commentsVotesPagesCount":null,"commentsVotesListLoading":false,"postsVotesList":[],"postsVotesPagesCount":null,"postsVotesListLoading":false,"userVotesList":[],"userVotesPagesCount":null,"userVotesListLoading":false},"users":{"authorRefs":{},"authorIds":{},"pagesCount":{},"authorProfiles":{"surf_studio":{"alias":"Surf_Studio","badgets":[{"title":"Захабренный","description":"Пользователь с кармой \u003E0","url":null,"isRemovable":false},{"title":"Старожил","description":"Пользователь, зарегистрированный более 3-х лет назад, с кармой больше 50","url":null,"isRemovable":false},{"title":"Участник сезона Kubernetes","description":"За участие в сезоне Kubernetes","url":"https:\u002F\u002Fhabr.com\u002Fru\u002Fspecials\u002F708158\u002F","isRemovable":true}],"aboutHtml":"Мы создаем мобильные приложения и искусственный интеллект для крупных брендов. Главное для нас — человеческие отношения в команде и с заказчиком. Лучше всего разбираемся в интернет-магазинах, мобильных банках, современных медиа.\u003Cbr\u003E Делаем то, что любим, и любим то, что делаем.","contacts":[],"invitedBy":null,"careerProfile":null,"companies":{"pagesCount":1,"companyIds":["koshelek","surfstudio"],"companyRefs":{"koshelek":{"id":"5252","alias":"koshelek","titleHtml":"Кошелёк","descriptionHtml":"Создаём приложение, с которым покупают","imageUrl":"\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fcompany\u002Fe13\u002F96b\u002Fc7f\u002Fe1396bc7fa757275ff91ec75549b760f.png","relatedData":null,"statistics":{"subscribersCount":269,"rating":0,"invest":null},"commonHubs":[]},"surfstudio":{"id":"5760","alias":"surfstudio","titleHtml":"Surf","descriptionHtml":"Создаём веб- и мобильные приложения","imageUrl":"\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fcompany\u002Fcac\u002F579\u002F907\u002Fcac5799077a2883e001815819c2ccbac.jpg","relatedData":null,"statistics":{"subscribersCount":37557,"rating":138.19,"invest":null},"commonHubs":[]}}}}},"userHubs":{},"userInvitations":{},"authorFollowers":{},"authorFollowed":{},"userSpecialization":{},"karmaStats":[],"statistics":null,"isLoading":false,"authorFollowersLoading":false,"authorFollowedLoading":false,"userHubsLoading":false,"userInvitationsLoading":false,"route":{}},"viewport":{"prevScrollY":{},"scrollY":0,"width":0},"tracker":{"notificationsLoading":false,"notificationsList":[],"notificationsPageCount":0,"pendingMarkNotificationsRead":[],"publicationsLoading":true,"publicationsList":[],"publicationsPageCount":0,"pendingDeletePublications":false,"pendingMarkPublicationsRead":false},"events":{"eventRefs":{},"eventIds":[],"pagesCount":0,"categories":[],"cities":[],"actualEvents":null,"currentEvent":null,"eventsFilter":{"city":"all","timeStarted":null,"timeEnded":null}},"wysiwyg":{"WYSIWYGRulesRefs":null}};(function(){var s;(s=document.currentScript||document.scripts[document.scripts.length-1]).parentNode.removeChild(s);}());</script><script src="https://assets.habr.com/habr-web/js/chunk-vendors.3b11d41f.js" defer></script><script src="https://assets.habr.com/habr-web/js/app.7a97ea6d.js" defer></script></div>
    <div id="overlays"><!----><!--teleport anchor--><!----><!--teleport anchor--><!----><!--teleport anchor--><!----><!--teleport anchor--><!----><!--teleport anchor--><!----><!--teleport anchor--></div>
    
    
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-S28W1WC23F"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());
    </script>
  
  <script type="text/javascript" >
    (function(m,e,t,r,i,k,a){m[i]=m[i]||function(){(m[i].a=m[i].a||[]).push(arguments)};
    m[i].l=1*new Date();k=e.createElement(t),a=e.getElementsByTagName(t)[0],k.async=1,k.src=r,a.parentNode.insertBefore(k,a)})
    (window, document, "script", "https://mc.yandex.ru/metrika/tag.js", "ym");

  </script>
    <script type="text/javascript">
      window.addEventListener('load', function () {
        setTimeout(() => {
          const img = new Image();
          img.src = 'https://vk.com/rtrg?p=VK-RTRG-421343-57vKE';
        }, 0);
      });
    </script>
  
    </body>

    </html>
