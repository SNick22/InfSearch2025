<!DOCTYPE html>
<html lang="ru">

  <head>
    <title>Прокачиваем kotlin: используем AST лямбд в рантайме &#x2F; Хабр</title>
<meta property="fb:app_id" content="444736788986613">
<meta property="fb:pages" content="472597926099084">
<meta name="twitter:card" content="summary_large_image">
<meta name="twitter:site" content="@habr_com">
<meta property="og:site_name" content="Хабр">
<link href="https://habr.com/ru/rss/post/669694/?fl=ru" type="application/rss+xml" title rel="alternate" name="rss">
<link href="https://habr.com/ru/articles/669694/" rel="canonical" data-hid="e3fa780">
<link rel="image_src" href="https://habrastorage.org/getpro/habr/upload_files/22e/833/c6a/22e833c6a40bcd5697bf88b959708000.png" data-hid="2a79c45">
<link rel="amphtml" href="https://habr.com/ru/amp/publications/669694/">
<meta property="og:title" content="Прокачиваем kotlin: используем AST лямбд в рантайме">
<meta name="twitter:title" content="Прокачиваем kotlin: используем AST лямбд в рантайме">
<meta name="aiturec:title" content="Прокачиваем kotlin: используем AST лямбд в рантайме">
<meta name="description" content="Я слышал, ты любишь компилировать kotlin... На kotlin для работы с базами я использую библиотечку JOOQ . У неё хороший генератор кода и достаточно вменяемый синтаксис для составления запросов. Вот...">
<meta itemprop="description" content="Я слышал, ты любишь компилировать kotlin... На kotlin для работы с базами я использую библиотечку JOOQ . У неё хороший генератор кода и достаточно вменяемый синтаксис для составления запросов. Вот...">
<meta property="og:description" content="Я слышал, ты любишь компилировать kotlin... На kotlin для работы с базами я использую библиотечку JOOQ . У неё хороший генератор кода и достаточно вменяемый синтаксис для составления запросов. Вот...">
<meta name="twitter:description" content="Я слышал, ты любишь компилировать kotlin... На kotlin для работы с базами я использую библиотечку JOOQ . У неё хороший генератор кода и достаточно вменяемый синтаксис для составления запросов. Вот...">
<meta property="aiturec:description" content="Я слышал, ты любишь компилировать kotlin... На kotlin для работы с базами я использую библиотечку JOOQ . У неё хороший генератор кода и достаточно вменяемый синтаксис для составления запросов. Вот...">
<meta itemprop="image" content="https://habrastorage.org/getpro/habr/upload_files/22e/833/c6a/22e833c6a40bcd5697bf88b959708000.png">
<meta property="og:image" content="https://habrastorage.org/getpro/habr/upload_files/22e/833/c6a/22e833c6a40bcd5697bf88b959708000.png">
<meta property="og:image:width" content="1200">
<meta property="og:image:height" content="630">
<meta property="aiturec:image" content="https://habrastorage.org/getpro/habr/upload_files/22e/833/c6a/22e833c6a40bcd5697bf88b959708000.png">
<meta name="twitter:image" content="https://habrastorage.org/getpro/habr/upload_files/22e/833/c6a/22e833c6a40bcd5697bf88b959708000.png">
<meta property="vk:image" content="https://habrastorage.org/getpro/habr/upload_files/22e/833/c6a/22e833c6a40bcd5697bf88b959708000.png?format=vk">
<meta property="vk:image" content="https://habrastorage.org/getpro/habr/upload_files/22e/833/c6a/22e833c6a40bcd5697bf88b959708000.png?format=vk">
<meta property="aiturec:item_id" content="669694">
<meta property="aiturec:datetime" content="2022-06-06T09:13:28.000Z">
<meta content="https://habr.com/ru/articles/669694/" property="og:url">
<meta property="og:type" content="article">
<meta property="og:locale" content="ru_RU">
<meta property="og:image:width" content="1200">
<meta property="og:image:height" content="630">
<meta name="keywords" content="kotlin, linq, lambda, ksp, javassist, свобода, равенство, упячка">
<script type="application/ld+json" data-hid="1e0f0a2">{"@context":"http:\/\/schema.org","@type":"Article","mainEntityOfPage":{"@type":"WebPage","@id":"https:\/\/habr.com\/ru\/articles\/669694\/"},"headline":"Прокачиваем kotlin: используем AST лямбд в рантайме","datePublished":"2022-06-06T12:13:28+03:00","dateModified":"2022-06-06T12:58:15+03:00","author":{"@type":"Person","name":"Алексей Гришин"},"publisher":{"@type":"Organization","name":"Habr","logo":{"@type":"ImageObject","url":"https:\/\/habrastorage.org\/webt\/a_\/lk\/9m\/a_lk9mjkccjox-zccjrpfolmkmq.png"}},"description":"Я слышал, ты любишь компилировать kotlin...На kotlin для работы с базами я использую библиотечку JOOQ. У неё хороший генератор кода и достаточно вменяемый синтак...","url":"https:\/\/habr.com\/ru\/articles\/669694\/#post-content-body","about":["h_crazydev","h_java","h_compilers","h_kotlin","f_develop"],"image":["https:\/\/habr.com\/share\/publication\/669694\/ca8206cb66d07040baa02d09da6faa51\/","https:\/\/habrastorage.org\/getpro\/habr\/upload_files\/22e\/833\/c6a\/22e833c6a40bcd5697bf88b959708000.png","https:\/\/habrastorage.org\/getpro\/habr\/upload_files\/753\/ded\/c03\/753dedc03cf0f44e7a655bead2ecfd90.png","https:\/\/habrastorage.org\/getpro\/habr\/upload_files\/58b\/2f5\/5d9\/58b2f55d9593f1e28b7c3d5e8e02cef9.png"]}</script>
    <meta charset="UTF-8">
    <meta name="viewport"
      content="width=device-width,initial-scale=1.0,viewport-fit=cover,maximum-scale=1,user-scalable=0">
    <meta name="referrer" content="unsafe-url">
    <style>
      /* cyrillic-ext */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 400;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9E4kDNxMZdWfMOD5VvmojLazX3dGTP.woff2) format('woff2');
        unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;
      }

      /* cyrillic */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 400;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9E4kDNxMZdWfMOD5Vvk4jLazX3dGTP.woff2) format('woff2');
        unicode-range: U+0301, U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;
      }

      /* latin-ext */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 400;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9E4kDNxMZdWfMOD5VvmYjLazX3dGTP.woff2) format('woff2');
        unicode-range: U+0100-02AF, U+0304, U+0308, U+0329, U+1E00-1E9F, U+1EF2-1EFF, U+2020, U+20A0-20AB, U+20AD-20C0, U+2113, U+2C60-2C7F, U+A720-A7FF;
      }

      /* latin */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 400;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9E4kDNxMZdWfMOD5Vvl4jLazX3dA.woff2) format('woff2');
        unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+0304, U+0308, U+0329, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
      }

      /* cyrillic-ext */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 500;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnZKveSxf6Xl7Gl3LX.woff2) format('woff2');
        unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;
      }

      /* cyrillic */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 500;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnZKveQhf6Xl7Gl3LX.woff2) format('woff2');
        unicode-range: U+0301, U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;
      }

      /* latin-ext */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 500;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnZKveSBf6Xl7Gl3LX.woff2) format('woff2');
        unicode-range: U+0100-02AF, U+0304, U+0308, U+0329, U+1E00-1E9F, U+1EF2-1EFF, U+2020, U+20A0-20AB, U+20AD-20C0, U+2113, U+2C60-2C7F, U+A720-A7FF;
      }

      /* latin */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 500;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnZKveRhf6Xl7Glw.woff2) format('woff2');
        unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+0304, U+0308, U+0329, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
      }

      /* cyrillic-ext */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 700;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnLK3eSxf6Xl7Gl3LX.woff2) format('woff2');
        unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;
      }

      /* cyrillic */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 700;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnLK3eQhf6Xl7Gl3LX.woff2) format('woff2');
        unicode-range: U+0301, U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;
      }

      /* latin-ext */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 700;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnLK3eSBf6Xl7Gl3LX.woff2) format('woff2');
        unicode-range: U+0100-02AF, U+0304, U+0308, U+0329, U+1E00-1E9F, U+1EF2-1EFF, U+2020, U+20A0-20AB, U+20AD-20C0, U+2113, U+2C60-2C7F, U+A720-A7FF;
      }

      /* latin */
      @font-face {
        font-family: 'Fira Sans';
        font-style: normal;
        font-weight: 700;
        font-display: swap;
        src: url(https://fonts.gstatic.com/s/firasans/v17/va9B4kDNxMZdWfMOD5VnLK3eRhf6Xl7Glw.woff2) format('woff2');
        unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+0304, U+0308, U+0329, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
      }
    </style>
    <link rel="preload" href="https://assets.habr.com/habr-web/css/theme/light-v1.css" as="style" media="(prefers-color-scheme: light)" /><link rel="preload" href="https://assets.habr.com/habr-web/css/theme/dark-v1.css" as="style" media="(prefers-color-scheme: dark)" /><link id="light-colors" rel="stylesheet" href="https://assets.habr.com/habr-web/css/theme/light-v1.css" media="(prefers-color-scheme: light)" /><link id="dark-colors" rel="stylesheet" href="https://assets.habr.com/habr-web/css/theme/dark-v1.css" media="(prefers-color-scheme: dark)" />
    <script>window.i18nFetch = new Promise((res, rej) => {
          const xhr = new XMLHttpRequest();
          xhr.open('GET', '/js/i18n/ru-compiled.35b2fec11bb79a62419ab67779c2dd82.json');
          xhr.responseType = 'json';
          xhr.onload = function(e) {
            if (this.status === 200) {
              res({ru: xhr.response});
            } else {
              rej(e);
            }
          };
          xhr.send();
        });</script>
    <style>
      .grecaptcha-badge {
        visibility: hidden;
      }
    </style>
    <meta name="habr-version" content="2.233.0">
    
    <meta name="apple-mobile-web-app-status-bar-style" content="#303b44">
    <meta name="msapplication-TileColor" content="#629FBC">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="mobile-web-app-capable" content="yes">
    <link rel="shortcut icon" type="image/png" sizes="16x16" href="https://assets.habr.com/habr-web/img/favicons/favicon-16.png">
    <link rel="shortcut icon" type="image/png" sizes="32x32" href="https://assets.habr.com/habr-web/img/favicons/favicon-32.png">
    <link rel="apple-touch-icon" type="image/png" sizes="76x76" href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-76.png">
    <link rel="apple-touch-icon" type="image/png" sizes="120x120" href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-120.png">
    <link rel="apple-touch-icon" type="image/png" sizes="152x152" href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-152.png">
    <link rel="apple-touch-icon" type="image/png" sizes="180x180" href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-180.png">
    <link rel="apple-touch-icon" type="image/png" sizes="256x256" href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-256.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 320px) and (device-height: 568px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1136x640.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 375px) and (device-height: 812px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2436x1125.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1792x828.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_828x1792.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 375px) and (device-height: 667px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1334x750.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1242x2668.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 414px) and (device-height: 736px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2208x1242.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 375px) and (device-height: 812px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1125x2436.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 414px) and (device-height: 736px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1242x2208.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 1024px) and (device-height: 1366px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2732x2048.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2688x1242.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 834px) and (device-height: 1112px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2224x1668.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 375px) and (device-height: 667px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_750x1334.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 1024px) and (device-height: 1366px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2048x2732.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 834px) and (device-height: 1194px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2388x1668.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 834px) and (device-height: 1112px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1668x2224.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 320px) and (device-height: 568px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_640x1136.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 834px) and (device-height: 1194px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1668x2388.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 768px) and (device-height: 1024px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_2048x1536.png">
    <link rel="apple-touch-startup-image"
      media="screen and (device-width: 768px) and (device-height: 1024px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
      href="https://assets.habr.com/habr-web/img/splashes/splash_1536x2048.png">
    <link rel="mask-icon" color="#77a2b6" href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-120.svg">
    <link crossorigin="use-credentials" href="/manifest.webmanifest" rel="manifest">
    <script async src="https://unpkg.com/pwacompat" crossorigin="anonymous"></script>
    <script>window.yaContextCb = window.yaContextCb || []</script>
    <script src="https://yandex.ru/ads/system/context.js" async></script>
  <link rel="preload" href="https://assets.habr.com/habr-web/css/chunk-vendors.04465f7c.css" as="style"><link rel="preload" href="https://assets.habr.com/habr-web/js/chunk-vendors.3b11d41f.js" as="script"><link rel="preload" href="https://assets.habr.com/habr-web/css/app.20959a76.css" as="style"><link rel="preload" href="https://assets.habr.com/habr-web/js/app.7a97ea6d.js" as="script"><link rel="stylesheet" href="https://assets.habr.com/habr-web/css/chunk-vendors.04465f7c.css"><link rel="stylesheet" href="https://assets.habr.com/habr-web/css/app.20959a76.css"></head>
  <body>
    
    <div id="mount"><div id="app" data-async-called="true"><div class="tm-layout__wrapper"><!--[--><!----><div></div><div class="tm-feature tm-feature"><!----></div><header class="tm-header" data-test-id="header"><div class="tm-page-width"><!--[--><div class="tm-header__container"><div class="tm-header__burger-nav" data-test-id="burger-nav"><button class="tm-header__button tm-header__button_burger" type="button"><svg class="tm-svg-img tm-header__icon tm-header__icon-burger" height="16" width="16"><title>Меню</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#header-burger"></use></svg></button></div><span class="tm-header__logo-wrap"><a class="tm-header__logo tm-header__logo_hl-ru tm-header__logo" href="/ru/"><svg class="tm-svg-img tm-header__icon" height="16" width="16"><title>Хабр</title><use xlink:href="/img/habr-logo-ru.svg#logo"></use></svg></a><span style="display:none;" class="tm-header__beta-sign">β</span></span><!----><div class="tm-header-user-menu tm-header_user-menu"><a href="/ru/search/" class="tm-header-user-menu__item tm-header-user-menu__search" data-test-id="search-button"><svg class="tm-svg-img tm-header-user-menu__icon tm-header-user-menu__icon_search" height="24" width="24"><title>Поиск</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#search"></use></svg></a><!----><!----><div class="tm-header-user-menu__item tm-header-user-menu__write"><div><svg class="tm-svg-img tm-header-user-menu__icon tm-header-user-menu__icon_write" height="24" width="24"><title>Написать публикацию</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#write"></use></svg></div><!----></div><!--[--><div class="tm-header-user-menu__item"><button class="tm-header-user-menu__toggle" data-test-id="user-menu-settings"><svg class="tm-svg-img tm-header-user-menu__icon" height="24" width="24"><title>Настройки</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#page-settings"></use></svg></button></div><a href="https://habr.com/kek/v1/auth/habrahabr/?back=/ru/articles/669694/&amp;hl=ru" rel="nofollow" class="tm-header-user-menu__item"><!--[--><button class="btn btn_solid btn_small tm-header-user-menu__login" type="button"><!--[-->Войти<!--]--></button><!--]--></a><!--]--><!----><!--teleport start--><!--teleport end--><!----></div></div><!--]--></div></header><div class="tm-layout"><div class="tm-page-progress-bar"></div><!----><!----><div class="tm-page-width"><!--[--><!--]--></div><main class="tm-layout__container"><div class="tm-page" hl="ru" data-async-called="true" style="--0c809c5a:16px;--a086013e:100%;--7c457026:0;"><div class="tm-page-width"><!--[--><!----><div class="tm-page__wrapper"><div class="tm-page__main_has-sidebar tm-page__main"><div class="pull-down"><!----><div class="pull-down__header" style="height:0px;"><div class="pull-down__content" style="bottom:10px;"><svg class="tm-svg-img pull-down__icon pull-down__arrow" height="24" width="24"><title>Обновить</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#pull-arrow"></use></svg></div></div><!--[--><!--[--><div class="banner-wrapper narrow" style="--467224fc:100px;--58ff5eba:auto;" data-v-ad758baa><!--[--><div class="placeholder-wrapper placeholder" data-v-ad758baa><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><div class="adfox-banner-placeholder narrow" data-v-12f7bcca><div class="image loads" data-v-12f7bcca></div><div class="lines" data-v-12f7bcca><div class="line loads" data-v-12f7bcca></div><div class="line loads" data-v-12f7bcca></div><div class="line loads" data-v-12f7bcca></div></div></div><!----></div><div id="adfox_169815559787254866" class="tm-adfox-banner" data-v-ad758baa></div><!--]--></div><div class="tm-article-presenter"><!--[--><!--]--><div class="tm-article-presenter__body" data-test-id="article-body"><div class="tm-misprint-area"><div class="tm-misprint-area__wrapper"><!--[--><article class="tm-article-presenter__content tm-article-presenter__content_narrow"><!--[--><div class="tm-article-presenter__header"><!--[--><!--]--><div class="tm-article-snippet tm-article-snippet tm-article-presenter__snippet"><!--[--><!--]--><div class="tm-article-snippet__meta-container"><div class="tm-article-snippet__meta"><span class="tm-user-info tm-article-snippet__author"><a href="/ru/users/GRaAL/" class="tm-user-info__userpic" data-test-id="user-info-pic" title="GRaAL"><div class="tm-entity-image"><img alt="" class="tm-entity-image__pic" height="32" src="//habrastorage.org/getpro/habr/avatars/481/3a3/311/4813a3311a12b5573dd8508ddc311f4d.gif" width="32"></div></a><span class="tm-user-info__user tm-user-info__user_appearance-default" data-test-id="user-info-description"><a href="/ru/users/GRaAL/" class="tm-user-info__username">GRaAL <!----></a><!--[--><span class="tm-article-datetime-published"><time datetime="2022-06-06T09:13:28.000Z" title="2022-06-06, 12:13">6  июн  2022 в 12:13</time></span><!--]--></span></span></div><!----></div><h1 class="tm-title tm-title_h1" lang="ru" data-test-id="articleTitle"><span>Прокачиваем kotlin: используем AST лямбд в рантайме</span></h1><div class="tm-article-snippet__stats" data-test-id="articleStats"><!----><div class="tm-article-reading-time"><span class="tm-svg-icon__wrapper tm-article-reading-time__icon"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Время на прочтение</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#clock"></use></svg></span><span class="tm-article-reading-time__label">18 мин</span></div><span class="tm-icon-counter tm-data-icons__item"><svg class="tm-svg-img tm-icon-counter__icon" height="24" width="24"><title>Количество просмотров</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-views"></use></svg><span class="tm-icon-counter__value" title="3691">3.7K</span></span></div><div class="tm-publication-hubs__container" data-test-id="articleHubsList"><div class="tm-publication-hubs"><!--[--><span class="tm-publication-hub__link-container"><a href="/ru/hubs/crazydev/" class="tm-publication-hub__link"><!--[--><span>Ненормальное программирование</span><span class="tm-article-snippet__profiled-hub" title="Профильный хаб">*</span><!--]--></a></span><span class="tm-publication-hub__link-container"><a href="/ru/hubs/java/" class="tm-publication-hub__link"><!--[--><span>Java</span><span class="tm-article-snippet__profiled-hub" title="Профильный хаб">*</span><!--]--></a></span><span class="tm-publication-hub__link-container"><a href="/ru/hubs/compilers/" class="tm-publication-hub__link"><!--[--><span>Компиляторы</span><span class="tm-article-snippet__profiled-hub" title="Профильный хаб">*</span><!--]--></a></span><span class="tm-publication-hub__link-container"><a href="/ru/hubs/kotlin/" class="tm-publication-hub__link"><!--[--><span>Kotlin</span><span class="tm-article-snippet__profiled-hub" title="Профильный хаб">*</span><!--]--></a></span><!--]--></div></div><!----><!----><!----></div></div><!--[--><!----><div class="tm-article-body" data-gallery-root lang="ru"><div><!--[--><!--]--></div><div id="post-content-body"><div><div class="article-formatted-body article-formatted-body article-formatted-body_version-2"><div xmlns="http://www.w3.org/1999/xhtml"><figure class="full-width "><img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/22e/833/c6a/22e833c6a40bcd5697bf88b959708000.png" alt="Я слышал, ты любишь компилировать kotlin..." title="Я слышал, ты любишь компилировать kotlin..." width="1882" height="1191" data-src="https://habrastorage.org/getpro/habr/upload_files/22e/833/c6a/22e833c6a40bcd5697bf88b959708000.png"/><figcaption>Я слышал, ты любишь компилировать kotlin...</figcaption></figure><p>На kotlin для работы с базами я использую библиотечку <a href="https://jooq.org" rel="noopener noreferrer nofollow">JOOQ</a>. У неё хороший генератор кода и достаточно вменяемый синтаксис для составления запросов. Вот например:</p><pre><code class="kotlin">dsl.selectFrom(Tables.ANIMALS)
   .where(Tables.ANIMALS.POPULATION.greaterThan(1000))
   .orderBy(Tables.ANIMALS.NAME)
   .map { "${it.name}: ${it.population}" }
   .toList()</code></pre><p>Можно ли лучше? Например, как это сделано в C# LINQ? </p><p>Да, можно. Вот рабочий код:</p><pre><code class="kotlin">dsl.selectQueryableFrom(Tables.ANIMALS)
   .filter { it.population &gt; 1000 }
   .sortedBy { it.name }
   .map { "${it.name}: ${it.population}" }
   .toList()</code></pre><p>А вот SQL запрос, который отправляется в базу в результате этого вызова:</p><pre><code class="sql">select (("ANIMALS"."NAME" || ': ') || cast("ANIMALS"."POPULATION" as varchar)) "col0" 
  from "ANIMALS" 
  where "ANIMALS"."POPULATION" &gt; 1000 
  order by "ANIMALS"."NAME" asc</code></pre><p>Дальше я расскажу, как это работает.</p><h3>Как это выглядит и работает в C#</h3><p>Вот простой пример кода. Есть 2 функции, одна принимает <code>Func</code>, другая - <code>Expression</code>. В обе можно передать одну и ту же лямбду.</p><pre><code class="cs">internal class Program
{
 static void ReceiveLambda(Func&lt;int, int&gt; lambda)
 {
   Console.WriteLine(lambda(2));    // (1)
   Console.WriteLine(lambda);       // (2)
 }

 static void ReceiveExpression(Expression&lt;Func&lt;int, int&gt;&gt; lambda)
 {
   Console.WriteLine(lambda.Compile()(2));  // (1)
   Console.WriteLine(lambda);               // (2)
 }

 public static void Main(string[] args)
 {
   ReceiveLambda(it =&gt; it * 2);
   ReceiveExpression(it =&gt; it * 2);
 }
}</code></pre><p>Если переданную лямбду просто выполнить (строчки помеченные как <em>(1)</em>), то результат будет одинаковым - выведется 4.<br/>Но если вывести саму лямбду (строчки помеченные как <em>(2)</em>), то результат будет отличаться. Метод, принимающий <code>Func</code>, выведет</p><p><code>System.Func`2[System.Int32,System.Int32]</code></p><p>А метод, принимающий <code>Expression</code>, выведет:</p><p><code>it =&gt; (it * 2)</code></p><p>И вот как это выглядит в отладчике:</p><figure class="full-width "><img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/753/ded/c03/753dedc03cf0f44e7a655bead2ecfd90.png" width="649" height="529" data-src="https://habrastorage.org/getpro/habr/upload_files/753/ded/c03/753dedc03cf0f44e7a655bead2ecfd90.png"/><figcaption></figcaption></figure><p>Компилятор C# знает, что если метод принимает Expression, то надо передать в него не просто исполняемую функцию, а <abbr title="Abstract Syntax Tree" type="abbr">AST</abbr>. Это позволяет во время исполнения анализировать используемую лямбду, брать из неё значения, имена вызываемых методов и т.д. Эта особенность позволяет писать код вроде:</p><pre><code class="cs">//Querying with LINQ to Entities 
using (var context = new SchoolDBEntities())
{
    var query = context.Students
                       .where(s =&gt; s.StudentName == "Bill")
                       .FirstOrDefault&lt;Student&gt;();
}</code></pre><p>И дальше его можно как выполнить над коллекцией в памяти, так и преобразовать в SQL.</p><p>Можно почитать об этом тут на хабре: <a href="https://habr.com/ru/post/256821/" rel="noopener noreferrer nofollow">https://habr.com/ru/post/256821/</a></p><p>В Kotlin/JVM такого нет. Лямбды при компиляции превращаются в анонимные классы или статические методы, в рантайме их изначальное содержимое неизвестно. Да, в теории мы можем посмотреть в байткод, но байткод может сильно отличаться от исходного листинга в силу оптимизаций.</p><p>Например, вот такое выражение на kotlin:</p><pre><code class="kotlin">val a = maxOf(2, 3)</code></pre><p>При компиляции в байткод и де-компиляции обратно в java (для наглядности) превратится вот в такое:</p><pre><code class="java">byte var2 = 2;
byte var3 = 3;
final int a = Math.max(var2, var3);</code></pre><p>Исходное название функции “потерялось”, т.к. функция <code>maxOf</code> объявлена как <code>inline</code>.</p><p>А такое выражение:</p><pre><code class="kotlin">val b = if (arrayOf(3).isEmpty()) 5 else 6</code></pre><p>Превращается вот в такое:</p><pre><code class="java">Integer[] var2 = new Integer[]{3};
final int b = var2.length == 0 ? 5 : 6;</code></pre><p>Да, эти примеры искусственны, но в общем случае мы не можем быть уверены, что из байткода мы 100% восстановим то, что было написано в kotlin коде. А это именно то, что программист видит перед собой, и именно это он ожидает увидеть в AST.</p><p>Значит, нужно:</p><ol><li><p>Достать AST из лямбды на этапе компиляции</p></li><li><p>Подсунуть этот AST в код, однозначно ассоциировав с конкретной лямбдой</p></li></ol><p>Начнём по порядку.</p><h3>Извлечение AST из исходного кода</h3><p>Беглый гуглёж нашёл две наиболее часто упоминаемых библиотеки.<br/>Одна из них - <a href="https://github.com/cretz/kastree" rel="noopener noreferrer nofollow"><u>kastree</u></a> - заброшена. Вторая - <a href="https://github.com/kotlinx/ast" rel="noopener noreferrer nofollow"><u>ast</u></a> -  выглядит живой. При подаче на вход простого kotlin кода получаем что-то такое:</p><pre><code class="kotlin">fun main() {
   KotlinGrammarAntlrKotlinParser.parseKotlinFile(AstSource.String("", """
       val d = { it &gt; 5 }
   """.trimIndent())).print()
}</code></pre><details class="spoiler"><summary>Результат</summary><div class="spoiler__content"><pre><code>kotlinFile
  packageHeader
  importList
  topLevelObject
    declaration
      propertyDeclaration
        VAL &gt;&gt;&gt;val&lt;&lt;&lt; (DEFAULT_TOKEN_CHANNEL)
        WS &gt;&gt;&gt; &lt;&lt;&lt; (HIDDEN)
        variableDeclaration
          simpleIdentifier
            Identifier &gt;&gt;&gt;d&lt;&lt;&lt; (DEFAULT_TOKEN_CHANNEL)
        WS &gt;&gt;&gt; &lt;&lt;&lt; (HIDDEN)
        ASSIGNMENT &gt;&gt;&gt;=&lt;&lt;&lt; (DEFAULT_TOKEN_CHANNEL)
        WS &gt;&gt;&gt; &lt;&lt;&lt; (HIDDEN)
        expression
          disjunction
            conjunction
              equality
                comparison
                  genericCallLikeComparison
                    infixOperation
                      elvisExpression
                        infixFunctionCall
                          rangeExpression
                            additiveExpression
                              multiplicativeExpression
                                asExpression
                                  prefixUnaryExpression
                                    postfixUnaryExpression
                                      primaryExpression
                                        functionLiteral
                                          lambdaLiteral
                                            LCURL &gt;&gt;&gt;{&lt;&lt;&lt; (DEFAULT_TOKEN_CHANNEL)
                                            WS &gt;&gt;&gt; &lt;&lt;&lt; (HIDDEN)
                                            statements
                                              statement
                                                expression
                                                  disjunction
                                                    conjunction
                                                      equality
                                                        comparison
                                                          genericCallLikeComparison
                                                            infixOperation
                                                              elvisExpression
                                                                infixFunctionCall
                                                                  rangeExpression
                                                                    additiveExpression
                                                                      multiplicativeExpression
                                                                        asExpression
                                                                          prefixUnaryExpression
                                                                            postfixUnaryExpression
                                                                              primaryExpression
                                                                                simpleIdentifier
                                                                                  Identifier &gt;&gt;&gt;it&lt;&lt;&lt; (DEFAULT_TOKEN_CHANNEL)
                                                          WS &gt;&gt;&gt; &lt;&lt;&lt; (HIDDEN)
                                                          comparisonOperator
                                                            RANGLE &gt;&gt;&gt;&gt;&lt;&lt;&lt; (DEFAULT_TOKEN_CHANNEL)
                                                          WS &gt;&gt;&gt; &lt;&lt;&lt; (HIDDEN)
                                                          genericCallLikeComparison
                                                            infixOperation
                                                              elvisExpression
                                                                infixFunctionCall
                                                                  rangeExpression
                                                                    additiveExpression
                                                                      multiplicativeExpression
                                                                        asExpression
                                                                          prefixUnaryExpression
                                                                            postfixUnaryExpression
                                                                              primaryExpression
                                                                                literalConstant
                                                                                  IntegerLiteral &gt;&gt;&gt;5&lt;&lt;&lt; (DEFAULT_TOKEN_CHANNEL)
                                            WS &gt;&gt;&gt; &lt;&lt;&lt; (HIDDEN)
                                            RCURL &gt;&gt;&gt;}&lt;&lt;&lt; (DEFAULT_TOKEN_CHANNEL)
    semis
      EOF &gt;&gt;&gt;&lt;EOF&gt;&lt;&lt;&lt; (DEFAULT_TOKEN_CHANNEL)
  EOF &gt;&gt;&gt;&lt;EOF&gt;&lt;&lt;&lt; (DEFAULT_TOKEN_CHANNEL)</code></pre><p></p></div></details><p>Многословно, но разобраться можно. Главное, что лямбды хорошо выделяются.</p><p>В теории, можно было бы использовать это дерево как есть. Но мне оно показалось слишком многословным и сложным. Особенно если потом его в рантайме пытаться разобрать. Хорошо бы вот такая конструкция превращалась в дерево из 3х узлов, как в C#, а не 300.</p><p>Потратив некоторое время на упрощатор, получилось превращать простые лямбды в такие вот деревья.</p><pre><code>Greater(
   LambdaArgument(number=0), 
   Value(value=5)
)
</code></pre><p>Казалось бы, задача решена? Не совсем. Что если нам в лямбдах попадаются:</p><ul><li><p>константы</p></li><li><p>локальные переменные</p></li><li><p>приватные поля</p></li><li><p>конструкторы классов?</p></li></ul><p>Например, вот так:</p><pre><code class="kotlin">val one = 1
val d = { it &gt; one }
</code></pre><pre><code>Greater(
   LambdaArgument(number=0),
   Identifier(name=one)
)
</code></pre><p>Когда мы находимся на этапе парсинга кода, то мы, увы, не имеем доступа к рефлексии или вообще какой бы то ни было модели исполняемого кода. У нас есть только имя, а что оно означает - неизвестно. Если бы мы были внутри компилятора, то наверное у нас эта информация была бы. Но мы пока снаружи.</p><p>Пока что придётся вставлять это всё как идентификаторы без конкретного смысла. Вернёмся к этой проблеме позже. А пока поймём, как нам эту информацию сохранить на этапе компиляции и использовать в рантайме.</p><p>В идеале нам нужно сделать так, чтобы вместо кода</p><p><code>filter { it &gt; 5 }</code></p><p>Стало</p><p><code>filter({it &gt; 5} withExpression Greater(LambdaArgument(0), Value(5)))</code></p><h3>Runtime. Попытка 1 (через KSP и ориентирование по именам классов)</h3><p>Гуглёж по тому, как встроиться в процесс компиляции, приводит нас к kapt, а оттуда, через уведомление об устаревании этого способа, к KSP. Про него есть <a href="https://habr.com/ru/post/582530/" rel="noopener noreferrer nofollow"><u>хорошая статья</u></a> тут на хабре.</p><p>Сначала всё хорошо - можно получить информацию о классах, сгенерировать свои и подсунуть. Поддерживается инкрементальная компиляция, т.е. если kotlin пересобрал 1 файл, то и нам он закинет 1 файл на обработку.</p><p>Проблема в том, что таким образом можно создавать новые файлы, но нельзя менять существующие. То есть первоначальная цель недостижима. Что можно было попробовать сделать - это сохранить AST отдельно. А адресовать с помощью имени класса - как мы видим из байткода, все лямбды превращаются в классы с уникальными именами. А имена у них генерируются по некоему правилу, которое можно воссоздать.</p><p>Таким образом я написал реализацию <code>SymbolProcessor</code> для KSP, которая:</p><ol><li><p>Для каждого source файла, который надо обработать, генерирует отдельный класс, сопоставляющий класс лямбды и выражение:</p></li></ol><pre><code class="kotlin">@LambdaExpressionInitializer class `io_github_kotlinq_processortest`: Initializer {
   override fun initialize(e: Expressions) {
      e.registerFactory("io.github.kotlinq.processor.A\$qso\$1") { Greater(LambdaArgument(0),Identifier("""r1""") ) }
      e.registerFactory("io.github.kotlinq.processor.A\$qso\$2") {  Plus(Plus(LambdaArgument(0),LambdaArgument(1)),Identifier("""r2""") ) }
      e.registerFactory("io.github.kotlinq.processor.A\$stream\$1") {  Greater(LambdaArgument(0),Plus(Identifier("""r2""") ,Value(2))) }
   }
}
</code></pre><ol start="2"><li><p>Чтобы классы нашлись в рантайме, когда надо, так же генерирую <code>META-INF/services/&lt;мой интерфейс&gt;</code>, где перечисляю все сгенерированные файлы.</p></li><li><p>В рантайме я использую <code>ServiceLoader</code>, чтобы получить все реализации моего интерфейса. Про этот механизм в java тоже были статьи на хабре: <a href="https://habr.com/ru/post/118488/" rel="noopener noreferrer nofollow">https://habr.com/ru/post/118488/</a></p></li></ol><pre><code class="kotlin">object Expressions {

	fun registerFactory(className: String, expressionFactory: ExpressionFactory) { .. }

	internal fun getExpression(className: String): Node {
	   return expressions[className]!!.invoke()
	}

	init {
	   for (initializer in ServiceLoader.load(Initializer::class.java)) {
		   initializer.initialize(this)
	   }
	}
}</code></pre><p>Теперь, после компиляции, можно для переданной лямбды получить соответствующее выражение (ну или ошибку, если что-то пошло не так)</p><pre><code class="kotlin">fun filter(predicate: (T) -&gt; Boolean) {
    val expression: Node = Expressions.getExpression(predicate.className)
    println(expression)
}</code></pre><p>И это работает! Пока в лямбдах не появляются ссылки на константы, поля, методы, конструкторы - и иные объекты языка.</p><p>Для проверок я собрал вот такой вот “тестовый стенд”:</p><pre><code class="kotlin">const val A = "top level const"
val B get() = "top level prop"
private val C = "top level const/prop"
var D = "top level mutable prop"
fun E(): String { return "top level fun"}

@EmbedLambdaExpressions
class ClosureExample {
   fun getExpression(): Node {
       val R = "local val"
       var S = "local var"
       fun T(): String = "local fun"
       return lambdaAsIs({
           "test" in listOf(A, B, C, D, E(), F, G, H, I, J(), K(), L, L(), M(), N, O, P(), Q(), R, S, T(), ClosureExample2.U, ClosureExample3.V)
       }).expression()
   }
   companion object L {
       val F = "companion object val"
       const val G = "companion object const"
       val H get() = "companion object prop"
       var I: String get() = "companion object mutable prop"
           set(_) {TODO()}
       fun J(): String = "companion object fun"
       @JvmStatic fun K(): String = "static fun"
       operator fun invoke() = "companion object invoke"
       override fun toString(): String { return "companion object instance" }
   }
   private fun M() = "private class function"
   protected val N = "protected class val"
   internal val O get() = "internal class prop"
   inline fun P() = "inline class function"
   inner class Q { override fun toString(): String = "inner class instance" }
   fun &lt;L&gt; lambdaAsIs(l: L) = l
}
class ClosureExample2 { companion object { val U = "another class no-named companion object val" } }
object ClosureExample3 { val V = "top-level object val" }
</code></pre><p>Тут все способы сослаться на какое-то значение, которое я смог придумать. Для каждого случая хочется получить или конкретное значение (константы), или полные имена (методы, конструкторы) для дальнейшей обработки.</p><p>Первая версия, само собой, проверку не проходила. Надо было думать как быть.</p><h3>Runtime. Попытка 2 (KSP + javassist)</h3><p>Вот у нас есть лямбда:</p><pre><code class="kotlin">filter { it &gt; someValue }</code></pre><p>Нам нужно в рантайме понять, что такое <code>someValue</code>, и сопоставить с нашей лямбдой и с именем <code>someValue</code>. Т.е. сделать что-то вроде:</p><pre><code class="kotlin">Expressions.setArgument("ClosureExample$getExpression$1", "someValue", someValue)
filter {it &gt; someValue}</code></pre><p>Аналогично с именами методов и конструкторов, только там вставлять не само значение, а ссылку</p><pre><code class="kotlin">Expressions.setArgument("ClosureExample$getExpression$1", "someFn", ::someFn)</code></pre><p>Но для этого надо как-то поменять исходный код или байт код. Исходный код с помощью KSP менять не получится. А после компиляции поменять байт код можно?</p><p>Да. Для этого есть разные инструменты. Я воспользовался решением <a href="https://www.javassist.org/" rel="noopener noreferrer nofollow">javassist</a>. И для него, что характерно, тоже есть <a href="https://habr.com/ru/post/664818/" rel="noopener noreferrer nofollow"><u>статья на хабре</u></a>).</p><p>Обработчик я добавил в билд отдельной задачей:</p><pre><code class="kotlin">task("kotlinqPostProcess", JavaExec::class) {
   group = "other"
   dependsOn("kspKotlin")
   mainClass.set("io.github.kotlinq.processor.PostProcessor")
   classpath = project.sourceSets.getAt("main").runtimeClasspath
}
tasks.build.get().dependsOn(“kotlinqPostProcess”)
</code></pre><p>Сам <code>PostProcessor</code> проходит по нужным <code>class</code> файлам, снова ищет лямбды (которые на этом этапе уже превратились в классы с методом <code>invoke</code>), и дальше пытается в их теле найти ссылки на методы, переменные, константы и прочее. А потом перезаписывает <code>class</code> файл в то же место.</p><p>И вот тут пришлось весьма попотеть, чтобы покрыть все случаи моего тестового стенда. Например, что происходит, если лямбда вызывает приватный метод?</p><pre><code class="kotlin">class ClosureExample {
   fun getExpression(): Node {
       return lambdaAsIs({ M() }).expression()
   }
   private fun M() = "private class function"
}
</code></pre><p>При анализе байт-кода выясняется, что вызывается некий метод <code>access$M</code>.</p><pre><code>   L0
    LINENUMBER 20 L0
    ALOAD 0
    GETFIELD io/github/kotlinq/expression/ClosureExample$getExpression$2.this$0 : Lio/github/kotlinq/expression/ClosureExample;
    INVOKESTATIC io/github/kotlinq/expression/ClosureExample.access$M (Lio/github/kotlinq/expression/ClosureExample;)Ljava/lang/String;
</code></pre><p>А что это за метод?</p><pre><code>  public final static synthetic access$M(Lio/github/kotlinq/expression/ClosureExample;)Ljava/lang/String;
   L0
    LINENUMBER 14 L0
    ALOAD 0
    INVOKESPECIAL io/github/kotlinq/expression/ClosureExample.M ()Ljava/lang/String;
    ARETURN
   L1
    LOCALVARIABLE $this Lio/github/kotlinq/expression/ClosureExample; L0 L1 0
    MAXSTACK = 1
    MAXLOCALS = 1
</code></pre><p>А это такой секретный публичный метод, который можно вызвать из другого класса (ведь лямбда после компиляции превратилась в другой класс, и просто так приватные методы изначального класса вызывать не может). Приходится учитывать такой вариант наименования.</p><p>А вот это что такое? Access понятно, а что за <code>$p</code> в конце?</p><pre><code>   L0
    LINENUMBER 20 L0
    INVOKESTATIC io/github/kotlinq/expression/ClosureExampleKt.access$getC$p ()Ljava/lang/String;
   L1
    ARETURN
</code></pre><p>А это приватное поле объявленное вне класса, на высшем уровне.</p><pre><code class="kotlin">private val C = "top level const/prop"</code></pre><p>А вот у нас два локальных значения:</p><pre><code class="kotlin">val R = "local val"
var S = "local var"
return lambdaAsIs { listOf(S, R) }</code></pre><p>Это превратится в класс, как мы уже знаем, и в него передадутся указанные значения. Сигнатура у этого класса будет примерно таким:</p><pre><code>final class io/github/kotlinq/expression/ClosureExample$getExpression$2 extends kotlin/jvm/internal/Lambda implements kotlin/jvm/functions/Function0 {

public final invoke()Ljava/util/List; { ... }

  // access flags 0x1010
  final synthetic Lkotlin/jvm/internal/Ref$ObjectRef; $S

  // access flags 0x1010
  final synthetic Ljava/lang/String; $R
}
</code></pre><p>Что ж, в рантайме можно с помощью reflection извлечь значения для <code>R</code> и <code>S</code> прямо из объекта лямбды. Но если <code>R</code> (который <code>val</code>) мы можем использовать как есть, то для <code>S</code> (который <code>var</code>) надо сначала развернуть <code>ObjectRef</code>. Или <code>IntRef</code>. Или <code>ByteRef</code>. И почему они все не реализуют один интерфейс?</p><pre><code class="kotlin">private fun Any?.unwrap(): Any? {
   return when(this) {
       null -&gt; null
       is ObjectRef&lt;*&gt; -&gt; element
       is ByteRef -&gt; element
       is IntRef -&gt; element
       is DoubleRef -&gt; element
       is FloatRef -&gt; element
       is BooleanRef -&gt; element
       is CharRef -&gt; element
       is ShortRef -&gt; element
       is LongRef -&gt; element
       else -&gt; this
   }
}
</code></pre><p>В общем, пост процессинг получился очень сложным и хрупким. Находим метод или поле, и давай отрубать “$” с разных сторон и пытаться угадать - это то, что нам нужно, или что-то левое?</p><p>Конечно, было бы куда проще, если бы мы работали с исходным кодом на котлине. В теории можно было бы взять наш AST, сгенерировать код на <code>kotlin</code>, который вызывает всё то же, что вызывается внутри лямбды, и вставить это всё в код. Но тут есть нюанс: <code>javassist </code>может компилировать <code>java </code>код, но не может компилировать <code>kotlin</code>. А то, что в котлине выглядит как просто <code>return X</code>, на java может быть и <code>return getX()</code> или вот даже <code>return access$getX$p()</code></p><p>Я задумался о том, что в каком-нибудь <code>C/C++</code> проблема модификации исходного кода легко решалась макросами. А вот в <code>Java</code>/<code>Kotlin</code> ничего такого нет.</p><p>Конечно, написать простой препроцессор из разряда “взять файл, погрепать и положить обратно” несложно. Но надо же ещё как-то встроить его в процесс билда, чтобы изменённый файл (и только он) был виден только компилятору, а система контроля версий видела бы только исходный файл. Есть ли такой инструмент?</p><p>Да, есть. Это плагин к компилятору <code>kotlin</code>.</p><h3>Runtime. Попытка 3 (плагин к компилятору котлина)</h3><p>Про это есть тоже <a href="https://habr.com/ru/company/badoo/blog/566380/" rel="noopener noreferrer nofollow"><u>статья на хабре</u></a>, хотя я обходился <a href="https://blog.bnorm.dev/writing-your-second-compiler-plugin-part-1" rel="noopener noreferrer nofollow"><u>этой статьёй</u></a>, а так же исследованием официальных примеров (например <a href="https://github.com/JetBrains/kotlin/blob/master/plugins/allopen/allopen-cli/src/AllOpenPlugin.kt" rel="noopener noreferrer nofollow"><u>All Open plugin</u></a>)</p><p>В пакете <code>org.jetbrains.kotlin.extensions</code> (из подключаемой библиотеки <code>org.jetbrains.kotlin:kotlin-compiler-embeddable:1.6.21</code> ) можно найти несколько интерфейсов. Эти интерфейсы и есть поддерживаемое api для плагинов к компилятору. Я опасался, что тут будут только “высокоуровневые” точки подключения, однако опасения мои оказались напрасными. Есть прекрасный <code>PreprocessedVirtualFileFactoryExtension</code> , который позволяет подменить тело файла при чтении его с диска.</p><pre><code class="kotlin">/**
 * The interface for the extensions that are used to substitute VirtualFile on the creation of KtFile, allows to preprocess a file before
 * lexing and parsing
 */
interface PreprocessedVirtualFileFactoryExtension {
    companion object : ProjectExtensionDescriptor&lt;PreprocessedVirtualFileFactoryExtension&gt;(
        "org.jetbrains.kotlin.preprocessedVirtualFileFactoryExtension",
        PreprocessedVirtualFileFactoryExtension::class.java
    )

    fun isPassThrough(): Boolean

    fun createPreprocessedFile(file: VirtualFile?): VirtualFile?
    fun createPreprocessedLightFile(file: LightVirtualFile?): LightVirtualFile?
}
</code></pre><p>Его я и реализовал. При чтении kotlin файла с диска проверялось, что его надо обрабатывать (для этого в конфигурации плагина можно было указать packages), после чего доставал AST, искал внутри лямбды, в лямбдах ссылки наружу - всё как и раньше. И затем подменял исходный файл, заворачивая лямбды в специальный класс с AST внутри.</p><p>Например:</p><pre><code class="kotlin">@Kotlinq
fun main() {
    val lambda: (Int) -&gt; Int ={ it * 3 }
    println(lambda.expression)
}</code></pre><p>превращается в:</p><pre><code class="kotlin">@Kotlinq
fun main() {
    val lambda: (Int) -&gt; Int = (withExpression1({ it * 3 }, { Multiply(LambdaArgument(0),Value(3)) }))
    println(lambda.expression)
}
</code></pre><p>При таком подходе значительно упростилась та часть, которая разруливала ссылки на константы, методы и прочее. В общем-то достаточно было добавить те же вызовы в генерируемый код, если у нас вызов “без скобочек” (<code>val</code>, <code>var</code>, <code>const</code>), и ссылку если вызов “со скобочками” (функции и конструкторы). Но и тут не обошлось без казусов.</p><p>Например, вот такая лямбда:</p><pre><code class="kotlin">@Kotlinq
fun main() {
   val lambda: (Int) -&gt; Boolean = { it in listOf(2, 3) }
}</code></pre><p>Превращается в:</p><pre><code class="kotlin">@Kotlinq
fun main() {
    val lambda: (Int) -&gt; Boolean = (withExpression1({ it in listOf(2, 3) }, { Call(Identifier("in"),LambdaArgument(0),Call(Ref(::listOf),Value(2),Value(3))) }))
}</code></pre><p>Ссылка на метод <code>listOf</code> добавилась. Но компиляция падает, потому что:</p><pre><code>Callable reference resolution ambiguity: 
public inline fun &lt;T&gt; listOf(): List&lt;T&gt; defined in kotlin.collections
public fun &lt;T&gt; listOf(element: T): List&lt;T&gt; defined in kotlin.collections
public fun &lt;T&gt; listOf(vararg elements: T): List&lt;T&gt; defined in kotlin.collections</code></pre><p>Я не нашёл способа разрулить такие проблемы, кроме как в конфигурацию плагина добавить список исключений, для которых не надо пытаться вставить ссылку.</p><p>Другая проблема - как отличить вызов метода от вызова конструктора? Кажется, разницы нет, но она всё же есть:</p><pre><code class="kotlin">@Kotlinq
fun main() {
    val lambda: (Int) -&gt; Pair&lt;Int, Int&gt; = { Pair(it, it*2) }
}</code></pre><p>превращается в:</p><pre><code class="kotlin">    val lambda: (Int) -&gt; Pair&lt;Int, Int&gt; = (withExpression1({ Pair(it, it*2) }, { Call(Ref(::Pair),LambdaArgument(0),Multiply(LambdaArgument(0),Value(2))) }))
</code></pre><p>и валится с ошибкой компиляции:</p><p><code>Not enough information to infer type variable A</code></p><p>Потому что класс <code>Pair</code> - generic класс, и конструктору нужны параметры типов. Но в ссылке на компилятор их никак не передать. Было бы здорово передать ссылку на класс, а не на конструктор, как <code>Pair::class</code>. Но для этого наш плагин должен знать, что <code>Pair(1,2)</code> это конструктор, а <code>listOf(1,2)</code> - это метод.</p><p>В итоге решения два:</p><ol><li><p>По-умолчанию плагин считает, что если название с маленькой буквы - это метод, а если с большой - это класс</p></li><li><p>Исключения можно явно настроить в конфигурации плагина</p></li></ol><p>Дёшево и сердито.</p><p>Конечно, было бы совсем круто, если бы мы могли воспользовать результатами анализа кода самого компилятора <code>kotlin</code>. Наверняка ещё на ранних стадиях обработки он уже знает, какой символ обозначает класс, а какой - метод, и точно знает какую именно сигнатуру.</p><p>Но на этом этапе я уже очень устал заниматься этим плагином. Может быть, в следующий раз, когда снова захочется странного... Но не сейчас.</p><p>Этот вариант я “пустил в дело”, то есть стал на его основе делать свой linq с jooq-ом и лямбдами.</p><h3>Реализация для JOOQ</h3><p>Собственно, ради чего всё и затевалось. Чтобы иметь возможность писать код на kotlin и превращать его в sql.<br/>Для начала я завёл интерфейс Queryable аналогичный своему коллеге из C#.</p><p> </p><figure class="full-width "><img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/58b/2f5/5d9/58b2f55d9593f1e28b7c3d5e8e02cef9.png" width="1627" height="887" data-src="https://habrastorage.org/getpro/habr/upload_files/58b/2f5/5d9/58b2f55d9593f1e28b7c3d5e8e02cef9.png"/><figcaption></figcaption></figure><p>И сделал реализацию/адаптер для обычного sequence. В этом адаптере я просто вызываю передаваемые лямбды и никак не работаю с их AST. Теперь нужно было сделать то же самое для sql выражения.</p><p>В JOOQ всё довольно неплохо продумано. Любое SELECT выражение можно “превратить” в таблицу и работать с ним как с таблицей (в SQL это будет вложенный запрос). Что позволяет для разных уровней вложенности использовать один и тот же код, с небольшими отличиями под специфичные ситуации. Ситуаций таких я выделил три - вон там выше три класса <code>DataView</code>. Отличаются они тем, как трактовать AST лямбд, особенно что такое <code>it</code>.</p><ul><li><p>таблица в базе (it == сгенерированный Record);</p></li><li><p>запрос с несколькими полями (it == произвольный пользовательский класс);</p></li><li><p>запрос с одним полем (it == скалярное значение).</p></li></ul><p>Вот эти три ситуации:</p><pre><code class="kotlin">dsl.selectQueryableFrom(Tables.USERS)
	// тут it - это UserRecord, сгенерированный jooq-ом из схемы в базе
	// название проперти соотносится с именем колонки в таблице
	.filter { it.age &gt; 15 }
	.map { Pair(it.name, it.age) }
	// тут it - это уже экземпляр класса Pair, никак не связанный с jooq-овскими структурами
	// надо где-то “записать”, что second - это исходное поле age
	.filter { it.second &gt; 15 }
	.map { it.second }
	// а тут it - это уже одна колонка в запросе
	.filter { it &gt; 15}
</code></pre><p>Немного пробегусь по методам Queryable:</p><ul><li><p><code>filter</code></p><p>Тут AST дерево разбирается без особых прикрас. Разве что нужно не забывать про особую обработку null-ов. </p><pre><code class="kotlin"> fun condition(node: Node): Condition {
    val secondChildIsNull = (node is TwoChildren &amp;&amp; node.right == Value(null))
    return when {
 	   node is And -&gt; condition(node.left).and(condition(node.right))
 	   node is Or -&gt; condition(node.left).or(condition(node.right))
 	   node is Equal &amp;&amp; secondChildIsNull -&gt; field&lt;Any&gt;(node.left).isNull
 	   node is Equal -&gt; field&lt;Any&gt;(node.left).eq(field&lt;Any&gt;(node.right) as Field&lt;*&gt;)
 	   node is NotEqual &amp;&amp; secondChildIsNull -&gt; field&lt;Any&gt;(node.left).notEqual(field&lt;Any&gt;(node.right) as Field&lt;*&gt;)
 	   node is Less -&gt; field&lt;Any&gt;(node.left).lessThan(field&lt;Any&gt;(node.right) as Field&lt;*&gt;)
 	   node is LessOrEqual -&gt; field&lt;Any&gt;(node.left).lessOrEqual(field&lt;Any&gt;(node.right) as Field&lt;*&gt;)
 	   node is Greater -&gt; field&lt;Any&gt;(node.left).greaterThan(field&lt;Any&gt;(node.right) as Field&lt;*&gt;)
 	   node is GreaterOrEqual -&gt; field&lt;Any&gt;(node.left).greaterOrEqual(field&lt;Any&gt;(node.right) as Field&lt;*&gt;)
 	   node is UnaryBang -&gt; condition(node.child).not()
 	   node is GetProperty
 			   || node is Value
 			   || node is Val
 			   || node is Call
 			   || node is LambdaArgument
 	   -&gt; field&lt;Any&gt;(node).isTrue
 	   else -&gt; error("Cannot get conditions from $node")

    }
 }
</code></pre><p>Результат разбора (jooq condition) сохраняется во внутреннем поле. SQL выражение составляется и выполняется только при вызове терминальных операций, вроде <code>toList</code>, <code>count</code> и <code>aggregate</code>.</p></li><li><p><code>take</code> / <code>drop</code></p><p>Тоже сохраняем переданные значения для использования позже</p></li><li><p><code>sortedBy</code></p><p>Тут надо превратить AST в выражение, по которому можно сортировать. Логика тут тоже не особо замысловатая:</p><pre><code class="kotlin">fun &lt;T&gt; field(node: Node): Field&lt;T&gt; {

   return when(node) {
	   is Unknown -&gt; error("Impossible to use unknown node: ${node}")
	   is UnaryMinus -&gt; DSL.minus(field&lt;Number&gt;(node))
	   is UnaryPlus -&gt; field(node)
	   is UnaryBang -&gt; DSL.not(field&lt;Boolean&gt;(node))
	   is Plus -&gt; field&lt;T&gt;(node.left).plus(field&lt;T&gt;(node.right))
	   is Minus -&gt; field&lt;T&gt;(node.left).minus(field&lt;T&gt;(node.right))
	   is Multiply -&gt; field&lt;Number&gt;(node.left).mul(field&lt;Number&gt;(node.right))
	   is Divide -&gt; field&lt;Number&gt;(node.left).div(field&lt;Number&gt;(node.right))
	   is And, is Or -&gt; error("Cannot use logical operations as fields")
	   is Equal, is NotEqual, is Less,
	   is Greater, is GreaterOrEqual, is LessOrEqual,
		   -&gt; error("Cannot use comparison operations as fields")
	   is GetProperty -&gt; when {
		   node.left is LambdaArgument -&gt; nodeToJooq.field(node.right, node.left as LambdaArgument)
		   else -&gt; error("Cannot parse $node")
	   }
	   is Concat -&gt; DSL.concat(*node.children.map { field&lt;String&gt;(it) }.toTypedArray())
	   is Identifier -&gt; dataView?.getField(node.name) ?: error("Unknown identifier ${node.name}")
	   is Value -&gt; DSL.value(node.value)
	   is LambdaArgument -&gt; dataView?.getField() ?: nodeToJooq.field(node, node)
	   is Call -&gt; call(node)
	   is Val -&gt; DSL.value(node.value)
	   is Ref -&gt; error("Cannot use references")
	   is Error -&gt; error(node.errorMessage)
   } as Field&lt;T&gt;
}
</code></pre></li><li><p><code>sortedDescendingBy</code></p><p>Аналогично, только надо добавить desc.</p></li><li><p><code>map</code></p><p>Наиболее сложная операция. В теории внутри передаваемой функции может быть любое выражение, и если сразу после map идёт toList - надо возвращать именно то, что было попрошено. Т.е. <code>queryable.map(fn).toList()</code> должно возвращать то же самое, что вернуло бы <code>queryable.toList().map(fn)</code>.</p><p>В общем случае я не знаю как это решить. Решил для двух частных случаев:</p><ul><li><p>fn возвращает скалярное значение;</p></li><li><p>fn возвращает экземпляр data class, у которого только один конструктор - основной.</p></li></ul><p></p><p>В первом случае выполняем тот же парсинг AST, что и для <code>sortedBy</code>. Получаем в итоге sql выражение представляющее один столбец / значение. Дальше его выполнить, взять единственный столбец и привести тип к ожидаемому типу данных.</p><p>Во втором случае с помощью reflection можно получить список полей класса и их порядок, для каждого аргумента конструктора выполнить преобразование как для случая с одиночным значением. При выполнении SQL мы получим от JOOQ экземпляр <code>Record</code> с тем же числом полей. Дальше мы можем сконструировать экземпляры <code>data class</code> передав значения из <code>Record</code> в конструктор в порядке их определения.</p><pre><code class="kotlin">queryable
  // запоминаем запрошенные поля таблицы - name и age
  // запоминаем порядок аргументов и тип класса
  .map { Pair(it.name, it.age) }   
  // знаем, что second - второй аргумент
  // были выбраны два поля - name и age
  // значит second == age
  // его и подставляем в итоговое sql выражение
  .filter { it.second &gt; 18 }	
  // тут мы выполняем SQL и получаем от JOOQ набор экземпляров
  // org.jooq.Record с двумя полями
  // для каждого Record создаём экземпляр Pair и передаём
  // значения полей в качестве аргументов конструктора
  .toList()</code></pre></li><li><p><code>toList</code> / <code>count</code></p><p>На этом этапе составляется и исполняется sql запрос. Разница только в том, что остаётся в выражении <code>select</code> - перечисление полей, или <code>count(*)</code></p></li><li><p><code>aggregate</code></p><p>Не хотелось ограничивать себя или других перечнем конкретных операций. Поэтому был заведён реестр <s>иностранных агентов</s> функций и способов их преобразования в агрегирующие выражения.</p><pre><code class="kotlin">registerAggregator(Iterable&lt;Int&gt;::maxOrNull) { field -&gt; DSL.max(field) }
registerAggregator(Iterable&lt;Int&gt;::minOrNull) { field -&gt; DSL.min(field) }
registerAggregator(Iterable&lt;Int&gt;::sum) { field -&gt; DSL.sum(field as Field&lt;out Number&gt;?) }
registerAggregator(Iterable&lt;Int&gt;::average) { field -&gt; DSL.avg(field as Field&lt;out Number&gt;?) }
</code></pre><p>Это позволяет использовать привычные функции для агрегирования значений и регистрировать свои в случае необходимости</p><p><code>println(queryable.aggregate { it.sum() }) </code></p></li></ul><h3>Где всё это искать</h3><p>Вот репозиторий с самой библиотекой и плагином к kotlin, <a href="https://github.com/kotlinqs/kotlinq" rel="noopener noreferrer nofollow"><u>инструкция по установке в readme</u></a>.</p><p>Вот <a href="https://github.com/kotlinqs/kotlinq-jooq" rel="noopener noreferrer nofollow"><u>репозиторий с реализацией для jooq</u></a>.</p><p>И вот <a href="https://github.com/kotlinqs/kotlinq-jooq-example" rel="noopener noreferrer nofollow"><u>репозиторий с полноценным примером</u></a>.</p><p>Можно склонировать, собрать и запустить. Один и тот же “запрос” прогоняется для коллекции в памяти и для БД.</p><p>Вот такое выражение:</p><pre><code class="kotlin">val report = storage.species()
   .join(
       storage.animals(),
       { s, a -&gt; s.id == a.speciesId },
       { s, a -&gt; AnimalDescription(s.name, a.name, a.population / Thousand) }
   )
   .sortedDescendingBy { it.popularityK }
   .filter { it.popularityK &gt; 0 }
   .map { "${it.speciesName.uppercase()}: ${it.animalName}  [${it.popularityK}K]" }
   .toList()
   .joinToString("\n")</code></pre><p>И вот такой получается SQL:</p><pre><code class="sql">select (((((upper("alias_28974773"."speciesName") || ': ') || "alias_28974773"."animalName") || '  [') || cast("alias_28974773"."popularityK" as varchar)) || 'K]') "col0"
   from (select "left"."NAME" "speciesName", "right"."NAME" "animalName", ("right"."POPULATION" / 1000) "popularityK"
           from "PUBLIC"."SPECIES" "left"
           join "PUBLIC"."ANIMALS" "right"
           on "left"."ID" = "right"."SPECIES_ID"
   ) "alias_28974773"
   where "alias_28974773"."popularityK" &gt; 0
   order by "alias_28974773"."popularityK" desc
</code></pre><h3>Что дальше</h3><p>Не знаю. Своё любопытство я удовлетворил. Покажу коллегам, если им понравится - может быть попробуем использовать в наших продуктах. Если нет - значит пополнит список моих никому не нужных творений.</p><p>Бесполезное творчество в любом случае лучше, чем полезное разрушение.</p><p>Всем мир.</p><p></p></div></div></div><!----><!----></div><!----><!----></div><!--]--><!----><div class="tm-article-presenter__meta" data-test-id="article-meta-links"><div class="tm-separated-list tm-article-presenter__meta-list"><span class="tm-separated-list__title">Теги:</span><ul class="tm-separated-list__list"><!--[--><li class="tm-separated-list__item"><!--[--><a href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[kotlin]" class="tm-tags-list__link"><span>kotlin</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[linq]" class="tm-tags-list__link"><span>linq</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[lambda]" class="tm-tags-list__link"><span>lambda</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[ksp]" class="tm-tags-list__link"><span>ksp</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[javassist]" class="tm-tags-list__link"><span>javassist</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[%D1%81%D0%B2%D0%BE%D0%B1%D0%BE%D0%B4%D0%B0]" class="tm-tags-list__link"><span>свобода</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[%D1%80%D0%B0%D0%B2%D0%B5%D0%BD%D1%81%D1%82%D0%B2%D0%BE]" class="tm-tags-list__link"><span>равенство</span></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a href="/ru/search/?target_type=posts&amp;order=relevance&amp;q=[%D1%83%D0%BF%D1%8F%D1%87%D0%BA%D0%B0]" class="tm-tags-list__link"><span>упячка</span></a><!--]--></li><!--]--><!----></ul></div><div class="tm-separated-list tm-article-presenter__meta-list"><span class="tm-separated-list__title">Хабы:</span><ul class="tm-separated-list__list"><!--[--><li class="tm-separated-list__item"><!--[--><a href="/ru/hubs/crazydev/" class="tm-hubs-list__link"><!--[--><span>Ненормальное программирование</span><!--]--></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a href="/ru/hubs/java/" class="tm-hubs-list__link"><!--[--><span>Java</span><!--]--></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a href="/ru/hubs/compilers/" class="tm-hubs-list__link"><!--[--><span>Компиляторы</span><!--]--></a><!--]--></li><li class="tm-separated-list__item"><!--[--><a href="/ru/hubs/kotlin/" class="tm-hubs-list__link"><!--[--><span>Kotlin</span><!--]--></a><!--]--></li><!--]--><!----></ul></div></div><!----><!--]--></article><!--]--></div><!----></div><div style="" class="tm-article-sticky-panel" data-test-id="article-sticky-panel"><div class="tm-data-icons tm-data-icons tm-data-icons_space-big tm-article-sticky-panel__icons" data-test-id="article-stats-icons"><div class="tm-article-rating tm-data-icons__item"><div class="tm-votes-meter tm-article-rating__votes-switcher"><svg class="tm-svg-img tm-votes-meter__icon tm-votes-meter__icon tm-votes-meter__icon_appearance-article" height="24" width="24"><title>Всего голосов 17: ↑17 и ↓0</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-rating"></use></svg><span class="tm-votes-meter__value tm-votes-meter__value_positive tm-votes-meter__value_appearance-article tm-votes-meter__value_rating tm-votes-meter__value" data-test-id="votes-meter-value" title="Всего голосов 17: ↑17 и ↓0">+17</span></div><!--teleport start--><!--teleport end--><!----></div><!----><!----><button class="bookmarks-button tm-data-icons__item" title="Добавить в закладки" type="button"><span class="tm-svg-icon__wrapper bookmarks-button__icon"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Добавить в закладки</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-favorite"></use></svg></span><span class="bookmarks-button__counter" title="Количество пользователей, добавивших публикацию в закладки">28</span></button><div class="tm-sharing tm-data-icons__item" title="Поделиться"><button class="tm-sharing__button" type="button"><svg viewbox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" class="tm-sharing__icon"><path fill="currentColor" d="M13.8 13.8V18l7.2-6.6L13.8 5v3.9C5 8.9 3 18.6 3 18.6c2.5-4.4 6-4.8 10.8-4.8z"></path></svg></button><!--teleport start--><!--teleport end--></div><div class="tm-article-comments-counter-link tm-data-icons__item" title="Читать комментарии"><a href="/ru/articles/669694/comments/" class="tm-article-comments-counter-link__link" data-test-id="counter-comments"><!--[--><svg class="tm-svg-img tm-article-comments-counter-link__icon" height="24" width="24"><title>Комментарии</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-comments"></use></svg><span class="tm-article-comments-counter-link__value">4</span><!--]--></a><!----></div><!--[--><!--[--><!--[--><!----><!--]--><!--]--><!--]--><!--teleport start--><!--teleport end--><!----></div></div></div><!--[--><!--]--><div class="tm-article-presenter__footer"><!--[--><!--[--><div class="tm-article-blocks"><!----><!--[--><section class="tm-block tm-block tm-block_spacing-bottom"><!----><!--[--><div class="tm-block__body tm-block__body tm-block__body_variant-balanced"><!--[--><div class="tm-article-author" data-test-id="article-author-info" data-async-called="true"><!--[--><!--]--><div class="tm-user-card tm-user-card tm-user-card_variant-article tm-article-author__user-card" data-async-called="true"><div class="tm-user-card__info-container"><div class="tm-user-card__header"><div class="tm-user-card__header-data"><a href="/ru/users/GRaAL/" class="tm-user-card__userpic tm-user-card__userpic_size-40"><div class="tm-entity-image"><img alt="" class="tm-entity-image__pic" src="//habrastorage.org/getpro/habr/avatars/481/3a3/311/4813a3311a12b5573dd8508ddc311f4d.gif"></div></a><div class="tm-user-card__meta"><div class="tm-counter-container tm-karma tm-karma" title=" 312 голосов "><div class="tm-counter-container__header"><!--[--><div class="karma-display positive" data-v-7635202e>192</div><!----><!--]--></div><div class="tm-counter-container__footer"><!--[--><div class="tm-karma__text">Карма</div><!--teleport start--><!--teleport end--><!--]--></div></div><div class="tm-counter-container" title="Рейтинг пользователя"><div class="tm-counter-container__header"><!--[--><!--[--><!--]--><div class="tm-votes-lever tm-votes-lever tm-votes-lever_appearance-rating"><!----><div class="tm-votes-lever__score tm-votes-lever__score_appearance-rating tm-votes-lever__score"><!--[--><span><span class="tm-votes-lever__score-counter tm-votes-lever__score-counter_rating tm-votes-lever__score-counter" data-test-id="votes-score-counter">0</span></span><!--]--></div><!----></div><!--]--></div><div class="tm-counter-container__footer"><!--[--><span class="tm-rating__text tm-rating__text">Рейтинг</span><!--]--></div></div></div></div></div><div class="tm-user-card__info tm-user-card__info_variant-article tm-user-card__info"><div class="tm-user-card__title tm-user-card__title_variant-article tm-user-card__title"><span class="tm-user-card__name tm-user-card__name_variant-article tm-user-card__name">Алексей Гришин</span><a href="/ru/users/GRaAL/" class="tm-user-card__nickname tm-user-card__nickname tm-user-card__nickname_variant-article"> @GRaAL</a><!----></div><p class="tm-user-card__short-info tm-user-card__short-info_variant-article tm-user-card__short-info" data-test-id="user-card-speciality">Разработчик широкого профиля</p></div></div><!----><div class="tm-user-card__buttons tm-user-card__buttons_variant-article tm-user-card__buttons"><!----><div class="tm-user-card__button"><div class="tm-button-follow tm-user-card__button-follow"><!----><button class="tm-button-follow__button tm-button-follow__button_big" data-test-id="follow-button" type="button">Подписаться</button></div></div><!----><div class="tm-user-card__button tm-user-card__button_write" data-test-id="user-card-conversations"><svg class="tm-svg-img tm-user-card__button-icon" height="16" width="16"><title>Отправить сообщение</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#mail"></use></svg></div><!----></div><!----></div><div class="tm-article-author__user-contacts" data-test-id="author-contacts"><!----><!----><!--[--><a class="tm-article-author__contact" data-test-id="author-contact-link" href="https://ridero.ru/books/khudoi_mir/" rel="noopener" target="_blank">Сайт</a><a class="tm-article-author__contact" data-test-id="author-contact-link" href="https://store.steampowered.com/search/?term=volcanic+giraffe" rel="noopener" target="_blank">Сайт</a><a class="tm-article-author__contact" data-test-id="author-contact-link" href="https://github.com/AlexeyGrishin/" rel="noopener" target="_blank">Github</a><!--]--></div></div><!--]--></div><!--]--><!----></section><!----><!--[--><div class="banner-wrapper leaderboard tm-page-article__banner" style="--467224fc:200px;--58ff5eba:auto;" data-v-ad758baa><!--[--><div class="placeholder-wrapper placeholder" data-v-ad758baa><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><div class="adfox-banner-placeholder leaderboard" data-v-12f7bcca><div class="image loads" data-v-12f7bcca></div><div class="lines" data-v-12f7bcca><div class="line loads" data-v-12f7bcca></div><div class="line loads" data-v-12f7bcca></div><div class="line loads" data-v-12f7bcca></div></div></div><!----></div><div id="adfox_164725660339535756" class="tm-adfox-banner" data-v-ad758baa></div><!--]--></div><!--]--><!--]--><div class="tm-article-blocks__comments"><div id="publication-comments" class="tm-article-page-comments"><div><!--[--><div class="tm-article-comments-counter-link tm-article-comments-counter-button"><a href="/ru/articles/669694/comments/" class="tm-article-comments-counter-link__link tm-article-comments-counter-link__link_button-style" data-test-id="counter-comments"><!--[--><svg class="tm-svg-img tm-article-comments-counter-link__icon tm-article-comments-counter-link__icon_contrasted" height="24" width="24"><title>Комментарии</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#counter-comments"></use></svg><span class="tm-article-comments-counter-link__value tm-article-comments-counter-link__value_contrasted"> Комментарии 4 </span><!--]--></a><!----></div><!--]--></div></div></div><!--[--><!--[--><!--]--><section class="tm-block tm-block tm-block_spacing-bottom"><header class="tm-block__header tm-block__header tm-block__header_variant-borderless"><div class="tm-block__header-container"><h2 class="tm-block__title tm-block__title tm-block__title_variant-large">Публикации</h2><!--[--><!--]--></div><!----></header><!--[--><div class="tm-block__body tm-block__body tm-block__body_variant-condensed-slim"><!--[--><!--[--><div class="tm-tabs tm-tabs"><div class=""><!--[--><span class="tm-tabs__tab-item"><button class="tm-tabs__tab-link tm-tabs__tab-link_active tm-tabs__tab-link_slim tm-tabs__tab-link">Лучшие за сутки</button></span><span class="tm-tabs__tab-item"><button class="tm-tabs__tab-link tm-tabs__tab-link_slim tm-tabs__tab-link">Похожие</button></span><!--]--></div><!----></div><div class="similar-and-daily__tab-view"><div class="daily-articles-list"><ul class="tm-article-card-list"><!--[--><!--]--><div class="tm-bordered-card"><!----><!--[--><!--]--></div></ul><div class="daily-articles-block__button-container"><button class="btn btn_transparent btn_small tm-button tm-button_color-horizon" type="button"><!--[--><!--[-->Показать лучшие за всё время<!--]--><!--]--></button></div></div><!----></div><!--]--><!--]--></div><!--]--><!----></section><!--[--><section class="tm-block tm-block tm-block_spacing-around tm-stories-block" data-navigatable tabindex="0" data-async-called="true"><header class="tm-block__header tm-block__header"><div class="tm-block__header-container"><h2 class="tm-block__title tm-block__title">Истории</h2><!--[--><!--]--></div><!----></header><!--[--><div class="tm-block__body tm-block__body tm-block__body_variant-equal"><!--[--><div class="tm-stories-empty"><!--[--><div class="tm-stories-card-empty"><div class="tm-stories-card-empty__image"></div><div class="tm-stories-card-empty__title"><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div></div></div><div class="tm-stories-card-empty"><div class="tm-stories-card-empty__image"></div><div class="tm-stories-card-empty__title"><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div></div></div><div class="tm-stories-card-empty"><div class="tm-stories-card-empty__image"></div><div class="tm-stories-card-empty__title"><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div></div></div><div class="tm-stories-card-empty"><div class="tm-stories-card-empty__image"></div><div class="tm-stories-card-empty__title"><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div></div></div><div class="tm-stories-card-empty"><div class="tm-stories-card-empty__image"></div><div class="tm-stories-card-empty__title"><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div></div></div><div class="tm-stories-card-empty"><div class="tm-stories-card-empty__image"></div><div class="tm-stories-card-empty__title"><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div><div class="tm-stories-card-empty__title-block"></div></div></div><!--]--></div><!----><!--]--></div><!--]--><!----></section><div class="placeholder-wrapper"><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><div class="tm-placeholder-inset tm-placeholder-courses"><div class="tm-placeholder-inset__header"><div class="tm-placeholder__line tm-placeholder__line_inset-header loads"></div></div><div class="tm-placeholder-inset__body"><ul class="tm-placeholder-list"><!--[--><li class="tm-placeholder-list__item tm-placeholder-list__item_inset"><div class="tm-placeholder-list__title-container"><div class="tm-placeholder__company-avatar"></div><div class="tm-placeholder__line tm-placeholder__line_item-title loads"></div></div><div class="tm-project-block-items__properties"><!--[--><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><!--]--></div></li><li class="tm-placeholder-list__item tm-placeholder-list__item_inset"><div class="tm-placeholder-list__title-container"><div class="tm-placeholder__company-avatar"></div><div class="tm-placeholder__line tm-placeholder__line_item-title loads"></div></div><div class="tm-project-block-items__properties"><!--[--><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><!--]--></div></li><li class="tm-placeholder-list__item tm-placeholder-list__item_inset"><div class="tm-placeholder-list__title-container"><div class="tm-placeholder__company-avatar"></div><div class="tm-placeholder__line tm-placeholder__line_item-title loads"></div></div><div class="tm-project-block-items__properties"><!--[--><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><!--]--></div></li><li class="tm-placeholder-list__item tm-placeholder-list__item_inset"><div class="tm-placeholder-list__title-container"><div class="tm-placeholder__company-avatar"></div><div class="tm-placeholder__line tm-placeholder__line_item-title loads"></div></div><div class="tm-project-block-items__properties"><!--[--><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><!--]--></div></li><li class="tm-placeholder-list__item tm-placeholder-list__item_inset"><div class="tm-placeholder-list__title-container"><div class="tm-placeholder__company-avatar"></div><div class="tm-placeholder__line tm-placeholder__line_item-title loads"></div></div><div class="tm-project-block-items__properties"><!--[--><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><span class="tm-project-block-items__property-item"><span class="tm-placeholder__line loads" style="width:100px;"></span></span><!--]--></div></li><!--]--></ul></div><div class="tm-placeholder-inset__footer"><div class="tm-placeholder__line tm-placeholder__line_inset-footer loads"></div></div></div><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----></div><!--]--><!----><!--[--><div><div class="placeholder-wrapper"><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><div class="tm-placeholder-promo"><div class="tm-placeholder-promo__header"><div class="tm-placeholder__line tm-placeholder__line_promo-title"></div></div><div class="tm-placeholder-promo__body"><div class="tm-placeholder-promo__posts"><div class="tm-placeholder-promo__post"><div class="tm-placeholder-promo__image"></div><div class="tm-placeholder__line tm-placeholder__line_post-title"></div></div><div class="tm-placeholder-promo__post"><div class="tm-placeholder-promo__image"></div><div class="tm-placeholder__line tm-placeholder__line_post-title"></div></div><div class="tm-placeholder-promo__post"><div class="tm-placeholder-promo__image"></div><div class="tm-placeholder__line tm-placeholder__line_post-title"></div></div></div><div class="tm-placeholder-promo__dots"><div class="tm-placeholder-promo__dot"></div><div class="tm-placeholder-promo__dot"></div><div class="tm-placeholder-promo__dot"></div></div></div></div><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----><!----></div></div><section class="tm-block tm-block tm-block_spacing-top" data-async-called="true"><header class="tm-block__header tm-block__header"><div class="tm-block__header-container"><h2 class="tm-block__title tm-block__title">Работа</h2><!--[--><!--]--></div><!----></header><!--[--><div class="tm-block__body tm-block__body"><!--[--><!--[--><div class="tm-vacancies-block__item"><a class="tm-vacancies-block__vacancy-title" href="https://career.habr.com/vacancies/java_developer" target="_blank">Java разработчик</a><div class="tm-vacancies-block__vacancies-count">211
    вакансий</div></div><!--]--><!--]--></div><!--]--><footer class="tm-block__footer"><!--[--><a class="tm-block-extralink" href="https://career.habr.com/catalog">Все вакансии</a><!--]--></footer></section><section class="tm-block tm-block tm-block_spacing-around tm-events-block" data-navigatable tabindex="0" data-async-called="true"><header class="tm-block__header tm-block__header tm-block__header_variant-borderless-large"><div class="tm-block__header-container"><h2 class="tm-block__title tm-block__title">Ближайшие события</h2><!--[--><!--]--></div><!----></header><!--[--><div class="tm-block__body tm-block__body tm-block__body_variant-equal"><!--[--><div class="swiper-container tm-events-widget" style="--swiper-space-between:22px;"><div class="swiper-wrapper"><!--[--><!--[--><div class="swiper-slide"><!--[--><section class="tm-block tm-block tm-block_spacing-none" id="588" tabindex="-1"><!----><!--[--><div class="tm-event-card tm-event-card_is-widget tm-event-card_responsive"><a href="/ru/events/588/" class=""><img alt class="tm-event-card__image" data-src="https://habrastorage.org/getpro/habr/upload_files/f79/1fc/79d/f791fc79d0d9fdda84397ed0c0717764.png" loading="lazy" src="https://habrastorage.org/r/w390/getpro/habr/upload_files/f79/1fc/79d/f791fc79d0d9fdda84397ed0c0717764.png" srcset="https://habrastorage.org/r/w390/getpro/habr/upload_files/f79/1fc/79d/f791fc79d0d9fdda84397ed0c0717764.png, https://habrastorage.org/getpro/habr/upload_files/f79/1fc/79d/f791fc79d0d9fdda84397ed0c0717764.png 2x"></a><!----><div class="tm-event-card__info"><div class="tm-event-card__date"><!----><div class="tm-event-card__day"><span>17  февраля   – 24  марта  </span></div></div><a href="/ru/events/588/" class="tm-event-card__title-link"><span>Конкурс «Снежный код» от Хекслета. Три гранта на бесплатное 10-месячное обучение</span></a><div class="tm-event-card__places"><div class="tm-event-card__places-list"><!--[--><span class="tm-event-card__places-item"><span>Онлайн</span><!----></span><!--]--></div></div></div><div class="tm-event-card__footer tm-event-card__footer_widget"><a href="/ru/events/#588" class="tm-event-card__link">Больше событий в календаре</a><div class="tm-event-card__categories"><!--[--><div class="event-category__label event-category__label_type-development"><span>Разработка</span></div><!--]--></div></div></div><!--]--><!----></section><!--]--></div><div class="swiper-slide"><!--[--><section class="tm-block tm-block tm-block_spacing-none" id="596" tabindex="-1"><!----><!--[--><div class="tm-event-card tm-event-card_is-widget tm-event-card_responsive"><a href="/ru/events/596/" class=""><img alt class="tm-event-card__image" data-src="https://habrastorage.org/getpro/habr/upload_files/b14/cd3/772/b14cd3772bc67698c8fbfd846e23824a.png" loading="lazy" src="https://habrastorage.org/r/w390/getpro/habr/upload_files/b14/cd3/772/b14cd3772bc67698c8fbfd846e23824a.png" srcset="https://habrastorage.org/r/w390/getpro/habr/upload_files/b14/cd3/772/b14cd3772bc67698c8fbfd846e23824a.png, https://habrastorage.org/getpro/habr/upload_files/b14/cd3/772/b14cd3772bc67698c8fbfd846e23824a.png 2x"></a><!----><div class="tm-event-card__info"><div class="tm-event-card__date"><!----><div class="tm-event-card__day"><span>20  марта  </span></div></div><a href="/ru/events/596/" class="tm-event-card__title-link"><span>Офлайн-конференция Хабр х K-team: как удерживать таланты в 2025 году</span></a><div class="tm-event-card__places"><div class="tm-event-card__places-list"><!--[--><span class="tm-event-card__places-item"><span>Москва</span><!----></span><!--]--></div></div></div><div class="tm-event-card__footer tm-event-card__footer_widget"><a href="/ru/events/#596" class="tm-event-card__link">Больше событий в календаре</a><div class="tm-event-card__categories"><!--[--><div class="event-category__label event-category__label_type-other"><span>Другое</span></div><!--]--></div></div></div><!--]--><!----></section><!--]--></div><div class="swiper-slide"><!--[--><section class="tm-block tm-block tm-block_spacing-none" id="604" tabindex="-1"><!----><!--[--><div class="tm-event-card tm-event-card_is-widget tm-event-card_responsive"><a href="/ru/events/604/" class=""><img alt class="tm-event-card__image" data-src="https://habrastorage.org/getpro/habr/upload_files/733/9ef/194/7339ef1945f3ee6906daf89db79829d4.png" loading="lazy" src="https://habrastorage.org/r/w390/getpro/habr/upload_files/733/9ef/194/7339ef1945f3ee6906daf89db79829d4.png" srcset="https://habrastorage.org/r/w390/getpro/habr/upload_files/733/9ef/194/7339ef1945f3ee6906daf89db79829d4.png, https://habrastorage.org/getpro/habr/upload_files/733/9ef/194/7339ef1945f3ee6906daf89db79829d4.png 2x"></a><!----><div class="tm-event-card__info"><div class="tm-event-card__date"><!----><div class="tm-event-card__day"><span>20  марта  </span></div></div><a href="/ru/events/604/" class="tm-event-card__title-link"><span>IX HappyWorkForum | Аутентичность и ментальное здоровье персонала</span></a><div class="tm-event-card__places"><div class="tm-event-card__places-list"><!--[--><span class="tm-event-card__places-item"><span>Москва</span><span class="tm-event-card__places-separator"> • </span></span><span class="tm-event-card__places-item"><span>Онлайн</span><!----></span><!--]--></div></div></div><div class="tm-event-card__footer tm-event-card__footer_widget"><a href="/ru/events/#604" class="tm-event-card__link">Больше событий в календаре</a><div class="tm-event-card__categories"><!--[--><div class="event-category__label event-category__label_type-other"><span>Другое</span></div><!--]--></div></div></div><!--]--><!----></section><!--]--></div><div class="swiper-slide"><!--[--><section class="tm-block tm-block tm-block_spacing-none" id="612" tabindex="-1"><!----><!--[--><div class="tm-event-card tm-event-card_is-widget tm-event-card_responsive"><a href="/ru/events/612/" class=""><img alt class="tm-event-card__image" data-src="https://habrastorage.org/getpro/habr/upload_files/38f/10d/f4c/38f10df4c7f9d7c5d4610fe426af0ab4.png" loading="lazy" src="https://habrastorage.org/r/w390/getpro/habr/upload_files/38f/10d/f4c/38f10df4c7f9d7c5d4610fe426af0ab4.png" srcset="https://habrastorage.org/r/w390/getpro/habr/upload_files/38f/10d/f4c/38f10df4c7f9d7c5d4610fe426af0ab4.png, https://habrastorage.org/getpro/habr/upload_files/38f/10d/f4c/38f10df4c7f9d7c5d4610fe426af0ab4.png 2x"></a><!----><div class="tm-event-card__info"><div class="tm-event-card__date"><!----><div class="tm-event-card__day"><span>20  марта  </span></div></div><a href="/ru/events/612/" class="tm-event-card__title-link"><span>Вебинар «Мастерская бюджета: как управлять затратами на облачные ресурсы»</span></a><div class="tm-event-card__places"><div class="tm-event-card__places-list"><!--[--><span class="tm-event-card__places-item"><span>Онлайн</span><!----></span><!--]--></div></div></div><div class="tm-event-card__footer tm-event-card__footer_widget"><a href="/ru/events/#612" class="tm-event-card__link">Больше событий в календаре</a><div class="tm-event-card__categories"><!--[--><div class="event-category__label event-category__label_type-development"><span>Разработка</span></div><div class="event-category__label event-category__label_type-admin"><span>Администрирование</span></div><!--]--></div></div></div><!--]--><!----></section><!--]--></div><div class="swiper-slide"><!--[--><section class="tm-block tm-block tm-block_spacing-none" id="616" tabindex="-1"><!----><!--[--><div class="tm-event-card tm-event-card_is-widget tm-event-card_responsive"><a href="/ru/events/616/" class=""><img alt class="tm-event-card__image" data-src="https://habrastorage.org/getpro/habr/upload_files/523/7fb/13a/5237fb13ad7fb6fb483c49691aaec836.png" loading="lazy" src="https://habrastorage.org/r/w390/getpro/habr/upload_files/523/7fb/13a/5237fb13ad7fb6fb483c49691aaec836.png" srcset="https://habrastorage.org/r/w390/getpro/habr/upload_files/523/7fb/13a/5237fb13ad7fb6fb483c49691aaec836.png, https://habrastorage.org/getpro/habr/upload_files/523/7fb/13a/5237fb13ad7fb6fb483c49691aaec836.png 2x"></a><!----><div class="tm-event-card__info"><div class="tm-event-card__date"><!----><div class="tm-event-card__day"><span>21  марта  </span></div></div><a href="/ru/events/616/" class="tm-event-card__title-link"><span>Бизнес-конференция «Digital Brand Day 2025: Орбита 2025»</span></a><div class="tm-event-card__places"><div class="tm-event-card__places-list"><!--[--><span class="tm-event-card__places-item"><span>Москва</span><!----></span><!--]--></div></div></div><div class="tm-event-card__footer tm-event-card__footer_widget"><a href="/ru/events/#616" class="tm-event-card__link">Больше событий в календаре</a><div class="tm-event-card__categories"><!--[--><div class="event-category__label event-category__label_type-marketing"><span>Маркетинг</span></div><div class="event-category__label event-category__label_type-other"><span>Другое</span></div><!--]--></div></div></div><!--]--><!----></section><!--]--></div><div class="swiper-slide"><!--[--><section class="tm-block tm-block tm-block_spacing-none" id="608" tabindex="-1"><!----><!--[--><div class="tm-event-card tm-event-card_is-widget tm-event-card_responsive"><a href="/ru/events/608/" class=""><img alt class="tm-event-card__image" data-src="https://habrastorage.org/getpro/habr/upload_files/8fd/e04/ddd/8fde04ddd9ba3f6bcd515aa6209f96b7.png" loading="lazy" src="https://habrastorage.org/r/w390/getpro/habr/upload_files/8fd/e04/ddd/8fde04ddd9ba3f6bcd515aa6209f96b7.png" srcset="https://habrastorage.org/r/w390/getpro/habr/upload_files/8fd/e04/ddd/8fde04ddd9ba3f6bcd515aa6209f96b7.png, https://habrastorage.org/getpro/habr/upload_files/8fd/e04/ddd/8fde04ddd9ba3f6bcd515aa6209f96b7.png 2x"></a><!----><div class="tm-event-card__info"><div class="tm-event-card__date"><!----><div class="tm-event-card__day"><span>27  марта  </span></div></div><a href="/ru/events/608/" class="tm-event-card__title-link"><span>Вебинар «Контент-маркетинг здорового человека: как привлечь внимание аудитории»</span></a><div class="tm-event-card__places"><div class="tm-event-card__places-list"><!--[--><span class="tm-event-card__places-item"><span>Онлайн</span><!----></span><!--]--></div></div></div><div class="tm-event-card__footer tm-event-card__footer_widget"><a href="/ru/events/#608" class="tm-event-card__link">Больше событий в календаре</a><div class="tm-event-card__categories"><!--[--><div class="event-category__label event-category__label_type-marketing"><span>Маркетинг</span></div><div class="event-category__label event-category__label_type-other"><span>Другое</span></div><!--]--></div></div></div><!--]--><!----></section><!--]--></div><div class="swiper-slide"><!--[--><section class="tm-block tm-block tm-block_spacing-none" id="606" tabindex="-1"><!----><!--[--><div class="tm-event-card tm-event-card_is-widget tm-event-card_responsive"><a href="/ru/events/606/" class=""><img alt class="tm-event-card__image" data-src="https://habrastorage.org/getpro/habr/upload_files/b99/62a/b24/b9962ab2439c6edc80f96d7f0a847c72.png" loading="lazy" src="https://habrastorage.org/r/w390/getpro/habr/upload_files/b99/62a/b24/b9962ab2439c6edc80f96d7f0a847c72.png" srcset="https://habrastorage.org/r/w390/getpro/habr/upload_files/b99/62a/b24/b9962ab2439c6edc80f96d7f0a847c72.png, https://habrastorage.org/getpro/habr/upload_files/b99/62a/b24/b9962ab2439c6edc80f96d7f0a847c72.png 2x"></a><!----><div class="tm-event-card__info"><div class="tm-event-card__date"><!----><div class="tm-event-card__day"><span>31  марта  </span></div></div><a href="/ru/events/606/" class="tm-event-card__title-link"><span>Серия вебинаров «DevOps Middle: AvitoTech vs ecom.tech»</span></a><div class="tm-event-card__places"><div class="tm-event-card__places-list"><!--[--><span class="tm-event-card__places-item"><span>Онлайн</span><!----></span><!--]--></div></div></div><div class="tm-event-card__footer tm-event-card__footer_widget"><a href="/ru/events/#606" class="tm-event-card__link">Больше событий в календаре</a><div class="tm-event-card__categories"><!--[--><div class="event-category__label event-category__label_type-development"><span>Разработка</span></div><div class="event-category__label event-category__label_type-admin"><span>Администрирование</span></div><!--]--></div></div></div><!--]--><!----></section><!--]--></div><div class="swiper-slide"><!--[--><section class="tm-block tm-block tm-block_spacing-none" id="618" tabindex="-1"><!----><!--[--><div class="tm-event-card tm-event-card_is-widget tm-event-card_responsive"><a href="/ru/events/618/" class=""><img alt class="tm-event-card__image" data-src="https://habrastorage.org/getpro/habr/upload_files/f76/0f9/a82/f760f9a827b851a5eeca4802c643a91d.png" loading="lazy" src="https://habrastorage.org/r/w390/getpro/habr/upload_files/f76/0f9/a82/f760f9a827b851a5eeca4802c643a91d.png" srcset="https://habrastorage.org/r/w390/getpro/habr/upload_files/f76/0f9/a82/f760f9a827b851a5eeca4802c643a91d.png, https://habrastorage.org/getpro/habr/upload_files/f76/0f9/a82/f760f9a827b851a5eeca4802c643a91d.png 2x"></a><!----><div class="tm-event-card__info"><div class="tm-event-card__date"><!----><div class="tm-event-card__day"><span>3  апреля  </span></div></div><a href="/ru/events/618/" class="tm-event-card__title-link"><span>Реалити для разработчиков: узнайте, как строится новое публичное облако MWS</span></a><div class="tm-event-card__places"><div class="tm-event-card__places-list"><!--[--><span class="tm-event-card__places-item"><span>Онлайн</span><!----></span><!--]--></div></div></div><div class="tm-event-card__footer tm-event-card__footer_widget"><a href="/ru/events/#618" class="tm-event-card__link">Больше событий в календаре</a><div class="tm-event-card__categories"><!--[--><div class="event-category__label event-category__label_type-development"><span>Разработка</span></div><!--]--></div></div></div><!--]--><!----></section><!--]--></div><div class="swiper-slide"><!--[--><section class="tm-block tm-block tm-block_spacing-none" id="620" tabindex="-1"><!----><!--[--><div class="tm-event-card tm-event-card_is-widget tm-event-card_responsive"><a href="/ru/events/620/" class=""><img alt class="tm-event-card__image" data-src="https://habrastorage.org/getpro/habr/upload_files/eba/c37/879/ebac378793b959ebce42f41713e7b67f.jpg" loading="lazy" src="https://habrastorage.org/r/w390/getpro/habr/upload_files/eba/c37/879/ebac378793b959ebce42f41713e7b67f.jpg" srcset="https://habrastorage.org/r/w390/getpro/habr/upload_files/eba/c37/879/ebac378793b959ebce42f41713e7b67f.jpg, https://habrastorage.org/getpro/habr/upload_files/eba/c37/879/ebac378793b959ebce42f41713e7b67f.jpg 2x"></a><!----><div class="tm-event-card__info"><div class="tm-event-card__date"><!----><div class="tm-event-card__day"><span>3  апреля  </span></div></div><a href="/ru/events/620/" class="tm-event-card__title-link"><span>Открытая встреча «System Analysis Meetup SberHealth»</span></a><div class="tm-event-card__places"><div class="tm-event-card__places-list"><!--[--><span class="tm-event-card__places-item"><span>Москва</span><span class="tm-event-card__places-separator"> • </span></span><span class="tm-event-card__places-item"><span>Онлайн</span><!----></span><!--]--></div></div></div><div class="tm-event-card__footer tm-event-card__footer_widget"><a href="/ru/events/#620" class="tm-event-card__link">Больше событий в календаре</a><div class="tm-event-card__categories"><!--[--><div class="event-category__label event-category__label_type-analytics"><span>Аналитика</span></div><!--]--></div></div></div><!--]--><!----></section><!--]--></div><div class="swiper-slide"><!--[--><section class="tm-block tm-block tm-block_spacing-none" id="590" tabindex="-1"><!----><!--[--><div class="tm-event-card tm-event-card_is-widget tm-event-card_responsive"><a href="/ru/events/590/" class=""><img alt class="tm-event-card__image" data-src="https://habrastorage.org/getpro/habr/upload_files/31b/e68/295/31be6829578e7934fbc944396eb330b1.png" loading="lazy" src="https://habrastorage.org/r/w390/getpro/habr/upload_files/31b/e68/295/31be6829578e7934fbc944396eb330b1.png" srcset="https://habrastorage.org/r/w390/getpro/habr/upload_files/31b/e68/295/31be6829578e7934fbc944396eb330b1.png, https://habrastorage.org/getpro/habr/upload_files/31b/e68/295/31be6829578e7934fbc944396eb330b1.png 2x"></a><!----><div class="tm-event-card__info"><div class="tm-event-card__date"><!----><div class="tm-event-card__day"><span>10  апреля  </span></div></div><a href="/ru/events/590/" class="tm-event-card__title-link"><span>«GoCloud 2025» — масштабная IT-конференция про облака и AI</span></a><div class="tm-event-card__places"><div class="tm-event-card__places-list"><!--[--><span class="tm-event-card__places-item"><span>Москва</span><span class="tm-event-card__places-separator"> • </span></span><span class="tm-event-card__places-item"><span>Онлайн</span><!----></span><!--]--></div></div></div><div class="tm-event-card__footer tm-event-card__footer_widget"><a href="/ru/events/#590" class="tm-event-card__link">Больше событий в календаре</a><div class="tm-event-card__categories"><!--[--><div class="event-category__label event-category__label_type-development"><span>Разработка</span></div><div class="event-category__label event-category__label_type-admin"><span>Администрирование</span></div><div class="event-category__label event-category__label_type-management"><span>Менеджмент</span></div><!--]--></div></div></div><!--]--><!----></section><!--]--></div><div class="swiper-slide"><!--[--><section class="tm-block tm-block tm-block_spacing-none" id="516" tabindex="-1"><!----><!--[--><div class="tm-event-card tm-event-card_is-widget tm-event-card_responsive"><a href="/ru/events/516/" class=""><img alt class="tm-event-card__image" data-src="https://habrastorage.org/getpro/habr/upload_files/0e9/3a8/3ec/0e93a83ecea09f806d1df907ddb036a4.jpg" loading="lazy" src="https://habrastorage.org/r/w390/getpro/habr/upload_files/0e9/3a8/3ec/0e93a83ecea09f806d1df907ddb036a4.jpg" srcset="https://habrastorage.org/r/w390/getpro/habr/upload_files/0e9/3a8/3ec/0e93a83ecea09f806d1df907ddb036a4.jpg, https://habrastorage.org/getpro/habr/upload_files/0e9/3a8/3ec/0e93a83ecea09f806d1df907ddb036a4.jpg 2x"></a><!----><div class="tm-event-card__info"><div class="tm-event-card__date"><!----><div class="tm-event-card__day"><span>25 – 26  апреля  </span></div></div><a href="/ru/events/516/" class="tm-event-card__title-link"><span>IT-конференция Merge Tatarstan 2025</span></a><div class="tm-event-card__places"><div class="tm-event-card__places-list"><!--[--><span class="tm-event-card__places-item"><span>Казань</span><!----></span><!--]--></div></div></div><div class="tm-event-card__footer tm-event-card__footer_widget"><a href="/ru/events/#516" class="tm-event-card__link">Больше событий в календаре</a><div class="tm-event-card__categories"><!--[--><div class="event-category__label event-category__label_type-development"><span>Разработка</span></div><div class="event-category__label event-category__label_type-marketing"><span>Маркетинг</span></div><div class="event-category__label event-category__label_type-other"><span>Другое</span></div><!--]--></div></div></div><!--]--><!----></section><!--]--></div><div class="swiper-slide"><!--[--><section class="tm-block tm-block tm-block_spacing-none" id="610" tabindex="-1"><!----><!--[--><div class="tm-event-card tm-event-card_is-widget tm-event-card_responsive"><a href="/ru/events/610/" class=""><img alt class="tm-event-card__image" data-src="https://habrastorage.org/getpro/habr/upload_files/652/12d/998/65212d998fb4939d9787bd9c726d2acb.png" loading="lazy" src="https://habrastorage.org/r/w390/getpro/habr/upload_files/652/12d/998/65212d998fb4939d9787bd9c726d2acb.png" srcset="https://habrastorage.org/r/w390/getpro/habr/upload_files/652/12d/998/65212d998fb4939d9787bd9c726d2acb.png, https://habrastorage.org/getpro/habr/upload_files/652/12d/998/65212d998fb4939d9787bd9c726d2acb.png 2x"></a><!----><div class="tm-event-card__info"><div class="tm-event-card__date"><!----><div class="tm-event-card__day"><span>20 – 22  июня  </span></div></div><a href="/ru/events/610/" class="tm-event-card__title-link"><span>Летняя айти-тусовка Summer Merge</span></a><div class="tm-event-card__places"><div class="tm-event-card__places-list"><!--[--><span class="tm-event-card__places-item"><span>Ульяновская область</span><!----></span><!--]--></div></div></div><div class="tm-event-card__footer tm-event-card__footer_widget"><a href="/ru/events/#610" class="tm-event-card__link">Больше событий в календаре</a><div class="tm-event-card__categories"><!--[--><div class="event-category__label event-category__label_type-development"><span>Разработка</span></div><div class="event-category__label event-category__label_type-other"><span>Другое</span></div><!--]--></div></div></div><!--]--><!----></section><!--]--></div><!--]--><!--]--></div><!----><!--[--><button class="swiper-button-prev"><span class="tm-svg-icon__wrapper swiper-button-icon"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Влево</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#arrow-back"></use></svg></span></button><button class="swiper-button-next"><span class="tm-svg-icon__wrapper swiper-button-icon"><svg class="tm-svg-img tm-svg-icon" height="24" width="24"><title>Вправо</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#arrow-back"></use></svg></span></button><!--]--></div><!--]--></div><!--]--><!----></section><!--]--><!--]--></div><!--]--><!--]--></div></div><!--]--><!--]--></div></div><div class="tm-page__sidebar"><!--[--><!----><!--]--></div></div><!----><!--]--></div></div></main><!----></div><!----><div class="tm-footer"><div class="tm-page-width"><!--[--><div class="tm-footer__container"><div class="tm-footer__title"><a class="tm-svg-icon__wrapper tm-footer__title-link" href="/ru/"><svg class="tm-svg-img tm-svg-icon" height="16" width="16"><title>Хабр</title><use xlink:href="/img/habr-logo-ru.svg#logo"></use></svg></a></div><div class="tm-footer__social"><!--[--><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://www.facebook.com/habrahabr.ru" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="36" width="36"><title>Facebook</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-facebook"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://twitter.com/habr_com" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="36" width="36"><title>Twitter</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-twitter"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://vk.com/habr" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="36" width="36"><title>VK</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-vk"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://telegram.me/habr_com" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="36" width="36"><title>Telegram</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-telegram"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://www.youtube.com/channel/UCd_sTwKqVrweTt4oAKY5y4w" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="36" width="36"><title>Youtube</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-youtube"></use></svg></a><a class="tm-svg-icon__wrapper tm-social-icons__icon" href="https://dzen.ru/habr" rel="nofollow noopener noreferrer" target="_blank"><svg class="tm-svg-img tm-svg-icon" height="36" width="36"><title>Яндекс Дзен</title><use xlink:href="/img/new-social-icons-sprite.svg#social-logo-dzen"></use></svg></a><!--]--></div><!--teleport start--><!--teleport end--><button class="tm-footer__link"><svg class="tm-svg-img tm-footer__icon" height="16" width="16"><title>Язык</title><use xlink:href="/img/megazord-v28.371b7fa3..svg#lang"></use></svg> Настройка языка</button><a href="/ru/feedback/" class="tm-footer__link">Техническая поддержка</a><div class="tm-footer-copyright"><span class="tm-copyright"><span class="tm-copyright__years">© 2006–2025, </span><span class="tm-copyright__name"><a class="tm-copyright__link" href="https://company.habr.com/" rel="noopener" target="_blank">Habr</a></span></span></div></div><!--]--></div></div><!----><!--]--></div><!----></div><script>window.__INITIAL_STATE__={"adblock":{"hasAcceptableAdsFilter":false,"hasAdblock":false},"articlesList":{"articlesList":{"669694":{"id":"669694","timePublished":"2022-06-06T09:13:28+00:00","isCorporative":false,"lang":"ru","titleHtml":"Прокачиваем kotlin: используем AST лямбд в рантайме","leadData":{"textHtml":"\u003Cp\u003EИстория о том, как сделать свой LINQ для kotlin, и как сделать так, чтобы кода вида\u003C\u002Fp\u003E\u003Cp\u003E\u003Ccode\u003Edata.filter { it.age &gt; 30}.map { it.name }.toList() \u003C\u002Fcode\u003E\u003C\u002Fp\u003E\u003Cp\u003Eмог и выполняться для данных в памяти, и превращаться в SQL запрос для базы данных.\u003C\u002Fp\u003E\u003Cp\u003E\u003C\u002Fp\u003E","imageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F22e\u002F833\u002Fc6a\u002F22e833c6a40bcd5697bf88b959708000.png","buttonTextHtml":"Читать далее","image":{"url":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F22e\u002F833\u002Fc6a\u002F22e833c6a40bcd5697bf88b959708000.png","fit":"cover","positionY":73,"positionX":0}},"editorVersion":"2.0","postType":"article","postLabels":[],"author":{"id":"341439","alias":"GRaAL","fullname":"Алексей Гришин","avatarUrl":"\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Favatars\u002F481\u002F3a3\u002F311\u002F4813a3311a12b5573dd8508ddc311f4d.gif","speciality":"Разработчик широкого профиля","scoreStats":{"score":192,"votesCount":312},"rating":0,"relatedData":null,"contacts":[{"title":"Сайт","url":"https:\u002F\u002Fridero.ru\u002Fbooks\u002Fkhudoi_mir\u002F","value":"https:\u002F\u002Fridero.ru\u002Fbooks\u002Fkhudoi_mir\u002F","siteTitle":null,"favicon":null},{"title":"Сайт","url":"https:\u002F\u002Fstore.steampowered.com\u002Fsearch\u002F?term=volcanic+giraffe","value":"https:\u002F\u002Fstore.steampowered.com\u002Fsearch\u002F?term=volcanic+giraffe","siteTitle":null,"favicon":null},{"title":"Github","url":"https:\u002F\u002Fgithub.com\u002FAlexeyGrishin\u002F","value":"AlexeyGrishin","siteTitle":null,"favicon":null}],"authorContacts":[{"title":"Сайт","url":"https:\u002F\u002Fridero.ru\u002Fbooks\u002Fkhudoi_mir\u002F","value":"https:\u002F\u002Fridero.ru\u002Fbooks\u002Fkhudoi_mir\u002F","siteTitle":null,"favicon":null},{"title":"Сайт","url":"https:\u002F\u002Fstore.steampowered.com\u002Fsearch\u002F?term=volcanic+giraffe","value":"https:\u002F\u002Fstore.steampowered.com\u002Fsearch\u002F?term=volcanic+giraffe","siteTitle":null,"favicon":null},{"title":"Github","url":"https:\u002F\u002Fgithub.com\u002FAlexeyGrishin\u002F","value":"AlexeyGrishin","siteTitle":null,"favicon":null}],"paymentDetails":{"paymentYandexMoney":null,"paymentPayPalMe":null,"paymentWebmoney":null},"donationsMethod":null,"isInBlacklist":null,"careerProfile":null},"statistics":{"commentsCount":4,"favoritesCount":28,"readingCount":3691,"score":17,"votesCount":17,"votesCountPlus":17,"votesCountMinus":0},"hubs":[{"id":"84","alias":"crazydev","type":"collective","title":"Ненормальное программирование","titleHtml":"Ненормальное программирование","isProfiled":true,"relatedData":null},{"id":"375","alias":"java","type":"collective","title":"Java","titleHtml":"Java","isProfiled":true,"relatedData":null},{"id":"17188","alias":"compilers","type":"collective","title":"Компиляторы","titleHtml":"Компиляторы","isProfiled":true,"relatedData":null},{"id":"19441","alias":"kotlin","type":"collective","title":"Kotlin","titleHtml":"Kotlin","isProfiled":true,"relatedData":null}],"flows":[{"id":"1","alias":"develop","title":"Разработка","titleHtml":"Разработка"}],"relatedData":{"vote":null,"unreadCommentsCount":0,"bookmarked":false,"canComment":false,"canEdit":false,"canViewVotes":false,"votePlus":{"canVote":false,"isChargeEnough":false,"isKarmaEnough":false,"isVotingOver":true,"isPublicationLimitEnough":false},"voteMinus":{"canVote":false,"isChargeEnough":false,"isKarmaEnough":false,"isVotingOver":true,"isPublicationLimitEnough":false},"canModerateComments":false,"trackerSubscribed":false,"emailSubscribed":false},"textHtml":"\u003Cdiv xmlns=\"http:\u002F\u002Fwww.w3.org\u002F1999\u002Fxhtml\"\u003E\u003Cfigure class=\"full-width \"\u003E\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw1560\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F22e\u002F833\u002Fc6a\u002F22e833c6a40bcd5697bf88b959708000.png\" alt=\"Я слышал, ты любишь компилировать kotlin...\" title=\"Я слышал, ты любишь компилировать kotlin...\" width=\"1882\" height=\"1191\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F22e\u002F833\u002Fc6a\u002F22e833c6a40bcd5697bf88b959708000.png\"\u002F\u003E\u003Cfigcaption\u003EЯ слышал, ты любишь компилировать kotlin...\u003C\u002Ffigcaption\u003E\u003C\u002Ffigure\u003E\u003Cp\u003EНа kotlin для работы с базами я использую библиотечку \u003Ca href=\"https:\u002F\u002Fjooq.org\" rel=\"noopener noreferrer nofollow\"\u003EJOOQ\u003C\u002Fa\u003E. У неё хороший генератор кода и достаточно вменяемый синтаксис для составления запросов. Вот например:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Edsl.selectFrom(Tables.ANIMALS)\n   .where(Tables.ANIMALS.POPULATION.greaterThan(1000))\n   .orderBy(Tables.ANIMALS.NAME)\n   .map { \"${it.name}: ${it.population}\" }\n   .toList()\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EМожно ли лучше? Например, как это сделано в C# LINQ? \u003C\u002Fp\u003E\u003Cp\u003EДа, можно. Вот рабочий код:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Edsl.selectQueryableFrom(Tables.ANIMALS)\n   .filter { it.population &gt; 1000 }\n   .sortedBy { it.name }\n   .map { \"${it.name}: ${it.population}\" }\n   .toList()\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EА вот SQL запрос, который отправляется в базу в результате этого вызова:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"sql\"\u003Eselect ((\"ANIMALS\".\"NAME\" || ': ') || cast(\"ANIMALS\".\"POPULATION\" as varchar)) \"col0\" \n  from \"ANIMALS\" \n  where \"ANIMALS\".\"POPULATION\" &gt; 1000 \n  order by \"ANIMALS\".\"NAME\" asc\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EДальше я расскажу, как это работает.\u003C\u002Fp\u003E\u003Ch3\u003EКак это выглядит и работает в C#\u003C\u002Fh3\u003E\u003Cp\u003EВот простой пример кода. Есть 2 функции, одна принимает \u003Ccode\u003EFunc\u003C\u002Fcode\u003E, другая - \u003Ccode\u003EExpression\u003C\u002Fcode\u003E. В обе можно передать одну и ту же лямбду.\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"cs\"\u003Einternal class Program\n{\n static void ReceiveLambda(Func&lt;int, int&gt; lambda)\n {\n   Console.WriteLine(lambda(2));    \u002F\u002F (1)\n   Console.WriteLine(lambda);       \u002F\u002F (2)\n }\n\n static void ReceiveExpression(Expression&lt;Func&lt;int, int&gt;&gt; lambda)\n {\n   Console.WriteLine(lambda.Compile()(2));  \u002F\u002F (1)\n   Console.WriteLine(lambda);               \u002F\u002F (2)\n }\n\n public static void Main(string[] args)\n {\n   ReceiveLambda(it =&gt; it * 2);\n   ReceiveExpression(it =&gt; it * 2);\n }\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EЕсли переданную лямбду просто выполнить (строчки помеченные как \u003Cem\u003E(1)\u003C\u002Fem\u003E), то результат будет одинаковым - выведется 4.\u003Cbr\u002F\u003EНо если вывести саму лямбду (строчки помеченные как \u003Cem\u003E(2)\u003C\u002Fem\u003E), то результат будет отличаться. Метод, принимающий \u003Ccode\u003EFunc\u003C\u002Fcode\u003E, выведет\u003C\u002Fp\u003E\u003Cp\u003E\u003Ccode\u003ESystem.Func`2[System.Int32,System.Int32]\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\u003Cp\u003EА метод, принимающий \u003Ccode\u003EExpression\u003C\u002Fcode\u003E, выведет:\u003C\u002Fp\u003E\u003Cp\u003E\u003Ccode\u003Eit =&gt; (it * 2)\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\u003Cp\u003EИ вот как это выглядит в отладчике:\u003C\u002Fp\u003E\u003Cfigure class=\"full-width \"\u003E\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw1560\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F753\u002Fded\u002Fc03\u002F753dedc03cf0f44e7a655bead2ecfd90.png\" width=\"649\" height=\"529\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F753\u002Fded\u002Fc03\u002F753dedc03cf0f44e7a655bead2ecfd90.png\"\u002F\u003E\u003Cfigcaption\u003E\u003C\u002Ffigcaption\u003E\u003C\u002Ffigure\u003E\u003Cp\u003EКомпилятор C# знает, что если метод принимает Expression, то надо передать в него не просто исполняемую функцию, а \u003Cabbr title=\"Abstract Syntax Tree\" type=\"abbr\"\u003EAST\u003C\u002Fabbr\u003E. Это позволяет во время исполнения анализировать используемую лямбду, брать из неё значения, имена вызываемых методов и т.д. Эта особенность позволяет писать код вроде:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"cs\"\u003E\u002F\u002FQuerying with LINQ to Entities \nusing (var context = new SchoolDBEntities())\n{\n    var query = context.Students\n                       .where(s =&gt; s.StudentName == \"Bill\")\n                       .FirstOrDefault&lt;Student&gt;();\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EИ дальше его можно как выполнить над коллекцией в памяти, так и преобразовать в SQL.\u003C\u002Fp\u003E\u003Cp\u003EМожно почитать об этом тут на хабре: \u003Ca href=\"https:\u002F\u002Fhabr.com\u002Fru\u002Fpost\u002F256821\u002F\" rel=\"noopener noreferrer nofollow\"\u003Ehttps:\u002F\u002Fhabr.com\u002Fru\u002Fpost\u002F256821\u002F\u003C\u002Fa\u003E\u003C\u002Fp\u003E\u003Cp\u003EВ Kotlin\u002FJVM такого нет. Лямбды при компиляции превращаются в анонимные классы или статические методы, в рантайме их изначальное содержимое неизвестно. Да, в теории мы можем посмотреть в байткод, но байткод может сильно отличаться от исходного листинга в силу оптимизаций.\u003C\u002Fp\u003E\u003Cp\u003EНапример, вот такое выражение на kotlin:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Eval a = maxOf(2, 3)\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EПри компиляции в байткод и де-компиляции обратно в java (для наглядности) превратится вот в такое:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"java\"\u003Ebyte var2 = 2;\nbyte var3 = 3;\nfinal int a = Math.max(var2, var3);\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EИсходное название функции “потерялось”, т.к. функция \u003Ccode\u003EmaxOf\u003C\u002Fcode\u003E объявлена как \u003Ccode\u003Einline\u003C\u002Fcode\u003E.\u003C\u002Fp\u003E\u003Cp\u003EА такое выражение:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Eval b = if (arrayOf(3).isEmpty()) 5 else 6\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EПревращается вот в такое:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"java\"\u003EInteger[] var2 = new Integer[]{3};\nfinal int b = var2.length == 0 ? 5 : 6;\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EДа, эти примеры искусственны, но в общем случае мы не можем быть уверены, что из байткода мы 100% восстановим то, что было написано в kotlin коде. А это именно то, что программист видит перед собой, и именно это он ожидает увидеть в AST.\u003C\u002Fp\u003E\u003Cp\u003EЗначит, нужно:\u003C\u002Fp\u003E\u003Col\u003E\u003Cli\u003E\u003Cp\u003EДостать AST из лямбды на этапе компиляции\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EПодсунуть этот AST в код, однозначно ассоциировав с конкретной лямбдой\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Fol\u003E\u003Cp\u003EНачнём по порядку.\u003C\u002Fp\u003E\u003Ch3\u003EИзвлечение AST из исходного кода\u003C\u002Fh3\u003E\u003Cp\u003EБеглый гуглёж нашёл две наиболее часто упоминаемых библиотеки.\u003Cbr\u002F\u003EОдна из них - \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fcretz\u002Fkastree\" rel=\"noopener noreferrer nofollow\"\u003E\u003Cu\u003Ekastree\u003C\u002Fu\u003E\u003C\u002Fa\u003E - заброшена. Вторая - \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fkotlinx\u002Fast\" rel=\"noopener noreferrer nofollow\"\u003E\u003Cu\u003East\u003C\u002Fu\u003E\u003C\u002Fa\u003E -  выглядит живой. При подаче на вход простого kotlin кода получаем что-то такое:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Efun main() {\n   KotlinGrammarAntlrKotlinParser.parseKotlinFile(AstSource.String(\"\", \"\"\"\n       val d = { it &gt; 5 }\n   \"\"\".trimIndent())).print()\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cdetails class=\"spoiler\"\u003E\u003Csummary\u003EРезультат\u003C\u002Fsummary\u003E\u003Cdiv class=\"spoiler__content\"\u003E\u003Cpre\u003E\u003Ccode\u003EkotlinFile\n  packageHeader\n  importList\n  topLevelObject\n    declaration\n      propertyDeclaration\n        VAL &gt;&gt;&gt;val&lt;&lt;&lt; (DEFAULT_TOKEN_CHANNEL)\n        WS &gt;&gt;&gt; &lt;&lt;&lt; (HIDDEN)\n        variableDeclaration\n          simpleIdentifier\n            Identifier &gt;&gt;&gt;d&lt;&lt;&lt; (DEFAULT_TOKEN_CHANNEL)\n        WS &gt;&gt;&gt; &lt;&lt;&lt; (HIDDEN)\n        ASSIGNMENT &gt;&gt;&gt;=&lt;&lt;&lt; (DEFAULT_TOKEN_CHANNEL)\n        WS &gt;&gt;&gt; &lt;&lt;&lt; (HIDDEN)\n        expression\n          disjunction\n            conjunction\n              equality\n                comparison\n                  genericCallLikeComparison\n                    infixOperation\n                      elvisExpression\n                        infixFunctionCall\n                          rangeExpression\n                            additiveExpression\n                              multiplicativeExpression\n                                asExpression\n                                  prefixUnaryExpression\n                                    postfixUnaryExpression\n                                      primaryExpression\n                                        functionLiteral\n                                          lambdaLiteral\n                                            LCURL &gt;&gt;&gt;{&lt;&lt;&lt; (DEFAULT_TOKEN_CHANNEL)\n                                            WS &gt;&gt;&gt; &lt;&lt;&lt; (HIDDEN)\n                                            statements\n                                              statement\n                                                expression\n                                                  disjunction\n                                                    conjunction\n                                                      equality\n                                                        comparison\n                                                          genericCallLikeComparison\n                                                            infixOperation\n                                                              elvisExpression\n                                                                infixFunctionCall\n                                                                  rangeExpression\n                                                                    additiveExpression\n                                                                      multiplicativeExpression\n                                                                        asExpression\n                                                                          prefixUnaryExpression\n                                                                            postfixUnaryExpression\n                                                                              primaryExpression\n                                                                                simpleIdentifier\n                                                                                  Identifier &gt;&gt;&gt;it&lt;&lt;&lt; (DEFAULT_TOKEN_CHANNEL)\n                                                          WS &gt;&gt;&gt; &lt;&lt;&lt; (HIDDEN)\n                                                          comparisonOperator\n                                                            RANGLE &gt;&gt;&gt;&gt;&lt;&lt;&lt; (DEFAULT_TOKEN_CHANNEL)\n                                                          WS &gt;&gt;&gt; &lt;&lt;&lt; (HIDDEN)\n                                                          genericCallLikeComparison\n                                                            infixOperation\n                                                              elvisExpression\n                                                                infixFunctionCall\n                                                                  rangeExpression\n                                                                    additiveExpression\n                                                                      multiplicativeExpression\n                                                                        asExpression\n                                                                          prefixUnaryExpression\n                                                                            postfixUnaryExpression\n                                                                              primaryExpression\n                                                                                literalConstant\n                                                                                  IntegerLiteral &gt;&gt;&gt;5&lt;&lt;&lt; (DEFAULT_TOKEN_CHANNEL)\n                                            WS &gt;&gt;&gt; &lt;&lt;&lt; (HIDDEN)\n                                            RCURL &gt;&gt;&gt;}&lt;&lt;&lt; (DEFAULT_TOKEN_CHANNEL)\n    semis\n      EOF &gt;&gt;&gt;&lt;EOF&gt;&lt;&lt;&lt; (DEFAULT_TOKEN_CHANNEL)\n  EOF &gt;&gt;&gt;&lt;EOF&gt;&lt;&lt;&lt; (DEFAULT_TOKEN_CHANNEL)\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E\u003C\u002Fp\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdetails\u003E\u003Cp\u003EМногословно, но разобраться можно. Главное, что лямбды хорошо выделяются.\u003C\u002Fp\u003E\u003Cp\u003EВ теории, можно было бы использовать это дерево как есть. Но мне оно показалось слишком многословным и сложным. Особенно если потом его в рантайме пытаться разобрать. Хорошо бы вот такая конструкция превращалась в дерево из 3х узлов, как в C#, а не 300.\u003C\u002Fp\u003E\u003Cp\u003EПотратив некоторое время на упрощатор, получилось превращать простые лямбды в такие вот деревья.\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode\u003EGreater(\n   LambdaArgument(number=0), \n   Value(value=5)\n)\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EКазалось бы, задача решена? Не совсем. Что если нам в лямбдах попадаются:\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003Eконстанты\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003Eлокальные переменные\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003Eприватные поля\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003Eконструкторы классов?\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003EНапример, вот так:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Eval one = 1\nval d = { it &gt; one }\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cpre\u003E\u003Ccode\u003EGreater(\n   LambdaArgument(number=0),\n   Identifier(name=one)\n)\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EКогда мы находимся на этапе парсинга кода, то мы, увы, не имеем доступа к рефлексии или вообще какой бы то ни было модели исполняемого кода. У нас есть только имя, а что оно означает - неизвестно. Если бы мы были внутри компилятора, то наверное у нас эта информация была бы. Но мы пока снаружи.\u003C\u002Fp\u003E\u003Cp\u003EПока что придётся вставлять это всё как идентификаторы без конкретного смысла. Вернёмся к этой проблеме позже. А пока поймём, как нам эту информацию сохранить на этапе компиляции и использовать в рантайме.\u003C\u002Fp\u003E\u003Cp\u003EВ идеале нам нужно сделать так, чтобы вместо кода\u003C\u002Fp\u003E\u003Cp\u003E\u003Ccode\u003Efilter { it &gt; 5 }\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\u003Cp\u003EСтало\u003C\u002Fp\u003E\u003Cp\u003E\u003Ccode\u003Efilter({it &gt; 5} withExpression Greater(LambdaArgument(0), Value(5)))\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\u003Ch3\u003ERuntime. Попытка 1 (через KSP и ориентирование по именам классов)\u003C\u002Fh3\u003E\u003Cp\u003EГуглёж по тому, как встроиться в процесс компиляции, приводит нас к kapt, а оттуда, через уведомление об устаревании этого способа, к KSP. Про него есть \u003Ca href=\"https:\u002F\u002Fhabr.com\u002Fru\u002Fpost\u002F582530\u002F\" rel=\"noopener noreferrer nofollow\"\u003E\u003Cu\u003Eхорошая статья\u003C\u002Fu\u003E\u003C\u002Fa\u003E тут на хабре.\u003C\u002Fp\u003E\u003Cp\u003EСначала всё хорошо - можно получить информацию о классах, сгенерировать свои и подсунуть. Поддерживается инкрементальная компиляция, т.е. если kotlin пересобрал 1 файл, то и нам он закинет 1 файл на обработку.\u003C\u002Fp\u003E\u003Cp\u003EПроблема в том, что таким образом можно создавать новые файлы, но нельзя менять существующие. То есть первоначальная цель недостижима. Что можно было попробовать сделать - это сохранить AST отдельно. А адресовать с помощью имени класса - как мы видим из байткода, все лямбды превращаются в классы с уникальными именами. А имена у них генерируются по некоему правилу, которое можно воссоздать.\u003C\u002Fp\u003E\u003Cp\u003EТаким образом я написал реализацию \u003Ccode\u003ESymbolProcessor\u003C\u002Fcode\u003E для KSP, которая:\u003C\u002Fp\u003E\u003Col\u003E\u003Cli\u003E\u003Cp\u003EДля каждого source файла, который надо обработать, генерирует отдельный класс, сопоставляющий класс лямбды и выражение:\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Fol\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003E@LambdaExpressionInitializer class `io_github_kotlinq_processortest`: Initializer {\n   override fun initialize(e: Expressions) {\n      e.registerFactory(\"io.github.kotlinq.processor.A\\$qso\\$1\") { Greater(LambdaArgument(0),Identifier(\"\"\"r1\"\"\") ) }\n      e.registerFactory(\"io.github.kotlinq.processor.A\\$qso\\$2\") {  Plus(Plus(LambdaArgument(0),LambdaArgument(1)),Identifier(\"\"\"r2\"\"\") ) }\n      e.registerFactory(\"io.github.kotlinq.processor.A\\$stream\\$1\") {  Greater(LambdaArgument(0),Plus(Identifier(\"\"\"r2\"\"\") ,Value(2))) }\n   }\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Col start=\"2\"\u003E\u003Cli\u003E\u003Cp\u003EЧтобы классы нашлись в рантайме, когда надо, так же генерирую \u003Ccode\u003EMETA-INF\u002Fservices\u002F&lt;мой интерфейс&gt;\u003C\u002Fcode\u003E, где перечисляю все сгенерированные файлы.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EВ рантайме я использую \u003Ccode\u003EServiceLoader\u003C\u002Fcode\u003E, чтобы получить все реализации моего интерфейса. Про этот механизм в java тоже были статьи на хабре: \u003Ca href=\"https:\u002F\u002Fhabr.com\u002Fru\u002Fpost\u002F118488\u002F\" rel=\"noopener noreferrer nofollow\"\u003Ehttps:\u002F\u002Fhabr.com\u002Fru\u002Fpost\u002F118488\u002F\u003C\u002Fa\u003E\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Fol\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Eobject Expressions {\n\n\tfun registerFactory(className: String, expressionFactory: ExpressionFactory) { .. }\n\n\tinternal fun getExpression(className: String): Node {\n\t   return expressions[className]!!.invoke()\n\t}\n\n\tinit {\n\t   for (initializer in ServiceLoader.load(Initializer::class.java)) {\n\t\t   initializer.initialize(this)\n\t   }\n\t}\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EТеперь, после компиляции, можно для переданной лямбды получить соответствующее выражение (ну или ошибку, если что-то пошло не так)\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Efun filter(predicate: (T) -&gt; Boolean) {\n    val expression: Node = Expressions.getExpression(predicate.className)\n    println(expression)\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EИ это работает! Пока в лямбдах не появляются ссылки на константы, поля, методы, конструкторы - и иные объекты языка.\u003C\u002Fp\u003E\u003Cp\u003EДля проверок я собрал вот такой вот “тестовый стенд”:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Econst val A = \"top level const\"\nval B get() = \"top level prop\"\nprivate val C = \"top level const\u002Fprop\"\nvar D = \"top level mutable prop\"\nfun E(): String { return \"top level fun\"}\n\n@EmbedLambdaExpressions\nclass ClosureExample {\n   fun getExpression(): Node {\n       val R = \"local val\"\n       var S = \"local var\"\n       fun T(): String = \"local fun\"\n       return lambdaAsIs({\n           \"test\" in listOf(A, B, C, D, E(), F, G, H, I, J(), K(), L, L(), M(), N, O, P(), Q(), R, S, T(), ClosureExample2.U, ClosureExample3.V)\n       }).expression()\n   }\n   companion object L {\n       val F = \"companion object val\"\n       const val G = \"companion object const\"\n       val H get() = \"companion object prop\"\n       var I: String get() = \"companion object mutable prop\"\n           set(_) {TODO()}\n       fun J(): String = \"companion object fun\"\n       @JvmStatic fun K(): String = \"static fun\"\n       operator fun invoke() = \"companion object invoke\"\n       override fun toString(): String { return \"companion object instance\" }\n   }\n   private fun M() = \"private class function\"\n   protected val N = \"protected class val\"\n   internal val O get() = \"internal class prop\"\n   inline fun P() = \"inline class function\"\n   inner class Q { override fun toString(): String = \"inner class instance\" }\n   fun &lt;L&gt; lambdaAsIs(l: L) = l\n}\nclass ClosureExample2 { companion object { val U = \"another class no-named companion object val\" } }\nobject ClosureExample3 { val V = \"top-level object val\" }\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EТут все способы сослаться на какое-то значение, которое я смог придумать. Для каждого случая хочется получить или конкретное значение (константы), или полные имена (методы, конструкторы) для дальнейшей обработки.\u003C\u002Fp\u003E\u003Cp\u003EПервая версия, само собой, проверку не проходила. Надо было думать как быть.\u003C\u002Fp\u003E\u003Ch3\u003ERuntime. Попытка 2 (KSP + javassist)\u003C\u002Fh3\u003E\u003Cp\u003EВот у нас есть лямбда:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Efilter { it &gt; someValue }\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EНам нужно в рантайме понять, что такое \u003Ccode\u003EsomeValue\u003C\u002Fcode\u003E, и сопоставить с нашей лямбдой и с именем \u003Ccode\u003EsomeValue\u003C\u002Fcode\u003E. Т.е. сделать что-то вроде:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003EExpressions.setArgument(\"ClosureExample$getExpression$1\", \"someValue\", someValue)\nfilter {it &gt; someValue}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EАналогично с именами методов и конструкторов, только там вставлять не само значение, а ссылку\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003EExpressions.setArgument(\"ClosureExample$getExpression$1\", \"someFn\", ::someFn)\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EНо для этого надо как-то поменять исходный код или байт код. Исходный код с помощью KSP менять не получится. А после компиляции поменять байт код можно?\u003C\u002Fp\u003E\u003Cp\u003EДа. Для этого есть разные инструменты. Я воспользовался решением \u003Ca href=\"https:\u002F\u002Fwww.javassist.org\u002F\" rel=\"noopener noreferrer nofollow\"\u003Ejavassist\u003C\u002Fa\u003E. И для него, что характерно, тоже есть \u003Ca href=\"https:\u002F\u002Fhabr.com\u002Fru\u002Fpost\u002F664818\u002F\" rel=\"noopener noreferrer nofollow\"\u003E\u003Cu\u003Eстатья на хабре\u003C\u002Fu\u003E\u003C\u002Fa\u003E).\u003C\u002Fp\u003E\u003Cp\u003EОбработчик я добавил в билд отдельной задачей:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Etask(\"kotlinqPostProcess\", JavaExec::class) {\n   group = \"other\"\n   dependsOn(\"kspKotlin\")\n   mainClass.set(\"io.github.kotlinq.processor.PostProcessor\")\n   classpath = project.sourceSets.getAt(\"main\").runtimeClasspath\n}\ntasks.build.get().dependsOn(“kotlinqPostProcess”)\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EСам \u003Ccode\u003EPostProcessor\u003C\u002Fcode\u003E проходит по нужным \u003Ccode\u003Eclass\u003C\u002Fcode\u003E файлам, снова ищет лямбды (которые на этом этапе уже превратились в классы с методом \u003Ccode\u003Einvoke\u003C\u002Fcode\u003E), и дальше пытается в их теле найти ссылки на методы, переменные, константы и прочее. А потом перезаписывает \u003Ccode\u003Eclass\u003C\u002Fcode\u003E файл в то же место.\u003C\u002Fp\u003E\u003Cp\u003EИ вот тут пришлось весьма попотеть, чтобы покрыть все случаи моего тестового стенда. Например, что происходит, если лямбда вызывает приватный метод?\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Eclass ClosureExample {\n   fun getExpression(): Node {\n       return lambdaAsIs({ M() }).expression()\n   }\n   private fun M() = \"private class function\"\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EПри анализе байт-кода выясняется, что вызывается некий метод \u003Ccode\u003Eaccess$M\u003C\u002Fcode\u003E.\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode\u003E   L0\n    LINENUMBER 20 L0\n    ALOAD 0\n    GETFIELD io\u002Fgithub\u002Fkotlinq\u002Fexpression\u002FClosureExample$getExpression$2.this$0 : Lio\u002Fgithub\u002Fkotlinq\u002Fexpression\u002FClosureExample;\n    INVOKESTATIC io\u002Fgithub\u002Fkotlinq\u002Fexpression\u002FClosureExample.access$M (Lio\u002Fgithub\u002Fkotlinq\u002Fexpression\u002FClosureExample;)Ljava\u002Flang\u002FString;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EА что это за метод?\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode\u003E  public final static synthetic access$M(Lio\u002Fgithub\u002Fkotlinq\u002Fexpression\u002FClosureExample;)Ljava\u002Flang\u002FString;\n   L0\n    LINENUMBER 14 L0\n    ALOAD 0\n    INVOKESPECIAL io\u002Fgithub\u002Fkotlinq\u002Fexpression\u002FClosureExample.M ()Ljava\u002Flang\u002FString;\n    ARETURN\n   L1\n    LOCALVARIABLE $this Lio\u002Fgithub\u002Fkotlinq\u002Fexpression\u002FClosureExample; L0 L1 0\n    MAXSTACK = 1\n    MAXLOCALS = 1\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EА это такой секретный публичный метод, который можно вызвать из другого класса (ведь лямбда после компиляции превратилась в другой класс, и просто так приватные методы изначального класса вызывать не может). Приходится учитывать такой вариант наименования.\u003C\u002Fp\u003E\u003Cp\u003EА вот это что такое? Access понятно, а что за \u003Ccode\u003E$p\u003C\u002Fcode\u003E в конце?\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode\u003E   L0\n    LINENUMBER 20 L0\n    INVOKESTATIC io\u002Fgithub\u002Fkotlinq\u002Fexpression\u002FClosureExampleKt.access$getC$p ()Ljava\u002Flang\u002FString;\n   L1\n    ARETURN\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EА это приватное поле объявленное вне класса, на высшем уровне.\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Eprivate val C = \"top level const\u002Fprop\"\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EА вот у нас два локальных значения:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Eval R = \"local val\"\nvar S = \"local var\"\nreturn lambdaAsIs { listOf(S, R) }\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EЭто превратится в класс, как мы уже знаем, и в него передадутся указанные значения. Сигнатура у этого класса будет примерно таким:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode\u003Efinal class io\u002Fgithub\u002Fkotlinq\u002Fexpression\u002FClosureExample$getExpression$2 extends kotlin\u002Fjvm\u002Finternal\u002FLambda implements kotlin\u002Fjvm\u002Ffunctions\u002FFunction0 {\n\npublic final invoke()Ljava\u002Futil\u002FList; { ... }\n\n  \u002F\u002F access flags 0x1010\n  final synthetic Lkotlin\u002Fjvm\u002Finternal\u002FRef$ObjectRef; $S\n\n  \u002F\u002F access flags 0x1010\n  final synthetic Ljava\u002Flang\u002FString; $R\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EЧто ж, в рантайме можно с помощью reflection извлечь значения для \u003Ccode\u003ER\u003C\u002Fcode\u003E и \u003Ccode\u003ES\u003C\u002Fcode\u003E прямо из объекта лямбды. Но если \u003Ccode\u003ER\u003C\u002Fcode\u003E (который \u003Ccode\u003Eval\u003C\u002Fcode\u003E) мы можем использовать как есть, то для \u003Ccode\u003ES\u003C\u002Fcode\u003E (который \u003Ccode\u003Evar\u003C\u002Fcode\u003E) надо сначала развернуть \u003Ccode\u003EObjectRef\u003C\u002Fcode\u003E. Или \u003Ccode\u003EIntRef\u003C\u002Fcode\u003E. Или \u003Ccode\u003EByteRef\u003C\u002Fcode\u003E. И почему они все не реализуют один интерфейс?\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Eprivate fun Any?.unwrap(): Any? {\n   return when(this) {\n       null -&gt; null\n       is ObjectRef&lt;*&gt; -&gt; element\n       is ByteRef -&gt; element\n       is IntRef -&gt; element\n       is DoubleRef -&gt; element\n       is FloatRef -&gt; element\n       is BooleanRef -&gt; element\n       is CharRef -&gt; element\n       is ShortRef -&gt; element\n       is LongRef -&gt; element\n       else -&gt; this\n   }\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EВ общем, пост процессинг получился очень сложным и хрупким. Находим метод или поле, и давай отрубать “$” с разных сторон и пытаться угадать - это то, что нам нужно, или что-то левое?\u003C\u002Fp\u003E\u003Cp\u003EКонечно, было бы куда проще, если бы мы работали с исходным кодом на котлине. В теории можно было бы взять наш AST, сгенерировать код на \u003Ccode\u003Ekotlin\u003C\u002Fcode\u003E, который вызывает всё то же, что вызывается внутри лямбды, и вставить это всё в код. Но тут есть нюанс: \u003Ccode\u003Ejavassist \u003C\u002Fcode\u003Eможет компилировать \u003Ccode\u003Ejava \u003C\u002Fcode\u003Eкод, но не может компилировать \u003Ccode\u003Ekotlin\u003C\u002Fcode\u003E. А то, что в котлине выглядит как просто \u003Ccode\u003Ereturn X\u003C\u002Fcode\u003E, на java может быть и \u003Ccode\u003Ereturn getX()\u003C\u002Fcode\u003E или вот даже \u003Ccode\u003Ereturn access$getX$p()\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\u003Cp\u003EЯ задумался о том, что в каком-нибудь \u003Ccode\u003EC\u002FC++\u003C\u002Fcode\u003E проблема модификации исходного кода легко решалась макросами. А вот в \u003Ccode\u003EJava\u003C\u002Fcode\u003E\u002F\u003Ccode\u003EKotlin\u003C\u002Fcode\u003E ничего такого нет.\u003C\u002Fp\u003E\u003Cp\u003EКонечно, написать простой препроцессор из разряда “взять файл, погрепать и положить обратно” несложно. Но надо же ещё как-то встроить его в процесс билда, чтобы изменённый файл (и только он) был виден только компилятору, а система контроля версий видела бы только исходный файл. Есть ли такой инструмент?\u003C\u002Fp\u003E\u003Cp\u003EДа, есть. Это плагин к компилятору \u003Ccode\u003Ekotlin\u003C\u002Fcode\u003E.\u003C\u002Fp\u003E\u003Ch3\u003ERuntime. Попытка 3 (плагин к компилятору котлина)\u003C\u002Fh3\u003E\u003Cp\u003EПро это есть тоже \u003Ca href=\"https:\u002F\u002Fhabr.com\u002Fru\u002Fcompany\u002Fbadoo\u002Fblog\u002F566380\u002F\" rel=\"noopener noreferrer nofollow\"\u003E\u003Cu\u003Eстатья на хабре\u003C\u002Fu\u003E\u003C\u002Fa\u003E, хотя я обходился \u003Ca href=\"https:\u002F\u002Fblog.bnorm.dev\u002Fwriting-your-second-compiler-plugin-part-1\" rel=\"noopener noreferrer nofollow\"\u003E\u003Cu\u003Eэтой статьёй\u003C\u002Fu\u003E\u003C\u002Fa\u003E, а так же исследованием официальных примеров (например \u003Ca href=\"https:\u002F\u002Fgithub.com\u002FJetBrains\u002Fkotlin\u002Fblob\u002Fmaster\u002Fplugins\u002Fallopen\u002Fallopen-cli\u002Fsrc\u002FAllOpenPlugin.kt\" rel=\"noopener noreferrer nofollow\"\u003E\u003Cu\u003EAll Open plugin\u003C\u002Fu\u003E\u003C\u002Fa\u003E)\u003C\u002Fp\u003E\u003Cp\u003EВ пакете \u003Ccode\u003Eorg.jetbrains.kotlin.extensions\u003C\u002Fcode\u003E (из подключаемой библиотеки \u003Ccode\u003Eorg.jetbrains.kotlin:kotlin-compiler-embeddable:1.6.21\u003C\u002Fcode\u003E ) можно найти несколько интерфейсов. Эти интерфейсы и есть поддерживаемое api для плагинов к компилятору. Я опасался, что тут будут только “высокоуровневые” точки подключения, однако опасения мои оказались напрасными. Есть прекрасный \u003Ccode\u003EPreprocessedVirtualFileFactoryExtension\u003C\u002Fcode\u003E , который позволяет подменить тело файла при чтении его с диска.\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003E\u002F**\n * The interface for the extensions that are used to substitute VirtualFile on the creation of KtFile, allows to preprocess a file before\n * lexing and parsing\n *\u002F\ninterface PreprocessedVirtualFileFactoryExtension {\n    companion object : ProjectExtensionDescriptor&lt;PreprocessedVirtualFileFactoryExtension&gt;(\n        \"org.jetbrains.kotlin.preprocessedVirtualFileFactoryExtension\",\n        PreprocessedVirtualFileFactoryExtension::class.java\n    )\n\n    fun isPassThrough(): Boolean\n\n    fun createPreprocessedFile(file: VirtualFile?): VirtualFile?\n    fun createPreprocessedLightFile(file: LightVirtualFile?): LightVirtualFile?\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EЕго я и реализовал. При чтении kotlin файла с диска проверялось, что его надо обрабатывать (для этого в конфигурации плагина можно было указать packages), после чего доставал AST, искал внутри лямбды, в лямбдах ссылки наружу - всё как и раньше. И затем подменял исходный файл, заворачивая лямбды в специальный класс с AST внутри.\u003C\u002Fp\u003E\u003Cp\u003EНапример:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003E@Kotlinq\nfun main() {\n    val lambda: (Int) -&gt; Int ={ it * 3 }\n    println(lambda.expression)\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003Eпревращается в:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003E@Kotlinq\nfun main() {\n    val lambda: (Int) -&gt; Int = (withExpression1({ it * 3 }, { Multiply(LambdaArgument(0),Value(3)) }))\n    println(lambda.expression)\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EПри таком подходе значительно упростилась та часть, которая разруливала ссылки на константы, методы и прочее. В общем-то достаточно было добавить те же вызовы в генерируемый код, если у нас вызов “без скобочек” (\u003Ccode\u003Eval\u003C\u002Fcode\u003E, \u003Ccode\u003Evar\u003C\u002Fcode\u003E, \u003Ccode\u003Econst\u003C\u002Fcode\u003E), и ссылку если вызов “со скобочками” (функции и конструкторы). Но и тут не обошлось без казусов.\u003C\u002Fp\u003E\u003Cp\u003EНапример, вот такая лямбда:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003E@Kotlinq\nfun main() {\n   val lambda: (Int) -&gt; Boolean = { it in listOf(2, 3) }\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EПревращается в:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003E@Kotlinq\nfun main() {\n    val lambda: (Int) -&gt; Boolean = (withExpression1({ it in listOf(2, 3) }, { Call(Identifier(\"in\"),LambdaArgument(0),Call(Ref(::listOf),Value(2),Value(3))) }))\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EСсылка на метод \u003Ccode\u003ElistOf\u003C\u002Fcode\u003E добавилась. Но компиляция падает, потому что:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode\u003ECallable reference resolution ambiguity: \npublic inline fun &lt;T&gt; listOf(): List&lt;T&gt; defined in kotlin.collections\npublic fun &lt;T&gt; listOf(element: T): List&lt;T&gt; defined in kotlin.collections\npublic fun &lt;T&gt; listOf(vararg elements: T): List&lt;T&gt; defined in kotlin.collections\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EЯ не нашёл способа разрулить такие проблемы, кроме как в конфигурацию плагина добавить список исключений, для которых не надо пытаться вставить ссылку.\u003C\u002Fp\u003E\u003Cp\u003EДругая проблема - как отличить вызов метода от вызова конструктора? Кажется, разницы нет, но она всё же есть:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003E@Kotlinq\nfun main() {\n    val lambda: (Int) -&gt; Pair&lt;Int, Int&gt; = { Pair(it, it*2) }\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003Eпревращается в:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003E    val lambda: (Int) -&gt; Pair&lt;Int, Int&gt; = (withExpression1({ Pair(it, it*2) }, { Call(Ref(::Pair),LambdaArgument(0),Multiply(LambdaArgument(0),Value(2))) }))\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003Eи валится с ошибкой компиляции:\u003C\u002Fp\u003E\u003Cp\u003E\u003Ccode\u003ENot enough information to infer type variable A\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\u003Cp\u003EПотому что класс \u003Ccode\u003EPair\u003C\u002Fcode\u003E - generic класс, и конструктору нужны параметры типов. Но в ссылке на компилятор их никак не передать. Было бы здорово передать ссылку на класс, а не на конструктор, как \u003Ccode\u003EPair::class\u003C\u002Fcode\u003E. Но для этого наш плагин должен знать, что \u003Ccode\u003EPair(1,2)\u003C\u002Fcode\u003E это конструктор, а \u003Ccode\u003ElistOf(1,2)\u003C\u002Fcode\u003E - это метод.\u003C\u002Fp\u003E\u003Cp\u003EВ итоге решения два:\u003C\u002Fp\u003E\u003Col\u003E\u003Cli\u003E\u003Cp\u003EПо-умолчанию плагин считает, что если название с маленькой буквы - это метод, а если с большой - это класс\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EИсключения можно явно настроить в конфигурации плагина\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Fol\u003E\u003Cp\u003EДёшево и сердито.\u003C\u002Fp\u003E\u003Cp\u003EКонечно, было бы совсем круто, если бы мы могли воспользовать результатами анализа кода самого компилятора \u003Ccode\u003Ekotlin\u003C\u002Fcode\u003E. Наверняка ещё на ранних стадиях обработки он уже знает, какой символ обозначает класс, а какой - метод, и точно знает какую именно сигнатуру.\u003C\u002Fp\u003E\u003Cp\u003EНо на этом этапе я уже очень устал заниматься этим плагином. Может быть, в следующий раз, когда снова захочется странного... Но не сейчас.\u003C\u002Fp\u003E\u003Cp\u003EЭтот вариант я “пустил в дело”, то есть стал на его основе делать свой linq с jooq-ом и лямбдами.\u003C\u002Fp\u003E\u003Ch3\u003EРеализация для JOOQ\u003C\u002Fh3\u003E\u003Cp\u003EСобственно, ради чего всё и затевалось. Чтобы иметь возможность писать код на kotlin и превращать его в sql.\u003Cbr\u002F\u003EДля начала я завёл интерфейс Queryable аналогичный своему коллеге из C#.\u003C\u002Fp\u003E\u003Cp\u003E \u003C\u002Fp\u003E\u003Cfigure class=\"full-width \"\u003E\u003Cimg src=\"https:\u002F\u002Fhabrastorage.org\u002Fr\u002Fw1560\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F58b\u002F2f5\u002F5d9\u002F58b2f55d9593f1e28b7c3d5e8e02cef9.png\" width=\"1627\" height=\"887\" data-src=\"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F58b\u002F2f5\u002F5d9\u002F58b2f55d9593f1e28b7c3d5e8e02cef9.png\"\u002F\u003E\u003Cfigcaption\u003E\u003C\u002Ffigcaption\u003E\u003C\u002Ffigure\u003E\u003Cp\u003EИ сделал реализацию\u002Fадаптер для обычного sequence. В этом адаптере я просто вызываю передаваемые лямбды и никак не работаю с их AST. Теперь нужно было сделать то же самое для sql выражения.\u003C\u002Fp\u003E\u003Cp\u003EВ JOOQ всё довольно неплохо продумано. Любое SELECT выражение можно “превратить” в таблицу и работать с ним как с таблицей (в SQL это будет вложенный запрос). Что позволяет для разных уровней вложенности использовать один и тот же код, с небольшими отличиями под специфичные ситуации. Ситуаций таких я выделил три - вон там выше три класса \u003Ccode\u003EDataView\u003C\u002Fcode\u003E. Отличаются они тем, как трактовать AST лямбд, особенно что такое \u003Ccode\u003Eit\u003C\u002Fcode\u003E.\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003Eтаблица в базе (it == сгенерированный Record);\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003Eзапрос с несколькими полями (it == произвольный пользовательский класс);\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003Eзапрос с одним полем (it == скалярное значение).\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003EВот эти три ситуации:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Edsl.selectQueryableFrom(Tables.USERS)\n\t\u002F\u002F тут it - это UserRecord, сгенерированный jooq-ом из схемы в базе\n\t\u002F\u002F название проперти соотносится с именем колонки в таблице\n\t.filter { it.age &gt; 15 }\n\t.map { Pair(it.name, it.age) }\n\t\u002F\u002F тут it - это уже экземпляр класса Pair, никак не связанный с jooq-овскими структурами\n\t\u002F\u002F надо где-то “записать”, что second - это исходное поле age\n\t.filter { it.second &gt; 15 }\n\t.map { it.second }\n\t\u002F\u002F а тут it - это уже одна колонка в запросе\n\t.filter { it &gt; 15}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EНемного пробегусь по методам Queryable:\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003E\u003Ccode\u003Efilter\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\u003Cp\u003EТут AST дерево разбирается без особых прикрас. Разве что нужно не забывать про особую обработку null-ов. \u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003E fun condition(node: Node): Condition {\n    val secondChildIsNull = (node is TwoChildren &amp;&amp; node.right == Value(null))\n    return when {\n \t   node is And -&gt; condition(node.left).and(condition(node.right))\n \t   node is Or -&gt; condition(node.left).or(condition(node.right))\n \t   node is Equal &amp;&amp; secondChildIsNull -&gt; field&lt;Any&gt;(node.left).isNull\n \t   node is Equal -&gt; field&lt;Any&gt;(node.left).eq(field&lt;Any&gt;(node.right) as Field&lt;*&gt;)\n \t   node is NotEqual &amp;&amp; secondChildIsNull -&gt; field&lt;Any&gt;(node.left).notEqual(field&lt;Any&gt;(node.right) as Field&lt;*&gt;)\n \t   node is Less -&gt; field&lt;Any&gt;(node.left).lessThan(field&lt;Any&gt;(node.right) as Field&lt;*&gt;)\n \t   node is LessOrEqual -&gt; field&lt;Any&gt;(node.left).lessOrEqual(field&lt;Any&gt;(node.right) as Field&lt;*&gt;)\n \t   node is Greater -&gt; field&lt;Any&gt;(node.left).greaterThan(field&lt;Any&gt;(node.right) as Field&lt;*&gt;)\n \t   node is GreaterOrEqual -&gt; field&lt;Any&gt;(node.left).greaterOrEqual(field&lt;Any&gt;(node.right) as Field&lt;*&gt;)\n \t   node is UnaryBang -&gt; condition(node.child).not()\n \t   node is GetProperty\n \t\t\t   || node is Value\n \t\t\t   || node is Val\n \t\t\t   || node is Call\n \t\t\t   || node is LambdaArgument\n \t   -&gt; field&lt;Any&gt;(node).isTrue\n \t   else -&gt; error(\"Cannot get conditions from $node\")\n\n    }\n }\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EРезультат разбора (jooq condition) сохраняется во внутреннем поле. SQL выражение составляется и выполняется только при вызове терминальных операций, вроде \u003Ccode\u003EtoList\u003C\u002Fcode\u003E, \u003Ccode\u003Ecount\u003C\u002Fcode\u003E и \u003Ccode\u003Eaggregate\u003C\u002Fcode\u003E.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003E\u003Ccode\u003Etake\u003C\u002Fcode\u003E \u002F \u003Ccode\u003Edrop\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\u003Cp\u003EТоже сохраняем переданные значения для использования позже\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003E\u003Ccode\u003EsortedBy\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\u003Cp\u003EТут надо превратить AST в выражение, по которому можно сортировать. Логика тут тоже не особо замысловатая:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Efun &lt;T&gt; field(node: Node): Field&lt;T&gt; {\n\n   return when(node) {\n\t   is Unknown -&gt; error(\"Impossible to use unknown node: ${node}\")\n\t   is UnaryMinus -&gt; DSL.minus(field&lt;Number&gt;(node))\n\t   is UnaryPlus -&gt; field(node)\n\t   is UnaryBang -&gt; DSL.not(field&lt;Boolean&gt;(node))\n\t   is Plus -&gt; field&lt;T&gt;(node.left).plus(field&lt;T&gt;(node.right))\n\t   is Minus -&gt; field&lt;T&gt;(node.left).minus(field&lt;T&gt;(node.right))\n\t   is Multiply -&gt; field&lt;Number&gt;(node.left).mul(field&lt;Number&gt;(node.right))\n\t   is Divide -&gt; field&lt;Number&gt;(node.left).div(field&lt;Number&gt;(node.right))\n\t   is And, is Or -&gt; error(\"Cannot use logical operations as fields\")\n\t   is Equal, is NotEqual, is Less,\n\t   is Greater, is GreaterOrEqual, is LessOrEqual,\n\t\t   -&gt; error(\"Cannot use comparison operations as fields\")\n\t   is GetProperty -&gt; when {\n\t\t   node.left is LambdaArgument -&gt; nodeToJooq.field(node.right, node.left as LambdaArgument)\n\t\t   else -&gt; error(\"Cannot parse $node\")\n\t   }\n\t   is Concat -&gt; DSL.concat(*node.children.map { field&lt;String&gt;(it) }.toTypedArray())\n\t   is Identifier -&gt; dataView?.getField(node.name) ?: error(\"Unknown identifier ${node.name}\")\n\t   is Value -&gt; DSL.value(node.value)\n\t   is LambdaArgument -&gt; dataView?.getField() ?: nodeToJooq.field(node, node)\n\t   is Call -&gt; call(node)\n\t   is Val -&gt; DSL.value(node.value)\n\t   is Ref -&gt; error(\"Cannot use references\")\n\t   is Error -&gt; error(node.errorMessage)\n   } as Field&lt;T&gt;\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003E\u003Ccode\u003EsortedDescendingBy\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\u003Cp\u003EАналогично, только надо добавить desc.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003E\u003Ccode\u003Emap\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\u003Cp\u003EНаиболее сложная операция. В теории внутри передаваемой функции может быть любое выражение, и если сразу после map идёт toList - надо возвращать именно то, что было попрошено. Т.е. \u003Ccode\u003Equeryable.map(fn).toList()\u003C\u002Fcode\u003E должно возвращать то же самое, что вернуло бы \u003Ccode\u003Equeryable.toList().map(fn)\u003C\u002Fcode\u003E.\u003C\u002Fp\u003E\u003Cp\u003EВ общем случае я не знаю как это решить. Решил для двух частных случаев:\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003Efn возвращает скалярное значение;\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003Efn возвращает экземпляр data class, у которого только один конструктор - основной.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003E\u003C\u002Fp\u003E\u003Cp\u003EВ первом случае выполняем тот же парсинг AST, что и для \u003Ccode\u003EsortedBy\u003C\u002Fcode\u003E. Получаем в итоге sql выражение представляющее один столбец \u002F значение. Дальше его выполнить, взять единственный столбец и привести тип к ожидаемому типу данных.\u003C\u002Fp\u003E\u003Cp\u003EВо втором случае с помощью reflection можно получить список полей класса и их порядок, для каждого аргумента конструктора выполнить преобразование как для случая с одиночным значением. При выполнении SQL мы получим от JOOQ экземпляр \u003Ccode\u003ERecord\u003C\u002Fcode\u003E с тем же числом полей. Дальше мы можем сконструировать экземпляры \u003Ccode\u003Edata class\u003C\u002Fcode\u003E передав значения из \u003Ccode\u003ERecord\u003C\u002Fcode\u003E в конструктор в порядке их определения.\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Equeryable\n  \u002F\u002F запоминаем запрошенные поля таблицы - name и age\n  \u002F\u002F запоминаем порядок аргументов и тип класса\n  .map { Pair(it.name, it.age) }   \n  \u002F\u002F знаем, что second - второй аргумент\n  \u002F\u002F были выбраны два поля - name и age\n  \u002F\u002F значит second == age\n  \u002F\u002F его и подставляем в итоговое sql выражение\n  .filter { it.second &gt; 18 }\t\n  \u002F\u002F тут мы выполняем SQL и получаем от JOOQ набор экземпляров\n  \u002F\u002F org.jooq.Record с двумя полями\n  \u002F\u002F для каждого Record создаём экземпляр Pair и передаём\n  \u002F\u002F значения полей в качестве аргументов конструктора\n  .toList()\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003E\u003Ccode\u003EtoList\u003C\u002Fcode\u003E \u002F \u003Ccode\u003Ecount\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\u003Cp\u003EНа этом этапе составляется и исполняется sql запрос. Разница только в том, что остаётся в выражении \u003Ccode\u003Eselect\u003C\u002Fcode\u003E - перечисление полей, или \u003Ccode\u003Ecount(*)\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003E\u003Ccode\u003Eaggregate\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\u003Cp\u003EНе хотелось ограничивать себя или других перечнем конкретных операций. Поэтому был заведён реестр \u003Cs\u003Eиностранных агентов\u003C\u002Fs\u003E функций и способов их преобразования в агрегирующие выражения.\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003EregisterAggregator(Iterable&lt;Int&gt;::maxOrNull) { field -&gt; DSL.max(field) }\nregisterAggregator(Iterable&lt;Int&gt;::minOrNull) { field -&gt; DSL.min(field) }\nregisterAggregator(Iterable&lt;Int&gt;::sum) { field -&gt; DSL.sum(field as Field&lt;out Number&gt;?) }\nregisterAggregator(Iterable&lt;Int&gt;::average) { field -&gt; DSL.avg(field as Field&lt;out Number&gt;?) }\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EЭто позволяет использовать привычные функции для агрегирования значений и регистрировать свои в случае необходимости\u003C\u002Fp\u003E\u003Cp\u003E\u003Ccode\u003Eprintln(queryable.aggregate { it.sum() }) \u003C\u002Fcode\u003E\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Ch3\u003EГде всё это искать\u003C\u002Fh3\u003E\u003Cp\u003EВот репозиторий с самой библиотекой и плагином к kotlin, \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fkotlinqs\u002Fkotlinq\" rel=\"noopener noreferrer nofollow\"\u003E\u003Cu\u003Eинструкция по установке в readme\u003C\u002Fu\u003E\u003C\u002Fa\u003E.\u003C\u002Fp\u003E\u003Cp\u003EВот \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fkotlinqs\u002Fkotlinq-jooq\" rel=\"noopener noreferrer nofollow\"\u003E\u003Cu\u003Eрепозиторий с реализацией для jooq\u003C\u002Fu\u003E\u003C\u002Fa\u003E.\u003C\u002Fp\u003E\u003Cp\u003EИ вот \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fkotlinqs\u002Fkotlinq-jooq-example\" rel=\"noopener noreferrer nofollow\"\u003E\u003Cu\u003Eрепозиторий с полноценным примером\u003C\u002Fu\u003E\u003C\u002Fa\u003E.\u003C\u002Fp\u003E\u003Cp\u003EМожно склонировать, собрать и запустить. Один и тот же “запрос” прогоняется для коллекции в памяти и для БД.\u003C\u002Fp\u003E\u003Cp\u003EВот такое выражение:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"kotlin\"\u003Eval report = storage.species()\n   .join(\n       storage.animals(),\n       { s, a -&gt; s.id == a.speciesId },\n       { s, a -&gt; AnimalDescription(s.name, a.name, a.population \u002F Thousand) }\n   )\n   .sortedDescendingBy { it.popularityK }\n   .filter { it.popularityK &gt; 0 }\n   .map { \"${it.speciesName.uppercase()}: ${it.animalName}  [${it.popularityK}K]\" }\n   .toList()\n   .joinToString(\"\\n\")\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EИ вот такой получается SQL:\u003C\u002Fp\u003E\u003Cpre\u003E\u003Ccode class=\"sql\"\u003Eselect (((((upper(\"alias_28974773\".\"speciesName\") || ': ') || \"alias_28974773\".\"animalName\") || '  [') || cast(\"alias_28974773\".\"popularityK\" as varchar)) || 'K]') \"col0\"\n   from (select \"left\".\"NAME\" \"speciesName\", \"right\".\"NAME\" \"animalName\", (\"right\".\"POPULATION\" \u002F 1000) \"popularityK\"\n           from \"PUBLIC\".\"SPECIES\" \"left\"\n           join \"PUBLIC\".\"ANIMALS\" \"right\"\n           on \"left\".\"ID\" = \"right\".\"SPECIES_ID\"\n   ) \"alias_28974773\"\n   where \"alias_28974773\".\"popularityK\" &gt; 0\n   order by \"alias_28974773\".\"popularityK\" desc\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch3\u003EЧто дальше\u003C\u002Fh3\u003E\u003Cp\u003EНе знаю. Своё любопытство я удовлетворил. Покажу коллегам, если им понравится - может быть попробуем использовать в наших продуктах. Если нет - значит пополнит список моих никому не нужных творений.\u003C\u002Fp\u003E\u003Cp\u003EБесполезное творчество в любом случае лучше, чем полезное разрушение.\u003C\u002Fp\u003E\u003Cp\u003EВсем мир.\u003C\u002Fp\u003E\u003Cp\u003E\u003C\u002Fp\u003E\u003C\u002Fdiv\u003E","tags":[{"titleHtml":"kotlin"},{"titleHtml":"linq"},{"titleHtml":"lambda"},{"titleHtml":"ksp"},{"titleHtml":"javassist"},{"titleHtml":"свобода"},{"titleHtml":"равенство"},{"titleHtml":"упячка"}],"metadata":{"stylesUrls":[],"scriptUrls":[],"shareImageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F22e\u002F833\u002Fc6a\u002F22e833c6a40bcd5697bf88b959708000.png","shareImageWidth":1200,"shareImageHeight":630,"vkShareImageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F22e\u002F833\u002Fc6a\u002F22e833c6a40bcd5697bf88b959708000.png","schemaJsonLd":"{\"@context\":\"http:\\\u002F\\\u002Fschema.org\",\"@type\":\"Article\",\"mainEntityOfPage\":{\"@type\":\"WebPage\",\"@id\":\"https:\\\u002F\\\u002Fhabr.com\\\u002Fru\\\u002Farticles\\\u002F669694\\\u002F\"},\"headline\":\"Прокачиваем kotlin: используем AST лямбд в рантайме\",\"datePublished\":\"2022-06-06T12:13:28+03:00\",\"dateModified\":\"2022-06-06T12:58:15+03:00\",\"author\":{\"@type\":\"Person\",\"name\":\"Алексей Гришин\"},\"publisher\":{\"@type\":\"Organization\",\"name\":\"Habr\",\"logo\":{\"@type\":\"ImageObject\",\"url\":\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fwebt\\\u002Fa_\\\u002Flk\\\u002F9m\\\u002Fa_lk9mjkccjox-zccjrpfolmkmq.png\"}},\"description\":\"Я слышал, ты любишь компилировать kotlin...На kotlin для работы с базами я использую библиотечку JOOQ. У неё хороший генератор кода и достаточно вменяемый синтак...\",\"url\":\"https:\\\u002F\\\u002Fhabr.com\\\u002Fru\\\u002Farticles\\\u002F669694\\\u002F#post-content-body\",\"about\":[\"h_crazydev\",\"h_java\",\"h_compilers\",\"h_kotlin\",\"f_develop\"],\"image\":[\"https:\\\u002F\\\u002Fhabr.com\\\u002Fshare\\\u002Fpublication\\\u002F669694\\\u002Fca8206cb66d07040baa02d09da6faa51\\\u002F\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fupload_files\\\u002F22e\\\u002F833\\\u002Fc6a\\\u002F22e833c6a40bcd5697bf88b959708000.png\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fupload_files\\\u002F753\\\u002Fded\\\u002Fc03\\\u002F753dedc03cf0f44e7a655bead2ecfd90.png\",\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fgetpro\\\u002Fhabr\\\u002Fupload_files\\\u002F58b\\\u002F2f5\\\u002F5d9\\\u002F58b2f55d9593f1e28b7c3d5e8e02cef9.png\"]}","metaDescription":"Я слышал, ты любишь компилировать kotlin... На kotlin для работы с базами я использую библиотечку JOOQ . У неё хороший генератор кода и достаточно вменяемый синтаксис для составления запросов. Вот...","mainImageUrl":null,"amp":true,"customTrackerLinks":[]},"polls":[],"commentsEnabled":{"status":true,"reason":null},"rulesRemindEnabled":false,"votesEnabled":true,"status":"published","plannedPublishTime":null,"checked":null,"hasPinnedComments":false,"format":null,"banner":null,"multiwidget":null,"multiwidgetUuid":null,"readingTime":18,"complexity":null,"isEditorial":false}},"articlesIds":{},"isLoading":false,"pagesCount":{},"route":{},"reasonsList":null,"postReasonsList":null,"view":"list","lastVisitedRoute":{},"ssrCommentsArticleIds":[""],"viewedPosts":[],"myFeedFilter":{"complexity":"all","score":"all","types":["articles","posts","news"]},"myFeedIsApplyFilters":false,"myFeedIsForce":false,"karma":{"userReasonsList":null}},"authorContribution":{"authors":{}},"betaTest":{"currentAnnouncement":null,"announcements":{},"announcementCards":null,"announcementComments":{},"announcementCommentThreads":{},"announcementCommentingStatuses":{},"archivedList":[]},"authorStatistics":{"articleRefs":{},"articleIds":{},"pagesCount":{},"route":{},"viewsCount":[],"maxStatsCount":{}},"career":{"seoLandings":[{"title":"Java разработчик","vacanciesCount":211,"itemUrl":"https:\u002F\u002Fcareer.habr.com\u002Fvacancies\u002Fjava_developer","itemHubs":["java","javame_dev","gradle"]}],"hubs":"crazydev,java,compilers,kotlin"},"comments":{"articleComments":{},"articlePinnedComments":{},"searchCommentsResults":null,"pagesCount":null,"commentAccess":{},"scrollParents":{},"pageArticleComments":{"lastViewedComment":0,"postId":null,"lastCommentTimestamp":"","moderated":[],"moderatedIds":[],"commentRoute":"","idempotenceKey":""}},"companies":{"companyRefs":{},"companyIds":{},"companyTopIds":{},"pagesCount":{},"companyProfiles":{},"companiesCategories":[],"companiesCategoriesTotalCount":0,"companiesWidgets":{},"companiesWorkers":{},"companiesFans":{},"multiwidgets":{},"route":{},"isLoading":false,"companyWorkersLoading":false,"companyFansLoading":false,"multiwidgetLoading":false,"vacancies":{},"companiesGalleries":{},"companiesBanners":{},"companiesLandingVacancies":{},"companiesTechnologies":{},"workplaceInfo":null},"companyAdmin":{"companyInfo":null,"companyInfoLoading":false,"faqArticles":null,"brandingPreviewImageUrl":null,"jivoStatus":0,"adminNotifications":null,"availableInvitesCount":{}},"companyAdd":{"currentStep":"","stepsData":{},"uncompletedSteps":[],"isStepLoading":true,"isStepCommitting":false,"isInitialized":false,"agreementContent":""},"companiesContribution":{"hubs":{},"flows":{},"companyRefs":{}},"companyHubsContribution":{"contributionRefs":{"hubRefs":{},"hubIds":{}}},"conversation":{"messages":[],"respondent":null,"isLoadMore":false},"conversations":{"conversations":[],"pagesCount":0},"docs":{"menu":{},"articles":{},"mainMenu":[],"loading":{"main":false,"dropdown":false,"article":false}},"feature":{"isProbablyVisible":true},"fixedBanner":{"isArticleStickyPanelVisible":false,"isArticleStickyPanelAtTheBottom":false,"isFixedBannerVisible":false,"isStickyPanelIconsHidden":false},"flows":{"flows":[{"id":"1","alias":"develop","title":"Разработка","titleHtml":"Разработка","route":{"name":"FLOW_PAGE","params":{"flowName":"develop"}}},{"id":"6","alias":"admin","title":"Администрирование","titleHtml":"Администрирование","route":{"name":"FLOW_PAGE","params":{"flowName":"admin"}}},{"id":"2","alias":"design","title":"Дизайн","titleHtml":"Дизайн","route":{"name":"FLOW_PAGE","params":{"flowName":"design"}}},{"id":"3","alias":"management","title":"Менеджмент","titleHtml":"Менеджмент","route":{"name":"FLOW_PAGE","params":{"flowName":"management"}}},{"id":"4","alias":"marketing","title":"Маркетинг","titleHtml":"Маркетинг","route":{"name":"FLOW_PAGE","params":{"flowName":"marketing"}}},{"id":"7","alias":"popsci","title":"Научпоп","titleHtml":"Научпоп","route":{"name":"FLOW_PAGE","params":{"flowName":"popsci"}}}],"updates":{}},"global":{"isPwa":false,"device":"mobile","isHabrCom":true,"requestId":"fb2fd2b30cbf1800cf948ae6ad1f535e"},"hubs":{"hubRefs":{},"hubIds":{},"pagesCount":{},"isLoading":false,"route":{}},"hubsBlock":{"hubRefs":{},"hubIds":{}},"i18n":{"fl":"ru","hl":"ru"},"info":{"welcomePage":{},"isLoading":true},"location":{"urlStruct":{"protocol":null,"slashes":null,"auth":null,"host":null,"port":null,"hostname":null,"hash":null,"query":{},"pathname":"\u002Fru\u002Farticles\u002F669694\u002F","path":"\u002Fru\u002Farticles\u002F669694\u002F","href":"\u002Fru\u002Farticles\u002F669694\u002F"}},"me":{"user":null,"uuid":null,"ppgDemanded":false,"karmaResetInfo":{"canReincarnate":null,"wasReincarnated":null,"currentScore":null},"notes":null,"userUpdates":{"feeds":{"newPostsCount":null,"newThreadsCount":null,"newNewsCount":null,"newCount":null},"conversationUnreadCount":0}},"mostReadingList":{"mostReadingListIds":[],"mostReadingListRefs":null,"promoPost":null},"onboarding":{"currentStep":null,"stepsData":{},"stepsErrors":{},"completedSteps":[],"isStepCommitting":false,"isCommitDisabled":true},"ppa":{"articles":{},"card":null,"transactions":null,"totalTransactions":null,"isAccessible":null},"projectsBlocks":{"activeBlocks":{"courses":"project-block-article"}},"promoData":{"isLoading":false,"hasLoaded":false,"featurer":null,"megaposts":null,"promoLinks":null,"promoPosts":null,"sticker":null},"publicationStatistics":{"statsInfo":{},"statsFunnels":{},"statsGraph":{},"defaultSuggest":{},"suggest":{},"timeTracker":{},"isTrackingActivity":false,"isUserActive":true,"otherPublicationStats":{}},"pullRefresh":{"shouldRefresh":false},"sandbox":{"articleIds":[],"articleRefs":{},"pagesCount":null,"route":{},"lastVisitedRoute":{},"isLoading":false},"search":{"searchQueryError":null},"settingsOther":{"inputs":{"uiLang":{"errors":[],"ref":null,"value":""},"articlesLangEnglish":{"errors":[],"ref":null,"value":false},"articlesLangRussian":{"errors":[],"ref":null,"value":false},"agreement":{"errors":[],"ref":null,"value":false},"email":{"errors":[],"ref":null,"value":true},"digest":{"errors":[],"ref":null,"value":true}}},"similarList":{"similarListIds":[],"similarListRefs":null},"ssr":{"error":null,"isDataLoaded":true,"isDataLoading":false,"isHydrationFailed":false,"isServer":false},"stories":{"stories":[{"id":"story-998","author":{"logo":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F91a\u002F166\u002F49f\u002F91a16649f9ef89302a5a56cfa22a451d.png","title":"Яндекс Практикум","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up"},"title":"Как расти на работе?","lang":"ru","startTime":"2025-03-18T18:45:00+03:00","finishTime":"2025-03-31T19:00:00+03:00","slides":[{"id":"story-998_1","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fbf4\u002F911\u002F7e6\u002Fbf49117e637ff2099b3944f8803cd7a3.png","button":null},{"id":"story-998_2","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F3e3\u002Fc84\u002Fe83\u002F3e3c84e8330ea1ddf72e9d310457ed2f.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_3","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F84b\u002F533\u002F3c3\u002F84b5333c3e77e8dac62a8b50d042acb9.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_4","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F257\u002Feb0\u002F2be\u002F257eb02bea1777e13f3e647cae6e06cd.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_5","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F858\u002F086\u002F0ed\u002F8580860ed3497c043c04f9a42054d74f.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_6","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fcdf\u002F32f\u002F387\u002Fcdf32f38777f046c063b5182f4125e14.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_7","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fd48\u002Ff2d\u002F0e2\u002Fd48f2d0e2ecd7d746d738191bb913d8f.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_8","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fb38\u002Ffd7\u002Fee0\u002Fb38fd7ee04848bf3b058be7403438bd1.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_9","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F79e\u002Feaa\u002F9d8\u002F79eeaa9d8af5a288ad42bd9d63b5793a.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}},{"id":"story-998_10","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fcdc\u002F17e\u002F385\u002Fcdc17e38582dc67838b9abfb200d982e.png","button":{"title":"Расти в карьере","link":"https:\u002F\u002Fu.habr.com\u002Fstories_up","colorType":"light"}}]},{"id":"story-996","author":{"logo":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fe63\u002F36d\u002Fa24\u002Fe6336da24460ab6b9fbc347d03eb263a.png","title":"Хабр","link":null},"title":"Здоровье айтишника","lang":"ru","startTime":"2025-03-17T10:22:00+03:00","finishTime":"2025-04-13T10:22:00+03:00","slides":[{"id":"story-996_1","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fb7c\u002F6de\u002F8ea\u002Fb7c6de8ea6789dbc30f071716172b6dd.jpg","button":null},{"id":"story-996_2","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F2e7\u002F88a\u002F0fe\u002F2e788a0fe61729ca8b23eb59069c844f.jpg","button":{"title":"Личный опыт","link":"https:\u002F\u002Fu.habr.com\u002Fzd-1","colorType":"light"}},{"id":"story-996_3","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fb93\u002F6f4\u002F256\u002Fb936f425653b84fa60ab00d09f78c543.jpg","button":{"title":"Как это было","link":"https:\u002F\u002Fu.habr.com\u002Fzd-2","colorType":"light"}},{"id":"story-996_4","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fc10\u002Fd14\u002Ff5a\u002Fc10d14f5a4859fe10baecbcc2bcb8828.jpg","button":{"title":"Шея в фокусе","link":"https:\u002F\u002Fu.habr.com\u002Fzd-3","colorType":"dark"}},{"id":"story-996_5","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F535\u002Fe1b\u002F77a\u002F535e1b77a9eb896262ad73321f2ad99f.jpg","button":{"title":"Фотоинструкция","link":"https:\u002F\u002Fu.habr.com\u002Fzd-4","colorType":"light"}},{"id":"story-996_6","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F569\u002Fc39\u002F49f\u002F569c3949f5b330ea85d4a1864f481c3d.jpg","button":{"title":"Сидите (не)правильно","link":"https:\u002F\u002Fu.habr.com\u002Fzd-5","colorType":"dark"}},{"id":"story-996_7","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F1f2\u002F1de\u002Fdbf\u002F1f21dedbf2902bc4061a75b839b63595.jpg","button":{"title":"Журнал изменений","link":"https:\u002F\u002Fu.habr.com\u002Fzd-6","colorType":"dark"}},{"id":"story-996_8","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F95a\u002F164\u002F21b\u002F95a16421badc3a9f1135309ab0c42c41.jpg","button":{"title":"Альтернатива","link":"https:\u002F\u002Fu.habr.com\u002Fzd-7","colorType":"light"}},{"id":"story-996_9","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F624\u002F027\u002F54d\u002F62402754d311798af44bcfe7f9abfedc.jpg","button":{"title":"Хроника поисков","link":"https:\u002F\u002Fu.habr.com\u002Fzd-8","colorType":"dark"}}]},{"id":"story-992","author":{"logo":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F3fe\u002F2fc\u002Fb05\u002F3fe2fcb05df852d7e1e00d44e54e39ae.png","title":"Сезоны Хабра","link":"https:\u002F\u002Fu.habr.com\u002Ffnstories"},"title":"Угадайте будущее в новом сезоне","lang":"ru","startTime":"2025-03-12T19:15:00+03:00","finishTime":"2025-03-31T23:56:00+03:00","slides":[{"id":"story-992_1","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fc56\u002Faf5\u002Fc43\u002Fc56af5c4377f7f7b94f7b6ad20fc92c3.png","button":{"title":"А что за сезон?","link":"https:\u002F\u002Fu.habr.com\u002Ffnstories","colorType":"light"}},{"id":"story-992_2","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F8fa\u002Fde7\u002F65d\u002F8fade765d99207f31c597283ae6ce912.png","button":{"title":"Какие темы нужны","link":"https:\u002F\u002Fu.habr.com\u002Ffnstories","colorType":"dark"}},{"id":"story-992_3","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F23e\u002F7b9\u002Fb24\u002F23e7b9b24cb056d1a42e8d31ccea16ce.png","button":{"title":"Сезон будущего ИИ","link":"https:\u002F\u002Fu.habr.com\u002Ffnstories","colorType":"dark"}},{"id":"story-992_4","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F27b\u002Fbfc\u002Fa18\u002F27bbfca18e656ee0122b5cb8eb2cb502.png","button":{"title":"Все правила сезона","link":"https:\u002F\u002Fu.habr.com\u002Ffnstories","colorType":"dark"}},{"id":"story-992_5","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F1e0\u002F6c6\u002Ff33\u002F1e06c6f33e703bbd2b2ae3baee3376fd.png","button":{"title":"Как участвовать","link":"https:\u002F\u002Fu.habr.com\u002Ffnstories","colorType":"dark"}}]},{"id":"story-990","author":{"logo":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F282\u002Fe80\u002Fbf1\u002F282e80bf1b73484126ed53c6f3e42692.png","title":"Aeza","link":"https:\u002F\u002Fu.habr.com\u002FI72qi"},"title":"С праздником весны!","lang":"ru","startTime":"2025-03-09T10:15:00+03:00","finishTime":"2025-03-30T23:59:00+03:00","slides":[{"id":"story-990_1","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F064\u002F9dd\u002Ff59\u002F0649ddf5949cae6c9342fb62034a36ac.png","button":null},{"id":"story-990_2","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F05f\u002F96b\u002F25e\u002F05f96b25e910c32256ee0b1916f21380.png","button":{"title":"Семейная история","link":"https:\u002F\u002Fu.habr.com\u002Fey2bY","colorType":"light"}},{"id":"story-990_3","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fcd1\u002Ff5d\u002F921\u002Fcd1f5d921bb9489ac11727272660bdb6.png","button":{"title":"Движущиеся картинки","link":"https:\u002F\u002Fu.habr.com\u002FWLKXU","colorType":"light"}},{"id":"story-990_4","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fb55\u002Fd45\u002Fec5\u002Fb55d45ec50e53275c60d16ea886a0672.png","button":{"title":"Личный опыт","link":"https:\u002F\u002Fu.habr.com\u002FSxrki","colorType":"light"}},{"id":"story-990_5","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Ffa7\u002F1ce\u002Ffca\u002Ffa71cefca5ed0a3fe8b50bd703b3605f.png","button":{"title":"Алгоритм","link":"https:\u002F\u002Fu.habr.com\u002Ftbz2p","colorType":"light"}},{"id":"story-990_6","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F435\u002F89d\u002Ff90\u002F43589df9018846cc6a8eed986226b252.png","button":{"title":"Выбрать сценарий","link":"https:\u002F\u002Fu.habr.com\u002F0RCPk","colorType":"light"}},{"id":"story-990_7","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F514\u002F5f8\u002F619\u002F5145f86194ad48dad48a846b42af0f93.png","button":{"title":"Jiraзамещение","link":"https:\u002F\u002Fu.habr.com\u002FEwhYq","colorType":"light"}},{"id":"story-990_8","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F439\u002Fa83\u002Fae7\u002F439a83ae78f7ef711e3b9bbed1ec26c5.png","button":{"title":"8 вещей","link":"https:\u002F\u002Fu.habr.com\u002FVTv2r","colorType":"light"}},{"id":"story-990_9","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F02d\u002F783\u002F2f7\u002F02d7832f7b1c95d88bff9f34209e204a.png","button":{"title":"Интерфейсы","link":"https:\u002F\u002Fu.habr.com\u002FUFOMZ","colorType":"light"}},{"id":"story-990_10","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F0cb\u002Ff7f\u002F0d9\u002F0cbf7f0d905d486ce4ff82bc939b21d5.png","button":{"title":"Стикеры ваши","link":"https:\u002F\u002Fu.habr.com\u002FoA1K7","colorType":"light"}}]},{"id":"story-984","author":{"logo":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F648\u002F61b\u002F9ae\u002F64861b9aecb7c474cd94063f98045541.png","title":"Хабр","link":null},"title":"Всегда котов!","lang":"ru","startTime":"2025-03-01T00:01:09+03:00","finishTime":"2025-03-23T16:21:00+03:00","slides":[{"id":"story-984_1","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fc06\u002Fc21\u002F93f\u002Fc06c2193ff34362ac2af782cf2571f55.png","button":null},{"id":"story-984_2","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fb68\u002F15f\u002F763\u002Fb6815f7630b9c015b1e67efb5bdf12d4.jpg","button":{"title":"Сделать purrrr","link":"https:\u002F\u002Fu.habr.com\u002Fj4DN1","colorType":"light"}},{"id":"story-984_3","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F550\u002F76e\u002Fd7a\u002F55076ed7a0954e243f944fc2f330623a.png","button":{"title":"Тыгыдык","link":"https:\u002F\u002Fu.habr.com\u002Fya360_kotov","colorType":"dark"}},{"id":"story-984_4","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F2fb\u002F23b\u002F06c\u002F2fb23b06cf294c2050104b2aef589788.jpg","button":{"title":"Исследование","link":"https:\u002F\u002Fu.habr.com\u002FbO3r0","colorType":"light"}},{"id":"story-984_5","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Ff50\u002F50f\u002F0ae\u002Ff5050f0aeea1335c4f0544c1863f8342.jpg","button":{"title":"Детали проекта","link":"https:\u002F\u002Fu.habr.com\u002FQJmhe","colorType":"light"}},{"id":"story-984_6","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F825\u002F3dd\u002F5f5\u002F8253dd5f5c19dd061578f1d09310a45f.jpg","button":{"title":"Эксперименты","link":"https:\u002F\u002Fu.habr.com\u002FVaOdo","colorType":"light"}},{"id":"story-984_7","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F3fb\u002Fc92\u002F0f9\u002F3fbc920f9ea81eca2c1c027ff77fc659.jpg","button":{"title":"Это не мем","link":"https:\u002F\u002Fu.habr.com\u002F0Wb3p","colorType":"light"}},{"id":"story-984_8","image":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F2b4\u002F794\u002Fc33\u002F2b4794c33844e60aad9468018fd132cd.jpg","button":{"title":"В засаде","link":"https:\u002F\u002Fu.habr.com\u002FnasCD","colorType":"dark"}}]}]},"technotext":{"years":[],"technotextDocForNominees":null,"technotextDocForWinners":null,"technotextInfo":{},"technotextInfoLoading":false,"technotextWinners":{},"technotextWinnersLoading":false},"userHubsContribution":{"contributionRefs":{"hubRefs":{},"hubIds":{}}},"userInvites":{"availableInvites":0,"usedInvitesIds":[],"usedInvitesRefs":{},"usedInvitesPagesCount":0,"unusedInvitesIds":[],"unusedInvitesRefs":{},"unusedInvitesPagesCount":0},"userVotes":{"karmaVotesList":[],"karmaVotesPagesCount":null,"karmaVotesListLoading":false,"commentsVotesList":[],"commentsVotesPagesCount":null,"commentsVotesListLoading":false,"postsVotesList":[],"postsVotesPagesCount":null,"postsVotesListLoading":false,"userVotesList":[],"userVotesPagesCount":null,"userVotesListLoading":false},"users":{"authorRefs":{},"authorIds":{},"pagesCount":{},"authorProfiles":{"graal":{"alias":"GRaAL","badgets":[{"title":"Захабренный","description":"Пользователь с кармой \u003E0","url":null,"isRemovable":false},{"title":"Старожил","description":"Пользователь, зарегистрированный более 3-х лет назад, с кармой больше 50","url":null,"isRemovable":false},{"title":"Участник сезона Java","description":"За участие в сезоне Java","url":"https:\u002F\u002Fhabr.com\u002Fru\u002Fspecials\u002F673202\u002F","isRemovable":true},{"title":"Техноавтор 2022","description":"Участник конкурса «Технотекст» 2022","url":null,"isRemovable":true}],"aboutHtml":"","contacts":[{"title":"Сайт","url":"https:\u002F\u002Fridero.ru\u002Fbooks\u002Fkhudoi_mir\u002F","value":"https:\u002F\u002Fridero.ru\u002Fbooks\u002Fkhudoi_mir\u002F","siteTitle":"Худой мир. Тревожные сны в подарок - купить книгу в интернет магазине, автор Алексей Гришин - Ridero","favicon":"https:\u002F\u002Fridero.ru\u002Flandings-assets\u002Ffavicon.ico"},{"title":"Сайт","url":"https:\u002F\u002Fstore.steampowered.com\u002Fsearch\u002F?term=volcanic+giraffe","value":"https:\u002F\u002Fstore.steampowered.com\u002Fsearch\u002F?term=volcanic+giraffe","siteTitle":"Steam Search","favicon":"https:\u002F\u002Fstore.steampowered.com\u002Ffavicon.ico?term=volcanic giraffe"},{"title":"Сайт","url":"https:\u002F\u002Fdiscord.com\u002Fchannels\u002F579390425253543977","value":"https:\u002F\u002Fdiscord.com\u002Fchannels\u002F579390425253543977","siteTitle":"Discord","favicon":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Ffavicon\u002F8373035_favicon.ico"},{"title":"ВКонтакте","url":"https:\u002F\u002Fvk.com\u002Fvolcanicgiraffe","value":"volcanicgiraffe","siteTitle":"VK | VK","favicon":"https:\u002F\u002Fm.vk.com\u002Fimages\u002Ficons\u002Ffavicons\u002Ffav_logo.ico?10"},{"title":"Github","url":"https:\u002F\u002Fgithub.com\u002FAlexeyGrishin\u002F","value":"AlexeyGrishin","siteTitle":"AlexeyGrishin (Alexey Grishin) · GitHub","favicon":"https:\u002F\u002Fgithub.githubassets.com\u002Ffavicons\u002Ffavicon.svg"}],"invitedBy":{"issuerLogin":null,"timeCreated":"2015-03-23T09:32:03+00:00"},"careerProfile":null,"companies":{"pagesCount":1,"companyIds":[],"companyRefs":{}}}},"userHubs":{},"userInvitations":{},"authorFollowers":{},"authorFollowed":{},"userSpecialization":{},"karmaStats":[],"statistics":null,"isLoading":false,"authorFollowersLoading":false,"authorFollowedLoading":false,"userHubsLoading":false,"userInvitationsLoading":false,"route":{}},"viewport":{"prevScrollY":{},"scrollY":0,"width":0},"tracker":{"notificationsLoading":false,"notificationsList":[],"notificationsPageCount":0,"pendingMarkNotificationsRead":[],"publicationsLoading":true,"publicationsList":[],"publicationsPageCount":0,"pendingDeletePublications":false,"pendingMarkPublicationsRead":false},"events":{"eventRefs":{},"eventIds":[],"pagesCount":0,"categories":[],"cities":[],"actualEvents":[{"id":"588","titleHtml":"Конкурс «Снежный код» от Хекслета. Три гранта на бесплатное 10-месячное обучение","descriptionHtml":"\u003Cp\u003EУчаствуйте в конкурсе грантов от онлайн-школы программирования Хекслет. Три победителя пройдут 10-месячное обучение с наставником, освоив один из востребованных стеков: Java, Python, JavaScript, PHP или Node.js.\u003C\u002Fp\u003E\u003Cp\u003EЭто шанс без вложений освоить новый стек, систематизировать знания, восполнить пробелы и повысить свою ценность на рынке. Технологии развиваются быстро — обновляйте навыки, чтобы не отставать.\u003C\u002Fp\u003E\u003Cp\u003EПомимо грантов, можно выиграть доступ ко всем курсам Хекслета, полезные подписки, сертификаты и подарки от Хабра и партнеров.\u003C\u002Fp\u003E\u003Cp\u003EВ прошлом году три победителя успешно завершили программу и уже работают в IT.  Инвестируйте время в свое развитие — участвуйте! \u003C\u002Fp\u003E","imageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Ff79\u002F1fc\u002F79d\u002Ff791fc79d0d9fdda84397ed0c0717764.png","eventUrl":"https:\u002F\u002Fspecial.hexlet.io\u002Fgrant?utm_source=partners&utm_medium=referral&utm_campaign=grant&utm_content=link&utm_term=placement_habr","startDay":"2025-02-17","finishDay":"2025-03-24","isOnline":true,"geo":[],"isArchive":false,"categories":[{"id":"2","titleHtml":"Разработка"}],"tags":["гранты","конкурс","Хекслет","Java","Python","JavaScript","PHP","Node.js"],"metadata":null},{"id":"596","titleHtml":"Офлайн-конференция Хабр х K-team: как удерживать таланты в 2025 году","descriptionHtml":"\u003Cp\u003EМы — Хабр и K-Team — провели масштабное исследование, чтобы разобраться, что на самом деле мотивирует сотрудников оставаться в компании и быть лояльными\u003C\u002Fp\u003E\u003Cp\u003EВместе прошли по тернистому пути к лояльности, опросив&nbsp;3 000+ сотрудников, HR и руководителей из разных отраслей:&nbsp;от ретейла и логистики до IT и промышленности. Мы заботливо собрали самые разные мнения, чтобы понять, что по-настоящему важно для людей, которые остаются в компании надолго и любят свою работу. \u003C\u002Fp\u003E\u003Cp\u003EНаша цель проста — помочь бизнесу не сливать бюджет на бесполезные инициативы, а сотрудникам — получать то, что им действительно нужно. \u003C\u002Fp\u003E\u003Cp\u003EПриглашаем вас на офлайн-презентацию в Москве в марте. Обсудим результаты исследования, ключевые выводы и разберем, как строить эффективные Retention-стратегии в 2025 году.\u003C\u002Fp\u003E\u003Cp\u003EКоличество мест ограничено, заявки проходят модерацию. Если ваша заявка будет одобрена, вы получите письмо с подтверждением и адресом встречи.\u003C\u002Fp\u003E\u003Cp\u003EЕсли прийти не получится — после ивента отправим результаты исследования всем, кто зарегистрируется на лендинге.\u003C\u002Fp\u003E\u003Cp\u003EМентальное здоровье сотрудников — важная часть корпоративной культуры. В «Ясно для бизнеса» изучают, как забота о команде влияет на вовлечённость и эффективность. Они подготовили гайд о работе с молодыми специалистами, а для теста сервиса есть промокод CORP-HABRTLNT-DISC20 на скидку 20% для первых сессий: https:\u002F\u002Fu.habr.com\u002FPQP4b\u003C\u002Fp\u003E\u003Cp\u003E\u003C\u002Fp\u003E","imageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fb14\u002Fcd3\u002F772\u002Fb14cd3772bc67698c8fbfd846e23824a.png","eventUrl":"https:\u002F\u002Fevent.k-team.ru\u002Fexpectations_vs_reality?utm_source=habr","startDay":"2025-03-20","startTime":"10:00","finishDay":"2025-03-20","finishTime":"17:00","isOnline":false,"geo":["Москва"],"isArchive":false,"categories":[{"id":"16","titleHtml":"Другое"}],"tags":["HR","HRD","Удержание сотрудников"],"metadata":null},{"id":"604","titleHtml":"IX HappyWorkForum | Аутентичность и ментальное здоровье персонала","descriptionHtml":"\u003Cp\u003EБолее 250 HRD, первые лица компаний и владельцы крупного бизнеса обсудят лучшие практики благополучия и управление командой.\u003C\u002Fp\u003E\u003Cp\u003EПочему ментальное здоровье становится KPI бизнеса?\u003C\u002Fp\u003E\u003Cp\u003EГде граница ответственности за выгорание и стресс сотрудников?\u003C\u002Fp\u003E\u003Cp\u003EКак стать работодателем №1?\u003C\u002Fp\u003E\u003Cp\u003EКак управлять уставшими командами?\u003C\u002Fp\u003E\u003Cp\u003EКак справляться с выгоранием руководителей?\u003C\u002Fp\u003E\u003Cp\u003EЧем замотивировать сотрудников, когда деньги уже не работают?&nbsp;&nbsp;\u003C\u002Fp\u003E\u003Cp\u003EКак решать ценностные конфликты?\u003C\u002Fp\u003E\u003Cp\u003EУспешные корпоративные программы: что реально работает?&nbsp;&nbsp;\u003C\u002Fp\u003E\u003Cp\u003EВ программе презентация отчёта по развитию лидерства, батлы, практические кейсы и нетворкинг.\u003C\u002Fp\u003E\u003Cp\u003EСреди спикеров, представители компаний: Т-банк, Сравни.ру, Ростелеком, ТД Ренна, Спортмастер, ТрансТелеком, Оптиком, Норникель, Азбука вкуса, ЕВМ и другие.\u003C\u002Fp\u003E\u003Cp\u003EУчастие для HRD, руководителей и владельцев бизнеса без оплаты. Действует строгая модерация.\u003C\u002Fp\u003E\u003Cp\u003E\u003C\u002Fp\u003E","imageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F733\u002F9ef\u002F194\u002F7339ef1945f3ee6906daf89db79829d4.png","eventUrl":"https:\u002F\u002Fhappyforum.ru\u002F?utm_source=habr&utm_medium=email&utm_campaign=hwf","startDay":"2025-03-20","startTime":"10:00","finishDay":"2025-03-20","finishTime":"18:00","isOnline":true,"geo":["Москва"],"isArchive":false,"categories":[{"id":"16","titleHtml":"Другое"}],"tags":["HRD","HR"],"metadata":null},{"id":"612","titleHtml":"Вебинар «Мастерская бюджета: как управлять затратами на облачные ресурсы»","descriptionHtml":"\u003Cp\u003EРасскажем, как сэкономить на использовании облачных сервисов через возможности личного кабинета, сервисы с free tier и акции. Покажем, как оптимизировать потребление ресурсов и настроить лимиты бюджетов.\u003C\u002Fp\u003E\u003Cp\u003EПрограмма вебинара:\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003EАнализ текущей утилизации ресурсов: поиск ресурсов с низкой утилизацией и анализ возможной оптимизации.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EКалькулятор затрат: демо-настройки параметров для точных прогнозов расходов.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EАнализ детализированных данных: подходы к аналитике, включая метаданные.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EОптимизация потребления: использование зарезервированных инстансов и спотовых экземпляров.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EАнализ бесплатного потребления: как использовать free tier для сокращения затрат.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EНастройка лимитов бюджетов: автоматизация и уведомления для контроля расходов.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EИспользование Public API: тегирование ресурсов для лучшей аналитики затрат.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003EВебинар будет интересен менеджерам облачных ресурсов и IT-департаментов, DevOps-инженерам и сотрудникам, в чью зону ответственности входит контроль над облачными расходами.\u003C\u002Fp\u003E","imageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F38f\u002F10d\u002Ff4c\u002F38f10df4c7f9d7c5d4610fe426af0ab4.png","eventUrl":"https:\u002F\u002Fu.habr.com\u002Fcldr_cloudeventwebinar","startDay":"2025-03-20","startTime":"11:00","finishDay":"2025-03-20","isOnline":true,"geo":[],"isArchive":false,"categories":[{"id":"2","titleHtml":"Разработка"},{"id":"4","titleHtml":"Администрирование"}],"tags":["вебинар cloudru","вебинар для айтишников","вебинар про облака"],"metadata":null},{"id":"616","titleHtml":"Бизнес-конференция «Digital Brand Day 2025: Орбита 2025»","descriptionHtml":"\u003Cp\u003E21 марта конференция «Digital Brand Day 2025: Орбита 2025» в восьмой раз соберёт ведущих экспертов цифрового маркетинга и рекламы для обсуждения главных трендов digital-рынка и новых инструментов, которые определят стратегию брендов.\u003C\u002Fp\u003E\u003Cp\u003EВ основе темы Digital Brand Day 2025 лежит фундаментальный вопрос философии: что первично — материя или сознание? А что же первично в цифровой среде — технологии или идеи? Конференция станет эпицентром открытий, где мы вместе проложим путь сквозь бескрайние просторы рекламного космоса и наметим вектор развития цифрового маркетинга.\u003C\u002Fp\u003E\u003Cp\u003EГостей «Digital Brand Day: Орбита 2025» ждёт не только насыщенная программа, но и возможность завести полезные знакомства, увидеть, каким будет диджитал завтра.\u003C\u002Fp\u003E","imageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F523\u002F7fb\u002F13a\u002F5237fb13ad7fb6fb483c49691aaec836.png","eventUrl":"https:\u002F\u002Fu.habr.com\u002Fcldr_digitalbrandday","startDay":"2025-03-21","startTime":"10:00","isOnline":false,"geo":["Москва"],"isArchive":false,"categories":[{"id":"10","titleHtml":"Маркетинг"},{"id":"16","titleHtml":"Другое"}],"tags":["digital brand day","бизнес-конференция digital brand day","цифровой маркетинг","digital-рынок"],"metadata":null},{"id":"608","titleHtml":"Вебинар «Контент-маркетинг здорового человека: как привлечь внимание аудитории»","descriptionHtml":"\u003Cp\u003E27 марта в 16:00 МСК вместе с агентством Loft PR Studio проведем открытый вебинар о том, как писать про здоровье на Хабре. \u003C\u002Fp\u003E\u003Cp\u003EНа вебинаре разберем, что помогает удерживать внимание и превращает контент в работающий инструмент. Поделимся опытом брендов, которые ведут блоги и регулярно публикуют статьи.\u003C\u002Fp\u003E\u003Cp\u003EБудет интересно тем, кто продвигает товары и услуги для здоровья на аудиторию B2C и B2B. \u003C\u002Fp\u003E\u003Cp\u003E🔗 Участие бесплатное, но нужна предварительная регистрация.\u003C\u002Fp\u003E","imageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F8fd\u002Fe04\u002Fddd\u002F8fde04ddd9ba3f6bcd515aa6209f96b7.png","eventUrl":"https:\u002F\u002Fhabr.timepad.ru\u002Fevent\u002F3266126\u002F?utm_refcode=b5d44b4f1d5f2c06b5696586408b58e610baafd8","startDay":"2025-03-27","startTime":"16:00","finishDay":"2025-03-27","finishTime":"18:00","isOnline":true,"geo":[],"isArchive":false,"categories":[{"id":"10","titleHtml":"Маркетинг"},{"id":"16","titleHtml":"Другое"}],"tags":["Вебинар","Контент","Хабр"],"metadata":null},{"id":"606","titleHtml":"Серия вебинаров «DevOps Middle: AvitoTech vs ecom.tech»","descriptionHtml":"\u003Cp\u003EУчебный центр Слёрм запустил серию бесплатных вебинаров «Честные вакансии: DevOps Middle».\u003C\u002Fp\u003E\u003Cp\u003EДва раза в неделю Вячеслав Федосеев, TeamLead DevOps в «Честном знаке» и автор телеграм-канала «DevOps Bootcamp с Федосеевым» встречается в прямом эфире с экспертами из бигтеха, чтобы обсудить:\u003C\u002Fp\u003E\u003Col\u003E\u003Cli\u003E\u003Cp\u003EКакие задачи должен решать DevOps middle.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EКакими основными и дополнительными инструментами и подходами должен владеть DevOps middle.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EСтоп-факторы на собеседовании.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EКак выглядит рабочий день DevOps middle.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EКакие софт-скилы действительно важны.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Fol\u003E\u003Cp\u003E31 марта состоится встреча с экспертами AvitoTech, 2 апреля — с ecom.tech. Кому подходите вы, а кто — вам? Разберёмся вместе на вебинарах.\u003C\u002Fp\u003E\u003Cp\u003EПодробности — в telegram-боте.\u003C\u002Fp\u003E\u003Cp\u003E\u003C\u002Fp\u003E","imageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Fb99\u002F62a\u002Fb24\u002Fb9962ab2439c6edc80f96d7f0a847c72.png","eventUrl":"https:\u002F\u002Fu.habr.com\u002Fcldr_slermdevops","startDay":"2025-03-31","startTime":"17:00","isOnline":true,"geo":[],"isArchive":false,"categories":[{"id":"2","titleHtml":"Разработка"},{"id":"4","titleHtml":"Администрирование"}],"tags":["Вебинар Слерм","Вебинар Devops","Честные вакансии","Слерм","Честные вакансии Devops Middle"],"metadata":null},{"id":"618","titleHtml":"Реалити для разработчиков: узнайте, как строится новое публичное облако MWS","descriptionHtml":"\u003Cp\u003EBuilding the Cloud — это реалити-проект для разработчиков о новом облаке МТС Web Services. Каждый эпизод посвящён отдельному building-блоку новой облачной платформы.\u003C\u002Fp\u003E\u003Cp\u003EВ прямом эфире:\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003EПоказываем архитектуру сервисов облака ещё до релиза.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EДелимся опытом на реальных кейсах из разработки.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EОтвечаем на вопросы в прямом эфире.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003EВ новом выпуске проекта расскажем, как строим underlay-сеть нового облака.\u003C\u002Fp\u003E\u003Cp\u003EВы узнаете:\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003EКак мы поменяли подход к построению underlay-сети в новом облаке MWS.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EКакую архитектуру строим и как реализовали изоляцию management и data plane.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EКак обеспечиваем отказоустойчивость и производительность на уровне физической инфраструктуры.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003EНовый выпуск Building the Cloud будет интересен сетевым инженерам, backend-разработчикам, DevOps- и SRE-инженерам, а также всем, кто интересуется сетевыми или облачными технологиями.\u003C\u002Fp\u003E\u003Cp\u003EРегистрируйтесь по ссылке, подключайтесь к прямому эфиру и задавайте вопросы в чате.\u003C\u002Fp\u003E\u003Cp\u003EЗа самый интересный вопрос подарим фирменный мерч MWS.\u003C\u002Fp\u003E\u003Cp\u003EДо встречи в эфире.\u003C\u002Fp\u003E","imageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Ff76\u002F0f9\u002Fa82\u002Ff760f9a827b851a5eeca4802c643a91d.png","eventUrl":"https:\u002F\u002Fu.habr.com\u002Fcldr_buildingthecloud4","startDay":"2025-04-03","startTime":"11:00","isOnline":true,"geo":[],"isArchive":false,"categories":[{"id":"2","titleHtml":"Разработка"}],"tags":["реалити-проект для разработчиков","Реалити для разработчиков","облако","облако MWS"],"metadata":null},{"id":"620","titleHtml":"Открытая встреча «System Analysis Meetup SberHealth»","descriptionHtml":"\u003Cp\u003EВ программе:\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003EГоргоц Мария, старший системный аналитик, расскажет про описание требований для мобильных приложений.&nbsp;\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EНижник Станислав, ведущий системный аналитик, расскажет про книжный клуб системных аналитиков: «Как мы создали сообщество для обмена знаниями».\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EВ качестве приглашённого спикера Севостьянова Анастасия, ведущий системный аналитик в Альфа-Банке, расскажет про мидл слой без хаоса: «Как сделать документацию понятной и живой».&nbsp;\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003EПосле сессии с докладами проведём профессиональную игру для офлайн-участников «Искусство защиты абсурда».&nbsp;\u003C\u002Fp\u003E\u003Cp\u003EВедущая митапа Пашкова Ольга, руководитель направления методологии и системного анализа в СберЗдоровье.\u003C\u002Fp\u003E","imageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002Feba\u002Fc37\u002F879\u002Febac378793b959ebce42f41713e7b67f.jpg","eventUrl":"https:\u002F\u002Fu.habr.com\u002Fcldr_sbermeetup","startDay":"2025-04-03","startTime":"17:00","finishDay":"2025-04-03","finishTime":"23:00","isOnline":true,"geo":["Москва"],"isArchive":false,"categories":[{"id":"12","titleHtml":"Аналитика"}],"tags":["Семинар аналитика","сбер митап","системная аналитика митап","системная аналитика"],"metadata":null},{"id":"590","titleHtml":"«GoCloud 2025» — масштабная IT-конференция про облака и AI","descriptionHtml":"\u003Cp\u003EПоговорим про глобальные тренды в AI, расскажем про широкий набор сценариев работы в облаке, поделимся последними релизами и нашими планами, чтобы показать, какой простор открывают облачные и AI-технологии для бизнеса и разработчиков.\u003C\u002Fp\u003E\u003Cp\u003EЧто ждёт участников в этом году:\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003E\u003Cp\u003EТри трека: инфраструктура и инструменты, AI и R&amp;D и сценарии работы в облаке.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003E30+ спикеров из Cloud.ru и ведущих российских компаний.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003ELive-демонстрации облачных платформ и нетворкинг с экспертами.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003Cli\u003E\u003Cp\u003EНе только доклады: интерактивные зоны, afterparty с музыкальной программой и кастомный мерч.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003EКому будет полезно: техническим лидерам, IT-директорам, бизнес-руководителям, разработчикам, DevOps-инженерам, архитекторам, дата-инженерам, AI\u002FML-инженерам, дата-сайентистам, SRE-инженерам, системным администраторам, специалистам по информационной безопасности.\u003C\u002Fp\u003E\u003Cp\u003EАдрес: Москва, Цифровое деловое пространство (ЦДП), ул. Покровка, 47.\u003C\u002Fp\u003E\u003Cp\u003E\u003C\u002Fp\u003E","imageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F31b\u002Fe68\u002F295\u002F31be6829578e7934fbc944396eb330b1.png","eventUrl":"https:\u002F\u002Fu.habr.com\u002Fcldr_gocloud","startDay":"2025-04-10","startTime":"10:00","finishDay":"2025-04-10","finishTime":"20:00","isOnline":true,"geo":["Москва"],"isArchive":false,"categories":[{"id":"2","titleHtml":"Разработка"},{"id":"4","titleHtml":"Администрирование"},{"id":"8","titleHtml":"Менеджмент"}],"tags":["конференция Cloud.ru","AI","ИИ","айти конференция","облачные хранилища"],"metadata":null},{"id":"516","titleHtml":"IT-конференция Merge Tatarstan 2025","descriptionHtml":"\u003Cp\u003EКрупнейшая региональная IT-конференция России собирает профессионалов со всей страны для нетворкинга, обмена опытом и поиска новых деловых контактов.\u003C\u002Fp\u003E\u003Cp\u003EMerge Tatarstan — это 7 тематических конференций на одной площадке, 2000 участников, более 170 спикеров-практиков, мастер-классы, воркшопы и BoF-сессии.\u003C\u002Fp\u003E\u003Cp\u003EК участию в конференции приглашаются разработчики, QA, тимлиды, Project\u002FProduct-менеджеры, маркетологи, аналитики, UI\u002FUX-дизайнеры, PR-специалисты, HR-менеджеры, владельцы бизнеса и начинающие специалисты.\u003C\u002Fp\u003E\u003Cp\u003E\u003C\u002Fp\u003E","imageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F0e9\u002F3a8\u002F3ec\u002F0e93a83ecea09f806d1df907ddb036a4.jpg","eventUrl":"https:\u002F\u002Fu.habr.com\u002Fcldr_tatarstan","startDay":"2025-04-25","startTime":"09:00","finishDay":"2025-04-26","finishTime":"19:30","isOnline":false,"geo":["Казань"],"isArchive":false,"categories":[{"id":"2","titleHtml":"Разработка"},{"id":"10","titleHtml":"Маркетинг"},{"id":"16","titleHtml":"Другое"}],"tags":["Разработка","IT","PR","UI\u002FUX","бизнес","маркетинг","аналитика"],"metadata":null},{"id":"610","titleHtml":"Летняя айти-тусовка Summer Merge","descriptionHtml":"\u003Cp\u003EЛетняя айти-тусовка возвращается.\u003C\u002Fp\u003E\u003Cp\u003EВырваться из рутины и сменить обстановку на несколько дней можно вместе с Summer Merge.&nbsp;\u003C\u002Fp\u003E\u003Cp\u003EСосновый лес, чистый воздух, живое общение с экспертами IT, спортивные состязания, мастер-классы, квесты, встречи с друзьями, новые знакомства, afterparty — забудьте про суету города и окунитесь в приятную атмосферу digital detox. В эти летние IT-выходные мы обещаем атмосферу ярких приключений.&nbsp;\u003C\u002Fp\u003E\u003Cp\u003EЖдём вас 20—22 июня в экопарке «Русский берег» на Summer Merge.\u003C\u002Fp\u003E","imageUrl":"https:\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Fupload_files\u002F652\u002F12d\u002F998\u002F65212d998fb4939d9787bd9c726d2acb.png","eventUrl":"https:\u002F\u002Fu.habr.com\u002Fcldr_summermerge","startDay":"2025-06-20","finishDay":"2025-06-22","isOnline":false,"geo":["Ульяновская область"],"isArchive":false,"categories":[{"id":"2","titleHtml":"Разработка"},{"id":"16","titleHtml":"Другое"}],"tags":["летняя айти-тусовка","айти-кэмп","летний выезд для айтишников","Summer Merge"],"metadata":null}],"currentEvent":null,"eventsFilter":{"city":"all","timeStarted":null,"timeEnded":null}},"wysiwyg":{"WYSIWYGRulesRefs":null}};(function(){var s;(s=document.currentScript||document.scripts[document.scripts.length-1]).parentNode.removeChild(s);}());</script><script src="https://assets.habr.com/habr-web/js/chunk-vendors.3b11d41f.js" defer></script><script src="https://assets.habr.com/habr-web/js/app.7a97ea6d.js" defer></script></div>
    <div id="overlays"><!----><!--teleport anchor--><!----><!--teleport anchor--><!----><!--teleport anchor--><!----><!--teleport anchor--><!----><!--teleport anchor--><!----><!--teleport anchor--></div>
    
    
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-S28W1WC23F"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());
    </script>
  
  <script type="text/javascript" >
    (function(m,e,t,r,i,k,a){m[i]=m[i]||function(){(m[i].a=m[i].a||[]).push(arguments)};
    m[i].l=1*new Date();k=e.createElement(t),a=e.getElementsByTagName(t)[0],k.async=1,k.src=r,a.parentNode.insertBefore(k,a)})
    (window, document, "script", "https://mc.yandex.ru/metrika/tag.js", "ym");

  </script>
    <script type="text/javascript">
      window.addEventListener('load', function () {
        setTimeout(() => {
          const img = new Image();
          img.src = 'https://vk.com/rtrg?p=VK-RTRG-421343-57vKE';
        }, 0);
      });
    </script>
  
    </body>

    </html>
